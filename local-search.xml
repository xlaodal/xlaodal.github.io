<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>01句子</title>
    <link href="/2023/04/07/01%E5%8F%A5%E5%AD%90/"/>
    <url>/2023/04/07/01%E5%8F%A5%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h3 id="句子表现精神面貌捏"><a href="#句子表现精神面貌捏" class="headerlink" title="句子表现精神面貌捏"></a>句子表现精神面貌捏</h3><h4 id="仅为摘抄捏："><a href="#仅为摘抄捏：" class="headerlink" title="仅为摘抄捏："></a>仅为摘抄捏：</h4><p>01：傲慢与偏见都已习以为常，更何况误解捏</p><p>02：愿你我皆良人捏</p><p>03：风随草去秋无际，叶落无痕花自凄</p><p>04：瘦骨嶙绚难承生命之重，命运多舛易抒感伤之怀</p><p>05：言念君子，温其如玉</p><p>06：静心得意，莫向外求</p><p>07：弱小和无知不是生存的障碍，傲慢才是</p><p>08：。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>边角料</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/05/hello-world/"/>
    <url>/2023/04/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>21网络编程</title>
    <link href="/2023/04/02/21%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/02/21%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>B&#x2F;S架构：</p><p>优点 1、不需要开发客户端、只需要页面+服务端 </p><p>​         2、用户不需要下载，打开浏览器就可以下载</p><p> 如果要更新一个功能，修改产品，直接在服务器上修改就行，用户不需要动</p><p>  缺点：如果应用很大就会体验差、不够精美</p><p>C&#x2F;S架构：一般需要下载的应用就是C&#x2F;S架构</p><p>   优点：1、因为事先已经下载好了所有的资源，画面可以做的很精美，所以用户的体验很好           </p><p>   缺点 1、C&#x2F;S要同时开发客户端和服务端，开发、安装、部署、维护都很麻烦</p><p>​               </p><h1 id="2、网络编程三要素"><a href="#2、网络编程三要素" class="headerlink" title="2、网络编程三要素"></a>2、网络编程三要素</h1><ol><li>IP：是设备在网络中的地址是唯一的标识</li><li>端口号：是应用程序在设备中唯一标识</li><li>协议：数据在网络中传输的规则，常见的协议有 UDP、TCP、HTTP、HTTPs、FTP</li></ol><h2 id="1、IP"><a href="#1、IP" class="headerlink" title="1、IP"></a>1、IP</h2><p>常见IP： IPv4 、 IPV6</p><p>IPV4 32位地址长度分成4组；最多有 2 的32 次方个地址</p><p>IPv6 128 位地址长度，分成8组；最多有 2 的128 次方的地址</p><p>2、目前怎么解决IP不够的问题？</p><p>现在就是用局域网IP来解决 IPV4 不够的问题</p><p>3、特殊IP</p><p>127.0.0.1回环地址，也就是本机地址，永远只会寻找当前所在的本机，</p><p>和本机的地址不一样，</p><p>4、InetAddress的使用</p><p>表示互联网协议IP地址：</p><h2 id="2、端口号"><a href="#2、端口号" class="headerlink" title="2、端口号"></a>2、端口号</h2><p>应用程序在设备中的唯一标识；</p><ol><li>由俩个字节表示的整数，取值范围 1<del>65535；其中0</del>1023之间的端口号用于一些知名的网络服务或者应用；我们自己使用 1024以上的端口号就可以</li><li>一个端口号只能对应一个应用程序本身</li></ol><h2 id="3、协议"><a href="#3、协议" class="headerlink" title="3、协议"></a>3、协议</h2><p>在计算机网络中，连接和通信的规则，网路通信协议</p><ol><li><p>OSI：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p></li><li><p>TCP&#x2F;IP 协议：</p></li><li><p>传输协议  UDP：面向无连接通信协议：速度快、流量限制、数据不安全、容易丢失数据</p></li><li><p>传输协议  TCP：面向连接的通信协议：速度慢、没有大小限制、数据安全</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取本机的IP</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInetAddress</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><br>        <span class="hljs-comment">//static InetAddress getByname(String host) 确定主机名称可以是主机名称，也可以是IP地址</span><br>        <span class="hljs-comment">//string getHostNae() 获取此IP地址的字符串</span><br>        <span class="hljs-comment">//String getHostAddress() 返回文本显示中IP地址字符串</span><br><br>        <span class="hljs-comment">//1、获取InetAddress的对线</span><br>        <span class="hljs-comment">//ip 的对象，这就是一台电脑的对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;LAPTOP-EO6PU2UU&quot;</span>);<br>        System.out.println(address);  <span class="hljs-comment">//这个方法</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> address.getHostName();<br>        System.out.println(name);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> address.getHostAddress();<br>        System.out.println(ip);     <span class="hljs-comment">//192.168.56.1        </span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建端口发送数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//发送数据</span><br>        <span class="hljs-comment">//1、创建DatagramSocket对象（快递公司）</span><br>        <span class="hljs-comment">//绑定端口，以后通过这个端口发送数据</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        空参：所有可用的端口中随机一个进行使用</span><br><span class="hljs-comment">        有参：指定端口进行绑定</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>        <span class="hljs-comment">//2、打包数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好威啊！！！！&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = str.getBytes();<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span>  <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length,address, ds.getLocalPort());<br>           <span class="hljs-comment">//发送数据</span><br>        ds.send(dp);<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收端接收数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//接收数据</span><br>        <span class="hljs-comment">//1、创建DatagramSocket对象(快递公司)</span><br>        <span class="hljs-comment">//在接收的时候一定要绑定端口，手动绑定端口，这里的端口一定要和发送的端口一样</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10086</span>);<br><br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br><br>        ds.receive(dp);<br><br><br>        <span class="hljs-comment">//解析数据包</span><br>        <span class="hljs-type">byte</span> [] data = dp.getData();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp.getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> dp.getPort();<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> dp.getAddress();<br><br>        System.out.println(<span class="hljs-string">&quot;接收到数据&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,len));<br>        System.out.println(<span class="hljs-string">&quot;该数据是从&quot;</span>+address+<span class="hljs-string">&quot;这台电脑中的&quot;</span>+port+<span class="hljs-string">&quot;端口发出的&quot;</span>);<br>        <span class="hljs-comment">//释放资源</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UDP协议下发送与接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        按照下面的要求：</span><br><span class="hljs-comment">        1、UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span><br><span class="hljs-comment">        2、UDP接收数据，因为接收端不知道发送端什么时候停止发送，会采用死循环的方式接数据</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//1、创建对象DatagramSocket的对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//2、打包数据</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请输入您要说的话&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;886&quot;</span>.equals(str))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">byte</span>[] bytes = str.getBytes();<br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span>  <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length,address,port);<br><br>            <span class="hljs-comment">//3、发送数据</span><br>            ds.send(dp);<br>        &#125;<br>        <span class="hljs-comment">//4、释放资源</span><br>        ds.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        按照下面的要求：</span><br><span class="hljs-comment">        1、UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span><br><span class="hljs-comment">        2、UDP接收数据，因为接收端不知道发送端什么时候停止发送，会采用死循环的方式接数据</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10086</span>);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes,bytes.length);<br>        <span class="hljs-comment">//接收数据</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            ds.receive(dp);<br>            <span class="hljs-comment">//解析数据包</span><br>            <span class="hljs-type">byte</span>[] data = dp.getData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp.getLength();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> dp.getAddress().getHostAddress();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> dp.getAddress().getHostName();<br><br>            <span class="hljs-comment">//打印数据包</span><br>            System.out.println(<span class="hljs-string">&quot;ip为&quot;</span>+ip +<span class="hljs-string">&quot;主机名为：&quot;</span>+name+<span class="hljs-string">&quot;发送的数据包为：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,len));<br>            <br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UDP-的三种通信方式；"><a href="#UDP-的三种通信方式；" class="headerlink" title="UDP:的三种通信方式；"></a>UDP:的三种通信方式；</h3><ol><li><p>单播：</p><p>以前的代码就是单播</p></li><li><p>组播：</p><p>组播地址：224.0.0.0~239.255.255.255</p><p>其中224.0.0.0~224.0.0.255为预留的组播地址</p></li><li><p>广播：</p><p>广播地址：255.255.255.255</p></li></ol><h3 id="TCP的通信协议："><a href="#TCP的通信协议：" class="headerlink" title="TCP的通信协议："></a>TCP的通信协议：</h3><p>TCP是一种可靠的网络协议，他在通信的俩端各建立一个Socket的对象，通信之前要保证连接已经建立。</p><p>通过IO流来进行网络通信</p><p>客户端：</p><ol><li>创建客户端的Socket对象（Socket）与指定服务端连接 Socket（String host，int port）</li><li>获取输出流，写数据：OutputStream  getOutputStream</li><li>释放资源  void  close();</li></ol><p> 服务器：</p><ol><li>创建服务器端的Socket对象（ServerSocket)  ： ServerSocket(int port)</li><li>监听客户端连接，返回一个Socket对象  :   Socket accept()</li><li>获取输入流，读数据，并把数据显示在控制台上: InputStream  getInputStream()</li><li>释放资源:  void close()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCp 协议，发送数据</span><br>        <span class="hljs-comment">//1  创建Socket对象</span><br>        <span class="hljs-comment">//细节：在创建对象的同时会连接服务端</span><br>        <span class="hljs-comment">//如果连接不上就会报错</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务端反馈的消息并打印</span><br>        <span class="hljs-comment">//服务端：接收数据并打印，再给客户端反馈消息</span><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//2 从连接通道中获取输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//写出数据</span><br>        os.write(<span class="hljs-string">&quot;123abc&quot;</span>.getBytes());<br>        socket.shutdownOutput();<br><br><br>        <span class="hljs-comment">//3、接收服务端回写的数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is);<br>        <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b= isr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>)b);<br>        &#125;<br>        <span class="hljs-comment">//释放资源</span><br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP 协议接收数据</span><br>        <span class="hljs-comment">//1、创建对象ServerSocket</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务器反馈的消息并打印</span><br>        <span class="hljs-comment">//服务器：接收数据并打印，在给客户端反馈消息</span><br>       <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//2、监听客户端连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br><br>        <span class="hljs-comment">//从连接通道中回去输入流读取数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is);<br>        <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b= isr.read())!=-<span class="hljs-number">1</span>)&#123;<br><br>            System.out.print((<span class="hljs-type">char</span>)b);<br>        &#125;<br><br>        <span class="hljs-comment">//4、会写数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是服务器的会写数据&quot;</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        os.write(str.getBytes());<br><br><br><br>        <span class="hljs-comment">//释放资源</span><br>        socket.close();<br>        ss.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="最终版："><a href="#最终版：" class="headerlink" title="最终版："></a>最终版：</h1><p>客户端上传文件：可以连续的上传，服务器不间断的一直接收，服务器下载到本地的文件设置了随机的命名，下载同一个文件名称也不重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCp 协议，发送数据</span><br>        <span class="hljs-comment">//1  创建Socket对象</span><br>        <span class="hljs-comment">//细节：在创建对象的同时会连接服务端</span><br>        <span class="hljs-comment">//如果连接不上就会报错</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务端反馈的消息并打印</span><br>        <span class="hljs-comment">//服务端：接收数据并打印，再给客户端反馈消息</span><br>        <span class="hljs-comment">//1、客户端上传文件到服务器，接收服务器的反馈</span><br>        <span class="hljs-comment">//2、服务器接收客户端上传的文件，上柴完毕后给出反馈</span><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//2 从连接通道中获取输出流</span><br>       <span class="hljs-comment">// OutputStream os = socket.getOutputStream();</span><br>        <span class="hljs-comment">//写出数据</span><br>        <span class="hljs-comment">//读取本地的文件，上传到服务器当中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\workspace\\素材\\测试文件02\\转换流.jpg&quot;</span>));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>        <span class="hljs-comment">//os.write(&quot;123abc&quot;.getBytes());</span><br><br><br>      <span class="hljs-comment">//  socket.shutdownOutput();</span><br><br>        <span class="hljs-comment">//3、接收服务端回写的数据</span><br><br>        <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span>((len= bis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br><br>        &#125;<br><br>        <span class="hljs-comment">//往服务器发送一个结束标记</span><br>       socket.shutdownOutput();<br><br>        <span class="hljs-comment">//接受服务器的回写数据</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br><br>        System.out.println(line);<br><br><br>        <span class="hljs-comment">//释放资源</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP 协议接收数据</span><br>        <span class="hljs-comment">//1、创建对象ServerSocket</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务器反馈的消息并打印</span><br>        <span class="hljs-comment">//服务器：接收数据并打印，在给客户端反馈消息</span><br>        <span class="hljs-comment">//客户端将本地文件上传到服务器，接收服务器的反馈</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕后给出反馈</span><br>       <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10086</span>);<br><br>       <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>           <span class="hljs-comment">//2、监听客户端连接</span><br>           <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br>           <span class="hljs-comment">//从连接通道中回去输入流读取数据</span><br>           <span class="hljs-comment">//读取数据并下载到本地</span><br>           BufferedInputStream bis= <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>           <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>           <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\workspace\\素材\\测试文件02\\&quot;</span>+name+<span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>           <span class="hljs-comment">// InputStream is = socket.getInputStream();</span><br>           <span class="hljs-comment">//InputStreamReader isr = new InputStreamReader(is);</span><br>           <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>           <span class="hljs-type">int</span> len;<br>           <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>           <span class="hljs-keyword">while</span>((len= bis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>               bos.write(bytes,<span class="hljs-number">0</span>,len);<br>               <span class="hljs-comment">// System.out.print((char)b);</span><br>           &#125;<br>           <span class="hljs-comment">//4、会写数据</span><br><span class="hljs-comment">//        String str = &quot;这是服务器的会写数据&quot;;</span><br>           <span class="hljs-comment">//      OutputStream os = socket.getOutputStream();</span><br>           <span class="hljs-comment">//    os.write(str.getBytes());</span><br>           <span class="hljs-comment">//本地创建的IO流怎么关？</span><br>           <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>           bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>           bw.newLine();<br>           bw.flush();<br>           <span class="hljs-comment">//释放资源</span><br>           socket.close();<br><br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20git</title>
    <link href="/2023/04/02/20git/"/>
    <url>/2023/04/02/20git/</url>
    
    <content type="html"><![CDATA[<p>学习git之前，我们需要先明白一个概念，版本控制！</p><p>版本控制</p><p>什么是版本控制</p><p>版本控制(Revision control)是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历 史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><p>实现跨区域多人协同开发</p><p>追踪和记载一个或者多个文件的历史记录</p><p>组织和保护你的源代码和文档</p><p>统计工作量</p><p>并行开发、提高开发效率</p><p>跟踪记录整个软件的开发过程</p><p>减轻开发人员的负担，节省时间，同时降低人为错误</p><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软 件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全 性，以及软件的整合等问题。</p><p>常见的版本控制工具</p><p>主流的版本控制器有如下这些：</p><p><em><strong>*G*</strong></em><em><strong>*it*</strong></em></p><p><em><strong>*SVN*</strong></em> ( Subversion)</p><p><em><strong>*CVS*</strong></em> ( Concurrent Versions System)</p><p><em><strong>*VSS*</strong></em> ( Micorosoft Visual SourceSafe)</p><p><em><strong>*TFS*</strong></em> (Team Foundation Server)</p><p>Visual Studio Online</p><p>版本控制产品非常的多(Perforce、  Rational ClearCase、  RCS ( GNU Revision Control System)、  Serena Dimention、SVK、  BitKeeper、  Monotone、  Bazaar、  Mercurial、SourceGear Vault)，现在 影响力最大且使用最广泛的是Git与SVN</p><p>版本控制分类</p><p>****1****、本地版本控制</p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps19.jpg" alt="img"> </p><p>****2****、集中版本控制</p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps20.png" alt="img"> </p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看 不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器 上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：    SVN、CVS、VSS</p><p>****3****、分布式版本控制</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地 提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数 据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>Git与SVN最主要区别</p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑， 所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服 务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要 联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也  在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改   了。</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>聊聊****Git****历史</p><p><a href="af://n64"></a></p><p>同生活中的许多伟大事物一样，  Git 诞生于一个极富纷争大举创新的年代。</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps25.png" alt="img"><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps26.png" alt="img">Linux 内核开源项目有着为数众广的参与者。  绝大多数的 Linux 内核维护工作都花在了提交补丁和保存 归档的繁琐事务上(1991－2002年间)。  到 2002 年，整个项目组开始启用一个专有的分布式版本控制系 统 BitKeeper 来管理和维护代码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。  这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus       Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。  也就是后来的 Git！</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p><p>Linux和Git之父李纳斯·托沃兹(Linus Benedic Torvalds)  1969、芬兰</p><p>****Git****环境配置</p><p>软件下载</p><p>打开 [git官网]<a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>官网下载太慢，我们可以使用淘宝镜像下载：  <a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p>卸载： </p><ol><li>反安装</li><li>清理环境变量</li></ol><p>下载对应的版本即可安装！</p><p>安装：无脑下一步即可！</p><p>启动Git</p><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：</p><p><strong>Git Bash</strong> ：Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>CMD</strong> ：Windows风格的命令行</p><p><strong>GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><p>基本的Linux命令学习</p><p>1)、  cd : 改变目录。</p><p>2)、 cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3)、  pwd : 显示当前所在的目录路径。</p><p>4)、  ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。    5)、 touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。 6)、  rm: 删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7)、  mkdir: 新建一个目录,就是新建一个文件夹。</p><p>8)、 rm -r : 删除一个文件夹, rm -r src 删除src目录</p><p>9)、  mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写, 必须保证文件和目标文件夹在同一目录下。</p><p>10)、  reset 重新初始化终端&#x2F;清屏。</p><p>11)、  clear 清屏。</p><p>12)、  history 查看命令历史。</p><p>13)、  help 帮助。</p><p>14)、  exit 退出。</p><p>15)、  #表示注释</p><p>Git 配置</p><p>查看不同级别的配置文件：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230329235424485.png" alt="image-20230329235424485"></p><p> <img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230329235403108.png" alt="image-20230329235403108"></p><p><strong>Git</strong>相关的配置文件：</p><p>1)、  Git\etc\gitconﬁg ：  Git 安装目录下的 gitconﬁg  –system 系统级   2)、  C:\Users\Administrator\ .gitconﬁg  只适用于当前登录用户的配置 –global 全局 这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p><p>设置用户名与邮箱(用户标识，必要)</p><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都 会使用该信息。它被永远的嵌入到了你的提交中：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global  user.name <span class="hljs-string">&quot;kuangshen&quot;</span>  #名称git config --global user.email <span class="hljs-number">24736743</span><span class="hljs-meta">@qq</span>.com  #邮箱<br></code></pre></td></tr></table></figure><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所 做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行 该命令而不要–global选项。  总之–global为全局配置，不加为某个项目的特定配置。</p><p><strong>Git</strong>基本理论</p><p>工作区域</p><p>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列</p><p>表信息</p><p>Repository：仓库区(或本地仓库)，就是安全存放数据的位置，这里面有你提交到所有版本的数</p><p>据。其中HEAD指向最新放入仓库的版本</p><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据</p><p>交换</p><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps45.png" alt="img"> </p><p>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。 WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。    .git：存放Git管理信息的目录，初始化仓库的时候自动创建。</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps51.jpg" alt="img">  Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在</p><p>暂存区。</p><p>Local Repo：本地仓库，一个存放在本地的版本库；  HEAD会只是当前的开发分支(branch)。</p><p>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</p><p>工作流程</p><p>git的工作流程一般是这样的：</p><p>1、在工作目录中添加、修改文件；</p><p>2、将需要进行版本管理的文件放入暂存区域；</p><p>3、将暂存区域的文件提交到git仓库。</p><p>因此，  git管理的文件有三种状态：已修改(modiﬁed)  ,已暂存(staged)  ,已提交(committed)</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps52.jpg" alt="img"> </p><p><strong>Git</strong>项目搭建</p><p>创建工作目录与常用指令</p><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个 空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><h1 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h1><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br>$ git init<br></code></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h1 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h1><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//克隆一个项目和他的整个代码历史</span><br>$ git clone [url]<br></code></pre></td></tr></table></figure><p>2、去 gitee 或者 github 上克隆一个测试！</p><h1 id="GIT文件操作"><a href="#GIT文件操作" class="headerlink" title="GIT文件操作"></a><em>GIT</em>文件操作</h1><h1 id="文件4种状态"><a href="#文件4种状态" class="headerlink" title="文件4种状态"></a>文件4种状态</h1><ol><li><p><strong>Untracked</strong></p></li><li><p><strong>Unmodify</strong></p></li><li><p><strong>Modiﬁed</strong></p></li><li><p><strong>Staged</strong></p><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">//#查看所有文件状态</span><br>git status<br></code></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号(#)开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号(*)代表任意多个字符，问号(？)代表一个字符，方括号 ([abc])代表可选字符范围，大括号({string1,string2,…})代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号(!)，表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符(&#x2F;)，表示要忽略的文件在此目录下，而子目录中的文件不 忽略。</li><li>如果名称的最后面是一个路径分隔符(&#x2F;)，表示要忽略的是此目录下该名称的子目录，而非文件 (默认文件或目录都忽略)。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">*.txt <span class="hljs-comment">//#忽略所有 .txt结尾的文件</span><br>!lib.txt <span class="hljs-comment">//#但lib.txt除外</span><br>/temp  <span class="hljs-comment">//#仅忽略项目根目录下的TODO文件 ,不包括其它目录temp</span><br>build<span class="hljs-comment">///#忽略build/目录下的所有文件</span><br>doc<span class="hljs-comment">/*.txt//#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></code></pre></td></tr></table></figure><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态， 不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>查看文件状态</p><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">#查看所有文件状态</span><br>git status<br></code></pre></td></tr></table></figure><h1 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h1><p>1、注册登录码云，完善个人信息</p><p>2、设置本机绑定SSH公钥，实现免密码登录！</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 C:\Users\Administrator\.ssh 目录</span><br><span class="hljs-comment"># 生成公钥</span><br>ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>3、将公钥信息public key 添加到码云账户中即可！</p><p>4、使用码云创建一个自己的仓库！</p><h1 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a><em>IDEA中集成</em>Git</h1><p>1、新建项目，绑定git。</p><p>2、修改文件，使用IDEA操作git。</p><p>3、提交测试</p><h2 id="说明：-GIT分支"><a href="#说明：-GIT分支" class="headerlink" title="说明： GIT分支"></a>说明： <em>GIT</em>分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你 也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps88.png" alt="img"> </p><p>git分支中常用指令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><p>如果多个分支并行执行，就会导致代码不冲突，也就是同时存在多个版本,</p><p>企业里面都是分模块开发的，如果一个文件在合并分支时，发生冲突了；解决的办法是我们可以修改冲突的文件！选择要保留的大妈，互相协商</p><p>web-api</p><p>web-admin</p><p>web-app</p><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提 交！</p><h3 id="注意：协同开发"><a href="#注意：协同开发" class="headerlink" title="注意：协同开发"></a>注意：协同开发</h3><p> master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建 的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上 来.</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19GUI编程</title>
    <link href="/2023/04/02/19GUI%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/02/19GUI%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>1、GUI学什么？（M V C的基础）</p><p>01、组件：窗口、单窗、面板、文本框、列表框、按钮、图片、交互、监听事件、鼠标、键盘事件、外挂、破解工具</p><h1 id="1、简介："><a href="#1、简介：" class="headerlink" title="1、简介："></a>1、简介：</h1><p>1、GUI的核心技术： Swing   AWT ，但是界面不美观。</p><p>2、需要jre环境，</p><p>为什么学GUI ？ </p><p>1、可以写出自己心中想要的小工具</p><p>2、工作的时候、可能需要维护Swing界面，</p><p>3、了解MVC架构、了解监听</p><h1 id="2、AWT"><a href="#2、AWT" class="headerlink" title="2、AWT"></a>2、AWT</h1><h2 id="01、AWT介绍："><a href="#01、AWT介绍：" class="headerlink" title="01、AWT介绍："></a>01、AWT介绍：</h2><p> 抽象的窗口工具，GUI就是图形用户界面编程</p><h2 id="02、AWT有非常多的元素："><a href="#02、AWT有非常多的元素：" class="headerlink" title="02、AWT有非常多的元素："></a>02、AWT有非常多的元素：</h2><p>窗口、按钮、文本框</p><p><img src="D:\JavaEE\素材\GUI图形界面.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//frame</span><br>        <span class="hljs-type">Frame</span>  <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;我的第一个图像界面窗口&quot;</span>);<br>        <span class="hljs-comment">//现在这个窗口在内存里面</span><br>        <span class="hljs-comment">//需要设置可见性</span><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置大小</span><br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>);<br>        <span class="hljs-comment">//设置背景颜色</span><br>         frame.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">202</span>, <span class="hljs-number">185</span>, <span class="hljs-number">36</span>,<span class="hljs-number">100</span>));<br>        <span class="hljs-comment">//弹出的初始位置</span><br>        frame.setLocation(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//设置大小固定</span><br>        frame.setResizable(<span class="hljs-literal">false</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="03、面板"><a href="#03、面板" class="headerlink" title="03、面板"></a>03、面板</h2><h2 id="04、布局管理器"><a href="#04、布局管理器" class="headerlink" title="04、布局管理器"></a>04、布局管理器</h2><p>1、流式布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFlowLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>        <span class="hljs-comment">//组件-按钮</span><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;button1&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;button2&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;button3&quot;</span>);<br><br>        <span class="hljs-comment">//设置为流式布局</span><br>        frame.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.RIGHT));<br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br><br>        frame.add(button1);<br>        frame.add(button2);<br>        frame.add(button3);<br><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\GUI流式布局.jpg"></p><p>2、东西南北中布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBorderLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span>  <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;TestBorderLayout&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">east</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;East&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">West</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;West&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">South</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;South&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">North</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;North&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">Center</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Center&quot;</span>);<br><br><br>        frame.add(east,BorderLayout.EAST);<br>        frame.add(West,BorderLayout.WEST);<br>        frame.add(South,BorderLayout.SOUTH);<br>        frame.add(North,BorderLayout.NORTH);<br>        frame.add(Center,BorderLayout.CENTER);<br><br>        frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\东西南北中布局.jpg"></p><h1 id="3、Swing"><a href="#3、Swing" class="headerlink" title="3、Swing"></a>3、Swing</h1><h1 id="4、事件监听"><a href="#4、事件监听" class="headerlink" title="4、事件监听"></a>4、事件监听</h1><p>一个鼠标操作，点击鼠标弹出一个文本框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestActionEvent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>();<br>        button.setSize(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//addActionListener()需要一个ActionListener ，所以就写一个ActionListener</span><br>        <span class="hljs-type">MyActionListener</span> <span class="hljs-variable">myActionListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyActionListener</span>();<br><br>        button.addActionListener(myActionListener);<br>        frame.add(button,BorderLayout.CENTER);<br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        frame.pack();<br>        windowCose(frame);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowCose</span><span class="hljs-params">(Frame frame)</span>&#123;<br>        frame.addWindowFocusListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;aaaaa&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18IO流</title>
    <link href="/2023/04/02/18IO%E6%B5%81/"/>
    <url>/2023/04/02/18IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1、File的实例化与常用方法"><a href="#1、File的实例化与常用方法" class="headerlink" title="1、File的实例化与常用方法"></a>1、File的实例化与常用方法</h1><h2 id="01、File实例化"><a href="#01、File实例化" class="headerlink" title="01、File实例化"></a>01、File实例化</h2><ul><li>File类及本章下的各种流，都定义在java.io包下。</li><li>一个File对象代表硬盘或网络中可能存在的一个文件或者文件目录（俗称文件夹），与平台无关。（体会万事万物皆对象）</li><li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。</li><li>File对象可以作为参数传递给流的构造器。</li></ul><h2 id="02、相对路径VS绝对路径"><a href="#02、相对路径VS绝对路径" class="headerlink" title="02、相对路径VS绝对路径"></a>02、相对路径VS绝对路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绝对路径：从盘符开始的路径，这是一个完整的路径。</span><br><span class="hljs-comment">//相对路径：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</span><br>IDEA中，main中的文件的相对路径，是相对于<span class="hljs-string">&quot;当前工程&quot;</span><br>IDEA中，单元测试方法中的文件的相对路径，是相对于<span class="hljs-string">&quot;当前module&quot;</span><br></code></pre></td></tr></table></figure><h2 id="03、常用方法"><a href="#03、常用方法" class="headerlink" title="03、常用方法"></a>03、常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.file;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileObjectTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 文件路径名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pathname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\aaa.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname);<br><br>        <span class="hljs-comment">// 文件路径名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pathname2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\aaa\\bbb.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname2);<br><br>        <span class="hljs-comment">// 通过父路径和子路径字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\aaa&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bbb.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, child);<br><br>        <span class="hljs-comment">// 通过父级File对象和子路径字符串</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\aaa&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">childFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bbb.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentDir, childFile);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\atguigu\\javase\\HelloIO.java&quot;</span>); <span class="hljs-comment">//绝对路径</span><br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f1.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f1.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f1.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f1.getParent());<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/HelloIO.java&quot;</span>);<span class="hljs-comment">//绝对路径，从根路径开始</span><br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f2.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f2.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f2.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f2.getParent());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;HelloIO.java&quot;</span>);<span class="hljs-comment">//相对路径</span><br>        System.out.println(<span class="hljs-string">&quot;user.dir =&quot;</span> + System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f3.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f3.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f3.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f3.getParent());<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;HelloIO.java&quot;</span>);<span class="hljs-comment">//相对路径</span><br>        System.out.println(<span class="hljs-string">&quot;user.dir =&quot;</span> + System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f5.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f5.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f5.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f5.getParent());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04、显示文件下目录"><a href="#04、显示文件下目录" class="headerlink" title="04、显示文件下目录"></a>04、显示文件下目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 显示文件夹下面的目录</span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Googledownload&quot;</span>);<br>        String [] fileArr = file.list();<br>        <span class="hljs-keyword">for</span> (String s :fileArr)&#123;<br>            System.out.println(s);<br>        &#125;<br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\显示目录.jpg"></p><h2 id="05、文件File重命名"><a href="#05、文件File重命名" class="headerlink" title="05、文件File重命名"></a>05、文件File重命名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要想此方法执行完放回true 要求：File1必须存在，File2 必须不存在，俩个文件不能冲突，File2所在的文件目录存在</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">File</span> <span class="hljs-variable">file5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\&quot;D:\\workspace\\Java\\Code\\File测试文件\\File1\\测试文件1.txt\&quot;&quot;</span>);<br>       <span class="hljs-type">File</span> <span class="hljs-variable">file6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\&quot;D:\\workspace\\Java\\Code\\File测试文件\\File1\\ceshiwenjian2.txt&quot;</span>);<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">renameSuccess</span> <span class="hljs-operator">=</span> file5.renameTo(file6);<br>       System.out.println(renameSuccess ? <span class="hljs-string">&quot;重命名成功&quot;</span>:<span class="hljs-string">&quot;修改失败&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="2、File的应用案例"><a href="#2、File的应用案例" class="headerlink" title="2、File的应用案例"></a>2、File的应用案例</h1><h2 id="01、案例：指定路径文件创建"><a href="#01、案例：指定路径文件创建" class="headerlink" title="01、案例：指定路径文件创建"></a>01、案例：指定路径文件创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\&quot;D:\\workspace\\Java\\Code\\File测试文件\\File1\\测试文件1.txt\&quot;&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!file7.exists())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccessed</span> <span class="hljs-operator">=</span> file7.createNewFile();<br>            <span class="hljs-keyword">if</span> (isSuccessed)&#123;<br>                System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;此文件已经存在&quot;</span>);<br>            System.out.println(file7.delete() ? <span class="hljs-string">&quot;文件已经删除&quot;</span>:<span class="hljs-string">&quot;文件删除失败&quot;</span>);<br>        &#125;    <br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="02、搜索jpg文件"><a href="#02、搜索jpg文件" class="headerlink" title="02、搜索jpg文件"></a>02、搜索jpg文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\workspace\\素材&quot;</span>);<br><br>       String[] listFils = dir.list();<br>       <span class="hljs-keyword">for</span> (String s:listFils)&#123;<br>           <span class="hljs-keyword">if</span>(s.endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>))&#123;<br>               System.out.println(s);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="03、遍历指定的目录、删除指定的目录"><a href="#03、遍历指定的目录、删除指定的目录" class="headerlink" title="03、遍历指定的目录、删除指定的目录"></a>03、遍历指定的目录、删除指定的目录</h2><h1 id="3、IO流概述分类"><a href="#3、IO流概述分类" class="headerlink" title="3、IO流概述分类"></a>3、IO流概述分类</h1><h2 id="01、IO流原理"><a href="#01、IO流原理" class="headerlink" title="01、IO流原理"></a>01、IO流原理</h2><p>Java程序中，对于数据的输入&#x2F;输出操作以“流(stream)” 的方式进行，可以看做是一种数据的流动。</p><p><img src="D:\workspace\素材\IO流原理.png" alt="IO流"></p><ul><li>输入input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li>输出output：将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul><h2 id="02、IO流的分类"><a href="#02、IO流的分类" class="headerlink" title="02、IO流的分类"></a>02、IO流的分类</h2><ul><li><p>按数据的流向不同分为：输入流和输出流。</p></li><li><p>输入流 ：把数据从其他设备上读取到内存中的流。以InputStream、Reader结尾</p></li><li><p>输出流 ：把数据从内存 中写出到其他设备上的流。以OutputStream、Writer结尾</p></li><li><p>按操作数据单位的不同分为：字节流（8bit）和字符流（16bit）。</p></li><li><p>字节流 ：以字节为单位，读写数据的流。以InputStream、OutputStream结尾</p></li><li><p>字符流 ：以字符为单位，读写数据的流。以Reader、Writer结尾<br>根据IO流的角色不同分为：节点流和处理流。</p></li><li><p>节点流：直接从数据源或目的地读写数据</p></li><li><p>处理流：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p></li></ul><p><img src="D:\JavaEE\素材\输入输出流.png"></p><h2 id="03、IO流继承体系"><a href="#03、IO流继承体系" class="headerlink" title="03、IO流继承体系"></a>03、IO流继承体系</h2><h1 id="4、FileReader-FileWriter的使用"><a href="#4、FileReader-FileWriter的使用" class="headerlink" title="4、FileReader\FileWriter的使用"></a>4、FileReader\FileWriter的使用</h1><h2 id="01、案例：读入文本文件的教程"><a href="#01、案例：读入文本文件的教程" class="headerlink" title="01、案例：读入文本文件的教程"></a>01、案例：读入文本文件的教程</h2><ul><li>FileReader<br>java.io.FileReader类用于读取字符文件，构造时使用系统默认的字符编码和默认字节缓冲区。</li><li>FileReader(File file)： 创建一个新的 FileReader ，给定要读取的File对象。<br>FileReader(String fileName)： 创建一个新的 FileReader ，给定要读取的文件的名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderWriterTest</span> &#123;<br>    <br>    <span class="hljs-comment">//实现方式1</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        <span class="hljs-comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>        <span class="hljs-comment">//3. 通过相关流的方法，读取文件中的数据</span><br><span class="hljs-comment">//        int data = fr.read(); //每调用一次读取一个字符</span><br><span class="hljs-comment">//        while (data != -1) &#123;</span><br><span class="hljs-comment">//            System.out.print((char) data);</span><br><span class="hljs-comment">//            data = fr.read();</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-type">int</span> data;<br>        <span class="hljs-keyword">while</span> ((data = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>) data);<br>        &#125;<br><br>        <span class="hljs-comment">//4. 关闭相关的流资源，避免出现内存泄漏</span><br>        fr.close();<br><br>    &#125;<br><br>    <span class="hljs-comment">//实现方式2：在方式1的基础上改进，使用try-catch-finally处理异常。保证流是可以关闭的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span><br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>            <span class="hljs-comment">//3. 通过相关流的方法，读取文件中的数据</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * read():每次从对接的文件中读取一个字符。并将此字符返回。</span><br><span class="hljs-comment">             * 如果返回值为-1,则表示文件到了末尾，可以不再读取。</span><br><span class="hljs-comment">             * */</span><br><span class="hljs-comment">//            int data = fr.read();</span><br><span class="hljs-comment">//            while(data != -1)&#123;</span><br><span class="hljs-comment">//                System.out.print((char)data);</span><br><span class="hljs-comment">//                data = fr.read();</span><br><span class="hljs-comment">//            &#125;</span><br><br>            <span class="hljs-type">int</span> data;<br>            <span class="hljs-keyword">while</span> ((data = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.println((<span class="hljs-type">char</span>) data);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4. 关闭相关的流资源，避免出现内存泄漏</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>)<br>                    fr.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//实现方式3：调用read(char[] cbuf),每次从文件中读取多个字符</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span><br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>            <span class="hljs-comment">//3. 通过相关流的方法，读取文件中的数据</span><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * read(char[] cbuf) : 每次将文件中的数据读入到cbuf数组中，并返回读入到数组中的</span><br><span class="hljs-comment">             * 字符的个数。</span><br><span class="hljs-comment">             * */</span><br>            <span class="hljs-type">int</span> len; <span class="hljs-comment">//记录每次读入的字符的个数</span><br>            <span class="hljs-keyword">while</span> ((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">//处理char[]数组即可</span><br>                <span class="hljs-comment">//错误：</span><br><span class="hljs-comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span><br><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><br><span class="hljs-comment">//                &#125;</span><br>                <span class="hljs-comment">//错误：</span><br><span class="hljs-comment">//                String str = new String(cbuf);</span><br><span class="hljs-comment">//                System.out.print(str);</span><br>                <span class="hljs-comment">//正确：</span><br><span class="hljs-comment">//                for(int i = 0;i &lt; len;i++)&#123;</span><br><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><br><span class="hljs-comment">//                &#125;</span><br>                <span class="hljs-comment">//正确：</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cbuf, <span class="hljs-number">0</span>, len);<br>                System.out.print(str);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4. 关闭相关的流资源，避免出现内存泄漏</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>)<br>                    fr.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FileWeriter"><a href="#FileWeriter" class="headerlink" title="FileWeriter:"></a>FileWeriter:</h3><ul><li><p>java.io.FileWriter类用于写出字符到文件，构造时使用系统默认的字符编码和默认字节缓冲区。</p></li><li><p>FileWriter(File file)： 创建一个新的 FileWriter，给定要读取的File对象。</p></li><li><p>FileWriter(String fileName)： 创建一个新的 FileWriter，给定要读取的文件的名称。<br>FileWriter(File file,boolean append)： 创建一个新的 FileWriter，指明是否在现有文件末尾追加内容。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWrite</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>));<br>        <span class="hljs-comment">// 写出数据</span><br>        fw.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.write(<span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">// 写出第2个字符</span><br>        fw.write(<span class="hljs-string">&#x27;C&#x27;</span>); <span class="hljs-comment">// 写出第3个字符</span><br>        fw.write(<span class="hljs-number">30000</span>); <span class="hljs-comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span><br><br>        <span class="hljs-comment">//关闭资源</span><br>        fw.close();<br>    &#125;<br><span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>));<br>        <span class="hljs-comment">// 字符串转换为字节数组</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;尚硅谷&quot;</span>.toCharArray();<br><br>        <span class="hljs-comment">// 写出字符数组</span><br>        fw.write(chars); <span class="hljs-comment">// 尚硅谷</span><br><br>        <span class="hljs-comment">// 写出从索引1开始，2个字符。</span><br>        fw.write(chars,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">// 硅谷</span><br><br>        <span class="hljs-comment">// 关闭资源</span><br>        fw.close();<br>    &#125;<br><span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);<br>        <span class="hljs-comment">// 字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;尚硅谷&quot;</span>;<br><br>        <span class="hljs-comment">// 写出字符数组</span><br>        fw.write(msg); <span class="hljs-comment">//尚硅谷</span><br><br>        <span class="hljs-comment">// 写出从索引1开始，2个字符。</span><br>        fw.write(msg,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">// 硅谷</span><br><br>        <span class="hljs-comment">// 关闭资源</span><br>        fw.close();<br>    &#125;    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建File的对象</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;personinfo.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 创建FileWriter的对象，将File对象作为参数传递到FileWriter的构造器中</span><br>            <span class="hljs-comment">//如果输出的文件已存在，则会对现有的文件进行覆盖</span><br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br><span class="hljs-comment">//            fw = new FileWriter(file,false);</span><br>            <span class="hljs-comment">//如果输出的文件已存在，则会在现有的文件末尾写入数据</span><br><span class="hljs-comment">//            fw = new FileWriter(file,true);</span><br><br>            <span class="hljs-comment">//3. 调用相关的方法，实现数据的写出操作</span><br>            <span class="hljs-comment">//write(String str) / write(char[] cbuf)</span><br>            fw.write(<span class="hljs-string">&quot;I love you,&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;you love him.&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;so sad&quot;</span>.toCharArray());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4. 关闭资源，避免内存泄漏</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>)<br>                    fw.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于flush（刷新）"><a href="#关于flush（刷新）" class="headerlink" title="关于flush（刷新）"></a>关于flush（刷新）</h3><ul><li>flush() ：刷新缓冲区，流对象可以继续使用。</li><li>close()：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>即便是flush()方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWriteFlush</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);<br>        <span class="hljs-comment">// 写出数据，通过flush</span><br>        fw.write(<span class="hljs-string">&#x27;刷&#x27;</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.flush();<br>        fw.write(<span class="hljs-string">&#x27;新&#x27;</span>); <span class="hljs-comment">// 继续写出第2个字符，写出成功</span><br>        fw.flush();<br><br>        <span class="hljs-comment">// 写出数据，通过close</span><br>        fw.write(<span class="hljs-string">&#x27;关&#x27;</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.close();<br>        fw.write(<span class="hljs-string">&#x27;闭&#x27;</span>); <span class="hljs-comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、read（）与read（char-cbuf）对比"><a href="#02、read（）与read（char-cbuf）对比" class="headerlink" title="02、read（）与read（char[] cbuf）对比"></a>02、read（）与read（char[] cbuf）对比</h2><h1 id="5、FileInputStream、FileOutputStream-的使用"><a href="#5、FileInputStream、FileOutputStream-的使用" class="headerlink" title="5、FileInputStream、FileOutputStream 的使用"></a>5、FileInputStream、FileOutputStream 的使用</h1><h2 id="01、案例：读入、写出图片、视频教程"><a href="#01、案例：读入、写出图片、视频教程" class="headerlink" title="01、案例：读入、写出图片、视频教程"></a>01、案例：读入、写出图片、视频教程</h2><ul><li>字节输入流：InputStream</li><li>java.io.InputStream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</li><li>public int read()： 从输入流读取一个字节。返回读取的字节值。虽然读取了一个字节，但是会自动提升为int类型。如果已经到达流末尾，没有数据可读，则返回-1。</li><li>public int read(byte[] b)： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。每次最多读取b.length个字节。返回实际读取的字节个数。如果已经到达流末尾，没有数据可读，则返回-1。</li><li>public int read(byte[] b,int off,int len)：从输入流中读取一些字节数，并将它们存储到字节数组 b中，从b[off]开始存储，每次最多读取len个字节 。返回实际读取的字节个数。如果已经到达流末尾，没有数据可读，则返回-1。<br>public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><ul><li>字节输出流：OutputStream</li><li>java.io.OutputStream抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</li><li>public void write(int b) ：将指定的字节输出流。虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。<br>public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li>public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。</li></ul><p>说明：close()方法，当完成流的操作时，必须调用此方法，释放系统资源。</p><p>读取操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FISRead</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>);<br>        <span class="hljs-comment">// 读取数据，返回一个字节</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        <span class="hljs-comment">// 读取到末尾,返回-1</span><br>        read = fis.read();<br>        System.out.println(read);<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        文件内容：abcde</span><br><span class="hljs-comment">        输出结果：</span><br><span class="hljs-comment">        a</span><br><span class="hljs-comment">        b</span><br><span class="hljs-comment">        c</span><br><span class="hljs-comment">        d</span><br><span class="hljs-comment">        e</span><br><span class="hljs-comment">        -1</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>);<br>        <span class="hljs-comment">// 定义变量，保存数据</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> ((b = fis.read())!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println((<span class="hljs-type">char</span>)b);<br>        &#125;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>); <span class="hljs-comment">// 文件中为abcde</span><br>        <span class="hljs-comment">// 定义变量，作为有效个数</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">// 定义字节数组，作为装字节数据的容器</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> (( len= fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 每次读取后,把数组变成字符串打印</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出结果：</span><br><span class="hljs-comment">        ab</span><br><span class="hljs-comment">        cd</span><br><span class="hljs-comment">        ed</span><br><span class="hljs-comment">        最后错误数据`d`，是由于最后一次读取时，只读取一个字节`e`，数组中，</span><br><span class="hljs-comment">        上次读取的数据没有被完全替换，所以要通过`len` ，获取有效的字节</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>); <span class="hljs-comment">// 文件中为abcde</span><br>        <span class="hljs-comment">// 定义变量，作为有效个数</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">// 定义字节数组，作为装字节数据的容器</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> (( len= fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b,<span class="hljs-number">0</span>,len));<span class="hljs-comment">//  len 每次读取的有效字节个数</span><br>        &#125;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出结果：</span><br><span class="hljs-comment">        ab</span><br><span class="hljs-comment">        cd</span><br><span class="hljs-comment">        e</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><ul><li><p>java.io.FileOutputStream类是文件输出流，用于将数据写出到文件。</p></li><li><p>public FileOutputStream(File file)：创建文件输出流，写出由指定的 File对象表示的文件。</p></li><li><p>public FileOutputStream(String name)： 创建文件输出流，指定的名称为写出文件。</p></li><li><p>public FileOutputStream(File file, boolean append)： 创建文件输出流，指明是否在现有文件末尾追加内容。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.fileio;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FOSWrite</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br>        <span class="hljs-comment">// 写出数据</span><br>        fos.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 写出第1个字节</span><br>        fos.write(<span class="hljs-number">98</span>); <span class="hljs-comment">// 写出第2个字节</span><br>        fos.write(<span class="hljs-number">99</span>); <span class="hljs-comment">// 写出第3个字节</span><br>        <span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>      <span class="hljs-comment">/*  输出结果：abc*/</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br>        <span class="hljs-comment">// 字符串转换为字节数组</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br>        <span class="hljs-comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span><br>        fos.write(b,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>    <span class="hljs-comment">//这段程序如果多运行几次，每次都会在原来文件末尾追加abcde</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 字符串转换为字节数组</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br>        fos.write(b);<br>        <span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>    <br>    <span class="hljs-comment">//使用FileInputStream\FileOutputStream，实现对文件的复制</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 造文件-造流</span><br>            <span class="hljs-comment">//复制图片：成功</span><br><span class="hljs-comment">//            fis = new FileInputStream(new File(&quot;pony.jpg&quot;));</span><br><span class="hljs-comment">//            fos = new FileOutputStream(new File(&quot;pony_copy1.jpg&quot;));</span><br><br>            <span class="hljs-comment">//复制文本文件：成功</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>));<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello1.txt&quot;</span>));<br><br>            <span class="hljs-comment">//2. 复制操作（读、写）</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//每次读入到buffer中字节的个数</span><br>            <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                fos.write(buffer, <span class="hljs-number">0</span>, len);<br><span class="hljs-comment">//                String str = new String(buffer,0,len);</span><br><span class="hljs-comment">//                System.out.print(str);</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//3. 关闭资源</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>)<br>                    fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>)<br>                    fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、案例：图片加密"><a href="#02、案例：图片加密" class="headerlink" title="02、案例：图片加密"></a>02、案例：图片加密</h2><p><img src="D:\workspace\素材\图片加密.png" alt="图片加密"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 8:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSecretTest</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 图片的加密</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony.jpg&quot;</span>);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony_secret.jpg&quot;</span>);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file1);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file2);<br><br>            <span class="hljs-comment">//方式1：每次读入一个字节，效率低</span><br><span class="hljs-comment">//            int data;</span><br><span class="hljs-comment">//            while((data = fis.read()) != -1)&#123;</span><br><span class="hljs-comment">//                fos.write(data ^ 5);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//方式2：每次读入一个字节数组，效率高</span><br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; len;i++)&#123;<br>                    buffer[i] = (<span class="hljs-type">byte</span>) (buffer[i] ^ <span class="hljs-number">5</span>);<br>                &#125;<br><br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br><br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;加密成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 图片的解密</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony_secret.jpg&quot;</span>);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony_unsecret.jpg&quot;</span>);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file1);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file2);<br><br>            <span class="hljs-comment">//方式1：每次读入一个字节，效率低</span><br><span class="hljs-comment">//            int data;</span><br><span class="hljs-comment">//            while((data = fis.read()) != -1)&#123;</span><br><span class="hljs-comment">//                fos.write(data ^ 5);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//方式2：每次读入一个字节数组，效率高</span><br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; len;i++)&#123;<br>                    buffer[i] = (<span class="hljs-type">byte</span>) (buffer[i] ^ <span class="hljs-number">5</span>);<br>                &#125;<br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;解密成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、缓冲流的使用、与文件效率对比"><a href="#6、缓冲流的使用、与文件效率对比" class="headerlink" title="6、缓冲流的使用、与文件效率对比"></a>6、缓冲流的使用、与文件效率对比</h1><h2 id="01、案例-缓冲流读入，写出数据"><a href="#01、案例-缓冲流读入，写出数据" class="headerlink" title="01、案例:缓冲流读入，写出数据"></a>01、案例:缓冲流读入，写出数据</h2><h2 id="02、缓冲流与文件流效率测试"><a href="#02、缓冲流与文件流效率测试" class="headerlink" title="02、缓冲流与文件流效率测试"></a>02、缓冲流与文件流效率测试</h2><h1 id="7、转换流的使用"><a href="#7、转换流的使用" class="headerlink" title="7、转换流的使用"></a>7、转换流的使用</h1><h2 id="01、编码与解码"><a href="#01、编码与解码" class="headerlink" title="01、编码与解码"></a>01、编码与解码</h2><p>引入情况1：</p><ul><li><p>使用FileReader 读取项目中的文本文件。由于IDEA设置中针对项目设置了UTF-8编码，当读取Windows系统中创建的文本文件时，如果Windows系统默认的是GBK编码，则读入内存中会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.transfer;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Problem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;E:\\File_GBK.txt&quot;</span>);<br>        <span class="hljs-type">int</span> data;<br>        <span class="hljs-keyword">while</span> ((data = fileReader.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>)data);<br>        &#125;<br>        fileReader.close();<br>    &#125;<br>&#125;<br><br>输出结果：<br>���<br><br></code></pre></td></tr></table></figure></li></ul><p><img src="D:\workspace\素材\转换流.jpg"></p><h2 id="02、常见支付编码集"><a href="#02、常见支付编码集" class="headerlink" title="02、常见支付编码集"></a>02、常见支付编码集</h2><h2 id="03、案例：转换实现文本文件编码的修改"><a href="#03、案例：转换实现文本文件编码的修改" class="headerlink" title="03、案例：转换实现文本文件编码的修改"></a>03、案例：转换实现文本文件编码的修改</h2><h1 id="8、对象流的使用、序列化机制"><a href="#8、对象流的使用、序列化机制" class="headerlink" title="8、对象流的使用、序列化机制"></a>8、对象流的使用、序列化机制</h1><h2 id="01、序列化机制"><a href="#01、序列化机制" class="headerlink" title="01、序列化机制"></a>01、序列化机制</h2><ul><li>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现java.io.Serializable 接口。Serializable 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出</li><li>NotSerializableException 。</li><li>如果对象的某个属性也是引用数据类型，那么如果该属性也要序列化的话，也要实现Serializable 接口</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。</li><li>静态（static）变量的值不会序列化。因为静态变量的值不属于某个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.object;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteDataOfAnyType</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;巫师&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">energy</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">75.5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">relive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;game.dat&quot;</span>));<br>        oos.writeUTF(name);<br>        oos.writeInt(age);<br>        oos.writeChar(gender);<br>        oos.writeInt(energy);<br>        oos.writeDouble(price);<br>        oos.writeBoolean(relive);<br>        oos.close();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reload</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;game.dat&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ois.readUTF();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> ois.readInt();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> ois.readChar();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">energy</span> <span class="hljs-operator">=</span> ois.readInt();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> ois.readDouble();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">relive</span> <span class="hljs-operator">=</span> ois.readBoolean();<br><br>        System.out.println(name+<span class="hljs-string">&quot;,&quot;</span> + age + <span class="hljs-string">&quot;,&quot;</span> + gender + <span class="hljs-string">&quot;,&quot;</span> + energy + <span class="hljs-string">&quot;,&quot;</span> + price + <span class="hljs-string">&quot;,&quot;</span> + relive);<br><br>        ois.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="02、案例：对象的序列化、反序列化"><a href="#02、案例：对象的序列化、反序列化" class="headerlink" title="02、案例：对象的序列化、反序列化"></a>02、案例：对象的序列化、反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.object;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteObject</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Employee.setCompany(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;小谷姐姐&quot;</span>, <span class="hljs-string">&quot;宏福苑&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-comment">// 创建序列化流对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;employee.dat&quot;</span>));<br>        <span class="hljs-comment">// 写出对象</span><br>        oos.writeObject(e);<br>        <span class="hljs-comment">// 释放资源</span><br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;Serialized data is saved&quot;</span>); <span class="hljs-comment">// 姓名，地址被序列化，年龄没有被序列化。</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 创建反序列化流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;employee.dat&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        <span class="hljs-comment">// 读取一个对象</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (Employee) ois.readObject();<br>        <span class="hljs-comment">// 释放资源</span><br>        ois.close();<br>        fis.close();<br><br>        System.out.println(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.object;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteCollection</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ArrayList&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;宏福苑&quot;</span>, <span class="hljs-number">23</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;白庙&quot;</span>, <span class="hljs-number">24</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;平西府&quot;</span>, <span class="hljs-number">25</span>));<br>        <span class="hljs-comment">// 创建序列化流对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;employees.dat&quot;</span>));<br>        <span class="hljs-comment">// 写出对象</span><br>        oos.writeObject(list);<br>        <span class="hljs-comment">// 释放资源</span><br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 创建反序列化流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;employees.dat&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        <span class="hljs-comment">// 读取一个对象</span><br>        ArrayList&lt;Employee&gt; list = (ArrayList&lt;Employee&gt;) ois.readObject();<br>        <span class="hljs-comment">// 释放资源</span><br>        ois.close();<br>        fis.close();<br><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9、其他流的使用"><a href="#9、其他流的使用" class="headerlink" title="9、其他流的使用"></a>9、其他流的使用</h1><h2 id="01、标准输入输出流"><a href="#01、标准输入输出流" class="headerlink" title="01、标准输入输出流"></a>01、标准输入输出流</h2><h2 id="02、打印流"><a href="#02、打印流" class="headerlink" title="02、打印流"></a>02、打印流</h2><h2 id="03、Scanner的了解"><a href="#03、Scanner的了解" class="headerlink" title="03、Scanner的了解"></a>03、Scanner的了解</h2><h2 id="04、开元Jar包调用API"><a href="#04、开元Jar包调用API" class="headerlink" title="04、开元Jar包调用API"></a>04、开元Jar包调用API</h2><h1 id="10、章节练习"><a href="#10、章节练习" class="headerlink" title="10、章节练习"></a>10、章节练习</h1><ul><li><p>需求说明：</p></li><li><p>网上购物时某用户填写订单，订单内容为产品列表，保存在“save.bin”中。<br>运行时，如果不存在“save.bin”，则进行新订单录入，如果存在，则显示并计算客户所需付款。</p></li><li><p>分析：</p></li><li><p>编写Save()方法保存对象到“save.bin”<br>编写Load()方法获得对象，计算客户所需付款</p></li></ul><p><img src="D:\workspace\素材\产品列表.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17多线程</title>
    <link href="/2023/04/02/17%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/04/02/17%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、线程简介"><a href="#1、线程简介" class="headerlink" title="1、线程简介"></a>1、线程简介</h1><ol><li>任务：</li><li>进程</li><li>线程</li><li>多线程</li></ol><p>Process  和 Thread</p><p>程序：程序是指令和数据的有序集合，本身没有任何运行含义，是一个静态概念</p><p>进程：进程是执行程序的一次执行过程，是一个动态概念，是系统资源分配的单位</p><p>线程：通常一个进程中可以包含多个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU的调度和执行单位。</p><p>电脑的多线程是模拟出来的，真正的多线程是指有多个CPU，即多核，如服务器。如果是模拟出来的多线程。那么在一个CPU的情况下，在同一个时间点，CPU只能执行一个代码，因为切换的很快，所以就有同时执行的错觉。</p><h1 id="2、线程实现（重点）"><a href="#2、线程实现（重点）" class="headerlink" title="2、线程实现（重点）"></a>2、线程实现（重点）</h1><h2 id="创建进程："><a href="#创建进程：" class="headerlink" title="创建进程："></a>创建进程：</h2><ol><li>Thread class  继承Thread类（重点）</li><li>Runnable接口：实现Runnable接口（重要）</li><li>实现Callable接口（了解）</li></ol><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个线程方式:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//run方法和main方法交替出现，交替执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//run 方法线程 副线程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我在看代码&quot;</span>+i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//主线程 main</span><br>        <span class="hljs-comment">//创建一个线程对象</span><br>        <span class="hljs-type">ThreadTest</span> <span class="hljs-variable">testThread1</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest</span>();<br><br>        <span class="hljs-comment">//调用Thread方法开启</span><br>        testThread1.start();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我现在在学习多线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现网络图片下载"><a href="#实现网络图片下载" class="headerlink" title="实现网络图片下载:"></a>实现网络图片下载:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span>  String url;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadTest01</span><span class="hljs-params">(String url,String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.url=url;<br>        <span class="hljs-built_in">this</span>.name=name;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.downloader(url,name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载了文件名称为&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ThreadTest01 p1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片&quot;</span>);<br>        ThreadTest01 p2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片1&quot;</span>);<br>        ThreadTest01 p3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片2&quot;</span>);<br>        ThreadTest01 p4= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片3&quot;</span>);<br>        p1.start();<br>        p4.start();<br>        p3.start();<br>        p2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url),<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\网络图片下载.jpg"></p><p>需要添加一个jar包：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230322000437246.png" alt="image-20230322000437246"></p><h3 id="Rennable接口："><a href="#Rennable接口：" class="headerlink" title="Rennable接口："></a>Rennable接口：</h3><p>建议使用Runnable 避免单继承的局限性，灵活方便，方便一个对象被多个进程使用</p><ol><li>定义Myrunnable接口；</li><li>实现run()接口，编写线程执行体</li><li>创建线程对象，调用start方法启动线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建进程方式二：实现runnable 接口，重写run方法，执行线程需要丢入runnable接口的=实现类，调用start方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableTest</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我现在在看代码&quot;</span>+i);<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//主线程 main</span><br>        <span class="hljs-comment">//创建一个Runnable接口的实现类对象</span><br>        RunnableTest runnableTest= <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableTest</span>();<br>        <span class="hljs-comment">//创建一个线程对象，代理Thread来实现类对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableTest);<span class="hljs-comment">//把Runnable进程对象的实现类对象放到Thread里面</span><br>        thread.start();<br>        <span class="hljs-comment">//调用Thread方法开启</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我现在在学习多线程&quot;</span>+i);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>了解：</p><p>实现Callable接口：</p><ol><li><p>实现callable接口，需要返回值类型</p></li><li><p>重写call方法，需要抛出异常</p></li><li><p>创建目标对象</p></li><li><p>创建执行服务 ExecutorService ser &#x3D; Executoers.newFixedThreadPool(1)</p></li><li><p>提交执行</p></li><li><p>获取结果</p></li><li><p>关闭服务</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习Callable 实现多线程下载图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span>  String url;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadTest01</span><span class="hljs-params">(String url,String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.url=url;<br>        <span class="hljs-built_in">this</span>.name=name;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.downloader(url,name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载了文件名称为&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ThreadTest01 p1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片&quot;</span>);<br>        ThreadTest01 p2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片1&quot;</span>);<br>        ThreadTest01 p3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片2&quot;</span>);<br>        ThreadTest01 p4= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片3&quot;</span>);<br>        p1.start();<br>        p4.start();<br>        p3.start();<br>        p2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url),<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、Lambda表达式"><a href="#3、Lambda表达式" class="headerlink" title="3、Lambda表达式"></a>3、Lambda表达式</h1><ol><li><p>Lamda的作用:让代码变的很简洁</p></li><li><p>避免匿名内部类定义过多</p></li><li><p>实质上是属于函数式编程的概念</p><p>（prams）–&gt;expression</p><p>函数式接口：</p><ol><li><p>Function Interface （函数式接口）</p></li><li><p>函数式接口的定义：</p><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</p><p>public interface Runnable{</p><p>public abstract void run();</p><p>}</p></li><li><p>有一个函数式接口就可以用Iambda来实现简化</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Lambda表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest</span> &#123;<br>  <span class="hljs-comment">//静态内部类的用法：把实现类放到  类里面</span><br> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">like2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ilike</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>   System.out.println(<span class="hljs-string">&quot;I like lambda2&quot;</span>);<br>  &#125;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">Ilike</span> <span class="hljs-variable">like</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">like</span>();<br>   like.lambda();<br><br>     <span class="hljs-type">Ilike</span> <span class="hljs-variable">like2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">like2</span>();<br>     like2.lambda();<br><br><br><br>    <span class="hljs-comment">//局部内部类：</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">like3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ilike</span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;I like lambda33&quot;</span>);<br>   &#125;<br>  &#125;<br>  like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">like3</span>();<br>   like.lambda();<br><br><br>   <span class="hljs-comment">//匿名内部类</span><br>   like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ilike</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;i like lambda4&quot;</span>);<br>    &#125;<br>   &#125;;<br>   like.lambda();<br><br>   <span class="hljs-comment">//用lambda简化</span><br>  like = ()-&gt;&#123;<br>   System.out.println(<span class="hljs-string">&quot;i like lambda5&quot;</span>);<br>  &#125;;<br>  like.lambda();<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//定义一个函数接口</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Ilike</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">like</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ilike</span>&#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>  System.out.println(<span class="hljs-string">&quot;I like Lambda&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4、线程停止问题："><a href="#4、线程停止问题：" class="headerlink" title="4、线程停止问题："></a>4、线程停止问题：</h2><p>setPriority(int  newPriority)更改线程的优先级</p><p>static void sleep（long mills）在指定的毫秒数内让当前正在执行的线程休眠</p><p>void join （） 等待该线程终止</p><p>static void yield（）暂停当前正在执行的线程对象，并执行其他的线程</p><p>void interrupt()  中断线程</p><p>boolean isAlive() 检测线程是否处于活动状态</p><h3 id="停止：flag-x3D-false"><a href="#停止：flag-x3D-false" class="headerlink" title="停止：flag&#x3D;false"></a>停止：flag&#x3D;false</h3><p>使用一个标志位进行终止变量，当flag&#x3D;false 则线程终止运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试停止线程</span><br><span class="hljs-comment">// 1.建议线程正常停止，----利用次数，不建议死循环</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   2.建议使用标志位，设置一个标志位</span><br><span class="hljs-comment">   3.不要使用stop 或者destroy等过时或者JDK不建议使用的方法</span><br><span class="hljs-comment">   */</span><br><span class="hljs-comment">// /*</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StopTest</span> &#123;<br>    <span class="hljs-comment">//设置一个标识位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;run.....Thread&quot;</span> + i++);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//设置一个公开的方法停止线程，转换标志位</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StopTest</span> <span class="hljs-variable">stopTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopTest</span>();<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>().start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;mian&quot;</span>+i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">900</span>) &#123;<br>                <span class="hljs-comment">//调用stop方法切换标识位</span><br>                stopTest.stop();<br>                System.out.println(<span class="hljs-string">&quot;线程该停止了&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Sleep线程睡眠："><a href="#Sleep线程睡眠：" class="headerlink" title="Sleep线程睡眠："></a>Sleep线程睡眠：</h3><ol><li>sleep 指定当前进程阻塞的毫秒数</li><li>Sleep 存在异常InterruptedException;</li><li>Sleep时间到达后线程进入就绪状态</li><li>Sleep可以模拟网络延时</li><li>每一个对象都有一个锁，Sleep不会释放锁。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//倒计时：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        tenDown();<br>    &#125;<br>    <span class="hljs-comment">//打印系统当前时间</span><br>    <span class="hljs-comment">//模拟网络延时：倒计时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tenDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(num--);<br>            <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//打印系统当前时间</span><br><br></code></pre></td></tr></table></figure><p>Sleep打印系统的当前时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//打印系统当前时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>          <span class="hljs-type">Date</span>  <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());  <span class="hljs-comment">//获取系统当前时间</span><br>              <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                  Thread.sleep(<span class="hljs-number">1000</span>);<br>                  System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<br>                  startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<br> &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Yield-线程礼让"><a href="#Yield-线程礼让" class="headerlink" title="Yield 线程礼让"></a>Yield 线程礼让</h3><ol><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让CPU从新调度，礼让不一定成功</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YieldTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyYield</span> <span class="hljs-variable">myYield</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyYield</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myYield,<span class="hljs-string">&quot;a&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myYield,<span class="hljs-string">&quot;b&quot;</span>).start();<br>    &#125;<br>    <br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyYield</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程开始执行&quot;</span>);<br>        Thread.<span class="hljs-keyword">yield</span>();<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程暂停执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需要插队的线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>        System.out.println(<span class="hljs-string">&quot;线程vip来捏&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nain</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">TestJoin</span> <span class="hljs-variable">testJoin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestJoin</span>();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testJoin);<br>    thread.start();<br>&#125;<br><span class="hljs-comment">//被插队的线程</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">200</span>)&#123;<br>       thread.join()<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>     Sysout.out.printl(<span class="hljs-string">&quot;main&quot;</span>+i)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Thread-State"><a href="#Thread-State" class="headerlink" title="Thread.State"></a>Thread.State</h3><p>观测线程状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-comment">//run方法和main方法交替出现，交替执行</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()-&gt;&#123;<br>         <span class="hljs-comment">//run 方法线程 副线程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;       <br>               System.out.println(<span class="hljs-string">&quot;我在看代码&quot;</span>+i);<br>    &#125;<br>     <br>        &#125;;<br>      <br>    <span class="hljs-comment">//观察线程状态：</span><br>    Thread.State state= thread.getState();<br>    System.out.println(state);<br>    <br>    <span class="hljs-comment">//观察启动后</span><br>    thread.start();<span class="hljs-comment">//启动线程</span><br>    state = thread.getState();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程优先级："><a href="#线程优先级：" class="headerlink" title="线程优先级："></a>线程优先级：</h3><ol><li><p>线程优先级通过数字来表示：范围 1–10； 实际结果看CPU实际情况，优先级没啥用</p><p>Thread.MIN_PRORITY &#x3D; 1;</p><p>Thread.MAX_PRIORITY&#x3D;10;</p><p>Thread.NORM_PRIORITY&#x3D;5;</p></li><li><p>使用一下方式获取或改变优先级；</p></li></ol><p>getPriority().setPriority(int xxx)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;----&gt;&quot;</span>+Thread.currentThread().getPriority());<br>        <span class="hljs-type">MyPriority</span> <span class="hljs-variable">myPriority</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPriority</span>();<br><br>        Thread t1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority);<br>        Thread t2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority);<br>        Thread t3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority);<br><br>        <span class="hljs-comment">//先设置优先级</span><br>        t1.start();<br>        t1.setPriority(<span class="hljs-number">5</span>);<br>        t2.setPriority(<span class="hljs-number">1</span>);<br>        t2.start();<br><br>        t3.start();<br>        t3.setPriority(Thread.MAX_PRIORITY);<br>    &#125;<br><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="daemon守护线程："><a href="#daemon守护线程：" class="headerlink" title="daemon守护线程："></a>daemon守护线程：</h3><p>虚拟机必须确保用户线程执行完毕，虚拟机不用等待守护线程执行完毕</p><p>线程分为用户线程和守护线程</p><p>守护线程包括：后台记录操作日志、监控内存、垃圾回收等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><h1 id="4、线程同步（重点）"><a href="#4、线程同步（重点）" class="headerlink" title="4、线程同步（重点）"></a>4、线程同步（重点）</h1><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ol><li><p>并发：多个进程操作同一个对象</p><p>比如：上万人同时登陆一个网站，多人同时使用一个系统</p></li><li><p>处理多线程问题时候，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候需要线程同步。</p></li><li><p>线程同步其实就是一种等待机制，等待前面的线程使用完毕，下一个线程在使用。</p></li><li><p>多个需要访问同一个对象线程进入这个对象的等待池。</p></li></ol><h3 id="2-线程锁机制："><a href="#2-线程锁机制：" class="headerlink" title="2.线程锁机制："></a>2.线程锁机制：</h3><ol><li>每个对象都有一个锁</li><li>每一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程的情况下，加锁，释放锁会导致比较多的上下文和调度延时，引起性能问题</li><li>若优先级高的线程等待优先级低的线程释放锁，会导致优先级倒置，引起性能问题</li></ol><h3 id="3-synchronized方法和-synchronized块"><a href="#3-synchronized方法和-synchronized块" class="headerlink" title="3.synchronized方法和 synchronized块"></a>3.synchronized方法和 synchronized块</h3><h4 id="同步方法："><a href="#同步方法：" class="headerlink" title="同步方法："></a>同步方法：</h4><p>public synchronized void method(int args){}</p><p>在方法</p><h4 id="同步块："><a href="#同步块：" class="headerlink" title="同步块："></a>同步块：</h4><p>   synchronized（Obj）{} </p><ol><li><p>obj可以是任何对象，但是推荐使用共享资源作为同步监视器       </p></li><li><p>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this</p><p>同步监视器的执行过程：</p><ol><li>第一个线程访问，锁定同步监视器，执行其中代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，解锁同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li></ol></li></ol><p>synchronized（Obj）{} </p><p>银行取钱问题：(不安全的取钱问题)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSafeBank</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">1000000</span>,<span class="hljs-string">&quot;10086&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人你&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">yougirl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人yougirl&quot;</span>);<br><br>       you.start();<br>       yougirl.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//账户</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Account</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span><span class="hljs-number">1000000</span>;  <span class="hljs-comment">//如果为100 就会不安全；</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10086&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money,String name)</span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Account  account; <span class="hljs-comment">//账户</span><br>    <span class="hljs-type">int</span> drawingMoney;<span class="hljs-comment">//取了多少钱</span><br>    <span class="hljs-type">int</span> nowMoney;<span class="hljs-comment">//现在手里有多少钱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span><span class="hljs-params">(Account account,<span class="hljs-type">int</span> drawingMoney,String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);  <span class="hljs-comment">//super 调用必须是构造函数里面的第一条语句</span><br>        <span class="hljs-built_in">this</span>.account = account;<br>        <span class="hljs-built_in">this</span>.drawingMoney=drawingMoney;<br><br>    &#125;<br>    <span class="hljs-comment">//取钱的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">// 判断账户里面的钱还有多少</span><br>        <span class="hljs-keyword">if</span> (account.money-drawingMoney&lt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;您的余额为&quot;</span>+account.money+<span class="hljs-string">&quot;余额不足，取不了&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//卡内的余额</span><br>        account.money = account.money - drawingMoney;<br>        <span class="hljs-comment">//你手里的钱</span><br>        nowMoney = nowMoney +drawingMoney;<br>        System.out.println(account.name+<span class="hljs-string">&quot;余额为&quot;</span>+account.money);<br>        System.out.println(Thread.currentThread().getName());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized (obj){}   同步块模式下的安全</p><p>银行取钱问题：(安全的取钱问题)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSafeBank</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&quot;10086&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人你&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">yougirl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人yougirl&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">youchilds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人youchilds&quot;</span>);<br><br>       you.start();<br>       yougirl.start();<br>       youchilds.start();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//账户</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Account</span>&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span><span class="hljs-number">101</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10086&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money,String name)</span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Account account; <span class="hljs-comment">//账户</span><br>    <span class="hljs-type">int</span> drawingMoney;<span class="hljs-comment">//取了多少钱</span><br>    <span class="hljs-type">int</span> nowMoney;<span class="hljs-comment">//现在手里有多少钱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-type">int</span> drawingMoney, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);  <span class="hljs-comment">//super 调用必须是构造函数里面的第一条语句</span><br>        <span class="hljs-built_in">this</span>.account = account;<br>        <span class="hljs-built_in">this</span>.drawingMoney = drawingMoney;<br><br>    &#125;<br><br>    <span class="hljs-comment">//取钱的方法</span><br>    <span class="hljs-comment">//synchronized 默认锁的是this. 就是它本身 有时候要用同步块</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (account) &#123;<br>            <span class="hljs-comment">// 判断账户里面的钱还有多少</span><br>            <span class="hljs-keyword">if</span> (account.money - drawingMoney &lt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;您的余额为&quot;</span> + account.money + <span class="hljs-string">&quot;余额不足，取不了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//卡内的余额</span><br>            account.money = account.money - drawingMoney;<br>            <span class="hljs-comment">//你手里的钱</span><br>            nowMoney = nowMoney + drawingMoney;<br>            System.out.println(account.name + <span class="hljs-string">&quot;余额为&quot;</span> + account.money);<br>            System.out.println(Thread.currentThread().getName());<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、死锁"><a href="#4、死锁" class="headerlink" title="4、死锁"></a>4、死锁</h3><ol><li><p>多个线程互相拥有对方的资源，形成僵持</p><p>避免死锁的方法：</p><ol><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞是，对已获得的资源保持不变</li><li>不剥夺条件：进程已经获得的资源，在未使用完之前就不会被剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环资源关系</li></ol><p>破坏上面中的任意一个或者多个条件死锁就可以避免发生</p><h3 id="5、线程池："><a href="#5、线程池：" class="headerlink" title="5、线程池："></a>5、线程池：</h3><p>思路就是提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁的销毁、实现重复使用，类似于公共交通工具。</p><p>优点：</p><ol><li>提高响应速度</li><li>降低资源消耗</li><li>便于管理</li><li>corePoolSize  ：核心池的大小</li><li>maximumPoolSize  ：最大线程数</li><li>keepAliveTime: 线程没有任务时最多保持多长时间会停止</li></ol><p>void shutdown():关闭线程池</p></li></ol><h1 id="6、高级主题"><a href="#6、高级主题" class="headerlink" title="6、高级主题"></a>6、高级主题</h1>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16泛型</title>
    <link href="/2023/04/02/16%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/04/02/16%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15集合</title>
    <link href="/2023/04/02/15%E9%9B%86%E5%90%88/"/>
    <url>/2023/04/02/15%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="1、集合体系介绍"><a href="#1、集合体系介绍" class="headerlink" title="1、集合体系介绍"></a>1、集合体系介绍</h1><h2 id="01、数组弊端"><a href="#01、数组弊端" class="headerlink" title="01、数组弊端"></a>01、数组弊端</h2><p>数组在内存存储方面的特点：</p><ul><li>数组初始化以后，长度就确定了。</li><li>数组中的添加的元素是依次紧密排列的，有序的，可以重复的。</li><li>数组声明的类型，就决定了进行元素初始化时的类型。不是此类型的变量，就不能添加。</li><li>可以存储基本数据类型值，也可以存储引用数据类型的变量</li></ul><p>数组在存储数据方面的弊端：</p><ul><li><p>数组初始化以后，长度就不可变了，不便于扩展</p></li><li><p>数组中提供的属性和方法少，不便于进行添加、删除、插入、获取元素个数等操作，且效率不高。</p></li><li><p>数组存储数据的特点单一，只能存储有序的、可以重复的数据</p></li><li><p>Java 集合框架中的类可以用于存储多个对象，还可用于保存具有映射关系的关联数组。</p></li></ul><h2 id="02、Java集合框架"><a href="#02、Java集合框架" class="headerlink" title="02、Java集合框架"></a>02、Java集合框架</h2><ul><li><p>Collection接口：用于存储一个一个的数据，也称单列数据集合。</p></li><li><p>List子接口：用来存储有序的、可以重复的数据（主要用来替换数组，”动态”数组）</p></li><li><ul><li>实现类：ArrayList(主要实现类)、LinkedList、Vector</li><li>Set子接口：用来存储无序的、不可重复的数据（类似于高中讲的”集合”）</li></ul></li><li><p>实现类：HashSet(主要实现类)、LinkedHashSet、TreeSetMap接口：用于存储具有映射关系“key-value对”的集合，即一对一对的数据，也称双列数据集合。(类似于高中的函数、映射。(x1,y1),(x2,y2) —&gt; y &#x3D; f(x) )</p></li><li><p>HashMap(主要实现类)、LinkedHashMap、TreeMap、Hashtable、PropertiesJDK提供的集合API位于java.util包内</p></li></ul><h2 id="03、集合的使用场景："><a href="#03、集合的使用场景：" class="headerlink" title="03、集合的使用场景："></a>03、集合的使用场景：</h2><p><img src="D:\workspace\素材\集合使用场景.png" alt="集合"></p><h1 id="2、Collection接口和常用方法"><a href="#2、Collection接口和常用方法" class="headerlink" title="2、Collection接口和常用方法"></a>2、Collection接口和常用方法</h1><h2 id="01、Collection接口及方法"><a href="#01、Collection接口及方法" class="headerlink" title="01、Collection接口及方法"></a>01、Collection接口及方法</h2><ul><li>JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set和List）去实现。</li><li>Collection 接口是 List和Set接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 集合。方法如下：</li></ul><h3 id="01-1添加"><a href="#01-1添加" class="headerlink" title="01.1添加"></a>01.1添加</h3><p>（1）add(E obj)：添加元素对象到当前集合中<br>（2）addAll(Collection other)：添加other集合中的所有元素对象到当前集合中，即this &#x3D; this ∪ other</p><p>注意：add和addAll的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.collection;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCollectionAdd</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//ArrayList是Collection的子接口List的实现类之一。</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        coll.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;石破天&quot;</span>);<br>        System.out.println(coll);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c1.add(<span class="hljs-number">1</span>);<br>        c1.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c1 = &quot;</span> + c1);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c2.add(<span class="hljs-number">1</span>);<br>        c2.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c2 = &quot;</span> + c2);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        other.add(<span class="hljs-number">1</span>);<br>        other.add(<span class="hljs-number">2</span>);<br>        other.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;other集合元素的个数：&quot;</span> + other.size());<span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;other = &quot;</span> + other);<br>        System.out.println();<br><br>        c1.addAll(other);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//5</span><br>        System.out.println(<span class="hljs-string">&quot;c1.addAll(other) = &quot;</span> + c1);<br><br>        c2.add(other);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;c2.add(other) = &quot;</span> + c2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\素材\Colladd和colladdall的区别.png" alt="colladd和colladdall的区别"></p><h2 id="02、判断"><a href="#02、判断" class="headerlink" title="02、判断"></a>02、判断</h2><p>（1）int size()：获取当前集合中实际存储的元素个数<br>（2）boolean isEmpty()：判断当前集合是否为空集合<br>（3）boolean contains(Object obj)：判断当前集合中是否存在一个与obj对象equals返回true的元素<br>（4）boolean containsAll(Collection coll)：判断coll集合中的元素是否在当前集合中都存在。即coll集合是否是当前集合的“子集”<br>（5）boolean equals(Object obj)：判断当前集合与obj是否相等package com.atguigu.collection;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.collection;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCollectionContains</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        System.out.println(<span class="hljs-string">&quot;coll在添加元素之前，isEmpty = &quot;</span> + coll.isEmpty());<br>        coll.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;石破天&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;佛地魔&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;coll的元素个数&quot;</span> + coll.size());<br><br>        System.out.println(<span class="hljs-string">&quot;coll在添加元素之后，isEmpty = &quot;</span> + coll.isEmpty());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        coll.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;石破天&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;佛地魔&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;coll = &quot;</span> + coll);<br>        System.out.println(<span class="hljs-string">&quot;coll是否包含“小李广” = &quot;</span> + coll.contains(<span class="hljs-string">&quot;小李广&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;coll是否包含“宋红康” = &quot;</span> + coll.contains(<span class="hljs-string">&quot;宋红康&quot;</span>));<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        other.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        other.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        other.add(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;other = &quot;</span> + other);<br><br>        System.out.println(<span class="hljs-string">&quot;coll.containsAll(other) = &quot;</span> + coll.containsAll(other));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c1.add(<span class="hljs-number">1</span>);<br>        c1.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c1 = &quot;</span> + c1);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c2.add(<span class="hljs-number">1</span>);<br>        c2.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c2 = &quot;</span> + c2);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        other.add(<span class="hljs-number">1</span>);<br>        other.add(<span class="hljs-number">2</span>);<br>        other.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;other集合元素的个数：&quot;</span> + other.size());<span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;other = &quot;</span> + other);<br>        System.out.println();<br><br>        c1.addAll(other);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//5</span><br>        System.out.println(<span class="hljs-string">&quot;c1.addAll(other) = &quot;</span> + c1);<br>        System.out.println(<span class="hljs-string">&quot;c1.contains(other) = &quot;</span> + c1.contains(other));<br>        System.out.println(<span class="hljs-string">&quot;c1.containsAll(other) = &quot;</span> + c1.containsAll(other));<br>        System.out.println();<br><br>        c2.add(other);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<br>        System.out.println(<span class="hljs-string">&quot;c2.add(other) = &quot;</span> + c2);<br>        System.out.println(<span class="hljs-string">&quot;c2.contains(other) = &quot;</span> + c2.contains(other));<br>        System.out.println(<span class="hljs-string">&quot;c2.containsAll(other) = &quot;</span> + c2.containsAll(other));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="03、删除："><a href="#03、删除：" class="headerlink" title="03、删除："></a>03、删除：</h2><p>clear  在集合里面一个一个删除不浪费内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test02</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll02.add(<span class="hljs-string">&#x27;2&#x27;</span>);<br>       coll02.add(<span class="hljs-string">&quot;汉字&quot;</span>);<br>       coll02.add(<span class="hljs-number">1234</span>);<br>       System.out.println(coll02); <span class="hljs-comment">//[2,汉字，1234]</span><br>       coll02.clear();<br>       System.out.println(coll02);  <span class="hljs-comment">// []</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>remove:  在集合里面删除指定的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">Person02</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;萧代&quot;</span>);<br>        coll03.add(<span class="hljs-number">123456</span>);<br>        coll03.add(<span class="hljs-string">&quot;ABC&quot;</span>);<br>        coll03.add(p1);<br>        System.out.println(coll03);<br>        coll03.remove(p1);<br>        System.out.println(coll03);<br>    &#125;<br></code></pre></td></tr></table></figure><p>remove  all：  比较当前集合和 coll 集合 ，从当前的集合中删除所有与 coll集合中相同的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test04</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       <span class="hljs-type">Person02</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;萧代&quot;</span>);<br>       coll04.add(<span class="hljs-number">123</span>);<br>       coll04.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       coll04.add(<span class="hljs-number">123456</span>);<br>       coll04.add(<span class="hljs-string">&quot;ABC&quot;</span>);<br>       coll04.add(p1);<br>       System.out.println(coll04); <span class="hljs-comment">//[123, 谁, 123456, ABC, Person02&#123;age=12, name=&#x27;萧代&#x27;&#125;]</span><br><br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll.add(<span class="hljs-string">&#x27;a&#x27;</span>);<br>       coll.add(<span class="hljs-number">123</span>);  <span class="hljs-comment">//没有报错是因为装箱了</span><br>       coll.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       System.out.println(coll); <span class="hljs-comment">// [a, 123, 谁]</span><br>       <span class="hljs-comment">//remove all 比较当前集合和 coll 集合 ，从当前的集合中删除所有与 coll集合中相同的元素</span><br>       coll04.removeAll(coll);<br>       System.out.println(coll04);  <span class="hljs-comment">//[123456, ABC, Person02&#123;age=12, name=&#x27;萧代&#x27;&#125;]</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>retain all :  比较俩个集合,保留他们的交集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-comment">//retain all</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test05</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       <span class="hljs-type">Person02</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;萧代&quot;</span>);<br>       coll04.add(<span class="hljs-number">123</span>);<br>       coll04.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       coll04.add(<span class="hljs-number">123456</span>);<br>       coll04.add(<span class="hljs-string">&quot;ABC&quot;</span>);<br>       coll04.add(p1);<br>       System.out.println(coll04);  <span class="hljs-comment">//[123, 谁, 123456, ABC, Person02&#123;age=12, name=&#x27;萧代&#x27;&#125;]</span><br><br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll.add(<span class="hljs-string">&#x27;a&#x27;</span>);<br>       coll.add(<span class="hljs-number">123</span>);  <span class="hljs-comment">//没有报错是因为装箱了</span><br>       coll.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       System.out.println(coll);  <span class="hljs-comment">//[a, 123, 谁]</span><br>       <span class="hljs-comment">//remove all 比较当前集合和 coll 集合 ，从当前的集合中保留所有与 coll集合中相同的元素</span><br>       coll04.retainAll(coll);<br>       System.out.println(coll04);  <span class="hljs-comment">//[123, 谁]</span><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="04、集合-—-gt-数组"><a href="#04、集合-—-gt-数组" class="headerlink" title="04、集合 —&gt; 数组"></a>04、集合 —&gt; 数组</h2><h3 id="02、迭代器—-遍历集合元素"><a href="#02、迭代器—-遍历集合元素" class="headerlink" title="02、迭代器—-遍历集合元素"></a>02、迭代器—-遍历集合元素</h3><p>iterator :返回迭代器对象，用于集合遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test6</span><span class="hljs-params">()</span>&#123;<br>       String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-string">&quot;DD&quot;</span>&#125;;<br>      <span class="hljs-type">Collection</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span>  Arrays.asList(arr);<br>       System.out.println(list);<br><br>       <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>);<br>       System.out.println(list1);<br><br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口java.util.Iterator。Iterator接口也是Java集合中的一员，但它与Collection、Map接口有所不同。</p></li><li><p>Collection接口与Map接口主要用于存储元素<br>Iterator，被称为迭代器接口，本身并不提供存储对象的能力，主要用于遍历Collection中的元素</p></li><li><p>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</p></li><li><p>public Iterator iterator(): 获取集合对应的迭代器，用来遍历集合中的元素的。<br>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</p></li></ul><h1 id="3、迭代器的使用、增强for的使用"><a href="#3、迭代器的使用、增强for的使用" class="headerlink" title="3、迭代器的使用、增强for的使用"></a>3、迭代器的使用、增强for的使用</h1><h2 id="01、通过迭代器来遍历集合"><a href="#01、通过迭代器来遍历集合" class="headerlink" title="01、通过迭代器来遍历集合"></a>01、通过迭代器来遍历集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll.add(<span class="hljs-string">&#x27;a&#x27;</span>);<br>       coll.add(<span class="hljs-number">123</span>);  <span class="hljs-comment">//没有报错是因为装箱了</span><br>       coll.add(<span class="hljs-string">&quot;谁&quot;</span>);<br><br><br>       System.out.println(coll);<span class="hljs-comment">//</span><br>       <span class="hljs-comment">//获取迭代器对象</span><br>       <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> coll.iterator();<br>       <br>       <span class="hljs-comment">//方式1</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ;i&lt; coll.size();i++)&#123;<br>           System.out.println(iterator.next());<br>       &#125;<br>       <span class="hljs-comment">//方式2</span><br>       <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>           System.out.println(iterator.next());<br>       &#125;<br></code></pre></td></tr></table></figure><h1 id="4、List的常用方法、主要实现类对比"><a href="#4、List的常用方法、主要实现类对比" class="headerlink" title="4、List的常用方法、主要实现类对比"></a>4、List的常用方法、主要实现类对比</h1><h2 id="4-1、List接口的特点："><a href="#4-1、List接口的特点：" class="headerlink" title="4.1、List接口的特点："></a>4.1、List接口的特点：</h2><ul><li><p>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</p></li><li><p>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</p></li></ul><h2 id="4-2-List接口的方法"><a href="#4-2-List接口的方法" class="headerlink" title="4.2 List接口的方法"></a>4.2 List接口的方法</h2><ul><li>插入元素<br>void add(int index, Object ele):在index位置插入ele元素<br> boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li><li>获取元素<br>Object get(int index):获取指定index位置的元素<br>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>     list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>     list.add(<span class="hljs-number">123</span>);<br>     list.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>     list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br>     System.out.println(list); <span class="hljs-comment">//[AA, 123, BB, Person02&#123;age=12, name=&#x27;Tom&#x27;&#125;]</span><br>     <span class="hljs-comment">//添加</span><br>     list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;CC&quot;</span>);<br>     System.out.println(list); <span class="hljs-comment">//[AA, 123, CC, BB, Person02&#123;age=12, name=&#x27;Tom&#x27;&#125;]</span><br>     <span class="hljs-comment">//删除</span><br>     list.remove(<span class="hljs-number">1</span>);<br>     System.out.println(list); <span class="hljs-comment">//[AA, CC, BB, Person02&#123;age=12, name=&#x27;Tom&#x27;&#125;]</span><br> &#125;<br></code></pre></td></tr></table></figure><p>增、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">// 往 尾部添加 指定元素</span><br>        list.add(<span class="hljs-string">&quot;图图&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小美&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;高兴&quot;</span>);<br><br>        System.out.println(list);<br>        <span class="hljs-comment">// add(int index,String s) 往指定位置添加</span><br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;快乐&quot;</span>);<br><br>        System.out.println(list); <br><span class="hljs-comment">//==================================</span><br>       <br></code></pre></td></tr></table></figure><p>删、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span><br>        <span class="hljs-comment">// 删除索引位置为2的元素</span><br>        System.out.println(<span class="hljs-string">&quot;删除索引位置为2的元素&quot;</span>);<br>         list.remove(<span class="hljs-number">2</span>);<br>        System.out.println(list.remove(<span class="hljs-number">2</span>));<br><br>        System.out.println(list);<br></code></pre></td></tr></table></figure><p>改、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String set(int index,String s)</span><br>       <span class="hljs-comment">// 在指定位置 进行 元素替代（改）</span><br>       <span class="hljs-comment">// 修改指定位置元素</span><br>       list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;三毛&quot;</span>);<br>       System.out.println(list);<br></code></pre></td></tr></table></figure><p>查、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String get(int index)  获取指定位置元素</span><br>        <span class="hljs-comment">// 跟size() 方法一起用  来 遍历的</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>            System.out.println(list.get(i));<br>        &#125;<br></code></pre></td></tr></table></figure><p>插、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">add(<span class="hljs-type">int</span> index,Object ele)<br>addAll(<span class="hljs-type">int</span> index,Collection eles)<br>    <br></code></pre></td></tr></table></figure><p>长度、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">size()<br></code></pre></td></tr></table></figure><p>遍历、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//iterator();</span><br> <span class="hljs-meta">@Test</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br>        System.out.println(list);<br>        <span class="hljs-comment">//遍历方式1：使用迭代器</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>        <span class="hljs-comment">//增强 for 循环 遍历</span><br>        <span class="hljs-keyword">for</span> (Object obj:list)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-comment">//一般的for循环遍历：</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt;list.size();i++)&#123;<br>            System.out.println(list.get(i));<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>注意：在JavaSE中List名称的类型有两个，一个是java.util.List集合接口，一个是java.awt.List图形界面的组件，别导错包了。</p><h2 id="4-3、list-主要实现类及其特点"><a href="#4-3、list-主要实现类及其特点" class="headerlink" title="4.3、list 主要实现类及其特点"></a>4.3、list 主要实现类及其特点</h2><h3 id="4-3-1List接口主要实现类：ArrayList"><a href="#4-3-1List接口主要实现类：ArrayList" class="headerlink" title="4.3.1List接口主要实现类：ArrayList"></a>4.3.1List接口主要实现类：ArrayList</h3><p>ArrayList 是 List 接口的主要实现类，在添加、查找数据时，效率较高，在插入、删除数据时效率较低。</p><ul><li><p>本质上，ArrayList是对象引用的一个”变长”数组</p></li><li><p>Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合</p></li></ul><h3 id="4-3-2List的实现类之二：LinkedList"><a href="#4-3-2List的实现类之二：LinkedList" class="headerlink" title="4.3.2List的实现类之二：LinkedList"></a>4.3.2List的实现类之二：LinkedList</h3><p>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。这是由底层采用链表（双向链表）结构存储数据决定的。在插入、删除数据时效率较高、在添加、查找数据时效率较低。</p><p>特有方法：</p><ul><li>void addFirst(Object obj)</li><li>void addLast(Object obj)</li><li>Object getFirst()</li><li>Object getLast()</li><li>Object removeFirst()</li><li>Object removeLast()</li></ul><h3 id="4-3-3、List的实现类之三Vector"><a href="#4-3-3、List的实现类之三Vector" class="headerlink" title="4.3.3、List的实现类之三Vector"></a>4.3.3、List的实现类之三Vector</h3><p>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。效率低，尽量避免使用。</p><h1 id="5、List案例题目"><a href="#5、List案例题目" class="headerlink" title="5、List案例题目"></a>5、List案例题目</h1><p>①：定义学生类，属性为姓名、年龄、提供必要的 getter、setter 方法，构造器。toString(), equals()方法</p><p>②：使用ArrayList集合，保存到录入的对个学生对象。</p><p>③：循环录入的方式，1：继续录入 0：结束录入</p><p>④：录入结束后，用 foreach 遍历集合</p><p>问题：从键盘录入学生的信息，保存到集合List中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        System.out.println(<span class="hljs-string">&quot;请录入学生信息&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;1:继续录入，0：结束录入&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-keyword">if</span> (selection == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.print(<span class="hljs-string">&quot;请输入学生的姓名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>            System.out.print(<span class="hljs-string">&quot;请输入学生的年龄&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,age);<br><br>            list.add(s);<br><br>        &#125;<br>        <span class="hljs-comment">//遍历学生信息</span><br><br>        System.out.println(<span class="hljs-string">&quot;遍历学生的信息&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object s :list)&#123;<br>            System.out.println(s.toString());<br>        &#125;<br><span class="hljs-comment">//        System.out.println(list);</span><br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\录入学生信息.jpg" alt="学生信息"></p><h3 id="例题：统计集合中指定元素出现的次数"><a href="#例题：统计集合中指定元素出现的次数" class="headerlink" title="例题：统计集合中指定元素出现的次数"></a>例题：统计集合中指定元素出现的次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求1：随机生成26个字符，存放到ArrayList中</span><br><br><span class="hljs-comment">//需求2：遍历ArrayList查找指定元素出现的次数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//需求1：随机生成26个字符，存放到ArrayList中</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span> ;i&lt;<span class="hljs-number">27</span>;i++)&#123;<br><br>            list.add( (<span class="hljs-type">char</span>)(Math.random()*(<span class="hljs-number">122</span>-<span class="hljs-number">97</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">97</span>)+<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        System.out.println(list);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">aCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;b&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;c&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">xCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;x&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>+aCount);<br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>+bCount);<br>        System.out.println(<span class="hljs-string">&quot;c&quot;</span>+cCount);<br>        System.out.println(<span class="hljs-string">&quot;x&quot;</span>+xCount);<br><br>    &#125;<br><br>    <span class="hljs-comment">//需求2：遍历ArrayList查找指定元素出现的次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">listTest</span><span class="hljs-params">(Collection list, String s)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Object obj:list)&#123;<br>            <span class="hljs-keyword">if</span> (s.equals(obj))&#123;<br>                count ++;<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="6、Set存储特点、HashSet-、LinkedHash、LinkedHashSet的使用"><a href="#6、Set存储特点、HashSet-、LinkedHash、LinkedHashSet的使用" class="headerlink" title="6、Set存储特点、HashSet 、LinkedHash、LinkedHashSet的使用"></a>6、Set存储特点、HashSet 、LinkedHash、LinkedHashSet的使用</h1><ul><li>Set接口是Collection的子接口，Set接口相较于Collection接口没有提供额外的方法</li><li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</li><li>Set集合支持的遍历方式和Collection集合一样：foreach和Iterator。</li><li>Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。</li></ul><h2 id="6-1-Set主要实现类：HashSet"><a href="#6-1-Set主要实现类：HashSet" class="headerlink" title="6.1 Set主要实现类：HashSet"></a>6.1 Set主要实现类：HashSet</h2><p>HashSet:主要实现类：底层是使用HashMa，即使用数组+单向列表+红黑树结构进行存储。</p><p>LinkedHashSet 是HashSet的子类，在现有的数组+单向列表+红黑树结构的基础上有添加了一组双向链表，用于记录添加元素的先后顺序。即我们也可以按照元素的顺序来实现遍历。</p><ul><li><p>HashSet 是 Set 接口的主要实现类，大多数时候使用 Set 集合时都使用这个实现类。</p></li><li><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存储、查找、删除性能。</p></li><li><p>HashSet 具有以下特点：</p></li><li><p>不能保证元素的排列顺序</p></li><li><p>HashSet 不是线程安全的</p></li><li><p>集合元素可以是 null</p></li><li><p>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法得到的哈希值相等，并且两个对象的 equals()方法返回值为true。</p></li><li><p>对于存放在Set容器中的对象，对应的类一定要重写hashCode()和equals(Object obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</p></li><li><p>HashSet集合中元素的无序性，不等同于随机性。这里的无序性与元素的添加位置有关。具体来说：我们在添加每一个元素到数组中时，具体的存储位置是由元素的hashCode()调用后返回的hash值决定的。导致在数组中每个元素不是依次紧密存放的，表现出一定的无序性。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();  <span class="hljs-comment">//LinkedHashSet 是HashSet的子类添加了一组双向链表，可以按照元素的顺序来实现遍历。</span><br>       set.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>       set.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>       set.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>       set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br><br>       <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br>       <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>           System.out.println(iterator.next());<br>       &#125;<br></code></pre></td></tr></table></figure><h1 id="7、HashSet的案例、TreeSet的自然排序，定期排序"><a href="#7、HashSet的案例、TreeSet的自然排序，定期排序" class="headerlink" title="7、HashSet的案例、TreeSet的自然排序，定期排序"></a>7、HashSet的案例、TreeSet的自然排序，定期排序</h1><h3 id="案例：排序"><a href="#案例：排序" class="headerlink" title="案例：排序"></a>案例：排序</h3><p>案例：比较年龄从小到大排序，如果年龄相同，就继续比较姓名，从小到大排序</p><p>案例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>①、参数List中只存放Integer的对象<br><span class="hljs-regexp">//</span>②、在list内取出重复的数字，尽量简单<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//①、参数List中只存放Integer的对象</span><br><span class="hljs-comment">//②、在list内取出重复的数字，尽量简单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-number">22</span>);<br>        list.add(<span class="hljs-number">22</span>);<br>        list.add(<span class="hljs-number">33</span>);<br>        list.add(<span class="hljs-number">33</span>);<br>        list.add(<span class="hljs-number">44</span>);<br>        list.add(<span class="hljs-number">66</span>);<br>        list.add(<span class="hljs-number">44</span>);<br>        list.add(<span class="hljs-number">55</span>);<br>        list.add(<span class="hljs-number">55</span>);<br><br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">newlist</span> <span class="hljs-operator">=</span> duplicateList(list);<br>        System.out.println(newlist);<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  List <span class="hljs-title function_">duplicateList</span><span class="hljs-params">(List list)</span>&#123;<br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-keyword">for</span> (Object obj:list)&#123;<br>            set.add(obj);<br>        &#125;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">for</span> (Object obj :set)&#123;<br>            list1.add(obj);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> list1;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>案例：编写一个程序要求打印10个 1-20的随机数要求随机数不能够重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编写一个程序要求打印10个 1-20的随机数要求随机数不能够重复</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exert02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>        <span class="hljs-keyword">while</span> (set.size()&lt;<span class="hljs-number">10</span>)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random()*(<span class="hljs-number">20</span>-<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>) ;<br>            set.add(random);<br>        &#125;<br><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.hasNext());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8、Map的实现类说明、HashMap的数据存储的特点"><a href="#8、Map的实现类说明、HashMap的数据存储的特点" class="headerlink" title="8、Map的实现类说明、HashMap的数据存储的特点"></a>8、Map的实现类说明、HashMap的数据存储的特点</h1><p>现实生活与开发中，我们常会看到这样的一类集合：用户ID与账户信息、学生姓名与考试成绩、IP地址与主机名等，这种一 一对应的关系，就称作映射。Java提供了专门的集合框架用来存储这种映射关系的对象，即java.util.Map接口。</p><ul><li><p>Map与Collection并列存在。用于保存具有映射关系的数据：key-value</p></li><li><p>Collection集合称为单列集合，元素是孤立存在的（理解为单身）。<br>Map集合称为双列集合，元素是成对存在的(理解为夫妻)。<br>Map 中的 key 和 value 都可以是任何引用类型的数据。但常用String类作为Map的“键”。</p></li><li><p>Map接口的常用实现类：HashMap、LinkedHashMap、TreeMap和&#96;&#96;Properties。其中，HashMap是 Map 接口使用频率最高&#96;的实现类。</p></li></ul><h1 id="9、Map中常用方法演示"><a href="#9、Map中常用方法演示" class="headerlink" title="9、Map中常用方法演示"></a>9、Map中常用方法演示</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加、修改操作：</span><br>Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key,Object value)</span>：将指定key-value添加到(或修改)当前map对象中<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map m)</span>:将m中的所有key-value对存放到当前map中<br><span class="hljs-comment">//删除操作：</span><br>Object <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span>：移除指定key的key-value对，并返回value<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>：清空当前map中的所有数据<br><span class="hljs-comment">//元素查询的操作：</span><br>Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span>：获取指定key对应的value<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsKey</span><span class="hljs-params">(Object key)</span>：是否包含指定的key<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsValue</span><span class="hljs-params">(Object value)</span>：是否包含指定的value<br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>：返回map中key-value对的个数<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>：判断当前map是否为空<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>：判断当前map和参数对象obj是否相等<br><span class="hljs-comment">//元视图操作的方法：</span><br>Set <span class="hljs-title function_">keySet</span><span class="hljs-params">()</span>：返回所有key构成的Set集合<br>Collection <span class="hljs-title function_">values</span><span class="hljs-params">()</span>：返回所有value构成的Collection集合<br>Set <span class="hljs-title function_">entrySet</span><span class="hljs-params">()</span>：返回所有key-value对构成的Set集合<br></code></pre></td></tr></table></figure><p>演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.map;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMapMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建 map对象</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-comment">//添加元素到集合</span><br>        map.put(<span class="hljs-string">&quot;黄晓明&quot;</span>, <span class="hljs-string">&quot;杨颖&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;李晨&quot;</span>, <span class="hljs-string">&quot;李小璐&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;李晨&quot;</span>, <span class="hljs-string">&quot;范冰冰&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<br>        System.out.println(map);<br><br>        <span class="hljs-comment">//删除指定的key-value</span><br>        System.out.println(map.remove(<span class="hljs-string">&quot;黄晓明&quot;</span>));<br>        System.out.println(map);<br><br>        <span class="hljs-comment">//查询指定key对应的value</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;邓超&quot;</span>));<br>        System.out.println(map.get(<span class="hljs-string">&quot;黄晓明&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-1Map-的主要实现类：HashMap"><a href="#9-1Map-的主要实现类：HashMap" class="headerlink" title="9.1Map 的主要实现类：HashMap"></a>9.1Map 的主要实现类：HashMap</h2><p> HashMap概述<br>HashMap是 Map 接口使用频率最高的实现类。<br>HashMap是线程不安全的。允许添加 null 键和 null 值。<br>存储数据采用的哈希表结构，底层使用一维数组+单向链表+红黑树进行key-value数据的存储。与HashSet一样，元素的存取顺序不能保证一致。<br>HashMap 判断两个key相等的标准是：两个 key 的hashCode值相等，通过 equals() 方法返回 true。<br>HashMap 判断两个value相等的标准是：两个 value 通过 equals() 方法返回 true。</p><p>添加你喜欢的歌手以及你喜欢他唱过的歌曲</p><p>例如：<img src="D:\JavaEE\素材\HashMap.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 9:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingerTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个HashMap用于保存歌手和其歌曲集</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">singers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//声明一组key,value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">singer1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;周杰伦&quot;</span>;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">songs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        songs1.add(<span class="hljs-string">&quot;双节棍&quot;</span>);<br>        songs1.add(<span class="hljs-string">&quot;本草纲目&quot;</span>);<br>        songs1.add(<span class="hljs-string">&quot;夜曲&quot;</span>);<br>        songs1.add(<span class="hljs-string">&quot;稻香&quot;</span>);<br>        <span class="hljs-comment">//添加到map中</span><br>        singers.put(singer1,songs1);<br>        <span class="hljs-comment">//声明一组key,value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">singer2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;陈奕迅&quot;</span>;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">songs2</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-string">&quot;浮夸&quot;</span>, <span class="hljs-string">&quot;十年&quot;</span>, <span class="hljs-string">&quot;红玫瑰&quot;</span>, <span class="hljs-string">&quot;好久不见&quot;</span>, <span class="hljs-string">&quot;孤勇者&quot;</span>);<br>        <span class="hljs-comment">//添加到map中</span><br>        singers.put(singer2,songs2);<br><br>        <span class="hljs-comment">//遍历map</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> singers.entrySet();<br>        <span class="hljs-keyword">for</span>(Object obj : entrySet)&#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry)obj;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">singer</span> <span class="hljs-operator">=</span> (String) entry.getKey();<br>            <span class="hljs-type">List</span> <span class="hljs-variable">songs</span> <span class="hljs-operator">=</span> (List) entry.getValue();<br><br>            System.out.println(<span class="hljs-string">&quot;歌手：&quot;</span> + singer);<br>            System.out.println(<span class="hljs-string">&quot;歌曲有：&quot;</span> + songs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10、Map案例"><a href="#10、Map案例" class="headerlink" title="10、Map案例"></a>10、Map案例</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>二级联动</p><p>将省份和城市的名称保存在集合中，当用户选择省份以后，二级联动，显示对应省份的地级市供用户选择。</p><p><img src="D:\JavaEE\素材\省份联动.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康  Email:shkstart@126.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021年5月7日上午12:26:59</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CityMap</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Map</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-keyword">static</span> &#123;<br>model.put(<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;北京&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;上海&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;天津&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;天津&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;重庆&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;重庆&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;黑龙江&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;哈尔滨&quot;</span>,<span class="hljs-string">&quot;齐齐哈尔&quot;</span>,<span class="hljs-string">&quot;牡丹江&quot;</span>,<span class="hljs-string">&quot;大庆&quot;</span>,<span class="hljs-string">&quot;伊春&quot;</span>,<span class="hljs-string">&quot;双鸭山&quot;</span>,<span class="hljs-string">&quot;绥化&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;吉林&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;长春&quot;</span>,<span class="hljs-string">&quot;延边&quot;</span>,<span class="hljs-string">&quot;吉林&quot;</span>,<span class="hljs-string">&quot;白山&quot;</span>,<span class="hljs-string">&quot;白城&quot;</span>,<span class="hljs-string">&quot;四平&quot;</span>,<span class="hljs-string">&quot;松原&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;河北&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;石家庄&quot;</span>,<span class="hljs-string">&quot;张家口&quot;</span>,<span class="hljs-string">&quot;邯郸&quot;</span>,<span class="hljs-string">&quot;邢台&quot;</span>,<span class="hljs-string">&quot;唐山&quot;</span>,<span class="hljs-string">&quot;保定&quot;</span>,<span class="hljs-string">&quot;秦皇岛&quot;</span>&#125;);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProvinceTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Set</span> <span class="hljs-variable">keySet</span> <span class="hljs-operator">=</span> CityMap.model.keySet();<br><span class="hljs-keyword">for</span>(Object s : keySet) &#123;<br>System.out.print(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;请选择你所在的省份：&quot;</span>);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">province</span> <span class="hljs-operator">=</span> scan.next();<br><br>String[] citys = (String[])CityMap.model.get(province);<br><span class="hljs-keyword">for</span>(String city : citys) &#123;<br>System.out.print(city + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;请选择你所在的城市：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> scan.next();<br>System.out.println(<span class="hljs-string">&quot;信息登记完毕&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11、TreeMap与Hashtable的子类"><a href="#11、TreeMap与Hashtable的子类" class="headerlink" title="11、TreeMap与Hashtable的子类"></a>11、TreeMap与Hashtable的子类</h1><h1 id="propertise的使用"><a href="#propertise的使用" class="headerlink" title="propertise的使用"></a>propertise的使用</h1><ul><li>TreeMap存储 key-value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 key-value 对处于有序状态。</li><li>TreeSet底层使用红黑树结构存储数据</li><li>TreeMap 的 Key 的排序：</li><li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li>定制排序：创建 TreeMap 时，构造器传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</li><li>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 1:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTreeMap</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 自然排序举例</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>();<br><br>        map.put(<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-number">45</span>);<br>        map.put(<span class="hljs-string">&quot;MM&quot;</span>,<span class="hljs-number">78</span>);<br>        map.put(<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-number">56</span>);<br>        map.put(<span class="hljs-string">&quot;GG&quot;</span>,<span class="hljs-number">89</span>);<br>        map.put(<span class="hljs-string">&quot;JJ&quot;</span>,<span class="hljs-number">99</span>);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-keyword">for</span>(Object entry : entrySet)&#123;<br>            System.out.println(entry);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 定制排序</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//按照User的姓名的从小到大的顺序排列</span><br><br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> User &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> User)&#123;<br>                    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> (User)o1;<br>                    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> (User)o2;<br><br>                    <span class="hljs-keyword">return</span> u1.name.compareTo(u2.name);<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入的类型不匹配&quot;</span>);<br>            &#125;<br>        &#125;);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>),<span class="hljs-number">67</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Rose&quot;</span>,<span class="hljs-number">23</span>),<span class="hljs-string">&quot;87&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">2</span>),<span class="hljs-number">88</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Eric&quot;</span>,<span class="hljs-number">18</span>),<span class="hljs-number">45</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Tommy&quot;</span>,<span class="hljs-number">44</span>),<span class="hljs-number">77</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-number">23</span>),<span class="hljs-number">88</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Maria&quot;</span>,<span class="hljs-number">18</span>),<span class="hljs-number">34</span>);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-keyword">for</span>(Object entry : entrySet)&#123;<br>            System.out.println(entry);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    举例：按照age从小到大的顺序排列，如果age相同，则按照name从大到小的顺序排列</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == o)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> User)&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)o;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.age - user.age;<br>            <span class="hljs-keyword">if</span>(value != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-built_in">this</span>.name.compareTo(user.name);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入的类型不匹配&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="12、Collection工具类的使用"><a href="#12、Collection工具类的使用" class="headerlink" title="12、Collection工具类的使用"></a>12、Collection工具类的使用</h1><ul><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法（均为static方法）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//排序操作：</span><br><br>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，<span class="hljs-type">int</span>， <span class="hljs-type">int</span>)：将指定 list 集合中的 i 处元素和 j 处元素进行交换<br><span class="hljs-comment">//查找</span><br><br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最小元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最小元素<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key,Comparator c)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">frequency</span><span class="hljs-params">(Collection c，Object o)</span>：返回指定集合中指定元素的出现次数<br><span class="hljs-comment">//复制、替换</span><br>    <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(List dest,List src)</span>：将src中的内容复制到dest中<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(List list，Object oldVal，Object newVal)</span>：使用新值替换 List 对象的所有旧值<br>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。<br><span class="hljs-comment">//添加</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection c,T… elements)</span>将所有指定元素添加到指定 collection 中。<br><span class="hljs-comment">//同步</span><br><br>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：<br></code></pre></td></tr></table></figure><h2 id="1、区分-collection-和-collections"><a href="#1、区分-collection-和-collections" class="headerlink" title="1、区分 collection 和  collections?"></a>1、区分 collection 和  collections?</h2><p>Collection 集合框架中的用于存储一个一个元素的接口，又分为List和Set等的子接口。</p><p>Collections 用于操作集合框架的一个工具类，包括Set 、List 、 Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//排序操作：</span><br><br>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，<span class="hljs-type">int</span>， <span class="hljs-type">int</span>)：将指定 list 集合中的 i 处元素和 j <br>    <br><span class="hljs-comment">//查找</span><br><br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最小元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最小元素<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key,Comparator c)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">frequency</span><span class="hljs-params">(Collection c，Object o)</span>：返回指定集合中指定元素的出现次数<br>    <br><span class="hljs-comment">//复制、替换</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(List dest,List src)</span>：将src中的内容复制到dest中<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(List list，Object oldVal，Object newVal)</span>：使用新值替换 List 对象的所有旧值<br>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。<br>    <br><span class="hljs-comment">//添加</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection c,T… elements)</span>将所有指定元素添加到指定 collection 中。<br>    <br><span class="hljs-comment">//同步</span><br>    <br>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14常用类</title>
    <link href="/2023/04/02/14%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2023/04/02/14%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="1、包装类WrapperType-java："><a href="#1、包装类WrapperType-java：" class="headerlink" title="1、包装类WrapperType.java："></a>1、包装类WrapperType.java：</h1><h2 id="01、针对八种基本数据类型相应的引用类型—包装类"><a href="#01、针对八种基本数据类型相应的引用类型—包装类" class="headerlink" title="01、针对八种基本数据类型相应的引用类型—包装类"></a>01、针对八种基本数据类型相应的引用类型—包装类</h2><h2 id="02、有类类的特点，就可以调用类中的方法"><a href="#02、有类类的特点，就可以调用类中的方法" class="headerlink" title="02、有类类的特点，就可以调用类中的方法"></a>02、有类类的特点，就可以调用类中的方法</h2><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Char</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><p>02、包装类和基本数据类型的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本数据类型-------&gt;包装类型   jdk5.0之后的</span><br><span class="hljs-comment">//基本数据类型---&gt;包装类型 （装箱）   反之就是拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>Interger integer2= m;  <span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">Interger</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">99</span>);  <span class="hljs-comment">//底层使用的是这个</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span>n;<br>System.out.println(n+<span class="hljs-number">100</span>);<br>System.out.println(n*<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">10</span>)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手动装箱  int --&gt; Integer</span><br><span class="hljs-type">int</span> n1= <span class="hljs-number">100</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer(n1);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(n1);<br><span class="hljs-comment">//手动拆箱  Integer ---&gt; int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br><br></code></pre></td></tr></table></figure><h2 id="3、包装类和String相互转换"><a href="#3、包装类和String相互转换" class="headerlink" title="3、包装类和String相互转换"></a>3、包装类和String相互转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1： Integer --&gt; String </span><br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i+<span class="hljs-string">&quot;&quot;</span>;<br>       <span class="hljs-comment">//方式二：</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> i.toString();  <span class="hljs-comment">//经常用的</span><br>       <span class="hljs-comment">//方式3</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br>       <br>       <span class="hljs-comment">//Strign ---&gt;转换为 包装类</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span>  Integer.parseInt(str4);  <span class="hljs-comment">//自动装箱</span><br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4);<span class="hljs-comment">//构造器</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-comment">// Integer 和 Character 有些常用的方法:</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                System.out.println(&quot;Integer.MIN_VALUE&quot;);  //返回最小值</span><br><span class="hljs-comment">                System.out.println(&quot;Integer.MAX_VALUE&quot;);   //返回最大值</span><br><span class="hljs-comment">                </span><br><span class="hljs-comment">                System.out.println(&quot;Charcter.isDigit(&#x27;a&#x27;));   //判断是不是数字</span><br><span class="hljs-comment">                System.out.println(&quot;Character.isLetter(&#x27;a&#x27;));   //判断是不是字母</span><br><span class="hljs-comment">                System.out.println(&quot;Character.isUpperCase(‘a’)); //判断是不是大写</span><br><span class="hljs-comment">                System.out.println(&quot;Character.isLowerCase(&#x27;a&#x27;));   //判断是不是小写</span><br><span class="hljs-comment">                 </span><br><span class="hljs-comment">                System.out.println(&quot;Character.isWhitespace(&#x27;a&#x27;));   //判断是不是空格</span><br><span class="hljs-comment">                System.out.println(&quot;Character.toLowerCase(&#x27;A&#x27;));   //转成小写</span><br><span class="hljs-comment">                System.out.println(&quot;Character.toUpperCase(&#x27;a&#x27;));     //转成大写</span><br><span class="hljs-comment">         */</span><br></code></pre></td></tr></table></figure><h1 id="2、String"><a href="#2、String" class="headerlink" title="2、String(*)"></a>2、String(*)</h1><p>效率上：</p><p>StringBuffer  &gt;  StringBuilder   &gt;  String</p><p>01、String用来保存字符串，</p><p>02、字符串是用双引号括起来; </p><p>03、字符串的字符内容存储在一个字符数组中的 value[] ；</p><p>04、String常用的构造器;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(String original);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[])a<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[],a,<span class="hljs-type">int</span>,startlndex,<span class="hljs-type">int</span> count)<br></code></pre></td></tr></table></figure><p>String的特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1、String 声明为final 的不可被继承</span><br><span class="hljs-comment">    2、String 实现了Serializable 接口：表示字符串是支持序列化的</span><br><span class="hljs-comment">    3、String 实现了comparable 接口，表示String 可以比较大小</span><br><span class="hljs-comment">    4、String 内部定义了 finally char[] value 用于存储字符串数据</span><br><span class="hljs-comment">    5、String 代表了不可变的字符序列；  简称：不可变性</span><br><span class="hljs-comment">     */</span><br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;  <span class="hljs-comment">//字面量   ；  </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;   <span class="hljs-comment">//s1 和 s2指向的是同一地址值</span><br>    s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <br>    System.out.println(s1); <span class="hljs-comment">//hello</span><br>    System.out.println(s2);   <span class="hljs-comment">//abc</span><br>    System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    s3 += <span class="hljs-string">&quot;def&quot;</span>;  <span class="hljs-comment">//不是在abc 后面拼接的而是 新造的</span><br>    System.out.println(s3); <span class="hljs-comment">//abcdef</span><br>    System.out.println(<span class="hljs-string">&quot;=====================&quot;</span>);<br>        <br>    <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    s4.replace(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>);<br>    System.out.println(s4);<br>    System.out.println(s1);<br></code></pre></td></tr></table></figure><h2 id="01、问题：String内存解析"><a href="#01、问题：String内存解析" class="headerlink" title="01、问题：String内存解析"></a>01、问题：String内存解析</h2><p>String  s1 &#x3D;”abc”  和 String  s2 &#x3D; new String(“abc”)的区别？</p><p>s1 和 s2 所指向的 地址值不一样； s1 直接指向常量区的 abc ;  s2先指向堆空间中new出来的对象，再从堆空间中指向 常量区</p><p><img src="D:\JavaEE\素材\String内存解析.jpg" alt="String内存解析"></p><h2 id="02、String不同拼接操作对比："><a href="#02、String不同拼接操作对比：" class="headerlink" title="02、String不同拼接操作对比："></a>02、String不同拼接操作对比：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaEE&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>  <span class="hljs-comment">//相当于new 一个对象</span><br>    <br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaEE123&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;java&quot;</span>+s2;<br>System.out.println(s1==s4);  <span class="hljs-comment">//false</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、常量 + 常量 结果任然存储在字符串常量池中。这儿的猖=常量可能是字面量，也可能是final修饰的常量。</span><br><span class="hljs-comment">2、常量 + 变量 或者 变量 +变量 都会通过 new的方式 创建一个新的字符串，返回堆空间中，这个字符串对象的地址</span><br><span class="hljs-comment">3、调用字符串的intern():返回的是字符串常量池中的地址</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>基本数据类型传的是基本的数据，引用数据类型传的是地址值</p><h2 id="03、String传参"><a href="#03、String传参" class="headerlink" title="03、String传参:"></a>03、String传参:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(oriqinal:<span class="hljs-string">&quot;good&quot;</span>);<br>String <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span>&#123;<br>    <span class="hljs-type">char</span> [] = &#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span>&#123;<br>        str = <span class="hljs-string">&quot;test ok&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;b&quot;</span>;     <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringTest</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTest</span>();<br>    System.out.println(ex.str);    <span class="hljs-comment">//good</span><br>    System.out.println(ex.ch);     <span class="hljs-comment">//best</span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04、String常用方法"><a href="#04、String常用方法" class="headerlink" title="04、String常用方法"></a>04、String常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br>       System.out.println(s1.length());   <span class="hljs-comment">//返回字符串长度</span><br>       System.out.println(s1.charAt(<span class="hljs-number">0</span>));   <span class="hljs-comment">//返回某个索引的值</span><br>       System.out.println(s1.isEmpty());  <span class="hljs-comment">//判断是否是空字符串</span><br>       System.out.println(s1);<br><br>       String s2= s1.toLowerCase();    <span class="hljs-comment">//将String中的所有字符串转换为小写</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s2.toUpperCase();  <span class="hljs-comment">//将字符串的所有的字符串转换为大写</span><br>       System.out.println(s1);<br>       System.out.println(s2);<br>       <br>       <span class="hljs-comment">//boolean equals(Object obj) 比较字符串的内容是否相同</span><br>       <span class="hljs-comment">//boolean  aqualsIngnoreCase(string  anotherString)  //比较字符串的内容是否相同 ，但是忽略大小写</span><br>     <span class="hljs-comment">//  String concat(String str) 将指定的字符串连接到此字符串的结尾。等价于用 ‘+’；</span><br>       <span class="hljs-comment">// int compareTo(String anotherString):比较俩个字符串的大小</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span>  String(original:<span class="hljs-string">&quot;abe&quot;</span>);<br>    System.out.println(s5.compareTo(s6)); <span class="hljs-comment">// s5 大就为正数  s6大就为 负数 </span><br>      <span class="hljs-comment">// String substring(int beginIndex):  返回一个新的字符串，从beginIndex到最后</span><br>      <span class="hljs-comment">// String substring(int beginIndex，int endIndex):  返回一个新的字符串，从beginIndex到 endIndex结束 不包含最后的endIndex      </span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> boolean endWith(String suffix) 测试字符串是否以指定的后缀结束</span><br><span class="hljs-comment"> boolean startWith(String prefix) 测试字符串是否以指定的前缀开始</span><br><span class="hljs-comment"> boolean startWith(String prefix,int toffset) </span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>*** String  和 StringBuffer 以及 StringBuilder的使用场景***</p><p>1、开发中需要频繁的针对于字符串进行增删改查的操作，建议使用StringBuffer 或StringBuilder替换String 因为使用String效率低</p><p>2、如果开发中，不涉及线程安全问题建议使用StringBuilder替换StringBuffer</p><h1 id="3、StringBuffer（-）"><a href="#3、StringBuffer（-）" class="headerlink" title="3、StringBuffer（*）"></a>3、StringBuffer（*）</h1><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">增（1）StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串追加长度的方式拼接</span><br><span class="hljs-comment">删（2）StringBuffer delete(int start, int end)：删除[start,end)之间字符</span><br><span class="hljs-comment">（3）StringBuffer deleteCharAt(int index)：删除[index]位置字符</span><br><span class="hljs-comment">（4）StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str</span><br><span class="hljs-comment">（5）void setCharAt(int index, char c)：替换[index]位置字符</span><br><span class="hljs-comment">查（6）char charAt(int index)：查找指定index位置上的字符</span><br><span class="hljs-comment">插（7）StringBuffer insert(int index, xx)：在[index]位置插入xx</span><br><span class="hljs-comment">长度（8）int length()：返回存储的字符数据的长度</span><br><span class="hljs-comment">（9）StringBuffer reverse()：反转</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>其他API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">（1）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标</span><br><span class="hljs-comment">（2）int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标</span><br><span class="hljs-comment">（3）int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标</span><br><span class="hljs-comment">（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标</span><br><span class="hljs-comment">（5）String substring(int start)：截取当前字符序列[start,最后]</span><br><span class="hljs-comment">（6）String substring(int start, int end)：截取当前字符序列[start,end)</span><br><span class="hljs-comment">（7）String toString()：返回此序列中数据的字符串表示形式</span><br><span class="hljs-comment">（8）void setLength(int newLength) ：设置当前字符序列长度为newLength</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    s.append(<span class="hljs-string">&quot;hello&quot;</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-string">&#x27;a&#x27;</span>).append(<span class="hljs-number">12</span>).append(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>    System.out.println(s);<br>    System.out.println(s.length());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;java&quot;</span>);<br>    s.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;chailinyan&quot;</span>);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.delete(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    s.deleteCharAt(<span class="hljs-number">4</span>);<br>    System.out.println(s);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.reverse();<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.setCharAt(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.setLength(<span class="hljs-number">30</span>);<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、StringBuilder（-）"><a href="#4、StringBuilder（-）" class="headerlink" title="4、StringBuilder（*）"></a>4、StringBuilder（*）</h1><h1 id="5、Math"><a href="#5、Math" class="headerlink" title="5、Math"></a>5、Math</h1><h1 id="6、Data、Calender、LocalDate"><a href="#6、Data、Calender、LocalDate" class="headerlink" title="6、Data、Calender、LocalDate"></a>6、Data、Calender、LocalDate</h1><h2 id="1、时间戳"><a href="#1、时间戳" class="headerlink" title="1、时间戳"></a>1、时间戳</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">System类提供的public static long <span class="hljs-built_in">currentTimeMillis</span>()：用来返回当前时间与<span class="hljs-number">1970</span>年<span class="hljs-number">1</span>月<span class="hljs-number">1</span>日<span class="hljs-number">0</span>时<span class="hljs-number">0</span>分<span class="hljs-number">0</span>秒之间以毫秒为单位的时间差。<br><br>此方法适于计算时间差。<br>计算世界时间的主要标准有：<br><br><span class="hljs-function"><span class="hljs-title">UTC</span><span class="hljs-params">(Coordinated Universal Time)</span></span><br><span class="hljs-function"><span class="hljs-title">GMT</span><span class="hljs-params">(Greenwich Mean Time)</span></span><br><span class="hljs-function"><span class="hljs-title">CST</span><span class="hljs-params">(Central Standard Time)</span></span><br></code></pre></td></tr></table></figure><h2 id="2、Data"><a href="#2、Data" class="headerlink" title="2、Data"></a>2、Data</h2><p> java.utiil.Data</p><p>表示特定的瞬间，精确到毫秒。</p><p>构造器：</p><ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。</li><li>Date(long 毫秒数)：把该毫秒值换算成日期时间对象</li></ul><p>常用方法</p><ul><li>getTime(): 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li><li>toString(): 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</li><li>其它很多方法都过时了。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    System.out.println(d);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(time);<span class="hljs-comment">//1559806982971</span><br>    <span class="hljs-comment">//当前系统时间距离1970-1-1 0:0:0 0毫秒的时间差，毫秒为单位</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d.getTime();<br>    System.out.println(time);<span class="hljs-comment">//1559807047979</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-number">1559807047979L</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>    System.out.println(d);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> Long.MAX_VALUE;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>    System.out.println(d);<br>&#125;<br></code></pre></td></tr></table></figure><p>java.text.SimpleDateFormat</p><p>java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</p><ul><li>可以进行格式化：日期 –&gt; 文本</li><li>可以进行解析：文本 –&gt; 日期</li></ul><p>构造器：</p><ul><li>SimpleDateFormat() ：默认的模式和语言环境创建对象</li><li>public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象</li></ul><p>格式化：</p><ul><li>public String format(Date date)：方法格式化时间对象date</li></ul><p>解析：</p><ul><li>public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。</li></ul><h2 id="3、calendar"><a href="#3、calendar" class="headerlink" title="3、calendar"></a>3、calendar</h2><p>calendar 可以用来输出当前天是 一个月的哪一天，是一年中的哪一天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前天为 2023/3/14</span><br><span class="hljs-meta">@Test</span><br>      <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>          System.out.println(calendar.get(Calendar.DAY_OF_MONTH));  <span class="hljs-comment">//14</span><br>          System.out.println(calendar.get(Calendar.DAY_OF_YEAR));  <span class="hljs-comment">//73</span><br><br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="4、练习："><a href="#4、练习：" class="headerlink" title="4、练习："></a>4、练习：</h2><p>如何将一个java.util.Date的实例转换为java.sql.date的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>     <span class="hljs-comment">//如何将一个java.util.Date的实例转换为java.sql.date的实例</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>   Date date7=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   java.sql.<span class="hljs-type">Date</span> <span class="hljs-variable">date8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(date7.getTime());<br>         System.out.println(date8); <span class="hljs-comment">//2023-03-14</span><br><br>     &#125;<br></code></pre></td></tr></table></figure><p>举例：</p><p>把 java.unit.Date 转换为java.sql.Date ;并输出结果；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tet9</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">Date</span> <span class="hljs-variable">date9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(date9);  <span class="hljs-comment">//Tue Mar 14 19:19:37 CST 2023</span><br>       <span class="hljs-type">Date</span>  <span class="hljs-variable">date10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(date9.getTime());<br>        System.out.println(date10);  <span class="hljs-comment">//2023-03-14</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="5、LocalDate、LocalTime、LocalDateTime"><a href="#5、LocalDate、LocalTime、LocalDateTime" class="headerlink" title="5、LocalDate、LocalTime、LocalDateTime"></a>5、LocalDate、LocalTime、LocalDateTime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前的时间 </span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br>          <span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br>          <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <br>          System.out.println(localTime);  <span class="hljs-comment">//19:32:29.765</span><br>          System.out.println(localDate);  <span class="hljs-comment">//2023-03-14</span><br>          System.out.println(localDateTime);  <span class="hljs-comment">//2023-03-14T19:32:29.765</span><br>      &#125;<br></code></pre></td></tr></table></figure><h1 id="7、System类"><a href="#7、System类" class="headerlink" title="7、System类"></a>7、System类</h1><h1 id="8、Arrays类"><a href="#8、Arrays类" class="headerlink" title="8、Arrays类"></a>8、Arrays类</h1><h1 id="9、BigInteger-BigDecimal（了解）"><a href="#9、BigInteger-BigDecimal（了解）" class="headerlink" title="9、BigInteger BigDecimal（了解）"></a>9、BigInteger BigDecimal（了解）</h1><h1 id="10、比较器-对象排序"><a href="#10、比较器-对象排序" class="headerlink" title="10、比较器(对象排序)"></a>10、比较器(对象排序)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本数据类型的数据（除boolean类型外）需要比较大小的话，之间使用比较运算符即可，但是引用数据类型是不能直接使用比较运算符来比较大小的?</span><br><br><span class="hljs-comment">//引用数据类型，通过比较他们的属性来比</span><br></code></pre></td></tr></table></figure><h2 id="01、Comparable"><a href="#01、Comparable" class="headerlink" title="01、Comparable"></a>01、Comparable</h2><p>Comparable 的典型实现：(默认都是从小到大排列的)</p><ul><li><p>String：按照字符串中首位字符的Unicode值进行比较</p></li><li><p>Character：按照首位字符的Unicode值来进行比较</p></li><li><p>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较<br>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p></li><li><p>Date、Time等：后面的日期时间比前面的日期时间大</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>      String[] arr= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;小王&quot;</span>,<span class="hljs-string">&quot;小戴&quot;</span>&#125;;<br>      Arrays.sort(arr);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>          System.out.println(arr[i]);  <span class="hljs-comment">//abc、def 、小戴、小王</span><br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object obj)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、Comparator"><a href="#02、Comparator" class="headerlink" title="02、Comparator"></a>02、Comparator</h2><ul><li>思考</li><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码（例如：一些第三方的类，你只有.class文件，没有源文件）</li><li>如果一个类，实现了Comparable接口，也指定了两个对象的比较大小的规则，但是此时此刻我不想按照它预定义的方法比较大小，但是我又不能随意修改，因为会影响其他地方的使用，怎么办？</li><li>JDK在设计类库之初，也考虑到这种情况，所以又增加了一个java.util.Comparator接口。强行对多个对象进行整体排序的比较。</li><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Student[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">5</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-number">23</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;熊大&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">22</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">75</span>, <span class="hljs-number">25</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">24</span>);<br>        arr[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;熊二&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">18</span>);<br><br><br>        System.out.println(<span class="hljs-string">&quot;所有学生：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;按照成绩排序&quot;</span>);<br>        <span class="hljs-type">StudentScoreComparator</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentScoreComparator</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sc.compare(arr[j], arr[j + <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13异常</title>
    <link href="/2023/04/02/13%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/04/02/13%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、什么是异常"><a href="#1、什么是异常" class="headerlink" title="1、什么是异常"></a>1、什么是异常</h1><p>非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，</p><p>意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</p><p>异常指程序运行中出现的不期而至的各种状况,如:文件找不到、网络连接失败、非法参数等。</p><p>异常发生在程序运行期间,它影响了正常的程序执行流程。</p><p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error ；如果你用</p><p>System.out.println(11&#x2F;0) ，那么你是因为你用0做了除数，会抛出java.lang.ArithmeticException 的异常</p><p><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p><p><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</p><p><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的</p><h1 id="2、异常的体系结构"><a href="#2、异常的体系结构" class="headerlink" title="2、异常的体系结构"></a>2、异常的体系结构</h1><p><img src="D:\JavaEE\素材\异常.jpg" alt="异常"></p><h2 id="1、Error"><a href="#1、Error" class="headerlink" title="1、Error:"></a>1、Error:</h2><p>Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</p><p>比如说：</p><p> Java虚拟机运行错误（ Virtual MachineError ），当JVM不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError 。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</p><p>还有发生在虚拟机试图执行应用时，如类定义错误（ NoClassDefFoundError ）、链接错误（ LinkageError ）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。</p><p>对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在Java中，错误通常是使用 Error 的子类描述。</p><h2 id="2、Exception"><a href="#2、Exception" class="headerlink" title="2、Exception"></a>2、Exception</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在 Exception 分支中有一个重要的子类 RuntimeException （运行时异常），该类型的异常自动为你所编写的程序定义 </span><br><span class="hljs-comment">ArrayIndexOutOfBoundsException （数组下标越界）、</span><br><span class="hljs-comment">NullPointerException （空指针异常）、</span><br><span class="hljs-comment">ArithmeticException （算术异常）、 </span><br><span class="hljs-comment">MissingResourceException （丢失资源）、</span><br><span class="hljs-comment">ClassNotFoundException （找不到类）等异常，</span><br><span class="hljs-comment">这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</span><br><span class="hljs-comment">这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；而RuntimeException 之外的异常我们统称为非运行时异常，类型上属于 Exception 类及其子类，从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException 、 SQLException 等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。</span><br><span class="hljs-comment">=========================Error  和  Exception ====================</span><br><span class="hljs-comment">注意： Error 和 Exception 的区别： Error 通常是灾难性的致命的错误，是程序无法控制和</span><br><span class="hljs-comment">处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程； Exception 通常情况下是可</span><br><span class="hljs-comment">以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="3、Java异常处理"><a href="#3、Java异常处理" class="headerlink" title="3、Java异常处理"></a>3、Java异常处理</h1><p>1、抛出异常</p><p>设置了 try catch 遇到异常了，会主动捕获异常，程序还是会继续运行，没有使用 try catch 程序就会停止</p><p>使用try catch 后就可以在小范围里面解决掉就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>().test(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>      &#125;     <br>      <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-comment">//假设这个方法中，处理不了这个异常，方法上抛出异常</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span> <span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>          <span class="hljs-keyword">if</span> (b==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//throw  throws</span><br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<span class="hljs-comment">//主动抛出异常，一般在方法中使用</span><br>          &#125;<br>          System.out.println(a/b);<br>      &#125;<br>  <span class="hljs-comment">//Ctrl + Alt + T  选中 按住快捷键 选择 try catch</span><br>      <span class="hljs-comment">// 如果明显的知道会出现异常</span><br></code></pre></td></tr></table></figure><p>2、捕获异常</p><p>异常处理的5个关键字：try ,catch ,finally ,throw ,throws</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a= <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-comment">//Ctrl + Alt + T  选中 按住快捷键 选择 try catch</span><br>       <span class="hljs-comment">// 如果明显的知道会出现异常</span><br>       <span class="hljs-keyword">try</span>&#123;  <span class="hljs-comment">//try用来监控代码块</span><br>       &#125;<span class="hljs-keyword">catch</span>(Error e)&#123;  <span class="hljs-comment">//try里面的代码出现错误了，就执行catch (想要捕获的异常的类型)，捕获异常</span><br>           System.out.println(<span class="hljs-string">&quot;程序出现异常，变量b不能为0&quot;</span>);  <span class="hljs-comment">//try 和catch 一般都是一起出现.</span><br>       &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>           System.out.println(<span class="hljs-string">&quot;Exceptiion&quot;</span>);<br>       &#125;<span class="hljs-keyword">catch</span>(Throwable t)&#123;<br>           System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>       &#125;<span class="hljs-keyword">finally</span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);  <span class="hljs-comment">//finally是用来处理一些善后的事情</span><br>       &#125;<br>       System.out.println(a/b);<br></code></pre></td></tr></table></figure><h1 id="4、自定义异常"><a href="#4、自定义异常" class="headerlink" title="4、自定义异常"></a>4、自定义异常</h1><p>用户还可以自定义异常。(一般情况下不需要自定义)</p><p>用户自定义异常类，只需继承 Exception 类即可。</p><p>在程序中使用自定义异常类，大体可分为以下几个步骤:</p><p>1.创建自定义异常类。</p><p>2.在方法中通过 throw 关键字抛出异常对象。</p><p>3.如果在当前抛出异常的方法中处理异常，可以使用 try-catch 语句捕获并处理；否则在方法的</p><p>4.声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</p><p>5.在出现异常方法的调用者中捕获并处理异常</p><p>【举例】：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> detail;<br>   MyException(<span class="hljs-type">int</span> a)&#123;<br>      detail = a;<br>&#125;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException [&quot;</span>+ detail + <span class="hljs-string">&quot;]&quot;</span>;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMyException</span>&#123;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException&#123;<br>       System.out.println(<span class="hljs-string">&quot;Called compute(&quot;</span> + a + <span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">10</span>)&#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(a);<br>   &#125;<br>       System.out.println(<span class="hljs-string">&quot;Normal exit!&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>  <span class="hljs-keyword">try</span>&#123;<br>      compute(<span class="hljs-number">1</span>);<br>      compute(<span class="hljs-number">20</span>);<br>       &#125;<span class="hljs-keyword">catch</span>(MyException e)&#123;<br>           System.out.println(<span class="hljs-string">&quot;抛出的异常 &quot;</span> + e);<br>     &#125;<br>   &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>【结果】：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Called <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span><br>Normal exit!<br>Called <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span><br>Caught MyException [<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><p><strong>实际中的经验总结：</strong></p><p>1、处理运行异常时，采用逻辑去合理的规避同时辅助 try-cash 处理</p><p>2、在多重 catch 块后面，可以加一个 catch（Exception）来处理可能会被遗漏的异常</p><p>3、对于不确定的代码，也可以加上 try catch ,处理潜在的异常</p><p>4、尽量去处理异常，切记只是简单地调用 printStackTrace()</p><p>5、如何处理异常，要根据不同的业务需求和异常类型去决定</p><p>6、尽量添加finally 语句块去释放占用的资源</p><h1 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h1>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12面向对象</title>
    <link href="/2023/04/02/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2023/04/02/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="1、初识面向对象："><a href="#1、初识面向对象：" class="headerlink" title="1、初识面向对象："></a>1、初识面向对象：</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><h4 id="01、-什么是面向对象"><a href="#01、-什么是面向对象" class="headerlink" title="01、  什么是面向对象"></a>0<strong>1</strong>、  <strong>什么是面向对象</strong></h4><p> Java的编程语言是面向对象的，采用这种语言进行编程称为面向对象编程(Object-OrientedProgramming, OOP)。</p><p><strong>面向对象编程的本质就是</strong>：<strong>以类的方式组织代码</strong>，<strong>以对象的组织</strong> ( <strong>封装</strong> ) <strong>数据</strong>。</p><p><strong>抽象</strong> <strong>(abstract)</strong></p><p>忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用关注细节。</p><p>例如:要设计一个学生成绩管理系统，那么对于学生，只关心他的班级、学号、成绩等，而不用去关心他的身高、体重这些信息。 抽象是什么?就是将多个物体共同点归纳出来，就是抽出像的部分！</p><h4 id="01、封装-Encapsulation"><a href="#01、封装-Encapsulation" class="headerlink" title="01、封装 (Encapsulation)"></a>01、<strong>封装</strong> <strong>(Encapsulation)</strong></h4><p>封装是面向对象的特征之一，是对象和类概念的主要特性。封装是把过程和数据包围起来，对数据的访问只能通过指定的方式。</p><p>封装保证了模块具有较好的独立性，使得程序维护修改较为容易。对应用程序的修改仅限于类的内部，因而可以将应用程序修改带来的影响减少到最低限度。</p><h4 id="02、继承-inheritance"><a href="#02、继承-inheritance" class="headerlink" title="02、继承 (inheritance)"></a>02、<strong>继承</strong> <strong>(inheritance)</strong></h4><p>继承是一种联结类的层次模型，并且允许和支持类的重用，它提供了一种明确表述共性的方法。</p><p>新类继承了原始类后,新类就继承了原始类的特性，新类称为原始类的派生类(子类)，而原始类称为新类的基类(父类)。</p><p>派生类(子类)可以从它的基类(父类)那里继承方法和实例变量，并且派生类(子类)中可以修改或增加新的方法使之更适合特殊的需要继承性很好的解决了软件的可重用性问题。比如说，所有的Windows应用程序都有一个窗口，它们可以看作都是从一个窗口类派生出来的。但是有的应用程序用于文字处理，有的应用程序用于绘图，这是由于派生出了不同的子类，各个子类添加了不同的特性。</p><h4 id="03、多态-polymorphism"><a href="#03、多态-polymorphism" class="headerlink" title="03、多态 (polymorphism)"></a>03、<strong>多态</strong> <strong>(polymorphism)</strong></h4><p>多态性是指允许不同类的对象对同一消息作出响应。</p><p>多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p><h1 id="2、方法的回顾和加深："><a href="#2、方法的回顾和加深：" class="headerlink" title="2、方法的回顾和加深："></a>2、方法的回顾和加深：</h1><h1 id="3、对象的创建："><a href="#3、对象的创建：" class="headerlink" title="3、对象的创建："></a>3、对象的创建：</h1><h2 id="01、使用-new-关键字创建对象"><a href="#01、使用-new-关键字创建对象" class="headerlink" title="01、使用 new  关键字创建对象"></a>01、<strong>使用</strong> <strong>new</strong>  <strong>关键字创建对象</strong></h2><p>使用new关键字创建的时候，除了分配内存空间之外，还会给 创建好的对象 进行默认的初始化 以 及对类中构造器的调用。</p><p>创建一个类 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//属性： 字段</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;在学习&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用上面的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo02;<br><span class="hljs-comment">//一个项目只存在一个main方法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//类：抽象的实例化</span><br>        <span class="hljs-comment">// 类实例化后会返回一个自己的对象</span><br>        <span class="hljs-comment">//student对象就是一个student类的具体实例</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xlaodal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        xiaoming.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>        xlaodal.age = <span class="hljs-number">3</span>;<br>        <br>        System.out.println(xiaoming.name);<br>        System.out.println(xlaodal.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、构造器："><a href="#02、构造器：" class="headerlink" title="02、构造器："></a>02、构造器：</h2><p>构造器：</p><p>1、和类名想相同</p><p>2、没有返回值</p><p>作用：</p><p>1、new 本质在调用构造器</p><p>2、初始化对象的值 </p><p>注意：定义了有参构造后，如果想使用无参构造，显示的定义一个无参的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age ;<br>    <br>    <span class="hljs-comment">//一个类即使什么都不写，都会默认生成一个构造器</span><br>    <span class="hljs-comment">// 构造器的作用：</span><br>    <span class="hljs-comment">//1、使用 new 关键字，本质是在调用构造器</span><br>    <span class="hljs-comment">//2、构造器用来初始化值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;xlaodal&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//有参构造，一旦定义了有参构造，午餐就必须显示定义</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name= name;<br>    &#125;<br>    <span class="hljs-comment">// alt + F12 +Fn  快捷间可以用来生成构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、面向对象三大特性："><a href="#4、面向对象三大特性：" class="headerlink" title="4、面向对象三大特性："></a>4、面向对象三大特性：</h1><h2 id="1、封装：（高内聚，低耦合）"><a href="#1、封装：（高内聚，低耦合）" class="headerlink" title="1、封装：（高内聚，低耦合）"></a>1、封装：（高内聚，低耦合）</h2><p>制造厂家为了方便我们使用电视，把复杂的内部细节全部封装起来，只给我们暴露简单的接口，比如：电源开关。需要让用户知道的暴露出来，不需要让用户了解的全部隐藏起来。这就是封装。白话：该露的露，该藏的藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#**专业：我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用。</span><br></code></pre></td></tr></table></figure><p>2、<strong>封装（数据的隐藏）</strong></p><p>在定义一个对象的特性的时候，有必要决定这些特性的可见性，即哪些特性对外部是可见的，哪些特性用于表示内部状态。</p><p>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</p><p>属性私有： get&#x2F;set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo04;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-comment">//属性私有</span><br>    <span class="hljs-keyword">private</span> String name;  <span class="hljs-comment">// 名字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;   <span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// get set 就是提供一些可以操作这些属性的方法</span><br>    <span class="hljs-comment">//学习 public 的get set方法</span><br><br>    <span class="hljs-comment">//get获得这个数据</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;;<br>    <span class="hljs-comment">//srt 给这个数据设置值：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name )</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>    &#125;<br>        <span class="hljs-comment">//alt + F12 可以自动生成的 get set 方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>            <span class="hljs-built_in">this</span>.sex = sex;<br>        &#125;        <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//睡觉</span><br>&#125;<br></code></pre></td></tr></table></figure><p>良好的封装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1.提高程序的安全性，保护数据；</span><br><span class="hljs-comment">#2、隐藏代码的实现细节</span><br><span class="hljs-comment">#3、同一接口</span><br><span class="hljs-comment">#4、系统的可维护性增加</span><br></code></pre></td></tr></table></figure><p><strong>3、方法重载：</strong></p><p>类中有多个方法,有着相同的方法名,但是方法的参数各不相同,这种情况被称为方法的重载。方法的重载可以提供方法调用的灵活性。</p><p>思考：HelloWorld中的System.out.println()方法，为什么可以把不同类型的参数传给这个方法?</p><p>【演示：查看println方法的重载】</p><p>例如:</p><ol><li>方法名必须相同</li><li>参数列表必须不同(参数的类型、个数、顺序的不同</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str,<span class="hljs-type">double</span> d)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str,<span class="hljs-type">double</span> d)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">double</span> d,Strig str)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h2><p>java中只有单继承，而没有多继承：  （一个儿子只能有一个爸爸，但是一个爸爸可以有多个儿子）</p><p><strong>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</strong></p><p><strong>为什么需要继承？继承的作用？</strong></p><p>第一好处：继承的本质在于抽象。类是对对象的抽象，继承是对某一批类的抽象。</p><p>第二好处：为了提高代码的复用性。</p><p>extands的意思是“扩展”。子类是父类的扩展。</p><p>【注】JAVA中类只有单继承，没有多继承！ 接口可以多继承！</p><p>1、继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。</p><p>2、继承关系的俩个类，一个为子类(派生类),一个为父类(基类)。子类继承父类,使用关键字extends来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、子类和父类之间-从意义上讲应该具有”is-a”的关系"><a href="#3、子类和父类之间-从意义上讲应该具有”is-a”的关系" class="headerlink" title="3、子类和父类之间,从意义上讲应该具有”is a”的关系."></a>3、子类和父类之间,从意义上讲应该具有”is a”的关系.</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">student is a person<br>dog is a animal<br></code></pre></td></tr></table></figure><h5 id="4、类和类之间的继承是单继承"><a href="#4、类和类之间的继承是单继承" class="headerlink" title="4、类和类之间的继承是单继承"></a>4、类和类之间的继承是单继承</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个子类只能&quot;直接&quot;继承一个父类,就像是一个人只能有一个亲生父亲</span><br><span class="hljs-comment">//一个父类可以被多子类继承,就像一个父亲可以有多个孩子</span><br><span class="hljs-comment">//注:java中接口和接口之间,有可以继承,并且是多继承。</span><br></code></pre></td></tr></table></figure><h5 id="5、父类中的属性和方法可以被子类继承"><a href="#5、父类中的属性和方法可以被子类继承" class="headerlink" title="5、父类中的属性和方法可以被子类继承"></a>5、父类中的属性和方法可以被子类继承</h5><h5 id="6、supper关键字："><a href="#6、supper关键字：" class="headerlink" title="6、supper关键字："></a>6、supper关键字：</h5><p>在子类中可以使用this来表示访问或调用子类中的属性或方法,使用super就表示访问或调用父类中的属性和方法。</p><p>【访问父类中的属性】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zs&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lisi&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tes</span><span class="hljs-params">(String name)</span>t&#123;<br>System.out.println(name);<br>System.out.println(<span class="hljs-built_in">this</span>.name);<br>System.out.println(<span class="hljs-built_in">super</span>.name);  <span class="hljs-comment">//访问父类，</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【调用父类中的方法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Person&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Student&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>print();<br><span class="hljs-built_in">this</span>.print();<br><span class="hljs-built_in">super</span>.print();  <span class="hljs-comment">// 调用父类，默认调用父类的无参</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【super使用的注意的地方】</p><ol><li><p>用super调用父类构造方法，必须是构造方法中的第一个语句。</p></li><li><p>super只能出现在子类的方法或者构造方法中。</p></li><li><p>super 和 this 不能够同时调用构造方法。（因为this也是在构造方法的第一个语句）</p><p>【super 和 this 的区别】</p><ol><li><p>代表的事物不一样:</p><p>this：代表所属方法的调用者对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>：代表父类对象的引用空间。<br></code></pre></td></tr></table></figure><ol start="2"><li>使用前提不一致：</li></ol><p>this：在非继承的条件下也可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>：只能在继承的条件下才能使用。<br></code></pre></td></tr></table></figure><ol start="3"><li>调用构造方法：</li></ol><p>this：调用本类的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>：调用的父类的构造方法<br></code></pre></td></tr></table></figure><h5 id="7、方法的重写："><a href="#7、方法的重写：" class="headerlink" title="7、方法的重写："></a>7、方法的重写：</h5><p>重写：子类重写父类的方法；方法体不同；</p><ol><li><p>方法重写只存在于子类和父类(包括直接父类和间接父类)之间。在同一个类中方法只能被重载，不能被重写.</p></li><li><p>静态方法不能重写</p></li><li><p>父类的静态方法不能被子类重写为非静态方法 &#x2F;&#x2F;编译出错</p></li><li><p>父类的非静态方法不能被子类重写为静态方法；&#x2F;&#x2F;编译出错</p></li><li><p>子类可以定义与父类的静态方法同名的静态方法(但是这个不是覆盖)</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">A类继承B类 A和B中都一个相同的静态方法test<br><span class="hljs-type">B</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.test();<span class="hljs-comment">//调用到的是B类中的静态方法test</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.test();<span class="hljs-comment">//调用到的是A类中的静态方法test</span><br><span class="hljs-comment">//可以看出静态方法的调用只和变量声明的类型相关</span><br><span class="hljs-comment">//这个和非静态方法的重写之后的效果完全不同</span><br></code></pre></td></tr></table></figure><p>私有方法不能被子类重写，子类继承父类后,是不能直接访问父类中的私有方法的,那么就更谈不上重写了。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//编译通过,但这不是重写,只是俩个类中分别有自己的私有方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><p>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. 重写的语法</span><br><span class="hljs-comment">1. 方法名必须相同</span><br><span class="hljs-comment">2. 参数列表必须相同</span><br><span class="hljs-comment">3. 访问控制修饰符可以被扩大,但是不能被缩小： public protected default private</span><br><span class="hljs-comment">4. 抛出异常类型的范围可以被缩小,但是不能被扩大ClassNotFoundException ---&gt; Exception</span><br><span class="hljs-comment">5. 返回类型可以相同,也可以不同,如果不同的话,子类重写后的方法返回类型必须是父类方法返回类型的子类型</span><br><span class="hljs-comment">例如：父类方法的返回类型是Person,子类重写后的返回类可以是Person也可以是Person的</span><br><span class="hljs-comment">子类型</span><br><span class="hljs-comment">注：一般情况下,重写的方法会和父类中的方法的声明完全保持一致,只有方法的实现不同。(也就是大括</span><br><span class="hljs-comment">号中代码不一样)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="7、为什么要重写？"><a href="#7、为什么要重写？" class="headerlink" title="7、为什么要重写？"></a>7、为什么要重写？</h5><p>子类继承父类,继承了父类中的方法,但是父类中的方法并不一定能满足子类中的功能需要,所以子类中需要把方法进行重写。</p><h2 id="3、多态："><a href="#3、多态：" class="headerlink" title="3、多态："></a>3、多态：</h2><p>定义：即同一个方法可以根据发送对象的不同而采用不同的行为方式；</p><p>一个对象的实际类型是确定的，但是可以指向对象的引用的类型有很多</p><p>1、多态存在的条件</p><p>​     01、有继承关系</p><p>​ 02、子类重写父类</p><p>​    03、父类引用指向子类对象</p><p>注意：多态是方法的多态，属性没有多态性</p><p>1、相同类域的不同对象,调用相同的方法,执行结果是不同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如: new Student(); new Person();等 </span><br></code></pre></td></tr></table></figure><p>2、 可以指向对象的引用的类型有很多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个对象的实现类型虽然是确定的,但是这个对象所属的类型可能有很多种。</span><br></code></pre></td></tr></table></figure><p>例如: Student继承了Person类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javav">Student s1 = new Student();<br>Person s2 = new Student();<br>Object s3 = new Student();<br></code></pre></td></tr></table></figure><p>因为Person和Object都是Student的父类型</p><p>注:一个对象的实际类型是确定,但是可以指向这个对象的引用的类型,却是可以是这对象实际类型的任意</p><p>父类型。</p><p>1、一个父类引用可以指向它的任何一个子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnyClass</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><p>2、多态中的方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、调用到的run方法,是Student从Person继承过来的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">main:<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>p.run();<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//重写run方法</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//调用到的run方法,是Student中重写的run方法</span><br>main:<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>p.run();<br></code></pre></td></tr></table></figure><p>子类继承父类,调用a方法，如果a方法在子类中没有重写,那么就是调用的是子类继承父类的a方法,</p><p>如果重写了,那么调用的就是重写之后的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>&#125;<br>&#125;<br>main:<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">//调用到继承的run方法</span><br>p.run();<br><span class="hljs-comment">//编译报错,因为编译器检查变量p的类型是Person,但是在Person类中并没有发现test方法,所以编</span><br>译报错.<br>p.test();<br></code></pre></td></tr></table></figure><p>注:一个变量x,调用一个方法test,编译器是否能让其编译通过,主要是看声明变量x的类型中有没有定义</p><p>test方法,如果有则编译通过,如果没有则编译报错.而不是看x所指向的对象中有没有test方法.</p><p>编译看左边，运行不一定看右边。</p><h2 id="4、instanceof和类型转"><a href="#4、instanceof和类型转" class="headerlink" title="4、instanceof和类型转"></a>4、instanceof和类型转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      // System.out.println( X instanceof Y);   //检测X Y 有没有继承关系，有继承关系编译通过，没有继承关系编译不通过</span><br><span class="hljs-comment">        //X 指向的类型是 Y 的子类型也会通过；  </span><br><span class="hljs-comment">        Object object = new Student();</span><br><span class="hljs-comment">        System.out.println(object instanceof Student);         //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Person);      //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Object);       //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Teacher);     //false</span><br><span class="hljs-comment">        System.out.println(object instanceof String);   //false</span><br><span class="hljs-comment">        System.out.println(&quot;===========&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Person person = new Student();</span><br><span class="hljs-comment">        System.out.println(object instanceof Student);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Person);    //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Object);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Teacher);    //false</span><br><span class="hljs-comment">        System.out.println(object instanceof String);   //编译报错</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        System.out.println(&quot;===============&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       Student student = new Student();</span><br><span class="hljs-comment">        System.out.println(object instanceof Student);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Person);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Object);      //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Teacher);   //编译报错</span><br><span class="hljs-comment">        System.out.println(object instanceof String);   //编译报错</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="5、子类和父类的转换："><a href="#5、子类和父类的转换：" class="headerlink" title="5、子类和父类的转换："></a>5、子类和父类的转换：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类型之间的转换： 父  &gt; 子</span><br>  <span class="hljs-comment">//高   ------&gt;  子</span><br>  Person obj= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>  <span class="hljs-comment">//student 将这个对象转换为Student类型，就可以使用Student类型的方法了！</span><br>  <span class="hljs-comment">//将父类强制转换为子类</span><br>  <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span>(Student) obj;<br>  student.go();<br>       <span class="hljs-comment">//将上面的 合并为一句</span><br>  <span class="hljs-comment">//((Student) obj).go();  </span><br>       ((Student) obj).go();<br>       System.out.prientln(<span class="hljs-string">&quot;==========================&quot;</span>)<br>       <br>       <span class="hljs-comment">//子类转换为父类，可能会丢失自己的一些方法 ，高转低可以，低转高就会丢失一些方法</span><br>      <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> student; <span class="hljs-comment">//本质：student占用1.5个内存，Person占用1.0个内存，子类多的0.5个内存是封装的自己的独有的方法，</span><br>                                  <span class="hljs-comment">// person内存不够大，装不下go方法，所以调用不了；</span><br>      <span class="hljs-comment">//子类转换为父类会丢失，向上转换</span><br>      <span class="hljs-comment">//父类转换为子类，向下转换，强制黄转换</span><br>      <span class="hljs-comment">//方便方法的调用，减少重复大代码， </span><br>       <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//  person.go();</span><br></code></pre></td></tr></table></figure><h2 id="6、静态导入包："><a href="#6、静态导入包：" class="headerlink" title="6、静态导入包："></a>6、静态导入包：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态导入包</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.PI;<br><span class="hljs-keyword">import</span>  <span class="hljs-keyword">static</span> java.lang.Math.random;<br><span class="hljs-comment">//静态导入之后就可以直接使用了</span><br>System.out.println(random());<br>        System.out.println(PI);<br></code></pre></td></tr></table></figure><h1 id="5、抽象类和接口"><a href="#5、抽象类和接口" class="headerlink" title="5、抽象类和接口"></a>5、抽象类和接口</h1><p>节省代码，提高开发效率：</p><p>游戏中的任务模型或者其他的都有一些基本的共同之处，抽象出来，以后遇到就调用就可以；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo08;<br>   <span class="hljs-comment">//abstract 抽象类：类：extends : 单继承~ （接口可以多继承）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-comment">//约束：--有人帮我们实现</span><br>    <span class="hljs-comment">//抽象方法，只有方法的名字，没有方法的实现</span><br>    <span class="hljs-comment">//抽象类的所有方法，继承他的所哟子类都必须实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSoething</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//1、抽象类的特点：抽象类不能 new 出来，只能靠子类来实现约束 </span><br>    <span class="hljs-comment">//抽象类中可以写普通方法~</span><br>       <span class="hljs-comment">// 抽象方法必须在抽象类中~</span><br>       <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、内部类及OOP实战"><a href="#6、内部类及OOP实战" class="headerlink" title="6、内部类及OOP实战"></a>6、内部类及OOP实战</h1><p>内部类就是在一个类的内部在定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</p><p>内部类不是在一个java源文件中编写俩个平行的俩个类,而是在一个类的内部再定义另外一个类。 我们可以把外边的类称为外部类,在其内部编写的类称为内部类。</p><p>内部类分为四种：</p><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><p><strong>2</strong> <strong>、成员内部类（实例内部类、非静态内部类)</strong></p><h1 id="7、接口的定义个实现"><a href="#7、接口的定义个实现" class="headerlink" title="7、接口的定义个实现"></a>7、接口的定义个实现</h1><p><strong>面向接口编程</strong>     <strong>接口的本质是契约</strong></p><p>1、普通类：只有具体的实现</p><p>2、抽象类：具体实现和规范（抽象方法）都有！</p><p>3、接口：只有规范，自己无法写方法，可以实现约束和实现分离</p><h2 id="3、如何写一个接口："><a href="#3、如何写一个接口：" class="headerlink" title="3、如何写一个接口："></a>3、如何写一个接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo09;<br><br>   <span class="hljs-comment">// 如何能锻炼抽象的思维？</span><br>  <span class="hljs-comment">//通过写一写接口来实现架构，</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  1、java的接口：是一个约束</span><br><span class="hljs-comment">  2、接口用来定义一些方法来用不同的人来实现   public static final</span><br><span class="hljs-comment">  3、接口不能被实例化，因为接口中没有</span><br><span class="hljs-comment">  4、接口可以实现多个接口  implements</span><br><span class="hljs-comment">  5、做项目基本上都是，写各种各样的接口</span><br><span class="hljs-comment">   */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-comment">//  public void run()&#123;&#125;  //接口里面的所有定义都是抽象的 public abstract</span><br>    <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//属性默认的都是常量</span><br>  <span class="hljs-type">int</span> age= <span class="hljs-number">99</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String run)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String name)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4、内部类和外部类："><a href="#4、内部类和外部类：" class="headerlink" title="4、内部类和外部类："></a>4、内部类和外部类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.Outer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一个外部类的方法&quot;</span>);<br>    &#125;<br><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;这是一个内部类的方法&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取外部类的私有属性</span><br>    <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11排序算法</title>
    <link href="/2023/04/02/11%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/02/11%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h1><p>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p><p>原理如下：</p><ol><li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p></li><li><p>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Array;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array0PaiXu</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">23</span>,<span class="hljs-number">56</span>,<span class="hljs-number">97</span>,<span class="hljs-number">12</span>&#125;;<br><br>        <span class="hljs-type">int</span>[] sort = sort(a);<br><br>        System.out.println(Arrays.toString(sort));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span> [] array)&#123;    <span class="hljs-comment">//写的一排序方法</span><br>        <span class="hljs-comment">//临时变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//外层循环；判断要走多少次：</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;array.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-comment">//内层循环比较俩个数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;array.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                <span class="hljs-keyword">if</span> (array[j]&gt;array[j+<span class="hljs-number">1</span>])&#123;<br>                    temp = array[j];      <span class="hljs-comment">//实现来个数交换</span><br>                    array[j]=array[j+<span class="hljs-number">1</span>];<br>                    array[j+<span class="hljs-number">1</span>]=temp;<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、选择排序："><a href="#2、选择排序：" class="headerlink" title="2、选择排序："></a>2、选择排序：</h1><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSort</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span> arr[]) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">// 认为目前的数就是最小的, 记录最小数的下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;<span class="hljs-comment">// 修改最小值的下标</span><br>minIndex = j;<br>&#125;<br>&#125;<span class="hljs-comment">// 当退出for就找到这次的最小值,就需要交换位置了</span><br><span class="hljs-keyword">if</span> (i != minIndex) &#123;<span class="hljs-comment">//交换当前值和找到的最小值的位置</span><br>temp = arr[i];<br>arr[i] = arr[minIndex];<br>arr[minIndex] = temp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">SelectSort</span> <span class="hljs-variable">selectSort</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectSort</span>();<br><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span>[] sort = selectSort.sort(array);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : sort) &#123;<br>System.out.print(num + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10数组</title>
    <link href="/2023/04/02/10%E6%95%B0%E7%BB%84/"/>
    <url>/2023/04/02/10%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1、数组概述"><a href="#1、数组概述" class="headerlink" title="1、数组概述"></a>1、数组概述</h2><p>数组：相同类型的数据的有序集合； [1,2,3,4,5,6]</p><h3 id="1、创建数组"><a href="#1、创建数组" class="headerlink" title="1、创建数组"></a>1、创建数组</h3><p>1、必须声明数组变量，才能在程序中使用数组，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar;  <span class="hljs-comment">//推荐使用</span><br>dataType arrayRefVar[];<br></code></pre></td></tr></table></figure><p>2、java使用 new 操作符来创建数组；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dtaType[] arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize]<br></code></pre></td></tr></table></figure><p>3、数组元素是通过索引访问的，数组索引从 0 开始</p><p>4、获取数组的长度； </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrays.length<br></code></pre></td></tr></table></figure><h2 id="2、数组的声明"><a href="#2、数组的声明" class="headerlink" title="2、数组的声明"></a>2、数组的声明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//变量的类型  变量的名字  =  变量的值</span><br>        <span class="hljs-comment">//数组类型</span><br>        <span class="hljs-type">int</span>[] nums; <span class="hljs-comment">// 定义  1、声明数组</span><br><br>        nums=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];  <span class="hljs-comment">//表述这里面可以存放 10 个int类型的数字  2、创建数组，分配空间</span><br>        nums[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> ;           <span class="hljs-comment">//3、给数组赋值，</span><br>        nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> ;<br>        nums[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span> ;<br>        nums[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span> ;<br>        nums[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span> ;<br>        nums[<span class="hljs-number">5</span>] = <span class="hljs-number">6</span> ;<br>        nums[<span class="hljs-number">6</span>] = <span class="hljs-number">7</span> ;<br>        System.out.println(nums[<span class="hljs-number">9</span>]);  <span class="hljs-comment">//没有赋值的就按照 数组的类型来 输出结果</span><br>        <span class="hljs-comment">//计算所有元素的和</span><br>        <span class="hljs-type">int</span> sum= <span class="hljs-number">0</span> ;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//获取数组长度</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            sum = sum +nums[i];<br>        &#125;<br>        System.out.println(sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(nums[<span class="hljs-number">10</span>]);  <span class="hljs-comment">//数组越界，产生报错</span><br><br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\数组越界报错.jpg" alt="数组越界"></p><p>数组总结：</p><p>1、数组是相同数据类型（数据类型可以为任意类型）的有序集合</p><p>2、数组也是对象。数组元素相当于对象的成员变量;</p><p>3、数组长度确定的，不可变的。如果越界就会报  ArrayLindexOutofBounds</p><h2 id="3、数组的使用"><a href="#3、数组的使用" class="headerlink" title="3、数组的使用"></a>3、数组的使用</h2><h3 id="1、数组翻转："><a href="#1、数组翻转：" class="headerlink" title="1、数组翻转："></a>1、数组翻转：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//==========翻转数组==============</span><br><span class="hljs-keyword">package</span> com.kuangstudy.Array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> [] arrays = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;           <br>         <span class="hljs-comment">// printArray(arrays);</span><br>        <span class="hljs-type">int</span>[] reverse = reverse(arrays);<br>        printArray(reverse);<br>              <span class="hljs-comment">//反转数组：</span><br>    &#125;<br>          <span class="hljs-comment">//反转数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] reverse(<span class="hljs-type">int</span>[] arrays)&#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arrays.length];<br>        <span class="hljs-comment">//反转的操作；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> result.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arrays.length;i++)&#123;<br>            result[i] = arrays[arrays.length-<span class="hljs-number">1</span>-i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>       <span class="hljs-comment">//打印数组元素</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> [] arrays)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt; arrays.length;i++)&#123;<br>            System.out.println(arrays[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="01、数组排序："><a href="#01、数组排序：" class="headerlink" title="01、数组排序："></a>01、数组排序：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">323</span>,<span class="hljs-number">23</span>,<span class="hljs-number">543</span>,<span class="hljs-number">12</span>,<span class="hljs-number">59</span>&#125;;<br>System.out.println(Arrays.toString(a));<br>Arrays.sort(a);<br>System.out.println(Arrays.toString(a));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="02、二分法查找："><a href="#02、二分法查找：" class="headerlink" title="02、二分法查找："></a>02、二分法查找：</h3><p>在数组中查找指定元素并返回其下标</p><p>注意：使用二分搜索法来搜索指定的数组，以获得指定的值。必须在进行此调用之前对数组进行排序(通</p><p>过sort方法等)。如果没有对数组进行排序，则结果是不确定的。</p><p>如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">323</span>,<span class="hljs-number">23</span>,<span class="hljs-number">543</span>,<span class="hljs-number">12</span>,<span class="hljs-number">59</span>&#125;;<br>Arrays.sort(a); <span class="hljs-comment">//使用二分法查找，必须先对数组进行排序</span><br>System.out.println(<span class="hljs-string">&quot;该元素的索引：&quot;</span>+Arrays.binarySearch(a, <span class="hljs-number">12</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="03、元素填充："><a href="#03、元素填充：" class="headerlink" title="03、元素填充："></a>03、元素填充：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">323</span>,<span class="hljs-number">23</span>,<span class="hljs-number">543</span>,<span class="hljs-number">12</span>,<span class="hljs-number">59</span>&#125;;<br>Arrays.sort(a); <span class="hljs-comment">//使用二分法查找，必须先对数组进行排序</span><br>Arrays.fill(a, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//将2到4索引的元素替换为100</span><br>System.out.println(Arrays.toString(a));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="04、打印数组："><a href="#04、打印数组：" class="headerlink" title="04、打印数组："></a>04、打印数组：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>System.out.println(a); <span class="hljs-comment">//[I@1b6d3586</span><br>System.out.println(Arrays.toString(a)); <span class="hljs-comment">//[1, 2] 使用工具类打印数组</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="05、数组转换List集合"><a href="#05、数组转换List集合" class="headerlink" title="05、数组转换List集合"></a>05、数组转换List集合</h3><p>返回一个受指定的数组支持的固定大小的列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>&#125;;<br>List&lt;<span class="hljs-type">int</span>[]&gt; list = Arrays.asList(a);  <span class="hljs-comment">//调用 arrays 类工具</span><br></code></pre></td></tr></table></figure><h2 id="4、多维数组"><a href="#4、多维数组" class="headerlink" title="4、多维数组"></a>4、多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] array  = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;&#125;;  <span class="hljs-comment">//静态化定义的二维数组</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ;i&lt;array.length;i++) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array[i].length; j++) &#123;<br>              System.out.println(array[i][j]);<span class="hljs-comment">//遍历二维数组</span><br><br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="5、Arrays类"><a href="#5、Arrays类" class="headerlink" title="5、Arrays类"></a>5、Arrays类</h2><p>数组的工具类java.util.Arrays</p><p>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了一个工具类Arrays供我们使用,从</p><p>而可以对数据对象进行一些基本的操作。</p><p>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不用”使用对</p><p>象来调用(注意:是”不用” 而不是 “不能”)</p><p>java.util.Arrays 类能方便地操作数组. 使用之前需要导包！</p><p><strong>具有以下常用功能</strong></p><p>1、给数组赋值：通过 fifill 方法。</p><p>2、对数组排序：通过 sort 方法,按升序。</p><p>3、比较数组：通过 equals 方法比较数组中元素值是否相等。</p><p>4、查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</p><p>具体说明请查看下表：</p><h2 id="6、稀疏数组"><a href="#6、稀疏数组" class="headerlink" title="6、稀疏数组"></a>6、稀疏数组</h2><p>定义:当数组中大部分的数据为0 ，这时候就采用稀疏数组来存储数据：</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组，稀疏数组的处理方法是：</p><ul><li>记录数组一共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.westos.sparsearr;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SparseArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个二维数组 11*11</span><br>        <span class="hljs-comment">//0表示没有棋子，1表示黑棋，2表示蓝棋</span><br>        <span class="hljs-type">int</span>[][] chessArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        chessArr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        chessArr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//输出原始的二维数组</span><br>        System.out.println(<span class="hljs-string">&quot;原始的二维数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArr[i].length; j++) &#123;<br>                System.out.print(chessArr[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//将二维数组转换为稀疏数组</span><br>        <span class="hljs-comment">//1.先遍历二维数组得到非零数据的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//2.创建对应的系数数组</span><br>        <span class="hljs-type">int</span>[][] sparseArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        <span class="hljs-comment">//给系数数组赋值</span><br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br>        <span class="hljs-comment">//遍历二维数组将非零的值存放到稀疏数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArr[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparseArr[count][<span class="hljs-number">0</span>] = i;<br>                    sparseArr[count][<span class="hljs-number">1</span>] = j;<br>                    sparseArr[count][<span class="hljs-number">2</span>] = chessArr[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//输出稀疏数组</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;稀疏数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sparseArr.length; i++) &#123;<br>            System.out.println(sparseArr[i][<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\t&quot;</span>+sparseArr[i][<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\t&quot;</span>+sparseArr[i][<span class="hljs-number">2</span>]);<br>        &#125;<br><br>        <span class="hljs-comment">//将稀疏数组恢复成二维数组</span><br>        <span class="hljs-comment">//1.先读取稀疏数组的第一行，根据第一行创建二维数组</span><br>        <span class="hljs-type">int</span>[][] chessArr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-comment">//2.读取稀疏数组后几行赋值给二维数组</span><br>        <span class="hljs-comment">//注意这里是从第二行开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sparseArr.length; i++) &#123;<br>            chessArr2[sparseArr[i][<span class="hljs-number">0</span>]][sparseArr[i][<span class="hljs-number">1</span>]] = sparseArr[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;恢复后的二维数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArr2) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> data : row) &#123;<br>                System.out.print(data+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\稀疏数组结果.png" alt="稀疏数组"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09方法</title>
    <link href="/2023/04/02/09%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/02/09%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、方法定义和使用"><a href="#1、方法定义和使用" class="headerlink" title="1、方法定义和使用"></a>1、方法定义和使用</h1><h3 id="1、方法的定义："><a href="#1、方法的定义：" class="headerlink" title="1、方法的定义："></a>1、方法的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">格式： 修饰符 返回类型 方法名(参数列表)异常抛出类型&#123;...&#125; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2、修饰符："><a href="#2、修饰符：" class="headerlink" title="2、修饰符："></a>2、修饰符：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>、<span class="hljs-keyword">static</span>、<span class="hljs-keyword">abstract</span>、<span class="hljs-keyword">final</span>等等都是修饰符，一个方法可以有多个修饰符。例如程序入口<br>main方法，就使用了<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>这个俩个修饰符<br>注:如果一个方法或者属性有多个修饰符,这多个修饰符是没有先后顺序的<br></code></pre></td></tr></table></figure><h3 id="3、返回类型："><a href="#3、返回类型：" class="headerlink" title="3、返回类型："></a>3、返回类型：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">方法执行完如果有要返回的数据,那么就要声明返回数据的类型,如果没有返回的数据,那么返回类型就必<br>须写<span class="hljs-keyword">void</span>.<br>只有构造方法(构造器)不写任何返回类型也不写<span class="hljs-keyword">void</span><br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(msg);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、非静态方法："><a href="#4、非静态方法：" class="headerlink" title="4、非静态方法："></a>4、非静态方法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javav">没有使用static修饰符修饰的方法,就是非静态方法.<br>调用这种方法的时候,是&quot;一定&quot;要使用对象的。因为非静态方法是属于对象的。(非静态属性也是一样的)<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br>main:<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s.say();<br></code></pre></td></tr></table></figure><h3 id="5、静态方法："><a href="#5、静态方法：" class="headerlink" title="5、静态方法："></a>5、静态方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">static</span>修饰符修饰的方法,就是静态方法.<br>调用这种方法的时候,<span class="hljs-string">&quot;可以&quot;</span>使用对象调用,也<span class="hljs-string">&quot;可以&quot;</span>使用类来调用,但是推荐使用类进行调用,因为静态<br>方法是属于类的。(静态属性也是一样的)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br>main:<br>Student.say();<br></code></pre></td></tr></table></figure><h3 id="6、类中方法之间的调用："><a href="#6、类中方法之间的调用：" class="headerlink" title="6、类中方法之间的调用："></a>6、类中方法之间的调用：</h3><p>假设同一个类中有俩个方法,a方法和b方法，a和b都是非静态方法，相互之间可以直接调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>b();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>a和b都是静态方法,相互之间可以直接调用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>b();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>a静态方法,b是非静态方法，a方法中不能直接调用b方法,但是b方法中可以直接调用a方法. 静态方法不能</p><p>调用非静态方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//b();报错</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>a();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;       <br>        <span class="hljs-comment">//System.out.println();   //对象、类、方法</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        java 方法是语句的集合，方法用来执行一个功能：</span><br><span class="hljs-comment">        1、方法是解决一类问题的语句集合：</span><br><span class="hljs-comment">        2、方法包装在类或者对象中</span><br><span class="hljs-comment">        3、方法在程序中被创建，在其他地方被引用</span><br><span class="hljs-comment">        设计方法的原则：</span><br><span class="hljs-comment">        方法的本意是功能块，就是实现某个功能的语句块的集合，设计方法的时候，最好保持方法的原子性</span><br><span class="hljs-comment">        ===========就是一个方法只用来实现一个功能，编译后期的拓展======= </span><br><span class="hljs-comment">         */</span>        <br>        <span class="hljs-comment">//加法：</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   <span class="hljs-comment">//add(1,2) 按回车  手写就会报错</span><br>        System.out.println(sum);            <br>        &#125;      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span>  a+b ;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span>&#123;<br>    <br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>        System.out.println(max);<br>        &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> number1, <span class="hljs-type">int</span> number2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;他们相等&quot;</span>;<br>         <span class="hljs-keyword">if</span> (number1&gt;number2)&#123;<br>             result = number1;<br>         &#125;<br><br>         <span class="hljs-keyword">if</span> (number1&lt;number2)&#123;<br>             result = number2;<br>             <br>         &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number1==number2)&#123;<br>             result = Integer.parseInt(C);<br>        &#125;<br>         <span class="hljs-keyword">return</span>  result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、方法重载"><a href="#2、方法重载" class="headerlink" title="2、方法重载"></a>2、方法重载</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    方法的重载：</span><br><span class="hljs-comment">    重载;就是在一个类中有相同的函数名称，但是形参不同的函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    规则：</span><br><span class="hljs-comment">    1、方法名称必须相同：</span><br><span class="hljs-comment">    2、函数列表必须不同</span><br><span class="hljs-comment">    3、方法的返回类型可以相同也可以不同</span><br><span class="hljs-comment">    4、仅仅返回的类型不同不足以成为方法的重载</span><br><span class="hljs-comment">    实现理论：</span><br><span class="hljs-comment">    方法的名称相同时，编译器会根据调用的方法的个数、参数类型、等去逐个匹配，以选择对应的方法，如果匹配失败，</span><br><span class="hljs-comment">    编译器报错</span><br><span class="hljs-comment">    ===============注意： 形参和参的类型要一致不然就会报错===================</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>);<br>        System.out.println(max);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> number1, <span class="hljs-type">double</span> number2)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span> (number1&gt;number2)&#123;<br>            result = number1;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (number1&lt;number2)&#123;<br>            result = number2;<br><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number1==number2)&#123;<br>            result = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>  result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> number1, <span class="hljs-type">int</span> number2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;     <br>        <span class="hljs-keyword">if</span> (number1&gt;number2)&#123;<br>            result = number1;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (number1&lt;number2)&#123;<br>            result = number2;<br><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number1==number2)&#123;<br>            result = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>  result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、命令行传参"><a href="#3、命令行传参" class="headerlink" title="3、命令行传参"></a>3、命令行传参</h1><p>调用方法进行传参时,分为值传递和引用传递两种。</p><p>如果参数的类型是基本数据类型,那么就是值传递。</p><p>如果参数的类型是引用数据类型,那么就是引用传递。</p><p>值传递是实参把自己变量本身存的简单数值赋值给形参.</p><p>引用传递是实参把自己变量本身存的对象内存地址值赋值给形参.</p><p>所以值传递和引用传递本质上是一回事,只不过传递的东西的意义不同而已</p><h3 id="1、值传递："><a href="#1、值传递：" class="headerlink" title="1、值传递："></a>1、值传递：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeNum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>   a = <span class="hljs-number">10</span>;<br>  &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;before: a = &quot;</span>+a); <span class="hljs-comment">//1</span><br>changeNum(a);<br>System.out.println(<span class="hljs-string">&quot;after: a = &quot;</span>+a); <span class="hljs-comment">//1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、引用传递："><a href="#2、引用传递：" class="headerlink" title="2、引用传递："></a>2、引用传递：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeName</span><span class="hljs-params">(Student s)</span>&#123;<br>s.name = <span class="hljs-string">&quot;tom&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>System.out.println(<span class="hljs-string">&quot;before: name = &quot;</span>+s.name); <span class="hljs-comment">//null</span><br>changeName(s);<br>System.out.println(<span class="hljs-string">&quot;after: name = &quot;</span>+s.name); <span class="hljs-comment">//tom</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>String name;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、可变参数"><a href="#4、可变参数" class="headerlink" title="4、可变参数"></a>4、可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Function04</span> <span class="hljs-variable">function04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function04</span>();<br>        function04.test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>        &#125;<br>    <span class="hljs-comment">//可变参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> x ,<span class="hljs-type">int</span> ...i )</span>&#123;<br>        System.out.println(i[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">//排序：</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">(<span class="hljs-type">double</span>...number)</span>&#123;<br>        <span class="hljs-keyword">if</span> (number.length==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;No argument passed&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> number[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//排序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span> ;i&lt; number.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (number[i]&gt;result)&#123;<br>                result = number[i];<br><br>            &#125;<br>            &#125;<br>        System.out.println(<span class="hljs-string">&quot;the max vlaue is &quot;</span>+ result);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="5、方法的调用（重要）"><a href="#5、方法的调用（重要）" class="headerlink" title="5、方法的调用（重要）"></a>5、方法的调用（重要）</h1><h3 id="1、递归"><a href="#1、递归" class="headerlink" title="1、递归"></a>1、递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function05</span> &#123;<br>    <span class="hljs-comment">//========递归算法============</span><br>    <span class="hljs-comment">//递归就是自己调用自己；递归可以用很少的代码解决很复杂的问题  常常把一个大型的问题层层转化为一个一个小的问题</span><br><br>    <span class="hljs-comment">//=========1、递归头，什么时候不调用自身的方法。如果没有头，将陷入死循环==========</span><br>    <span class="hljs-comment">//=========2、递归体：什么时候需要调用自身方法================</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(f(<span class="hljs-number">5</span>));<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);  <span class="hljs-comment">//int 是整数型，默认是正整数</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08流程控制</title>
    <link href="/2023/04/02/08%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/04/02/08%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1、用户交互Scanner："><a href="#1、用户交互Scanner：" class="headerlink" title="1、用户交互Scanner："></a>1、用户交互Scanner：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个扫描器对象，用于接收键盘数据：</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner01</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;使用next方式接收&quot;</span>);<br><br>        <span class="hljs-comment">//判断用户有没有输入字符串</span><br>        <span class="hljs-keyword">if</span> (scanner01.hasNext())&#123;      <span class="hljs-comment">//如果用户还有输入的话就用scanner接收</span><br><br>            <span class="hljs-comment">//用scanner接收</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner01.next();<br>            System.out.println(<span class="hljs-string">&quot;输出的内容为：&quot;</span> +str);<br><br>        &#125;<br>        <span class="hljs-comment">//凡是属于IO流的类 如果不关闭就会一直占用资源，使用完了之后就要关掉</span><br>        scanner01.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Scanner 对象：</span><br><span class="hljs-comment">next()： 1、一定要读取到有效的字符后才可以结束输入：</span><br><span class="hljs-comment">         2、对输入有效字符之前遇到的空白， next()方法会自动将其去掉；</span><br><span class="hljs-comment">         3、只有输入有效字符后才能将其后面输入的空白作为分隔符或者结束符；</span><br><span class="hljs-comment">         4、next()不能得到带有空格的字符串；</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//new Scanner(System.in);   //</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;使用nextLine方式接收(请输入数据)&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否还有输入；</span><br>        <span class="hljs-keyword">if</span>(scanner.hasNextLine())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>            System.out.println(<span class="hljs-string">&quot;输出的内容为&quot;</span>+ str);<br>        &#125;<br>        scanner.close();<br>    &#125;<br>&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *     nextLine(): 1、以 Enter作为结束符；也就是说nextLine()方法返回的是输入回车之前的所有字符</span><br><span class="hljs-comment">     *                  2、可以获得所有的空白</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//从键盘接收数据：</span><br>        <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>;<br>        System.out.println(<span class="hljs-string">&quot;请输入整数&quot;</span>);<br><br>        <span class="hljs-comment">//整数</span><br>        <span class="hljs-keyword">if</span> (scanner.hasNextInt())&#123;<br>            i = scanner.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;整数数据为&quot;</span>+i);<br><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是一个整数数据！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//小数</span><br><br>        System.out.println(<span class="hljs-string">&quot;请输入小数&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (scanner.hasNextFloat())&#123;<br>            f = scanner.nextFloat();<br>            System.out.println(<span class="hljs-string">&quot;小数数据为&quot;</span>+f);<br><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是一个小数数据！&quot;</span>);<br>        &#125;<br><br>       scanner.close();<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//我们可以输入读个数字，求其总和与平均数，没输入一个数字就用回车确认，通过输入非数字来结束输入并输出执行结果；</span><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-comment">//平均数 通过循环判断是否还有输入，并且在里面对每一次进行求和和统计</span><br><br>        <span class="hljs-keyword">while</span>(scanner.hasNextDouble())&#123;<br>           <span class="hljs-type">double</span> <span class="hljs-variable">x</span>  <span class="hljs-operator">=</span>  scanner.nextDouble();<br><br>          <span class="hljs-comment">// m++; //m+1</span><br>            m  = m +<span class="hljs-number">1</span>;<br><br>            sum = sum + x ;<br>            System.out.println(<span class="hljs-string">&quot;你输入了第&quot;</span> + m +<span class="hljs-string">&quot;个数字&quot;</span>+<span class="hljs-string">&quot;当前总和结果为&quot;</span>+sum);<br><br>        &#125;<br>        System.out.println(m + <span class="hljs-string">&quot;个数的和为&quot;</span>+sum);<br>        System.out.println(m+<span class="hljs-string">&quot;个数的平均值是&quot;</span>+(sum/m));<br><br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\Scanner结果.png" alt="Scanner结果"></p><h1 id="2、顺序结构："><a href="#2、顺序结构：" class="headerlink" title="2、顺序结构："></a>2、顺序结构：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序结构就是一步一步执行；  顺序结构是任何一个算法都是离不开的结构</span><br><span class="hljs-comment">从上到下一步一步执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShunXu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello3&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello4&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello5&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3、选择结构：if、Switch"><a href="#3、选择结构：if、Switch" class="headerlink" title="3、选择结构：if、Switch"></a>3、选择结构：if、Switch</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br> <span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Change</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">        System.out.println(&quot;请输入一个内容：&quot;);</span><br><span class="hljs-comment">        String s = scanner.nextLine();</span><br><span class="hljs-comment">        //equals :判断字符串是否相等</span><br><span class="hljs-comment">        if(s.equals(&quot;Hello&quot;))&#123;</span><br><span class="hljs-comment">            System.out.println(s);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;End&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        scanner.close();</span><br><span class="hljs-comment"> */</span><br>        <br><span class="hljs-comment">// ==========if else=============</span><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩&quot;</span>);<br>        <span class="hljs-type">int</span>    score= scanner01.nextInt();<br><br>        <span class="hljs-keyword">if</span> (score&gt;=<span class="hljs-number">60</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>        &#125;<br><br><br>        scanner01.close();<br>        <br><span class="hljs-comment">//=================if多选择语句======================</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                   System.out.println(<span class="hljs-string">&quot;请输入成绩&quot;</span>);<br>                     <span class="hljs-type">int</span>    score= scanner02.nextInt();<br><br>                     <span class="hljs-keyword">if</span> (score==<span class="hljs-number">100</span>) &#123;<br>                         System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>                     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&lt;<span class="hljs-number">100</span>&amp;&amp;score&gt;=<span class="hljs-number">90</span>)&#123;<br>                         System.out.println(<span class="hljs-string">&quot;优秀1&quot;</span>);<br>                      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&lt;<span class="hljs-number">90</span>&amp;&amp;score&gt;=<span class="hljs-number">80</span>)&#123;<br>                          System.out.println(<span class="hljs-string">&quot;优秀2&quot;</span>);<br>                     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">80</span>&amp;&amp;score&gt;=<span class="hljs-number">70</span>)&#123;<br>                         System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br><br>                     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&lt;<span class="hljs-number">70</span>&amp;&amp;score&gt;=<span class="hljs-number">60</span>) &#123;<br>                         System.out.println(<span class="hljs-string">&quot;中等&quot;</span>);<br>                     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>&lt;=score&amp;&amp;score&lt;<span class="hljs-number">60</span>) &#123;<br>                         System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><br>                     &#125;<span class="hljs-keyword">else</span> &#123;<br>                         System.out.println(<span class="hljs-string">&quot;成绩不合法&quot;</span>);<br>                     &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//=================Switch===================</span><br><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Switch01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//习惯： 没写一个case都要写一个break</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;C&#x27;</span>;<br>        <span class="hljs-keyword">switch</span>(grade)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;中等&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;再接再厉&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;挂科&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;未知等级&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="4、循环结构："><a href="#4、循环结构：" class="headerlink" title="4、循环结构："></a>4、循环结构：</h1><h2 id="while"><a href="#while" class="headerlink" title="while;"></a>while;</h2><p>do while; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">While01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//输出 1~100</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>            i++;<br>            System.out.println(i);<br><br>        &#125;<br><br>        <span class="hljs-comment">//死循环  while（true）&#123;</span><br>        <span class="hljs-comment">//============  1+2+3+.....+100</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(i2 &lt;<span class="hljs-number">100</span>)&#123;<br>            i2++;<br>            sum = sum + i2;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1加到100的和为&quot;</span>+sum);<br><br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//==============do while===============================</span><br><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhile01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">do</span>&#123;<br>            i2++;<br>            sum = sum + i2;<br>        &#125; <span class="hljs-keyword">while</span>(i2 &lt;<span class="hljs-number">100</span>);<br>            System.out.println(<span class="hljs-string">&quot;1加到100的和为&quot;</span>+sum);<br>        &#125;<br><br>    &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   dowhile 和 while 的区别</span><br><span class="hljs-comment">   do while 先执行后判断 能保证程序能最少执行一次（主要差别）</span><br><span class="hljs-comment">   while 先判断后执行</span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><h2 id="For"><a href="#For" class="headerlink" title="For:"></a>For:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//============== for ===========</span><br>        <span class="hljs-comment">//for 循环是一种高效的常用的循环语句</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        for 循环语句的注意：</span><br><span class="hljs-comment">        1、可以声明一种类型，但是可以初始化一个或多个循环控制变量，也可以是空语句</span><br><span class="hljs-comment">        2、检测布尔表达式的值，如果为 true循环体被执行，如果为false循环终止，开始执行循环体后面的语句</span><br><span class="hljs-comment">        3、执行一次循环后，更新一次循环控制变量（迭代因子控制循环变量的增减）</span><br><span class="hljs-comment">        4、再次执行布尔表达式，循环执行上面的表达式</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br><br>            System.out.println(i);<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;for循环结束&quot;</span>);<br><span class="hljs-comment">//=====================练习1===========================</span><br> <span class="hljs-comment">//练习题：1 :从 1到 100的所有的 奇数 和 偶数 的和</span><br>          <span class="hljs-comment">//for 循环里面嵌套 if</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">100</span>;j++)&#123;<br>           <span class="hljs-keyword">if</span> (j%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)&#123;<br>               sum1 = sum1 + j;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               sum2 = sum2 +j;<br>           &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1 到 100 所有的奇数和为&quot;</span>+ sum1);<br>        System.out.println(<span class="hljs-string">&quot;1 到 100 所有的偶数和为&quot;</span>+ sum2);<br><span class="hljs-comment">//======================练习2====================</span><br>   <span class="hljs-comment">// 练习题：用while 或 for循环输出1 ~ 1000 中能被5 整除的数， 并且每行输出3个</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">1000</span>; s++)&#123;<br>            <span class="hljs-keyword">if</span> (s%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(s+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s%(<span class="hljs-number">5</span>*<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(s);<br>                System.out.println();  <span class="hljs-comment">//或者   System.out.print(&quot;\n&quot;);</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//println 输出完就会换行</span><br>        <span class="hljs-comment">//print   输出完不会换行</span><br></code></pre></td></tr></table></figure><h2 id="for：打印九九乘法表"><a href="#for：打印九九乘法表" class="headerlink" title="for：打印九九乘法表"></a>for：打印九九乘法表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">For02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;=<span class="hljs-number">9</span>; j++) &#123;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=j; i++) &#123;<br><br>                System.out.print(j+<span class="hljs-string">&quot;x&quot;</span>+ i +<span class="hljs-string">&quot;=&quot;</span>+(j*i)+<span class="hljs-string">&quot;\t&quot;</span>);<br><br>            &#125;<br>            System.out.println();<br>        &#125;<br>        &#125;<br>    &#125;<br>1x1=<span class="hljs-number">1</span><br>2x1=<span class="hljs-number">2</span>2x2=<span class="hljs-number">4</span><br>3x1=<span class="hljs-number">3</span>3x2=<span class="hljs-number">6</span>3x3=<span class="hljs-number">9</span><br>4x1=<span class="hljs-number">4</span>4x2=<span class="hljs-number">8</span>4x3=<span class="hljs-number">12</span>4x4=<span class="hljs-number">16</span><br>5x1=<span class="hljs-number">5</span>5x2=<span class="hljs-number">10</span>5x3=<span class="hljs-number">15</span>5x4=<span class="hljs-number">20</span>5x5=<span class="hljs-number">25</span><br>6x1=<span class="hljs-number">6</span>6x2=<span class="hljs-number">12</span>6x3=<span class="hljs-number">18</span>6x4=<span class="hljs-number">24</span>6x5=<span class="hljs-number">30</span>6x6=<span class="hljs-number">36</span><br>7x1=<span class="hljs-number">7</span>7x2=<span class="hljs-number">14</span>7x3=<span class="hljs-number">21</span>7x4=<span class="hljs-number">28</span>7x5=<span class="hljs-number">35</span>7x6=<span class="hljs-number">42</span>7x7=<span class="hljs-number">49</span><br>8x1=<span class="hljs-number">8</span>8x2=<span class="hljs-number">16</span>8x3=<span class="hljs-number">24</span>8x4=<span class="hljs-number">32</span>8x5=<span class="hljs-number">40</span>8x6=<span class="hljs-number">48</span>8x7=<span class="hljs-number">56</span>8x8=<span class="hljs-number">64</span><br>9x1=<span class="hljs-number">9</span>9x2=<span class="hljs-number">18</span>9x3=<span class="hljs-number">27</span>9x4=<span class="hljs-number">36</span>9x5=<span class="hljs-number">45</span>9x6=<span class="hljs-number">54</span>9x7=<span class="hljs-number">63</span>9x8=<span class="hljs-number">72</span>9x9=<span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><h2 id="增强for循环："><a href="#增强for循环：" class="headerlink" title="增强for循环："></a>增强for循环：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">For03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//增强for循环：</span><br>        <span class="hljs-type">int</span> [] numbers = &#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        <span class="hljs-comment">//依次取出数组中的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>            System.out.println(numbers[i]);<br>        &#125;<br>        <span class="hljs-comment">//遍历数组中的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : numbers)&#123;<br>            System.out.println(x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、break-amp-continue"><a href="#5、break-amp-continue" class="headerlink" title="5、break&amp;continue"></a>5、break&amp;continue</h1><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Break01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>            i++;<br>            System.out.println(i);<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">30</span>)&#123;<br>                <span class="hljs-keyword">break</span>;   <span class="hljs-comment">//跳出当前的循环；但是不会终止程序</span><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>);        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(j&lt;<span class="hljs-number">100</span>)&#123;<br>            j++;<br>            <span class="hljs-keyword">if</span> (j%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.println();<br>                <span class="hljs-keyword">continue</span>;        <span class="hljs-comment">//continue 用于终止某次循环，跳出循环体中尚未执行完的语句，接着执行下一次循环</span><br><br>            &#125;<br>            System.out.print(j);<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="6、练习："><a href="#6、练习：" class="headerlink" title="6、练习："></a>6、练习：</h1><h2 id="1、打印三角形："><a href="#1、打印三角形：" class="headerlink" title="1、打印三角形："></a>1、打印三角形：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//打印三角形：</span><br>        <span class="hljs-comment">//1、打印5 行三角形：</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;j&gt;=i;j--)&#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);   <span class="hljs-comment">//先打印 5行 空白的  每行 4、3、2、1、0 个空白</span><br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);   <span class="hljs-comment">//在打印 5 行 *  每行1、2、3、4、5 个*</span><br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;j&lt;i;j++)&#123;       <span class="hljs-comment">//打印 5 行 * 每行 0、1、2、3、4 个*</span><br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br><br>        &#125;<br>    &#125;<br>&#125;<br>     *<br>    ***<br>   *****<br>  *******<br> *********<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07Java基础</title>
    <link href="/2023/04/02/07Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/02/07Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>《阿里巴巴开发手册》</p><h1 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h1><p>单行&#x2F;&#x2F;</p><p>多行&#x2F;**&#x2F;</p><p>文档&#x2F;***</p><p>​        *&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//单行注释</span><br>        <span class="hljs-comment">//输出一个Helloworld</span><br>        System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//多行注释</span><br><span class="hljs-comment">/* 这是一个多行注释 */</span><br><br><br><span class="hljs-comment">//javaDoc 文档注释</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> helloworld</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/***</span><br></code></pre></td></tr></table></figure><h1 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">keyworlds</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;狂神说Java&quot;</span>;<br>        String $早上 = <span class="hljs-string">&quot;吃饭那个&quot;</span>;<br>        System.out.println(teacher);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//所有的标识符必须用字母，美元符，或者下划线开始</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * *</span><br><span class="hljs-comment"> * 所有的标识符必须用字母，美元符，或者下划线开始</span><br><span class="hljs-comment"> * 首字母后面可以任意组合</span><br><span class="hljs-comment"> * 关键字和变量名不能用作变量名和方法名</span><br><span class="hljs-comment"> * 标识符是大小写敏感的</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="3、类型转换"><a href="#3、类型转换" class="headerlink" title="3、类型转换"></a>3、类型转换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class Datestyle &#123;<br>    public static void main(String[] args) &#123;<br>        String a = <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>          //整数<br>        int num  =  10;<br>        byte num2 = 20;<br>        short num3 = 20;<br>        long num4 = 20l;<br>        <br>        //小数<br>        <span class="hljs-built_in">float</span> num5 = 20.1f;<br>        double num6 = 30.2;<br>        <br>        //字符<br>        char name = <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <br>        //字符串<br>        String namea = <span class="hljs-string">&quot;定义一个字符串&quot;</span>;//String 后面不能用关键字<br>        <br>        //布尔值<br>        boolean flag = <span class="hljs-literal">true</span>;<br>        System.out.println(a);<br>        System.out.println(num);<br>        <br>         //==========================<br>        //浮点数拓展？  银行业务怎么表示？钱<br>        //BigDecimal  ---用这个<br>        //float<br>        //double<br>        //最好完全避免使用浮点数进行比较<br>        System.out.println(a);<br>        System.out.println(num);<br><br>        <span class="hljs-built_in">float</span> f = 0.1f;<br>        double d = 1.0/10;//0.1<br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>        System.out.println(f==d);<br>        System.out.println(f);<br>        System.out.println(d);<br><br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>        <span class="hljs-built_in">float</span> d1 = 232323232323f;<br>        <span class="hljs-built_in">float</span> d2 = d1 + 1;<br>        System.out.println(d1==d2);<br>        <br>        <br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        char c1 = <span class="hljs-string">&#x27;我&#x27;</span>;<br>        char c2 = <span class="hljs-string">&#x27;爱&#x27;</span>;<br>        char c3 = <span class="hljs-string">&#x27;睡&#x27;</span>;<br>        char c4 = <span class="hljs-string">&#x27;觉&#x27;</span>;<br>        char c5 = <span class="hljs-string">&#x27;你&#x27;</span>;<br>        System.out.println(c1);<br>        System.out.println((int)c1);   //数据类型  强制转换 可以把字符转换为数字<br><br>        System.out.println(c2);<br>        System.out.println((int)c2);<br><br>        System.out.println(c3);<br>        System.out.println((int)c3);<br><br>        System.out.println(c4);<br>        System.out.println((int)c4);<br><br>        System.out.println(c5);<br>        System.out.println((int)c5);<br>        //======所有的的字符本质上就是数字======   <span class="hljs-number">2</span>个字节 <span class="hljs-number">0</span>-<span class="hljs-number">65536</span><br>        //U000  UFFFF<br>        char c6 = &#x27;\u0061&#x27;;<br>        System.out.println(c6);<br><br>  #      //======转义字符=====<br>  #      // \t 制表符<br>  #      // \n 换行<br>  #     //....<br>        System.out.println(&quot;Hello \t World&quot;);<br>        System.out.println(&quot;Hello\nWorld&quot;);<br><br>        System.out.println(&quot;=============&quot;);<br><br>        //对象里面   存储的内存位置不一样<br><br>        String sa = new String(&quot;HelloWorld&quot;);<br>        String sb = new String(&quot;HelloWorld&quot;);<br>        System.out.println(sa==sb);<br><br>        String sc =&quot;hello world&quot;;<br>        String sd = &quot;hello world&quot;;<br>        System.out.println(sc==sd);<br><br>        //布尔值扩展：<br>        boolean flag2 = true;<br>        if(flag2==true)&#123;&#125;   //新手程序员这样写<br>        if (flag2)&#123;&#125;      //这里是默认的  flag2 = true<br>        //这俩行代码一样    less is move<br><br><br>    &#125;<br>&#125;<br><br><br><br><br>#/**<br> #* //所有的变量必须先定义才能使用<br> #* java 是强类型的语言，区别与弱类型的语言<br> #* 运行的更慢了也更安全<br> #*<br> #*基本数据类型：<br> #* <span class="hljs-number">1</span>、整数型：byte占<span class="hljs-number">1</span>个字节 -<span class="hljs-number">128</span>-<span class="hljs-number">127</span>   short占<span class="hljs-number">2</span>个字节 -<span class="hljs-number">32768</span>-<span class="hljs-number">32767</span> int占<span class="hljs-number">4</span>个字节 long占<span class="hljs-number">8</span>个字节<br># * <span class="hljs-number">2</span>、浮点型：  （小数） float占<span class="hljs-number">4</span>个字节，double占<span class="hljs-number">8</span>个字节<br> #* <span class="hljs-number">3</span>、字符型： String  char占<span class="hljs-number">2</span>个字节<br> #* <span class="hljs-number">4</span>、boolean:占<span class="hljs-number">1</span>位只有flase和true俩个<br> #*<br> #* 引用数据类型：Reference Type<br> #* <span class="hljs-number">1</span>、类<br> #* <span class="hljs-number">2</span>、接口<br> #* <span class="hljs-number">3</span>、数组<br> #*/<br></code></pre></td></tr></table></figure><h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><p>&#x2F;&#x2F;强制类型转换：变量名    高—-&gt;低</p><p>&#x2F;&#x2F;自动类型转换：低—–&gt;高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StyleChange</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>  <span class="hljs-number">128</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;   <span class="hljs-comment">//类型转换   内存会溢出</span><br><br>        <span class="hljs-comment">//强制转换 ：</span><br>        <span class="hljs-comment">//强制类型转换：变量名    高----&gt;低</span><br>        <span class="hljs-comment">//自动类型转换：低-----&gt;高</span><br>        System.out.println(i);<br>        System.out.println(b);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 注意点：</span><br><span class="hljs-comment">         * 1、不能对布尔值进行转换</span><br><span class="hljs-comment">         * 2、不能把对象类型转换为不相干的类型</span><br><span class="hljs-comment">         * 3、在把大容量转换为小容量的时候强制转换</span><br><span class="hljs-comment">         * 4、在转换的时候可能会产生内存溢出的问题，或者精度的问题</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>        System.out.println((<span class="hljs-type">int</span>) <span class="hljs-number">23.7</span>); <span class="hljs-comment">// 23 转化成小数后产生精度问题</span><br>        System.out.println((<span class="hljs-type">int</span>)-<span class="hljs-number">45.89f</span>);  <span class="hljs-comment">// -45</span><br><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c+<span class="hljs-number">1</span>;<br>        System.out.println(d);<br><br>        System.out.println((<span class="hljs-type">char</span>) d);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StyleChange</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>  <span class="hljs-number">128</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;   <span class="hljs-comment">//类型转换   内存会溢出</span><br><br>        <span class="hljs-comment">//强制转换 ：</span><br>        <span class="hljs-comment">//强制类型转换：变量名    高----&gt;低</span><br>        <span class="hljs-comment">//自动类型转换：低-----&gt;高</span><br>        System.out.println(i);<br>        System.out.println(b);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 注意点：</span><br><span class="hljs-comment">         * 1、不能对布尔值进行转换</span><br><span class="hljs-comment">         * 2、不能把对象类型转换为不相干的类型</span><br><span class="hljs-comment">         * 3、在把大容量转换为小容量的时候强制转换</span><br><span class="hljs-comment">         * 4、在转换的时候可能会产生内存溢出的问题，或者精度的问题</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>        System.out.println((<span class="hljs-type">int</span>) <span class="hljs-number">23.7</span>); <span class="hljs-comment">// 23 转化成小数后产生精度问题</span><br>        System.out.println((<span class="hljs-type">int</span>)-<span class="hljs-number">45.89f</span>);  <span class="hljs-comment">// -45</span><br><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c+<span class="hljs-number">1</span>;<br>        System.out.println(d);<br>        System.out.println((<span class="hljs-type">char</span>) d);<br><br>        <span class="hljs-comment">//操作比较大的数的时候，注意溢出的问题</span><br>        <span class="hljs-comment">//JDK新特性，数字之可以用下划线分割</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">10_0000_0000</span>;<br>        System.out.println(money);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> money * year;   <span class="hljs-comment">//-14744836480,计算的时候会溢出</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total2</span> <span class="hljs-operator">=</span> money*year;  <span class="hljs-comment">//默认是int 转换之前已经存在问题，就不能进行转换了</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total3</span> <span class="hljs-operator">=</span> money*((<span class="hljs-type">long</span>)year);  <span class="hljs-comment">//先把一个数抓换为long</span><br><br>        System.out.println(total);<br>        System.out.println(total2);<br>        System.out.println(total3);<br>        <span class="hljs-comment">//最好 都写大L</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、-变量、常量"><a href="#4、-变量、常量" class="headerlink" title="4、 变量、常量"></a>4、 变量、常量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function</span> &#123;<br><br>    <span class="hljs-comment">//类变量 static : ==类变量是从属于类的，会随着类消失而消失</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span><span class="hljs-number">2500</span> ;<br>        <span class="hljs-comment">//属性：变量</span><br>       <span class="hljs-comment">//实例变量：从属于对象:如果不进行初始化，这个类型的默认值就会为 0  0.0</span><br>        <span class="hljs-comment">//布尔值：默认是false</span><br>       <span class="hljs-comment">// 除了基本类型，其余的默认值都是null</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>        <span class="hljs-comment">//mian 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 局部变量必须声明和初始化值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(i);<br><br>        <span class="hljs-comment">//变量类型</span><br>        <span class="hljs-type">Function</span> <span class="hljs-variable">function</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br>        System.out.println(function.age);<br>        System.out.println(function.name);<br><br>        <span class="hljs-comment">//类变量 static</span><br>        System.out.println(salary);<br><br>        <span class="hljs-comment">//类变量 static</span><br><br>    &#125;<br>        <span class="hljs-comment">//其他方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        System.out.println(i);<br>    &#125;<br><span class="hljs-comment">//    ===============================================================</span><br>    <span class="hljs-comment">//常量：  就是写一次就不会再变化的量 就是一些固定值</span><br>    <span class="hljs-comment">//修饰符： 不存在先后顺序</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span><span class="hljs-number">3.14</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI2</span> <span class="hljs-operator">=</span><span class="hljs-number">3.14</span>;   <span class="hljs-comment">//static  和 final 的位置换了也不影响值</span><br><br>    <span class="hljs-comment">//变量的命名规范：</span><br>    <span class="hljs-comment">//所有的变量、方法、类名：见名知意</span><br>    <span class="hljs-comment">//类成员变量： 首字母小写和驼峰原则  monthSalary</span><br>    <span class="hljs-comment">//局部变量：首字母小写和驼峰原则</span><br>    <span class="hljs-comment">//常量：大写字母和下划线 MAX_VALUE</span><br>    <span class="hljs-comment">//类名：首字母大写和驼峰原则  GoodMan</span><br>    <span class="hljs-comment">//方法名：首字母小写和驼峰原则</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Operator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//二元运算符：</span><br>        <span class="hljs-comment">//复制当前行到下一行  ctrl+D</span><br>        <span class="hljs-type">int</span> a= <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b= <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> c= <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> d= <span class="hljs-number">40</span>;<br>        System.out.println(a+b);<br>        System.out.println(a-b);<br>        System.out.println(a*b);<br>        System.out.println(a/(<span class="hljs-type">double</span>)b);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">223232323</span>;<br>        <span class="hljs-type">int</span>  <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">byte</span>  <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        System.out.println(e + f + g + h); <span class="hljs-comment">//long</span><br>        System.out.println(f + g + h); <span class="hljs-comment">//int</span><br>        System.out.println((<span class="hljs-type">double</span>)g + h); <span class="hljs-comment">//int  如果里面有double 结果就一定会有小数</span><br><br>        <span class="hljs-comment">//关系运算符放回的结构： 正确，错误 布尔值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br>        System.out.println(j&gt;k);<br>        System.out.println(j&lt;k);<br>        System.out.println(j!=k);<br><br>        <span class="hljs-comment">//取余  模运算  %</span><br>        <span class="hljs-type">int</span> m= <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> n= <span class="hljs-number">7</span>;<br>        System.out.println(n % m);<br><br>        <span class="hljs-comment">// ++  --</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> a1++;<br>        <span class="hljs-comment">// a ++     a = a + 1;  执行完之后 a自增;   先给b赋值再自增</span><br>        System.out.println(a1);<br><br>        <span class="hljs-comment">//a= a+1;</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> ++a1; <span class="hljs-comment">//  ++a                 执行之前 a自增      自增再给b赋值</span><br>        System.out.println(a1);<br>        System.out.println(b1);<br>        System.out.println(c1);<br><br>        <span class="hljs-comment">//幂运算： 2^3  2^4   很多运算会使用一些工具类来使用</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">pow</span> <span class="hljs-operator">=</span> Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        System.out.println(pow);<br><br><br>        <span class="hljs-comment">//逻辑运算符： 与（&amp;&amp;） 或 (||) 非(!)</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        System.out.println(<span class="hljs-string">&quot;a &amp;&amp; b&quot;</span>);      <span class="hljs-comment">//逻辑与运算  全真为真</span><br>        System.out.println(<span class="hljs-string">&quot;a||b&quot;</span>);        <span class="hljs-comment">//有假为假</span><br>        System.out.println(<span class="hljs-string">&quot;a!b&quot;</span>);         <span class="hljs-comment">//取反</span><br><br>        <span class="hljs-comment">//短路运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span>(c2&lt;<span class="hljs-number">4</span>)&amp;&amp;(c2++&lt;<span class="hljs-number">4</span>);   <span class="hljs-comment">// 前面的发生错误了，后面就不会在执行了</span><br>        System.out.println(d2);<br>        System.out.println(c2);<br><br>        <span class="hljs-comment">//位运算符：  &lt;&lt;  &gt;&gt;   ==========公司要求题=========</span><br>        <span class="hljs-comment">//  &lt;&lt;  *2   底层算法中使用的很多，  左移相当于 左边的 0 变成 1</span><br>        <span class="hljs-comment">//  &gt;&gt;  /2</span><br>        <span class="hljs-comment">// 位运算效率极高</span><br><br>        <span class="hljs-comment">/* 0000 0000     1</span><br><span class="hljs-comment">           0000 0001     2</span><br><span class="hljs-comment">           0000 0010     3</span><br><span class="hljs-comment">           0000 0011     4</span><br><span class="hljs-comment">           0000 0100     5</span><br><span class="hljs-comment">           0000 0101     6</span><br><span class="hljs-comment">           0000 0110     7</span><br><span class="hljs-comment">           0000 0111     8</span><br><span class="hljs-comment">           0000 1000     9</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//字符串链接符：  + , String   在连接运算过程中，连接符+ 左右只要有一边是 String类型的最后结果就会转换为String类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>             a3+=b3;  a3 = a3+b3;<br>             a3-=b3;  a3 = a3-b3;<br><br>             <span class="hljs-comment">//==========公司要求==========：</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span> + a3 + b3);    <span class="hljs-comment">//字符串在前面，就会直接进行拼接</span><br>        System.out.println(a3 + b3 + <span class="hljs-string">&quot;&quot;</span>);   <span class="hljs-comment">//字符串在后面 前面的 a3+b3 还会进行运算</span><br><br><br>        <span class="hljs-comment">//三元运算符 ?   X ? Y : Z</span><br>        <span class="hljs-comment">//如果X==true，则结果为 y 否则结果为z   ；三元运算符是一个整体会提升精度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        String type=  score &lt;<span class="hljs-number">60</span>?  <span class="hljs-string">&quot;不及格&quot;</span>:<span class="hljs-string">&quot;及格&quot;</span>;<br>        System.out.println(type);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        运算符的优先级：</span><br><span class="hljs-comment">          算数运算符：  + - * /  %  ++  --</span><br><span class="hljs-comment">          赋值运算符：  =</span><br><span class="hljs-comment">          关系运算符： &gt;  &lt;  &gt;=   &lt;=  !=   instanceof</span><br><span class="hljs-comment">          逻辑运算符： &amp;&amp;  ||  ！  与或非</span><br><span class="hljs-comment">          位运算符： &amp;  |  ~  &gt;&gt; &lt;&lt;  &gt;&gt;&gt;  (了解！)</span><br><span class="hljs-comment">          条件运算符：  ?</span><br><span class="hljs-comment">          扩展赋值运算符： += -=  *=   /=</span><br><span class="hljs-comment">         */</span><br>        <br>        <span class="hljs-comment">//位运算</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 位运算符： &amp;  |  ~  &gt;&gt; &lt;&lt;  &gt;&gt;&gt;  (了解！)</span><br><span class="hljs-comment">         * A = 0011  1100</span><br><span class="hljs-comment">         * B = 0000 1101</span><br><span class="hljs-comment">         *   A&amp;B  0000 1100   AB上下对齐来看 俩个都是 1 才为1   有一个为0 就是0 ；</span><br><span class="hljs-comment">         *   A|B  0011  1101   都是 0就为0  有一个1就为1</span><br><span class="hljs-comment">         *   A^B  0011 0001   相同为 0 不相同为 1</span><br><span class="hljs-comment">         *   ~B   1111 0010    取反</span><br><span class="hljs-comment">         * ==============================</span><br><span class="hljs-comment">         *  2*8 怎么运算最快？   2*2*2*2*2</span><br><span class="hljs-comment">         * &lt;&lt;  左移</span><br><span class="hljs-comment">         *  &gt;&gt;  右移</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、包装机制、Java-Doc"><a href="#6、包装机制、Java-Doc" class="headerlink" title="6、包装机制、Java Doc"></a>6、包装机制、Java Doc</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.base;<br><span class="hljs-keyword">import</span> com.kuangstudy.base.Function;<br><span class="hljs-keyword">package</span> com.kuangstudy.base.*;  <span class="hljs-comment">//*号表示下面的所有都导入进来</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackageText</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    为了更好的组织类：JAva 提供了 包机制，用于命名类名和命名空间：</span><br><span class="hljs-comment">    包语句的语法格式为：</span><br><span class="hljs-comment">    package pkg[.pkg2 [.pkg3...]];</span><br><span class="hljs-comment">    一般利用公司域名倒置作为包名； com.kuangstudy.blog      top.xlaodal.www</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//导数据包：</span><br>    <span class="hljs-comment">//import package[.package1];</span><br>&#125;<br><br><span class="hljs-comment">//======================JavaDoc================</span><br><span class="hljs-keyword">package</span> com.kuangstudy.base;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xlaodal</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span>  指明需要用的JDK版本 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Doc</span> &#123;<br>   <br>    String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name    //参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>        //返回值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception   //抛出异常情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># javadoc  -encoding  UTF-8 -charset  UTF-8 Doc.java   //DOS命令用来生成文档</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05Hello World</title>
    <link href="/2023/04/02/05Hello-World/"/>
    <url>/2023/04/02/05Hello-World/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p><p>1、新建一个文件夹</p><p>2、建立一个Java文件</p><ul><li>.txt    </li><li>Hello.java</li></ul><p><img src="D:\JavaEE\素材\HelloWorld.jpg" alt="HelleWorld"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.print(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>javac  Hello.java    :编译Hello.java</p><p>java   Hello             :折行Hello.java</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04Java特性和优势</title>
    <link href="/2023/04/02/04Java%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/"/>
    <url>/2023/04/02/04Java%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>1、<strong>三高</strong>：高可用、高性能、高并发</p><p>2、简单</p><p>3、面向对象</p><p>4、write once run anymore</p><p>5、高性能</p><p>6、分布式</p><p>7、动态性 （反射机制）</p><p>8、多线程</p><p>9、安全性</p><p>10、健壮性（异常特性）</p><p> JavaSE：标准版（桌面程序、控制台）最基本的</p><p>JavaEE:  企业级开发</p><p>JDK、JRE、JVM</p><p>JDK包含JRE    ，JVM就相当于处理器，类似于虚拟机</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03基本DOS命令</title>
    <link href="/2023/04/02/03%E5%9F%BA%E6%9C%ACDOS%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/04/02/03%E5%9F%BA%E6%9C%ACDOS%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>1、打开cmd的方式：win + R</p><p>2、在任意的文件下面按住 shift+鼠标右键 选择在此处打开窗口</p><p>3、在资源管理器的文件路径里面  输入 cmd 按回车打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#盘符切换: 英文模式下</span><br><span class="hljs-comment">#查看当前目录下的所有文件 ：dir</span><br><span class="hljs-comment">#切换目录: cd   change directory</span><br><span class="hljs-comment">#cd ..    返回上一级</span><br><span class="hljs-comment">#cd + 文件名称  表示进入当前文件夹下的一个文件</span><br><span class="hljs-comment">#清除屏幕 ： cls </span><br><span class="hljs-comment">#退出终端：exit</span><br><span class="hljs-comment">#查看电脑ip:  ipconfig  Linux 是ifconfig</span><br><span class="hljs-comment">#打开计算器： calc</span><br><span class="hljs-comment">#打开画图工具： mspaint</span><br><span class="hljs-comment">#打开记事本：notepad</span><br><span class="hljs-comment">#ping:</span><br>ping www.baidu.com<br><span class="hljs-comment">#tracert 逐跳ping </span><br><span class="hljs-comment">#创建/删除文件夹： md/rd +文件夹名</span><br><span class="hljs-comment">#创建/删除文件：cd&gt;/del +文件名</span><br><span class="hljs-comment">#查看java版本：java -version</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02windows常用命令</title>
    <link href="/2023/04/02/02windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/04/02/02windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>Alt+F4  关闭窗口</strong></p><p>常用的快捷键：Ctrl + C   V    Z    X     S</p><p>shift + delete ：永久删除文件</p><p>win + R  ：打开命令行</p><p>win +  E  ：  打开我的电脑</p><p><strong>Ctrl + Alt  + delete</strong> : 打开任务管理器</p><p>在任务管理器里面删除进程后  点击文件 新建任务输入 explorer可以恢复进程</p><p><img src="D:\JavaEE\素材\win常用快捷键01.jpg" alt="恢复进程"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
