<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaWeb06Maven</title>
    <link href="/2023/04/19/JavaWeb06Maven/"/>
    <url>/2023/04/19/JavaWeb06Maven/</url>
    
    <content type="html"><![CDATA[<p>Maven</p><p>我为什么要学习这个技术</p><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入</p><p>如何能够让一个东西自动帮我导入和配置这个jar包</p><p>Maven项目架构管理工具</p><p>我们莫钱用来就是更加方便的到rujar包的</p><p>Maven的核心思想：</p><ul><li>约定大于配置</li><li>有约束，不要去违反</li></ul><h3 id="5-2下载Maven"><a href="#5-2下载Maven" class="headerlink" title="5.2下载Maven"></a>5.2下载Maven</h3><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a> </p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331104033298.png" alt="image-20230331104033298"></p><h1 id="配置环境变量："><a href="#配置环境变量：" class="headerlink" title="配置环境变量："></a>配置环境变量：</h1><p>在系统换将变量中</p><p>配置如下</p><ol><li>M2_HOME   maven目录下的bin目录</li><li>MAVEN_HOME   maven的目录</li><li>在系统的path中配置  %MAVEN_HOME%&#x2F;bin</li></ol><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331104313003.png" alt="image-20230331104313003"></p><p>测试maven是否安装成功，保证必须配置完毕</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb05Servlet</title>
    <link href="/2023/04/19/JavaWeb05Servlet/"/>
    <url>/2023/04/19/JavaWeb05Servlet/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb04Http</title>
    <link href="/2023/04/19/JavaWeb04Http/"/>
    <url>/2023/04/19/JavaWeb04Http/</url>
    
    <content type="html"><![CDATA[<h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><h2 id="4-1什么是Http"><a href="#4-1什么是Http" class="headerlink" title="4.1什么是Http"></a>4.1什么是Http</h2><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><p>文本：html，字符串</p><p>超文本：图片，音乐，视频，定位，地图</p><p>80</p><p>Https:安全的</p><p>443</p><h2 id="4-2俩个时代"><a href="#4-2俩个时代" class="headerlink" title="4.2俩个时代"></a>4.2俩个时代</h2><p>Http 01</p><p>Http&#x2F;1.0 客户端可以与web服务器连接后，只能获得一个web资源，断开连接</p><p>http2.0</p><p>Http&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源</p><h2 id="4-3Http请求"><a href="#4-3Http请求" class="headerlink" title="4.3Http请求"></a>4.3Http请求</h2><p>客户端发送一份请求（request）—-服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL:https:<span class="hljs-comment">//www.baidu.com/ 请求地址</span><br>Request Method:GET   <span class="hljs-comment">//git方法或则post方法</span><br>Remote code：<span class="hljs-number">200</span> OK <span class="hljs-comment">//状态码：200</span><br>Remote(远程) Address：<span class="hljs-number">114.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span><span class="hljs-number">.443</span><br>    <br>Accept:text/html<br>Accept-Encoding:gzip, deflate, br   <br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.9</span>  <span class="hljs-comment">//语言</span><br>Cache-Control:max-age=<span class="hljs-number">0</span><br>Connection:keep-alive<br></code></pre></td></tr></table></figure><h3 id="4-3-1请求行"><a href="#4-3-1请求行" class="headerlink" title="4.3.1请求行"></a>4.3.1请求行</h3><p>请求行中的请求方式：GET</p><p>请求方式</p><ol><li><p>get：请求能够携带的参数比较少大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</p></li><li><p>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内 容，安全，但不高效。</p></li></ol><p><strong>消息头</strong></p><p>Accept：告诉浏览器，它所支持的数据类型</p><p>Accept-Encoding：支持哪种编码格式 GBKUTF-8     GB2312     ISO8859-1</p><p>Accept-Language：告诉浏览器，它的语言环境</p><p>Cache-Control：缓存控制</p><p>Connection：告诉浏览器，请求完成是断开还是保持连接</p><p>HOST：主机&#x2F;</p><h2 id="4-4Http请求响应"><a href="#4-4Http请求响应" class="headerlink" title="4.4Http请求响应"></a>4.4Http请求响应</h2><p>Cache-Control:private      缓存控制</p><p>Connection:Keep-Alive        连接</p><p>Content-Encoding:gzip          编码</p><p>Content-Type:text&#x2F;html        类型</p><h3 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h3><ol><li><p>Accept：告诉浏览器，它所支持的数据类型</p></li><li><p>Accept-Encoding：支持哪种编码格式 GBKUTF-8</p></li><li><p>Accept-Language：告诉浏览器，它的语言环境</p></li><li><p>Cache-Control：缓存控制</p></li><li><p>Connection：告诉浏览器，请求完成是断开还是保持连接</p></li><li><p>HOST：主机&#x2F;.</p></li><li><p>Refresh：告诉客户端，多久刷新一次；</p></li><li><p>Location：让网页重新定位；</p></li></ol><h3 id="响应状态吗："><a href="#响应状态吗：" class="headerlink" title="响应状态吗："></a>响应状态吗：</h3><ol><li>200：请求响应成功200</li><li>3XX：请求重定向</li><li>重定向：你重新到我给你新位置去</li><li>4XX：找不到资源：</li><li>5XX：服务器代码错误 500   502 网关错误</li></ol><h2 id="常见面试题："><a href="#常见面试题：" class="headerlink" title="常见面试题："></a>常见面试题：</h2><p>当你的浏览器中地址栏中输入地址并回车的一瞬间到页面能够展示页面，浏览器经历了什么</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb03Tomcat</title>
    <link href="/2023/04/19/JavaWeb03Tomcat/"/>
    <url>/2023/04/19/JavaWeb03Tomcat/</url>
    
    <content type="html"><![CDATA[<p>Tomcat</p><p>3.1安装tomcat</p><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331011711019.png" alt="image-20230331011711019"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331011715202.png" alt="image-20230331011715202"></p><h2 id="3-2Tomcat启动和配置"><a href="#3-2Tomcat启动和配置" class="headerlink" title="3.2Tomcat启动和配置"></a>3.2Tomcat启动和配置</h2><p>文件夹作用：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331011736930.png" alt="image-20230331011736930"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331011740608.png" alt="image-20230331011740608"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a> </p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h2 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h2><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331011812316.png" alt="image-20230331011812316"></p><p>可以配置启动的端口号</p><p>tomcat的默认端口号为：8080</p><p>mysql：3306</p><p>http：80 https</p><p>443</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;Connector port=<span class="hljs-string">&quot;8081&quot;</span> protocol=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> connectionTimeout=<span class="hljs-string">&quot;20000&quot;</span><br>redirectPort=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>可以配置主机的名称</p><p>默认的主机名为：localhost-&gt;127.0.0.1 </p><p>默认网站应用存放的位置为：webapps</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;Host name=<span class="hljs-string">&quot;www.qinjiang.com&quot;</span> appBase=<span class="hljs-string">&quot;webapps&quot;</span><br>unpackWARs=<span class="hljs-string">&quot;true&quot;</span> autoDeploy=<span class="hljs-string">&quot;true&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a><strong>高难度面试题：</strong></h3><p>请你谈谈网站是如何进行访问的！</p><ol><li>输入一个域名；回车</li><li>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</li><li>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>     www.qinjiang.com<br></code></pre></td></tr></table></figure><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331012032432.png" alt="image-20230331012032432"></p><ol><li>可以配置一下环境变量（可选性）</li></ol><p>发布一个web网站</p><p>不会就先模仿</p><p>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps)下，就可以访问了 网站应该有的结构</p><p>HTTP协议 ： 面试</p><p>Maven：构建工具</p><p>Maven安装包</p><p>Servlet 入门</p><p>HelloWorld！</p><p>Servlet配置</p><p>原理</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb02web服务器</title>
    <link href="/2023/04/19/JavaWeb02web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/04/19/JavaWeb02web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>web服务器</p><p>技术讲解</p><p>微软：国内最早流行的就是ASP</p><p>在HTML中嵌入了VB的脚本， ASP + COM</p><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p><p>维护成本高</p><p>C# </p><p>IIS</p><p>php</p><p>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP)</p><p>无法承载大访问量的情况（局限性）</p><h4 id="JSP-x2F-Servlet"><a href="#JSP-x2F-Servlet" class="headerlink" title="JSP&#x2F;Servlet"></a><strong>JSP&#x2F;Servlet</strong></h4><p>B&#x2F;S：浏览和服务器C&#x2F;S: 客户端和服务器</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps27.png" alt="img">sun公司主推的B&#x2F;S架构</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps28.png" alt="img">基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps29.png" alt="img">可以承载三高问题带来的影响；</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps30.png" alt="img">语法像ASP ， ASP–&gt;JSP , 加强市场强度；</p><p>web服务器</p><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息</p><h4 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h4><p>微软的； ASP…,Windows中自带的</p><p>Tomca</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331011604104.png" alt="image-20230331011604104"></p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p><p>下载tomcat：</p><ol><li>安装 or 解压</li><li>了解配置文件及目录结构</li><li>这个东西的作用</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb01基础</title>
    <link href="/2023/04/19/JavaWeb01%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/19/JavaWeb01%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><h2 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h2><p>web开发：</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps1.png" alt="img">web，网页的意思 ， <a href="http://www.baidu.com/">www.baidu.com</a></p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps2.png" alt="img">静态web</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps3.png" alt="img">html，css</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps4.png" alt="img"><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps5.png" alt="img">提供给所有人看的数据始终不会发生变化！ 动态web</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps6.png" alt="img">淘宝，几乎是所有的网站；</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps7.png" alt="img">提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相 同！</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps8.png" alt="img">技术栈：Servlet&#x2F;JSP，ASP，PHP</p><p>在Java中，动态web资源开发的技术统称为JavaWeb；</p><h2 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h2><p>web应用程序：可以提供浏览器访问的程序；</p><p>a.html、b.html.多个web资源，这些web资源可以被外界访问，对外界提供服务；</p><p>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</p><p>URL</p><p>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器 一个web应用由多部分组成 （静态web，动态web)</p><p>css，js jsp，servlet Java程序</p><p>jar包</p><p>配置文件 （Properties)</p><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p><h2 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h2><p>.html    .htm  </p><p>这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331010819035.png" alt="image-20230331010819035"></p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml2084\wps19.png" alt="img"></p><p>静态web存在的缺点:</p><ol><li>Web页面无法动态更新，所有用户看到都是同一个页面轮播图，点击特效：伪动态</li><li>它无法和数据库交互（数据无法持久化，用户无法交互)</li></ol><h2 id="1-4动态web"><a href="#1-4动态web" class="headerlink" title="1.4动态web"></a>1.4动态web</h2><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230331010942106.png" alt="image-20230331010942106"></p><ol><li>JavaScript [实际开发中，它用的最多]</li><li>VBScript</li></ol><p>缺点：</p><ol><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布</li><li>停机维护</li></ol><p>优点：</p><ol><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息）</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql18MySQL新特性</title>
    <link href="/2023/04/11/sql18MySQL%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2023/04/11/sql18MySQL%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="第18章-MySQL8其它新特性"><a href="#第18章-MySQL8其它新特性" class="headerlink" title="第18章_MySQL8其它新特性"></a>第18章_MySQL8其它新特性</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-MySQL8新特性概述"><a href="#1-MySQL8新特性概述" class="headerlink" title="1. MySQL8新特性概述"></a>1. MySQL8新特性概述</h2><p><code>MySQL从5.7版本直接跳跃发布了8.0版本</code>，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="1-1-MySQL8-0-新增特性"><a href="#1-1-MySQL8-0-新增特性" class="headerlink" title="1.1 MySQL8.0 新增特性"></a>1.1 MySQL8.0 新增特性</h3><p><strong>1. 更简便的NoSQL支持</strong><br>NoSQL泛指非关系型数据库和数据存储。随着互联网平台的规模飞速发展，传统的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。</p><p><strong>2. 更好的索引</strong><br>在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了<code>隐藏索引</code>和<code>降序索引</code>。隐藏索引可以用来测试去掉索引对查询性能的影响。在查询中混合存在多列索引时，使用降序索引可以提高查询的性能。</p><p><strong>3.更完善的JSON支持</strong><br>MySQL从5.7开始支持原生JSON数据的存储，MySQL 8对这一功能做了优化，增加了聚合函数<code>JSON_ARRAYAGG()</code>和<code>JSON_OBJECTAGG()</code>，将参数聚合为JSON数组或对象，新增了行内操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。</p><p><strong>4.安全和账户管理</strong><br>MySQL 8中新增了<code>caching_sha2_password</code> 授权插件、角色、密码历史记录和FIPS模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。</p><p><strong>5.InnoDB的变化</strong><br><code>InnoDB是MySQL默认的存储引擎</code>，是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面做了大量的<code>改进和优化</code>，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的支持。</p><p><strong>6.数据字典</strong><br>在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。</p><p><strong>7. 原子数据定义语句</strong><br>MySQL 8开始支持原子数据定义语句（Automic DDL），即<code>原子DDL</code>。目前，只有InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。<br>使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、 RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。<br>对于从MySQL 5.7复制到MySQL 8 版本中的语句，可以添加<code>IF EXISTS</code>或<code>IF NOT EXISTS</code>语句来避免发生错误。</p><p><strong>8.资源管理</strong><br>MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便线程根据组内可用资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够根据不同的工作负载适当地更改这些属性。<br>目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表示，此术语包含CPU的核心数，超线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有对应权限的数据库管理员可以将这些CPU与资源组关联，并为资源组分配线程。<br>资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用于定义资源组。MySQL中存在两个默认组，系统组和用户组，默认的组不能被删除，其属性也不能被更改。对于用户自定义的组，资源组创建时可初始化所有的属性，除去名字和类型，其他属性都可在创建之后进行更改。<br>在一些平台下，或进行了某些MySQL的配置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了线程池插件，或者使用的是macOS系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线程优先级将失效。在Linux系统中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。</p><p><strong>9.字符集支持</strong><br>MySQL 8中默认的字符集由<code>latin1</code>更改为<code>utf8mb4</code>，并首次增加了日语所特定使用的集合，utf8mb4_ja_0900_as_cs。</p><p><strong>10.优化器增强</strong><br>MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许优化器对多个列进行排序，并且允许排序顺序不一致。</p><p><strong>11.公用表表达式</strong><br>公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前<code>使用WITH语句对临时结果集</code>进行命名。</p><p>基础语法如下：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">WITH</span> cte_name (col_name1,col_name2 ...) <span class="hljs-keyword">AS</span> (Subquery)<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> cte_name<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p>Subquery代表子查询，子查询前使用WITH语句将结果集命名为cte_name，在后续的查询中即可使用cte_name进行查询。</p><p><strong>12.窗口函数</strong><br>MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分<code>聚合函数</code>在MySQL 8中也可以作为窗口函数来使用。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210730165317542.png" alt="image-20210730165317542"></p><p><strong>13.正则表达式支持</strong><br>MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作，这种方式不仅能提供完全的Unicode支持，而且是多字节安全编码。MySQL增加了REGEXP_LIKE()、EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。另外，regexp_stack_limit和regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。</p><p><strong>14.内部临时表</strong><br><code>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎</code>。TempTable存储引擎为VARCHAR和VARBINARY列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。</p><p><strong>15.日志记录</strong><br>在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量log_error_services来配置，能够实现日志事件的过滤和写入。</p><p><strong>16.备份锁</strong><br>新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新备份锁由 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法提供支持，执行这些操作需要备份管理员特权。</p><p><strong>17.增强的MySQL复制</strong><br>MySQL 8复制支持对<code>JSON文档</code>进行部分更新的<code>二进制日志记录</code>，该记录<code>使用紧凑的二进制格式</code>，从而节省记录完整JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记录会自动完成，并且可以通过将新的binlog_row_value_options系统变量值设置为PARTIAL_JSON来启用。</p><h3 id="1-2-MySQL8-0移除的旧特性"><a href="#1-2-MySQL8-0移除的旧特性" class="headerlink" title="1.2 MySQL8.0移除的旧特性"></a>1.2 MySQL8.0移除的旧特性</h3><p>在MySQL 5.7版本上开发的应用程序如果使用了MySQL8.0 移除的特性，语句可能会失败，或者产生不同的执行结果。为了避免这些问题，对于使用了移除特性的应用，应当尽力修正避免使用这些特性，并尽可能使用替代方法。</p><p><strong>1. 查询缓存</strong><br><code>查询缓存已被移除</code>，删除的项有：<br><strong>（1）语句：</strong>FLUSH QUERY CACHE和RESET QUERY CACHE。<br><strong>（2）系统变量：</strong>query_cache_limit、query_cache_min_res_unit、query_cache_size、query_cache_type、query_cache_wlock_invalidate。<br><strong>（3）状态变量：</strong>Qcache_free_blocks、Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、Qcache_queries_in_cache、Qcache_total_blocks。<br><strong>（4）线程状态：</strong>checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</p><p><strong>2.加密相关</strong><br>删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项，HAVE_CRYPT CMake选项。<br>对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使用AES_ENCRYPT()和AES_DECRYPT()替代。</p><p><strong>3.空间函数相关</strong><br>在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被移除，只保留了对应的ST_和MBR函数。</p><p><strong>4.\N和NULL</strong><br>在SQL语句中，解析器不再将\N视为NULL，所以在SQL语句中应使用NULL代替\N。这项变化不会影响使用LOAD DATA INFILE或者SELECT…INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL仍等同于\N。</p><p><strong>5. mysql_install_db</strong><br>在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着–initialize或者–initialize-insecure选项的mysqld来代替实现。另外，–bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。</p><p><strong>6.通用分区处理程序</strong><br>通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存储引擎需要自有的分区处理程序。<br>提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在MySQL 8中只支持InnoDB。</p><p><strong>7.系统和状态变量信息</strong><br>在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。另外，系统变量show_compatibility_56也已被删除。被删除的状态变量有Slave_heartbeat_period、Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除的内容都可使用性能模式中对应的内容进行替代。</p><p><strong>8.mysql_plugin工具</strong><br>mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用–plugin-load或–plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该工具。</p><h2 id="2-新特性1：窗口函数"><a href="#2-新特性1：窗口函数" class="headerlink" title="2. 新特性1：窗口函数"></a>2. 新特性1：窗口函数</h2><h3 id="2-1-使用窗口函数前后对比"><a href="#2-1-使用窗口函数前后对比" class="headerlink" title="2.1 使用窗口函数前后对比"></a>2.1 使用窗口函数前后对比</h3><p>假设我现在有这样一个数据表，它显示了某购物网站在每个城市每个区的销售额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE sales(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>city VARCHAR(15),<br>county VARCHAR(15),<br>sales_value DECIMAL<br><br>);<br><br>INSERT INTO sales(city,county,sales_value)<br>VALUES<br>(&#x27;北京&#x27;,&#x27;海淀&#x27;,10.00),<br>(&#x27;北京&#x27;,&#x27;朝阳&#x27;,20.00),<br>(&#x27;上海&#x27;,&#x27;黄埔&#x27;,30.00),<br>(&#x27;上海&#x27;,&#x27;长宁&#x27;,10.00);<br></code></pre></td></tr></table></figure><p>查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM sales;<br>+----+------+--------+-------------+<br>| id | city | county | sales_value |<br>+----+------+--------+-------------+<br>|  1 | 北京 | 海淀    |          10 |<br>|  2 | 北京 | 朝阳    |          20 |<br>|  3 | 上海 | 黄埔    |          30 |<br>|  4 | 上海 | 长宁    |          10 |<br>+----+------+--------+-------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>需求：</strong>现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售额中的比率，以及占总销售额中的比率。</p><p>如果用分组和聚合函数，就需要分好几步来计算。</p><p>第一步，计算总销售金额，并存入临时表 a：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TEMPORARY TABLE a       -- 创建临时表<br>SELECT SUM(sales_value) AS sales_value -- 计算总计金额<br>FROM sales;<br></code></pre></td></tr></table></figure><p>查看一下临时表 a ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM a;<br>+-------------+<br>| sales_value |<br>+-------------+<br>|          70 |<br>+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>第二步，计算每个城市的销售总额并存入临时表 b：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TEMPORARY TABLE b    -- 创建临时表<br>SELECT city,SUM(sales_value) AS sales_value  -- 计算城市销售合计<br>FROM sales<br>GROUP BY city;<br></code></pre></td></tr></table></figure><p>查看临时表 b ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM b;<br>+------+-------------+<br>| city | sales_value |<br>+------+-------------+<br>| 北京 |          30 |<br>| 上海 |          40 |<br>+------+-------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>第三步，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过下面的连接查询获得需要的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT s.city AS 城市,s.county AS 区,s.sales_value AS 区销售额,<br>    -&gt; b.sales_value AS 市销售额,s.sales_value/b.sales_value AS 市比率,<br>    -&gt; a.sales_value AS 总销售额,s.sales_value/a.sales_value AS 总比率<br>    -&gt; FROM sales s<br>    -&gt; JOIN b ON (s.city=b.city) -- 连接市统计结果临时表<br>    -&gt; JOIN a                   -- 连接总计金额临时表<br>    -&gt; ORDER BY s.city,s.county;<br>+------+------+----------+----------+--------+----------+--------+<br>| 城市  | 区   | 区销售额  | 市销售额   | 市比率  | 总销售额  | 总比率  |<br>+------+------+----------+----------+--------+----------+--------+<br>| 上海  | 长宁 |       10 |       40 | 0.2500 |       70 | 0.1429 |<br>| 上海  | 黄埔 |       30 |       40 | 0.7500 |       70 | 0.4286 |<br>| 北京  | 朝阳 |       20 |       30 | 0.6667 |       70 | 0.2857 |<br>| 北京  | 海淀 |       10 |       30 | 0.3333 |       70 | 0.1429 |<br>+------+------+----------+----------+--------+----------+--------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。</p><p>同样的查询，如果用窗口函数，就简单多了。我们可以用下面的代码来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT city AS 城市,county AS 区,sales_value AS 区销售额,<br>    -&gt; SUM(sales_value) OVER(PARTITION BY city) AS 市销售额,  -- 计算市销售额<br>    -&gt; sales_value/SUM(sales_value) OVER(PARTITION BY city) AS 市比率,<br>    -&gt; SUM(sales_value) OVER() AS 总销售额,   -- 计算总销售额<br>    -&gt; sales_value/SUM(sales_value) OVER() AS 总比率<br>    -&gt; FROM sales<br>    -&gt; ORDER BY city,county;<br>+------+------+----------+----------+--------+----------+--------+<br>| 城市  | 区   | 区销售额  | 市销售额   | 市比率  | 总销售额  | 总比率  |<br>+------+------+----------+----------+--------+----------+--------+<br>| 上海  | 长宁 |       10 |       40  | 0.2500 |       70 | 0.1429 |<br>| 上海  | 黄埔 |       30 |       40  | 0.7500 |       70 | 0.4286 |<br>| 北京  | 朝阳 |       20 |       30  | 0.6667 |       70 | 0.2857 |<br>| 北京  | 海淀 |       10 |       30  | 0.3333 |       70 | 0.1429 |<br>+------+------+----------+-----------+--------+----------+--------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果显示，我们得到了与上面那种查询同样的结果。</p><p>使用窗口函数，只用了一步就完成了查询。而且，由于没有用到临时表，执行的效率也更高了。很显然，<strong>在这种需要用到分组统计的结果对每一条记录进行计算的场景下，使用窗口函数更好</strong>。</p><h3 id="2-2-窗口函数分类"><a href="#2-2-窗口函数分类" class="headerlink" title="2.2 窗口函数分类"></a>2.2 窗口函数分类</h3><p>MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p><p>窗口函数可以分为<code>静态窗口函数</code>和<code>动态窗口函数</code>。</p><ul><li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li><li>动态窗口函数的窗口大小会随着记录的不同而变化。</li></ul><p>MySQL官方网站窗口函数的网址为<a href="https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number%E3%80%82">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number。</a></p><p>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012162944536.png" alt="image-20211012162944536"></p><h3 id="2-3-语法结构"><a href="#2-3-语法结构" class="headerlink" title="2.3 语法结构"></a>2.3 语法结构</h3><p>窗口函数的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">函数 OVER（[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<br></code></pre></td></tr></table></figure><p>或者是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">函数 OVER 窗口名 … WINDOW 窗口名 AS （[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<br></code></pre></td></tr></table></figure><ul><li>OVER 关键字指定函数窗口的范围。<ul><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ul></li><li>窗口名：为窗口设置一个别名，用来标识窗口。</li><li>PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。</li><li>ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。</li><li>FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。</li></ul><h3 id="2-4-分类讲解"><a href="#2-4-分类讲解" class="headerlink" title="2.4 分类讲解"></a>2.4 分类讲解</h3><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE goods(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>category_id INT,<br>category VARCHAR(15),<br>NAME VARCHAR(30),<br>price DECIMAL(10,2),<br>stock INT,<br>upper_time DATETIME<br><br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO goods(category_id,category,NAME,price,stock,upper_time)<br>VALUES<br>(1, &#x27;女装/女士精品&#x27;, &#x27;T恤&#x27;, 39.90, 1000, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;连衣裙&#x27;, 79.90, 2500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;卫衣&#x27;, 89.90, 1500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;牛仔裤&#x27;, 89.90, 3500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;百褶裙&#x27;, 29.90, 500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;呢绒外套&#x27;, 399.90, 1200, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;自行车&#x27;, 399.90, 1000, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;山地自行车&#x27;, 1399.90, 2500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;登山杖&#x27;, 59.90, 1500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;骑行装备&#x27;, 399.90, 3500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;运动外套&#x27;, 799.90, 500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;滑板&#x27;, 499.90, 1200, &#x27;2020-11-10 00:00:00&#x27;);<br></code></pre></td></tr></table></figure><p>下面针对goods表中的数据来验证每个窗口函数的功能。</p><h4 id="1-序号函数"><a href="#1-序号函数" class="headerlink" title="1. 序号函数"></a>1. 序号函数</h4><p><strong>1．ROW_NUMBER()函数</strong></p><p>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。</p><p>举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>    -&gt; id, category_id, category, NAME, price, stock<br>    -&gt; FROM goods;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>| row_num | id | category_id | category      | NAME       | price   | stock |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣        |   89.90 |  1500 |<br>|       3 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |<br>|       4 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |<br>|       5 |  1 |           1 | 女装/女士精品   | T恤        |   39.90 |  1000 |<br>|       6 |  5 |           1 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |<br>|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90 |  2500 |<br>|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |<br>|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90 |  1200 |<br>|       4 |  7 |           2 | 户外运动       | 自行车      |  399.90 |  1000 |<br>|       5 | 10 |           2 | 户外运动       | 骑行装备    |  399.90 |  3500 |<br>|       6 |  9 |           2 | 户外运动       | 登山杖      |   59.90 |  1500 |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：查询 goods 数据表中每个商品分类下价格最高的3种商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT *<br>    -&gt; FROM (<br>    -&gt;  SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>    -&gt;  id, category_id, category, NAME, price, stock<br>    -&gt;  FROM goods) t<br>    -&gt; WHERE row_num &lt;= 3;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>| row_num | id | category_id | category      | NAME       | price   | stock |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90  |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣        |   89.90 |  1500 |<br>|       3 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90  |  3500 |<br>|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90  |  2500 |<br>|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90  |   500 |<br>|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90  |  1200 |<br>+---------+----+-------------+---------------+------------+----------+-------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>在名称为“女装&#x2F;女士精品”的商品类别中，有两款商品的价格为89.90元，分别是卫衣和牛仔裤。两款商品的序号都应该为2，而不是一个为2，另一个为3。此时，可以使用RANK()函数和DENSE_RANK()函数解决。</p><p><strong>2．RANK()函数</strong></p><p>使用RANK()函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为1、1、3。</p><p>举例：使用RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>    -&gt; id, category_id, category, NAME, price, stock<br>    -&gt; FROM goods;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|<span class="hljs-string"> row_num </span>|<span class="hljs-string"> id </span>|<span class="hljs-string"> category_id </span>|<span class="hljs-string"> category      </span>|<span class="hljs-string"> NAME       </span>|<span class="hljs-string"> price   </span>|<span class="hljs-string"> stock </span>|<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|<span class="hljs-string">       1 </span>|<span class="hljs-string">  6 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 呢绒外套    </span>|<span class="hljs-string">  399.90 </span>|<span class="hljs-string">  1200 </span>|<br>|<span class="hljs-string">       2 </span>|<span class="hljs-string">  3 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 卫衣        </span>|<span class="hljs-string">   89.90 </span>|<span class="hljs-string">  1500 </span>|<br>|<span class="hljs-string">       2 </span>|<span class="hljs-string">  4 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 牛仔裤      </span>|<span class="hljs-string">   89.90 </span>|<span class="hljs-string">  3500 </span>|<br>|<span class="hljs-string">       4 </span>|<span class="hljs-string">  2 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 连衣裙      </span>|<span class="hljs-string">   79.90 </span>|<span class="hljs-string">  2500 </span>|<br>|<span class="hljs-string">       5 </span>|<span class="hljs-string">  1 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> T恤         </span>|<span class="hljs-string">   39.90 </span>|<span class="hljs-string">  1000 </span>|<br>|<span class="hljs-string">       6 </span>|<span class="hljs-string">  5 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 百褶裙      </span>|<span class="hljs-string">   29.90 </span>|<span class="hljs-string">   500 </span>|<br>|<span class="hljs-string">       1 </span>|<span class="hljs-string">  8 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 山地自行车   </span>|<span class="hljs-string"> 1399.90 </span>|<span class="hljs-string">  2500 </span>|<br>|<span class="hljs-string">       2 </span>|<span class="hljs-string"> 11 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 运动外套     </span>|<span class="hljs-string">  799.90 </span>|<span class="hljs-string">   500 </span>|<br>|<span class="hljs-string">       3 </span>|<span class="hljs-string"> 12 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 滑板        </span>|<span class="hljs-string">  499.90 </span>|<span class="hljs-string">  1200 </span>|<br>|<span class="hljs-string">       4 </span>|<span class="hljs-string">  7 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 自行车      </span>|<span class="hljs-string">  399.90 </span>|<span class="hljs-string">  1000 </span>|<br>|<span class="hljs-string">       4 </span>|<span class="hljs-string"> 10 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 骑行装备    </span>|<span class="hljs-string">  399.90 </span>|<span class="hljs-string">  3500 </span>|<br>|<span class="hljs-string">       6 </span>|<span class="hljs-string">  9 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 登山杖      </span>|<span class="hljs-string">   59.90 </span>|<span class="hljs-string">  1500 </span>|<br>+---------+----+-------------+---------------+------------+---------+-------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：使用RANK()函数获取 goods 数据表中类别为“女装&#x2F;女士精品”的价格最高的4款商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT *<br>    -&gt; FROM(<br>    -&gt;  SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>    -&gt;  id, category_id, category, NAME, price, stock<br>    -&gt;  FROM goods) t<br>    -&gt; WHERE category_id = 1 AND row_num &lt;= 4;<br>+---------+----+-------------+---------------+----------+--------+-------+<br>| row_num | id | category_id | category      | NAME     | price  | stock |<br>+---------+----+-------------+---------------+----------+--------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣      |  89.90 |  1500 |<br>|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤    |  89.90 |  3500 |<br>|       4 |  2 |           1 | 女装/女士精品   | 连衣裙    |  79.90 |  2500 |<br>+---------+----+-------------+---------------+----------+--------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，使用RANK()函数得出的序号为1、2、2、4，相同价格的商品序号相同，后面的商品序号是不连续的，跳过了重复的序号。</p><p><strong>3．DENSE_RANK()函数</strong></p><p>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1、1、2。</p><p>举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>    -&gt; id, category_id, category, NAME, price, stock<br>    -&gt; FROM goods;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|<span class="hljs-string"> row_num </span>|<span class="hljs-string"> id </span>|<span class="hljs-string"> category_id </span>|<span class="hljs-string"> category      </span>|<span class="hljs-string"> NAME       </span>|<span class="hljs-string"> price   </span>|<span class="hljs-string"> stock </span>|<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|<span class="hljs-string">       1 </span>|<span class="hljs-string">  6 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 呢绒外套    </span>|<span class="hljs-string">  399.90 </span>|<span class="hljs-string">  1200 </span>|<br>|<span class="hljs-string">       2 </span>|<span class="hljs-string">  3 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 卫衣        </span>|<span class="hljs-string">   89.90 </span>|<span class="hljs-string">  1500 </span>|<br>|<span class="hljs-string">       2 </span>|<span class="hljs-string">  4 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 牛仔裤      </span>|<span class="hljs-string">   89.90 </span>|<span class="hljs-string">  3500 </span>|<br>|<span class="hljs-string">       3 </span>|<span class="hljs-string">  2 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 连衣裙      </span>|<span class="hljs-string">   79.90 </span>|<span class="hljs-string">  2500 </span>|<br>|<span class="hljs-string">       4 </span>|<span class="hljs-string">  1 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> T恤        </span>|<span class="hljs-string">   39.90 </span>|<span class="hljs-string">  1000 </span>|<br>|<span class="hljs-string">       5 </span>|<span class="hljs-string">  5 </span>|<span class="hljs-string">           1 </span>|<span class="hljs-string"> 女装/女士精品   </span>|<span class="hljs-string"> 百褶裙      </span>|<span class="hljs-string">   29.90 </span>|<span class="hljs-string">   500 </span>|<br>|<span class="hljs-string">       1 </span>|<span class="hljs-string">  8 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 山地自行车   </span>|<span class="hljs-string"> 1399.90 </span>|<span class="hljs-string">  2500 </span>|<br>|<span class="hljs-string">       2 </span>|<span class="hljs-string"> 11 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 运动外套     </span>|<span class="hljs-string">  799.90 </span>|<span class="hljs-string">   500 </span>|<br>|<span class="hljs-string">       3 </span>|<span class="hljs-string"> 12 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 滑板        </span>|<span class="hljs-string">  499.90 </span>|<span class="hljs-string">  1200 </span>|<br>|<span class="hljs-string">       4 </span>|<span class="hljs-string">  7 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 自行车       </span>|<span class="hljs-string">  399.90 </span>|<span class="hljs-string">  1000 </span>|<br>|<span class="hljs-string">       4 </span>|<span class="hljs-string"> 10 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 骑行装备     </span>|<span class="hljs-string">  399.90 </span>|<span class="hljs-string">  3500 </span>|<br>|<span class="hljs-string">       5 </span>|<span class="hljs-string">  9 </span>|<span class="hljs-string">           2 </span>|<span class="hljs-string"> 户外运动       </span>|<span class="hljs-string"> 登山杖       </span>|<span class="hljs-string">   59.90 </span>|<span class="hljs-string">  1500 </span>|<br>+---------+----+-------------+---------------+------------+---------+-------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：使用DENSE_RANK()函数获取 goods 数据表中类别为“女装&#x2F;女士精品”的价格最高的4款商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT *<br>    -&gt; FROM(<br>    -&gt;  SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>    -&gt;  id, category_id, category, NAME, price, stock<br>    -&gt;  FROM goods) t<br>    -&gt; WHERE category_id = 1 AND row_num &lt;= 3;<br>+---------+----+-------------+---------------+----------+--------+-------+<br>| row_num | id | category_id | category      | NAME     | price  | stock |<br>+---------+----+-------------+---------------+----------+--------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90  |  1500 |<br>|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤    |  89.90 |  3500 |<br>|       3 |  2 |           1 | 女装/女士精品   | 连衣裙    |  79.90 |  2500 |<br>+---------+----+-------------+---------------+----------+--------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，使用DENSE_RANK()函数得出的行号为1、2、2、3，相同价格的商品序号相同，后面的商品序号是连续的，并且没有跳过重复的序号。</p><h4 id="2-分布函数"><a href="#2-分布函数" class="headerlink" title="2. 分布函数"></a>2. 分布函数</h4><p><strong>1．PERCENT_RANK()函数</strong></p><p>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">(rank - 1) / (rows - 1)<br></code></pre></td></tr></table></figure><p>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。</p><p>举例：计算 goods 数据表中名称为“女装&#x2F;女士精品”的类别下的商品的PERCENT_RANK值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#写法一：<br>SELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS r,<br>PERCENT_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS pr,<br>id, category_id, category, NAME, price, stock<br>FROM goods<br>WHERE category_id = 1;<br><br>#写法二：<br>mysql&gt; SELECT RANK() OVER w AS r,<br>    -&gt; PERCENT_RANK() OVER w AS pr,<br>    -&gt; id, category_id, category, NAME, price, stock<br>    -&gt; FROM goods<br>    -&gt; WHERE category_id = 1 WINDOW w AS (PARTITION BY category_id ORDER BY price DESC);<br>+---+-----+----+-------------+---------------+----------+--------+-------+<br>| r | pr  | id | category_id | category      | NAME     | price  | stock |<br>+---+-----+----+-------------+---------------+----------+--------+-------+<br>| 1 |   0 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |<br>| 2 | 0.2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90 |  1500 |<br>| 2 | 0.2 |  4 |           1 | 女装/女士精品   | 牛仔裤   |  89.90 |  3500  |<br>| 4 | 0.6 |  2 |           1 | 女装/女士精品   | 连衣裙   |  79.90 |  2500  |<br>| 5 | 0.8 |  1 |           1 | 女装/女士精品   | T恤      |  39.90 |  1000 |<br>| 6 |   1 |  5 |           1 | 女装/女士精品   | 百褶裙   |  29.90  |   500 |<br>+---+-----+----+-------------+---------------+----------+--------+-------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>2．CUME_DIST()函数</strong></p><p>CUME_DIST()函数主要用于查询小于或等于某个值的比例。</p><p>举例：查询goods数据表中小于或等于当前价格的比例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CUME_DIST() OVER(PARTITION BY category_id ORDER BY price ASC) AS cd,<br>    -&gt; id, category, NAME, price<br>    -&gt; FROM goods;<br>+---------------------+----+---------------+------------+---------+<br>| cd                  | id | category      | NAME       | price   |<br>+---------------------+----+---------------+------------+---------+<br>| 0.16666666666666666 |  5 | 女装/女士精品   | 百褶裙      |   29.90 |<br>|  0.3333333333333333 |  1 | 女装/女士精品   | T恤        |   39.90 |<br>|                 0.5 |  2 | 女装/女士精品   | 连衣裙      |   79.90 |<br>|  0.8333333333333334 |  3 | 女装/女士精品   | 卫衣        |   89.90 |<br>|  0.8333333333333334 |  4 | 女装/女士精品   | 牛仔裤      |   89.90 |<br>|                   1 |  6 | 女装/女士精品   | 呢绒外套    |  399.90 |<br>| 0.16666666666666666 |  9 | 户外运动       | 登山杖      |   59.90 |<br>|                 0.5 |  7 | 户外运动       | 自行车      |  399.90 |<br>|                 0.5 | 10 | 户外运动       | 骑行装备     |  399.90 |<br>|  0.6666666666666666 | 12 | 户外运动       | 滑板        |  499.90 |<br>|  0.8333333333333334 | 11 | 户外运动       | 运动外套    |  799.90 |<br>|                   1 |  8 | 户外运动       | 山地自行车   | 1399.90 |<br>+---------------------+----+---------------+------------+---------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-前后函数"><a href="#3-前后函数" class="headerlink" title="3. 前后函数"></a>3. 前后函数</h4><p><strong>1．LAG(expr,n)函数</strong></p><p>LAG(expr,n)函数返回当前行的前n行的expr的值。</p><p>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price, pre_price, price - pre_price AS diff_price<br>    -&gt; FROM (<br>    -&gt;  SELECT  id, category, NAME, price,LAG(price,1) OVER w AS pre_price<br>    -&gt;  FROM goods<br>    -&gt;  WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;<br>+----+---------------+------------+---------+-----------+------------+<br>| id | category      | NAME       | price   | pre_price | diff_price |<br>+----+---------------+------------+---------+-----------+------------+<br>|  5 | 女装/女士精品   | 百褶裙      |   29.90 |      NULL |       NULL |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |     29.90 |      10.00 |<br>|  2 | 女装/女士精品   | 连衣裙      |   79.90 |     39.90 |      40.00 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |     79.90 |      10.00 |<br>|  4 | 女装/女士精品   | 牛仔裤      |   89.90 |     89.90 |       0.00 |<br>|  6 | 女装/女士精品   | 呢绒外套    |  399.90 |     89.90 |     310.00 |<br>|  9 | 户外运动       | 登山杖      |   59.90 |      NULL |       NULL |<br>|  7 | 户外运动       | 自行车      |  399.90 |     59.90 |     340.00 |<br>| 10 | 户外运动       | 骑行装备    |  399.90 |    399.90 |       0.00 |<br>| 12 | 户外运动       | 滑板       |  499.90 |    399.90 |     100.00 |<br>| 11 | 户外运动       | 运动外套    |  799.90 |    499.90 |     300.00 |<br>|  8 | 户外运动       | 山地自行车  | 1399.90 |    799.90 |     600.00 |<br>+----+---------------+------------+---------+-----------+------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>2．LEAD(expr,n)函数</strong></p><p>LEAD(expr,n)函数返回当前行的后n行的expr的值。</p><p>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, behind_price, price,behind_price - price AS diff_price<br>    -&gt; FROM(<br>    -&gt;  SELECT id, category, NAME, price,LEAD(price, 1) OVER w AS behind_price<br>    -&gt;  FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;<br>+----+---------------+------------+--------------+---------+------------+<br>| id | category      | NAME       | behind_price | price   | diff_price |<br>+----+---------------+------------+--------------+---------+------------+<br>|  5 | 女装/女士精品   | 百褶裙      |        39.90 |   29.90 |      10.00 |<br>|  1 | 女装/女士精品   | T恤        |        79.90 |   39.90 |      40.00 |<br>|  2 | 女装/女士精品   | 连衣裙      |        89.90 |   79.90 |      10.00 |<br>|  3 | 女装/女士精品   | 卫衣        |        89.90 |   89.90 |       0.00 |<br>|  4 | 女装/女士精品   | 牛仔裤      |       399.90 |   89.90 |     310.00 |<br>|  6 | 女装/女士精品   | 呢绒外套     |         NULL |  399.90 |       NULL |<br>|  9 | 户外运动       | 登山杖       |       399.90 |   59.90 |     340.00 |<br>|  7 | 户外运动       | 自行车       |       399.90 |  399.90 |       0.00 |<br>| 10 | 户外运动       | 骑行装备     |       499.90 |  399.90 |     100.00 |<br>| 12 | 户外运动       | 滑板        |       799.90 |  499.90 |     300.00 |<br>| 11 | 户外运动       | 运动外套     |      1399.90 |  799.90 |     600.00 |<br>|  8 | 户外运动       | 山地自行车   |         NULL | 1399.90 |       NULL |<br>+----+---------------+------------+--------------+---------+------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="4-首尾函数"><a href="#4-首尾函数" class="headerlink" title="4. 首尾函数"></a>4. 首尾函数</h4><p><strong>1．FIRST_VALUE(expr)函数</strong></p><p>FIRST_VALUE(expr)函数返回第一个expr的值。</p><p>举例：按照价格排序，查询第1个商品的价格信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price, stock,FIRST_VALUE(price) OVER w AS first_price<br>    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br>+----+---------------+------------+---------+-------+-------------+<br>| id | category      | NAME       | price   | stock | first_price |<br>+----+---------------+------------+---------+-------+-------------+<br>|  5 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |       29.90 |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |  1000 |       29.90 |<br>|  2 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |       29.90 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |  1500 |       29.90 |<br>|  4 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |       29.90 |<br>|  6 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |       29.90 |<br>|  9 | 户外运动       | 登山杖      |   59.90 |  1500 |       59.90 |<br>|  7 | 户外运动       | 自行车      |  399.90 |  1000 |       59.90 |<br>| 10 | 户外运动       | 骑行装备    |  399.90 |  3500 |       59.90 |<br>| 12 | 户外运动       | 滑板       |  499.90 |  1200 |       59.90 |<br>| 11 | 户外运动       | 运动外套    |  799.90 |   500 |       59.90 |<br>|  8 | 户外运动       | 山地自行车  | 1399.90 |  2500 |       59.90 |<br>+----+---------------+------------+---------+-------+-------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>2．LAST_VALUE(expr)函数</strong></p><p>LAST_VALUE(expr)函数返回最后一个expr的值。</p><p>举例：按照价格排序，查询最后一个商品的价格信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price, stock,LAST_VALUE(price) OVER w AS last_price<br>    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br>+----+---------------+------------+---------+-------+------------+<br>| id | category      | NAME       | price   | stock | last_price |<br>+----+---------------+------------+---------+-------+------------+<br>|  5 | 女装/女士精品   | 百褶裙     |   29.90 |   500 |      29.90 |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |  1000 |      39.90 |<br>|  2 | 女装/女士精品   | 连衣裙     |   79.90 |  2500 |      79.90 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |  1500 |      89.90 |<br>|  4 | 女装/女士精品   | 牛仔裤     |   89.90 |  3500 |      89.90 |<br>|  6 | 女装/女士精品   | 呢绒外套   |  399.90 |  1200 |     399.90 |<br>|  9 | 户外运动       | 登山杖     |   59.90 |  1500 |      59.90 |<br>|  7 | 户外运动       | 自行车     |  399.90 |  1000 |     399.90 |<br>| 10 | 户外运动       | 骑行装备   |  399.90 |  3500 |     399.90 |<br>| 12 | 户外运动       | 滑板       |  499.90 |  1200 |     499.90 |<br>| 11 | 户外运动       | 运动外套   |  799.90 |   500 |     799.90 |<br>|  8 | 户外运动       | 山地自行车 | 1399.90 |  2500 |    1399.90 |<br>+----+---------------+------------+---------+-------+------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="5-其他函数"><a href="#5-其他函数" class="headerlink" title="5. 其他函数"></a>5. 其他函数</h4><p><strong>1．NTH_VALUE(expr,n)函数</strong></p><p>NTH_VALUE(expr,n)函数返回第n个expr的值。</p><p>举例：查询goods数据表中排名第2和第3的价格信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price,NTH_VALUE(price,2) OVER w AS second_price,<br>    -&gt; NTH_VALUE(price,3) OVER w AS third_price<br>    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br>+----+---------------+------------+---------+--------------+-------------+<br>| id | category      | NAME       | price   | second_price | third_price |<br>+----+---------------+------------+---------+--------------+-------------+<br>|  5 | 女装/女士精品   | 百褶裙     |   29.90 |         NULL |        NULL |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |        39.90 |        NULL |<br>|  2 | 女装/女士精品   | 连衣裙     |   79.90 |        39.90 |       79.90 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |        39.90 |       79.90 |<br>|  4 | 女装/女士精品   | 牛仔裤     |   89.90 |        39.90 |       79.90 |<br>|  6 | 女装/女士精品   | 呢绒外套   |  399.90 |        39.90 |       79.90 |<br>|  9 | 户外运动       | 登山杖     |   59.90 |         NULL |        NULL |<br>|  7 | 户外运动       | 自行车     |  399.90 |       399.90 |      399.90 |<br>| 10 | 户外运动       | 骑行装备   |  399.90 |       399.90 |      399.90 |<br>| 12 | 户外运动       | 滑板       |  499.90 |       399.90 |      399.90 |<br>| 11 | 户外运动       | 运动外套   |  799.90 |       399.90 |      399.90 |<br>|  8 | 户外运动       | 山地自行车 | 1399.90 |       399.90 |      399.90 |<br>+----+---------------+------------+---------+--------------+-------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>2．NTILE(n)函数</strong></p><p>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。</p><p>举例：将goods表中的商品按照价格分为3组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NTILE(3) OVER w AS nt,id, category, NAME, price<br>    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br>+----+----+---------------+------------+---------+<br>| nt | id | category      | NAME       | price   |<br>+----+----+---------------+------------+---------+<br>|  1 |  5 | 女装/女士精品 | 百褶裙     |   29.90 |<br>|  1 |  1 | 女装/女士精品 | T恤        |   39.90 |<br>|  2 |  2 | 女装/女士精品 | 连衣裙     |   79.90 |<br>|  2 |  3 | 女装/女士精品 | 卫衣       |   89.90 |<br>|  3 |  4 | 女装/女士精品 | 牛仔裤     |   89.90 |<br>|  3 |  6 | 女装/女士精品 | 呢绒外套   |  399.90 |<br>|  1 |  9 | 户外运动      | 登山杖     |   59.90 |<br>|  1 |  7 | 户外运动      | 自行车     |  399.90 |<br>|  2 | 10 | 户外运动      | 骑行装备   |  399.90 |<br>|  2 | 12 | 户外运动      | 滑板       |  499.90 |<br>|  3 | 11 | 户外运动      | 运动外套   |  799.90 |<br>|  3 |  8 | 户外运动      | 山地自行车 | 1399.90 |<br>+----+----+---------------+------------+---------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="2-5-小-结"><a href="#2-5-小-结" class="headerlink" title="2.5 小 结"></a>2.5 小 结</h3><p>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数，这对我们在原表数据的基础上进行统计和排序非常有用。</p><h2 id="3-新特性2：公用表表达式"><a href="#3-新特性2：公用表表达式" class="headerlink" title="3. 新特性2：公用表表达式"></a>3. 新特性2：公用表表达式</h2><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p><p>依据语法结构和执行方式的不同，公用表表达式分为<code>普通公用表表达式</code>和<code>递归公用表表达式</code> 2 种。</p><h3 id="3-1-普通公用表表达式"><a href="#3-1-普通公用表表达式" class="headerlink" title="3.1 普通公用表表达式"></a>3.1 普通公用表表达式</h3><p>普通公用表表达式的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH CTE名称 <br>AS （子查询）<br>SELECT|DELETE|UPDATE 语句;<br></code></pre></td></tr></table></figure><p>普通公用表表达式类似于子查询，不过，跟子查询不同的是，它可以被多次引用，而且可以被其他的普通公用表表达式所引用。</p><p>举例：查询员工所在的部门的详细信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM departments<br>    -&gt; WHERE department_id IN (<br>    -&gt;                  SELECT DISTINCT department_id<br>    -&gt;                  FROM employees<br>    -&gt;                  );<br>+---------------+------------------+------------+-------------+<br>| department_id | department_name  | manager_id | location_id |<br>+---------------+------------------+------------+-------------+<br>|            10 | Administration   |        200 |        1700 |<br>|            20 | Marketing        |        201 |        1800 |<br>|            30 | Purchasing       |        114 |        1700 |<br>|            40 | Human Resources  |        203 |        2400 |<br>|            50 | Shipping         |        121 |        1500 |<br>|            60 | IT               |        103 |        1400 |<br>|            70 | Public Relations |        204 |        2700 |<br>|            80 | Sales            |        145 |        2500 |<br>|            90 | Executive        |        100 |        1700 |<br>|           100 | Finance          |        108 |        1700 |<br>|           110 | Accounting       |        205 |        1700 |<br>+---------------+------------------+------------+-------------+<br>11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>这个查询也可以用普通公用表表达式的方式完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; WITH emp_dept_id<br>    -&gt; AS (SELECT DISTINCT department_id FROM employees)<br>    -&gt; SELECT *<br>    -&gt; FROM departments d JOIN emp_dept_id e<br>    -&gt; ON d.department_id = e.department_id;<br>+---------------+------------------+------------+-------------+---------------+<br>| department_id | department_name  | manager_id | location_id | department_id |<br>+---------------+------------------+------------+-------------+---------------+<br>|            90 | Executive        |        100 |        1700 |            90 |<br>|            60 | IT               |        103 |        1400 |            60 |<br>|           100 | Finance          |        108 |        1700 |           100 |<br>|            30 | Purchasing       |        114 |        1700 |            30 |<br>|            50 | Shipping         |        121 |        1500 |            50 |<br>|            80 | Sales            |        145 |        2500 |            80 |<br>|            10 | Administration   |        200 |        1700 |            10 |<br>|            20 | Marketing        |        201 |        1800 |            20 |<br>|            40 | Human Resources  |        203 |        2400 |            40 |<br>|            70 | Public Relations |        204 |        2700 |            70 |<br>|           110 | Accounting       |        205 |        1700 |           110 |<br>+---------------+------------------+------------+-------------+---------------+<br>11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>例子说明，公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询则不能。</p><h3 id="3-2-递归公用表表达式"><a href="#3-2-递归公用表表达式" class="headerlink" title="3.2 递归公用表表达式"></a>3.2 递归公用表表达式</h3><p>递归公用表表达式也是一种公用表表达式，只不过，除了普通公用表表达式的特点以外，它还有自己的特点，就是<strong>可以调用自己</strong>。它的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH RECURSIVE<br>CTE名称 AS （子查询）<br>SELECT|DELETE|UPDATE 语句;<br></code></pre></td></tr></table></figure><p>递归公用表表达式由 2 部分组成，分别是种子查询和递归查询，中间通过关键字 UNION  [ALL]进行连接。这里的<strong>种子查询，意思就是获得递归的初始值</strong>。这个查询只会运行一次，以创建初始数据集，之后递归查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p><p><strong>案例：</strong>针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下属。</p><p>下面我们尝试用查询语句列出所有具有下下属身份的人员信息。</p><p>如果用我们之前学过的知识来解决，会比较复杂，至少要进行 4 次查询才能搞定：</p><ul><li><p>第一步，先找出初代管理者，就是不以任何别人为管理者的人，把结果存入临时表；</p></li><li><p>第二步，找出所有以初代管理者为管理者的人，得到一个下属集，把结果存入临时表；</p></li><li><p>第三步，找出所有以下属为管理者的人，得到一个下下属集，把结果存入临时表。</p></li><li><p>第四步，找出所有以下下属为管理者的人，得到一个结果集。</p></li></ul><p>如果第四步的结果集为空，则计算结束，第三步的结果集就是我们需要的下下属集了，否则就必须继续进行第四步，一直到结果集为空为止。比如上面的这个数据表，就需要到第五步，才能得到空结果集。而且，最后还要进行第六步：把第三步和第四步的结果集合并，这样才能最终获得我们需要的结果集。</p><p>如果用递归公用表表达式，就非常简单了。我介绍下具体的思路。</p><ul><li><p>用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1，表示是第一代管理者。</p></li><li><p>用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次的值加 1。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。</p></li><li><p>在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是下下属了。这样就得到了我们需要的结果集。</p></li></ul><p>这里看似也是 3 步，实际上是一个查询的 3 个部分，只需要执行一次就可以了。而且也不需要用临时表保存中间结果，比刚刚的方法简单多了。</p><p><strong>代码实现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH RECURSIVE cte <br>AS <br>(<br>SELECT employee_id,last_name,manager_id,1 AS n FROM employees WHERE employee_id = 100 -- 种子查询，找到第一代领导<br>UNION ALL<br>SELECT a.employee_id,a.last_name,a.manager_id,n+1 FROM employees AS a JOIN cte<br>ON (a.manager_id = cte.employee_id) -- 递归查询，找出以递归公用表表达式的人为领导的人<br>)<br>SELECT employee_id,last_name FROM cte WHERE n &gt;= 3; <br></code></pre></td></tr></table></figure><p>总之，递归公用表表达式对于查询一个有共同的根节点的树形结构数据，非常有用。它可以不受层级的限制，轻松查出所有节点的数据。如果用其他的查询方式，就比较复杂了。</p><h3 id="3-3-小-结"><a href="#3-3-小-结" class="headerlink" title="3.3 小 结"></a>3.3 小 结</h3><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql17触发器</title>
    <link href="/2023/04/11/sql17%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <url>/2023/04/11/sql17%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第17章-触发器"><a href="#第17章-触发器" class="headerlink" title="第17章_触发器"></a>第17章_触发器</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如<code>商品信息</code>和<code>库存信息</code>分别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时在库存表中添加一条库存记录。</p><p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用<code>事务</code>包裹起来，确保这两个操作成为一个<code>原子操作</code>，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很<code>容易忘记其中的一步</code>，导致数据缺失。</p><p>这个时候，咱们可以使用触发器。<strong>你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。</strong>这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p><h2 id="1-触发器概述"><a href="#1-触发器概述" class="headerlink" title="1. 触发器概述"></a>1. 触发器概述</h2><p>MySQL从<code>5.0.2</code>版本开始支持触发器。MySQL的触发器和存储过程一样，都是嵌入到MySQL服务器的一段程序。</p><p>触发器是由<code>事件来触发</code>某个操作，这些事件包括<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生了，就会<code>自动</code>激发触发器执行相应的操作。</p><p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p><h2 id="2-触发器的创建"><a href="#2-触发器的创建" class="headerlink" title="2. 触发器的创建"></a>2. 触发器的创建</h2><h3 id="2-1-创建触发器语法"><a href="#2-1-创建触发器语法" class="headerlink" title="2.1 创建触发器语法"></a>2.1 创建触发器语法</h3><p>创建触发器的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TRIGGER 触发器名称 <br>&#123;BEFORE|AFTER&#125; &#123;INSERT|UPDATE|DELETE&#125; ON 表名 <br>FOR EACH ROW <br>触发器执行的语句块;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><p><code>表名</code>：表示触发器监控的对象。</p></li><li><p><code>BEFORE|AFTER</code>：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。</p></li><li><p><code>INSERT|UPDATE|DELETE</code>：表示触发的事件。</p><ul><li>INSERT 表示插入记录时触发；</li><li>UPDATE 表示更新记录时触发；</li><li>DELETE 表示删除记录时触发。</li></ul></li><li><p><code>触发器执行的语句块</code>：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</p></li></ul><h3 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h3><p><strong>举例1：</strong></p><p>1、创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_trigger (<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>t_note VARCHAR(30)<br>);<br><br><br>CREATE TABLE test_trigger_log (<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>t_log VARCHAR(30)<br>);<br></code></pre></td></tr></table></figure><p>2、创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向test_trigger_log数据表中插入before_insert的日志信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE TRIGGER before_insert<br>BEFORE INSERT ON test_trigger <br>FOR EACH ROW<br>BEGIN<br>INSERT INTO test_trigger_log (t_log)<br>VALUES(&#x27;before_insert&#x27;);<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>3、向test_trigger数据表中插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_trigger (t_note) VALUES (&#x27;测试 BEFORE INSERT 触发器&#x27;);<br></code></pre></td></tr></table></figure><p>4、查看test_trigger_log数据表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_trigger_log;<br>+----+---------------+<br>| id | t_log         |<br>+----+---------------+<br>|  1 | before_insert |<br>+----+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>1、创建名称为after_insert的触发器，向test_trigger数据表插入数据之后，向test_trigger_log数据表中插入after_insert的日志信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE TRIGGER after_insert<br>AFTER INSERT ON test_trigger<br>FOR EACH ROW<br>BEGIN<br>INSERT INTO test_trigger_log (t_log)<br>VALUES(&#x27;after_insert&#x27;);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>2、向test_trigger数据表中插入数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_trigger (t_note) VALUES (&#x27;测试 AFTER INSERT 触发器&#x27;);<br></code></pre></td></tr></table></figure><p>3、查看test_trigger_log数据表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_trigger_log;<br>+----+---------------+<br>| id | t_log         |<br>+----+---------------+<br>|  1 | before_insert |<br>|  2 | before_insert |<br>|  3 | after_insert  |<br>+----+---------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>举例3：</strong>定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错误，从而使得添加失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE TRIGGER salary_check_trigger<br>BEFORE INSERT ON employees FOR EACH ROW<br>BEGIN<br>DECLARE mgrsalary DOUBLE;<br>SELECT salary INTO mgrsalary FROM employees WHERE employee_id = NEW.manager_id;<br><br>IF NEW.salary &gt; mgrsalary THEN<br>SIGNAL SQLSTATE &#x27;HY000&#x27; SET MESSAGE_TEXT = &#x27;薪资高于领导薪资错误&#x27;;<br>END IF;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。</p><h2 id="3-查看、删除触发器"><a href="#3-查看、删除触发器" class="headerlink" title="3. 查看、删除触发器"></a>3. 查看、删除触发器</h2><h3 id="3-1-查看触发器"><a href="#3-1-查看触发器" class="headerlink" title="3.1 查看触发器"></a>3.1 查看触发器</h3><p>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。</p><p>方式1：查看当前数据库的所有触发器的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TRIGGERS\G<br></code></pre></td></tr></table></figure><p>方式2：查看当前数据库中某个触发器的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE TRIGGER 触发器名<br></code></pre></td></tr></table></figure><p>方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.TRIGGERS;<br></code></pre></td></tr></table></figure><h3 id="3-2-删除触发器"><a href="#3-2-删除触发器" class="headerlink" title="3.2 删除触发器"></a>3.2 删除触发器</h3><p>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TRIGGER  IF EXISTS 触发器名称;<br></code></pre></td></tr></table></figure><h2 id="4-触发器的优缺点"><a href="#4-触发器的优缺点" class="headerlink" title="4. 触发器的优缺点"></a>4. 触发器的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><p><strong>1、触发器可以确保数据的完整性</strong>。</p><p>假设我们用<code>进货单头表</code>（demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编号、仓库编号、总计进货数量、总计进货金额和验收日期。</p><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211010233336012.png" alt="image-20211010233336012"></p><p>用<code>进货单明细表</code>（demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数量、进货价格和进货金额。</p><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211010233344125.png" alt="image-20211010233344125"></p><p>每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。</p><p>为了解决这个问题，我们就可以使用触发器，<strong>规定每当进货单明细表有数据插入、修改和删除的操作时，自动触发 2 步操作：</strong></p><p>1）重新计算进货单明细表中的数量合计和金额合计；</p><p>2）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。</p><p>这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与合计金额的值相同，数据就是一致的，不会互相矛盾。</p><p><strong>2、触发器可以帮助我们记录操作日志。</strong></p><p>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。</p><p><strong>3、触发器还可以用在操作数据前，对数据进行合法性检查。</strong></p><p>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏……这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。</p><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><p><strong>1、触发器最大的一个问题就是可读性差。</strong></p><p>因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能<code>不受应用层的控制</code>。这对系统维护是非常有挑战的。</p><p>比如，创建触发器用于修改会员储值操作。如果触发器中的操作出了问题，会导致会员储值金额更新失败。我用下面的代码演示一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; update demo.membermaster set memberdeposit=20 where memberid = 2;<br>ERROR 1054 (42S22): Unknown column &#x27;aa&#x27; in &#x27;field list&#x27;<br></code></pre></td></tr></table></figure><p>结果显示，系统提示错误，字段“aa”不存在。</p><p>这是因为，触发器中的数据插入操作多了一个字段，系统提示错误。可是，如果你不了解这个触发器，很可能会认为是更新语句本身的问题，或者是会员信息表的结构出了问题。说不定你还会给会员信息表添加一个叫“aa”的字段，试图解决这个问题，结果只能是白费力。</p><p><strong>2、相关数据的变更，可能会导致触发器出错。</strong></p><p>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p><h3 id="4-3-注意点"><a href="#4-3-注意点" class="headerlink" title="4.3 注意点"></a>4.3 注意点</h3><p>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE&#x2F;DELETE CASCADE&#x2F;SET NULL子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。</p><p>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee）有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL，但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器t1。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql16变量、流程控制与游标</title>
    <link href="/2023/04/11/sql16%E5%8F%98%E9%87%8F%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%B8%E6%A0%87/"/>
    <url>/2023/04/11/sql16%E5%8F%98%E9%87%8F%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%B8%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="第16章-变量、流程控制与游标"><a href="#第16章-变量、流程控制与游标" class="headerlink" title="第16章_变量、流程控制与游标"></a>第16章_变量、流程控制与游标</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。</p><p>在 MySQL 数据库中，变量分为<code>系统变量</code>以及<code>用户自定义变量</code>。</p><h3 id="1-1-系统变量"><a href="#1-1-系统变量" class="headerlink" title="1.1 系统变量"></a>1.1 系统变量</h3><h4 id="1-1-1-系统变量分类"><a href="#1-1-1-系统变量分类" class="headerlink" title="1.1.1 系统变量分类"></a>1.1.1 系统变量分类</h4><p>变量由系统定义，不是用户定义，属于<code>服务器</code>层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是<code>编译MySQL时参数</code>的默认值，要么是<code>配置文件</code>（例如my.ini等）中的参数值。大家可以通过网址 <code>https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html</code> 查看MySQL文档的系统变量。</p><p>系统变量分为全局系统变量（需要添加<code>global</code> 关键字）以及会话系统变量（需要添加 <code>session</code> 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。<strong>如果不写，默认会话级别。</strong>静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p><p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211108114846634.png" alt="image-20211108114846634"></p><ul><li>全局系统变量针对于所有会话（连接）有效，但<code>不能跨重启</code></li><li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。</li><li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li></ul><p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p><h4 id="1-1-2-查看系统变量"><a href="#1-1-2-查看系统变量" class="headerlink" title="1.1.2 查看系统变量"></a>1.1.2 查看系统变量</h4><ul><li><strong>查看所有或部分系统变量</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看所有全局变量<br>SHOW GLOBAL VARIABLES;<br><br>#查看所有会话变量<br>SHOW SESSION VARIABLES;<br>或<br>SHOW VARIABLES;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看满足条件的部分系统变量。<br>SHOW GLOBAL VARIABLES LIKE &#x27;%标识符%&#x27;;<br><br>#查看满足条件的部分会话变量<br>SHOW SESSION VARIABLES LIKE &#x27;%标识符%&#x27;;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW GLOBAL VARIABLES LIKE &#x27;admin_%&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>查看指定系统变量</strong></li></ul><p>作为 MySQL 编码规范，MySQL 中的系统变量以<code>两个“@”</code>开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看指定的系统变量的值<br>SELECT @@global.变量名;<br><br>#查看指定的会话变量的值<br>SELECT @@session.变量名;<br>#或者<br>SELECT @@变量名;<br></code></pre></td></tr></table></figure><ul><li><strong>修改系统变量的值</strong></li></ul><p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：</p><p>方式1：修改MySQL<code>配置文件</code>，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）</p><p>方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#为某个系统变量赋值<br>#方式1：<br>SET @@global.变量名=变量值;<br>#方式2：<br>SET GLOBAL 变量名=变量值;<br><br><br>#为某个会话变量赋值<br>#方式1：<br>SET @@session.变量名=变量值;<br>#方式2：<br>SET SESSION 变量名=变量值;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@global.autocommit;<br>SET GLOBAL autocommit=0;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@session.tx_isolation;<br>SET @@session.tx_isolation=&#x27;read-uncommitted&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET GLOBAL max_connections = 1000;<br>SELECT @@global.max_connections;<br></code></pre></td></tr></table></figure><h3 id="1-2-用户变量"><a href="#1-2-用户变量" class="headerlink" title="1.2 用户变量"></a>1.2 用户变量</h3><h4 id="1-2-1-用户变量分类"><a href="#1-2-1-用户变量分类" class="headerlink" title="1.2.1 用户变量分类"></a>1.2.1 用户变量分类</h4><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以<code>一个“@”</code>开头。根据作用范围不同，又分为<code>会话用户变量</code>和<code>局部变量</code>。</p><ul><li><p>会话用户变量：作用域和会话变量一样，只对<code>当前连接</code>会话有效。</p></li><li><p>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在<code>存储过程和函数</code>中使用。</p></li></ul><h4 id="1-2-2-会话用户变量"><a href="#1-2-2-会话用户变量" class="headerlink" title="1.2.2 会话用户变量"></a>1.2.2 会话用户变量</h4><ul><li>变量的定义</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：“=”或“:=”<br>SET @用户变量 = 值;<br>SET @用户变量 := 值;<br><br>#方式2：“:=” 或 INTO关键字<br>SELECT @用户变量 := 表达式 [FROM 等子句];<br>SELECT 表达式 INTO @用户变量  [FROM 等子句];<br><br></code></pre></td></tr></table></figure><ul><li>查看用户变量的值 （查看、比较、运算等）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @用户变量<br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @a = 1;<br><br>SELECT @a;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @num := COUNT(*) FROM employees;<br><br>SELECT @num;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT AVG(salary) INTO @avgsalary FROM employees;<br><br>SELECT @avgsalary;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @big;  #查看某个未声明的变量时，将得到NULL值<br></code></pre></td></tr></table></figure><h4 id="1-2-3-局部变量"><a href="#1-2-3-局部变量" class="headerlink" title="1.2.3 局部变量"></a>1.2.3 局部变量</h4><p>定义：可以使用<code>DECLARE</code>语句定义一个局部变量</p><p>作用域：仅仅在定义它的 BEGIN … END 中有效</p><p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">BEGIN<br>#声明局部变量<br>DECLARE 变量名1 变量数据类型 [DEFAULT 变量默认值];<br>DECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];<br><br>#为局部变量赋值<br>SET 变量名1 = 值;<br>SELECT 值 INTO 变量名2 [FROM 子句];<br><br>#查看局部变量的值<br>SELECT 变量1,变量2,变量3;<br>END<br><br></code></pre></td></tr></table></figure><p><strong>1.定义变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE　myparam　INT　DEFAULT 100;<br></code></pre></td></tr></table></figure><p><strong>2.变量赋值</strong></p><p>方式1：一般用于赋简单的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET 变量名=值;<br>SET 变量名:=值;<br></code></pre></td></tr></table></figure><p>方式2：一般用于赋表中的字段值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段名或表达式 INTO 变量名 FROM 表;<br></code></pre></td></tr></table></figure><p><strong>3.使用变量</strong>（查看、比较、运算等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 局部变量名;<br></code></pre></td></tr></table></figure><p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE set_value()<br>BEGIN<br>DECLARE emp_name VARCHAR(25);<br>DECLARE sal DOUBLE(10,2);<br><br>SELECT last_name,salary INTO emp_name,sal<br>FROM employees <br>WHERE employee_id = 102;<br><br>SELECT emp_name,sal;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：使用用户变量<br>SET @m=1;<br>SET @n=1;<br>SET @sum=@m+@n;<br><br>SELECT @sum;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：使用局部变量<br>DELIMITER //<br><br>CREATE PROCEDURE add_value()<br>BEGIN<br>#局部变量<br>DECLARE m INT DEFAULT 1;<br>DECLARE n INT DEFAULT 3;<br>DECLARE SUM INT;<br><br>SET SUM = m+n;<br>SELECT SUM;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例3：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工id，用OUT参数dif_salary输出薪资差距结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#声明<br>DELIMITER //<br><br>CREATE PROCEDURE different_salary(IN emp_id INT,OUT dif_salary DOUBLE)<br>BEGIN<br>#声明局部变量<br>DECLARE emp_sal,mgr_sal DOUBLE DEFAULT 0.0;<br>DECLARE mgr_id INT;<br><br>SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;<br>SELECT manager_id INTO mgr_id FROM employees WHERE employee_id = emp_id;<br>SELECT salary INTO mgr_sal FROM employees WHERE employee_id = mgr_id;<br>SET dif_salary = mgr_sal - emp_sal;<br><br>END //<br><br>DELIMITER ;<br><br>#调用<br>SET @emp_id = 102;<br>CALL different_salary(@emp_id,@diff_sal);<br><br><br>#查看<br>SELECT @diff_sal;<br></code></pre></td></tr></table></figure><h4 id="1-2-4-对比会话用户变量与局部变量"><a href="#1-2-4-对比会话用户变量与局部变量" class="headerlink" title="1.2.4 对比会话用户变量与局部变量"></a>1.2.4 对比会话用户变量与局部变量</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">  作用域定义位置  语法<br>会话用户变量  当前会话   会话的任何地方加@符号，不用指定类型<br>局部变量   定义它的<span class="hljs-keyword">BEGIN</span> <span class="hljs-keyword">END</span>中 <span class="hljs-keyword">BEGIN</span> <span class="hljs-keyword">END</span>的第一句话  一般不用加@,需要指定类型<br></code></pre></td></tr></table></figure><h2 id="2-定义条件与处理程序"><a href="#2-定义条件与处理程序" class="headerlink" title="2. 定义条件与处理程序"></a>2. 定义条件与处理程序</h2><p><code>定义条件</code>是事先定义程序执行过程中可能遇到的问题，<code>处理程序</code>定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p><p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p><h3 id="2-1-案例分析"><a href="#2-1-案例分析" class="headerlink" title="2.1 案例分析"></a>2.1 案例分析</h3><p><strong>案例分析：</strong>创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE UpdateDataNoCondition()<br>BEGIN<br>SET @x = 1;<br>UPDATE employees SET email = NULL WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 2;<br>UPDATE employees SET email = &#x27;aabbel&#x27; WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 3;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL UpdateDataNoCondition();<br>ERROR 1048 (23000): Column &#x27;email&#x27; cannot be null<br><br>mysql&gt; SELECT @x;<br>+------+<br>| @x   |<br>+------+<br>|   1  |<br>+------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑，不再向下继续执行。</p><h3 id="2-2-定义条件"><a href="#2-2-定义条件" class="headerlink" title="2.2 定义条件"></a>2.2 定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个<code>错误名字</code>和<code>指定的错误条件</code>关联起来。这个名字可以随后被用在定义处理程序的<code>DECLARE HANDLER</code>语句中。</p><p>定义条件使用DECLARE语句，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）<br></code></pre></td></tr></table></figure><p>错误码的说明：</p><ul><li><code>MySQL_error_code</code>和<code>sqlstate_value</code>都可以表示MySQL的错误。<ul><li>MySQL_error_code是数值类型错误代码。</li><li>sqlstate_value是长度为5的字符串类型错误代码。</li></ul></li><li>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</li><li>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</li></ul><p><strong>举例1：</strong>定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#使用MySQL_error_code<br>DECLARE Field_Not_Be_NULL CONDITION FOR 1048;<br><br>#使用sqlstate_value<br>DECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE &#x27;23000&#x27;;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>定义”ERROR 1148(42000)”错误，名称为command_not_allowed。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#使用MySQL_error_code<br>DECLARE command_not_allowed CONDITION FOR 1148;<br><br>#使用sqlstate_value<br>DECLARE command_not_allowed CONDITION FOR SQLSTATE &#x27;42000&#x27;;<br></code></pre></td></tr></table></figure><h3 id="2-3-定义处理程序"><a href="#2-3-定义处理程序" class="headerlink" title="2.3 定义处理程序"></a>2.3 定义处理程序</h3><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE 处理方式 HANDLER FOR 错误类型 处理语句<br></code></pre></td></tr></table></figure><ul><li><strong>处理方式</strong>：处理方式有3个取值：CONTINUE、EXIT、UNDO。<ul><li><code>CONTINUE</code>：表示遇到错误不处理，继续执行。</li><li><code>EXIT</code>：表示遇到错误马上退出。</li><li><code>UNDO</code>：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li></ul></li><li><strong>错误类型</strong>（即条件）可以有如下取值：<ul><li><code>SQLSTATE &#39;字符串错误码&#39;</code>：表示长度为5的sqlstate_value类型的错误代码；</li><li><code>MySQL_error_code</code>：匹配数值类型错误代码；</li><li><code>错误名称</code>：表示DECLARE … CONDITION定义的错误条件名称。</li><li><code>SQLWARNING</code>：匹配所有以01开头的SQLSTATE错误代码；</li><li><code>NOT FOUND</code>：匹配所有以02开头的SQLSTATE错误代码；</li><li><code>SQLEXCEPTION</code>：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li></ul></li><li><strong>处理语句</strong>：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“<code>SET 变量 = 值</code>”这样的简单语句，也可以是使用<code>BEGIN ... END</code>编写的复合语句。</li></ul><p>定义处理程序的几种方式，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方法1：捕获sqlstate_value<br>DECLARE CONTINUE HANDLER FOR SQLSTATE &#x27;42S02&#x27; SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法2：捕获mysql_error_value<br>DECLARE CONTINUE HANDLER FOR 1146 SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法3：先定义条件，再调用<br>DECLARE no_such_table CONDITION FOR 1146;<br>DECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法4：使用SQLWARNING<br>DECLARE EXIT HANDLER FOR SQLWARNING SET @info = &#x27;ERROR&#x27;;<br><br>#方法5：使用NOT FOUND<br>DECLARE EXIT HANDLER FOR NOT FOUND SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法6：使用SQLEXCEPTION<br>DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info = &#x27;ERROR&#x27;;<br></code></pre></td></tr></table></figure><h3 id="2-4-案例解决"><a href="#2-4-案例解决" class="headerlink" title="2.4 案例解决"></a>2.4 案例解决</h3><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行CONTINUE操作，并且将@proc_value的值设置为-1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE UpdateDataNoCondition()<br>BEGIN<br>#定义处理程序<br>DECLARE CONTINUE HANDLER FOR 1048 SET @proc_value = -1;<br><br>SET @x = 1;<br>UPDATE employees SET email = NULL WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 2;<br>UPDATE employees SET email = &#x27;aabbel&#x27; WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 3;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL UpdateDataWithCondition();<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT @x,@proc_value;<br>+------+-------------+<br>| @x   | @proc_value |<br>+------+-------------+<br>|    3 |        -1  |<br>+------+-------------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><p>创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。</p><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为23000时，执行EXIT操作，并且将@proc_value的值设置为-1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#准备工作<br>CREATE TABLE departments<br>AS<br>SELECT * FROM atguigudb.`departments`;<br><br>ALTER TABLE departments<br>ADD CONSTRAINT uk_dept_name UNIQUE(department_id);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE InsertDataWithCondition()<br>BEGIN<br>DECLARE duplicate_entry CONDITION FOR SQLSTATE &#x27;23000&#x27; ;<br>DECLARE EXIT HANDLER FOR duplicate_entry SET @proc_value = -1;<br><br>SET @x = 1;<br>INSERT INTO departments(department_name) VALUES(&#x27;测试&#x27;);<br>SET @x = 2;<br>INSERT INTO departments(department_name) VALUES(&#x27;测试&#x27;);<br>SET @x = 3;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL InsertDataWithCondition();<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT @x,@proc_value;<br>+------+-------------+<br>| @x   | @proc_value |<br>+------+-------------+<br>|    2 |        -1  |<br>+------+-------------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><h2 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3. 流程控制"></a>3. 流程控制</h2><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p><ul><li><code>顺序结构</code>：程序从上往下依次执行</li><li><code>分支结构</code>：程序按条件进行选择执行，从两条或多条路径中选择一条执行</li><li><code>循环结构</code>：程序满足一定条件下，重复执行一组语句</li></ul><p>针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。</p><ul><li><code>条件判断语句</code>：IF 语句和 CASE 语句</li><li><code>循环语句</code>：LOOP、WHILE 和 REPEAT 语句</li><li><code>跳转语句</code>：ITERATE 和 LEAVE 语句</li></ul><h3 id="3-1-分支结构之-IF"><a href="#3-1-分支结构之-IF" class="headerlink" title="3.1 分支结构之 IF"></a>3.1 分支结构之 IF</h3><ul><li>IF 语句的语法结构是：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IF 表达式1 THEN 操作1<br>[ELSEIF 表达式2 THEN 操作2]……<br>[ELSE 操作N]<br>END IF<br></code></pre></td></tr></table></figure><p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。</p><ul><li><p>特点：① 不同的表达式对应不同的操作 ② 使用在begin end中</p></li><li><p><strong>举例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IF val IS NULL <br>THEN SELECT &#x27;val is null&#x27;;<br>ELSE SELECT &#x27;val is not null&#x27;;<br><br>END IF;<br></code></pre></td></tr></table></figure></li><li><p><strong>举例2：</strong>声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)<br>BEGIN<br>DECLARE emp_salary DOUBLE;<br>DECLARE hire_year DOUBLE;<br><br>SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;<br><br>SELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year<br>FROM employees WHERE employee_id = emp_id;<br><br>IF emp_salary &lt; 8000 AND hire_year &gt; 5<br>THEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;<br>END IF;<br>END //<br><br><br>DELIMITER ;<br></code></pre></td></tr></table></figure></li><li><p><strong>举例3：</strong>声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元并且入职时间超过5年，就涨薪500元；否则就涨薪100元。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid2(IN emp_id INT)<br>BEGIN<br>DECLARE emp_salary DOUBLE;<br>DECLARE hire_year DOUBLE;<br><br>SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;<br><br>SELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year<br>FROM employees WHERE employee_id = emp_id;<br><br>IF emp_salary &lt; 8000 AND hire_year &gt; 5<br>THEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;<br>ELSE <br>UPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;<br>END IF;<br>END //<br><br><br>DELIMITER ;<br></code></pre></td></tr></table></figure></li><li><p><strong>举例4：</strong>声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资如果大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid3(IN emp_id INT)<br>BEGIN<br>DECLARE emp_salary DOUBLE;<br>DECLARE bonus DECIMAL(3,2);<br><br>SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;<br>SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;<br><br>IF emp_salary &lt; 9000<br>THEN UPDATE employees SET salary = 9000 WHERE employee_id = emp_id;<br>ELSEIF emp_salary &lt; 10000 AND bonus IS NULL<br>THEN UPDATE employees SET commission_pct = 0.01 WHERE employee_id = emp_id;<br>ELSE<br>UPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;<br>END IF;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-分支结构之-CASE"><a href="#3-2-分支结构之-CASE" class="headerlink" title="3.2 分支结构之 CASE"></a>3.2 分支结构之 CASE</h3><p>CASE 语句的语法结构1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#情况一：类似于switch<br>CASE 表达式<br>WHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号) <br>WHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号)<br>...<br>ELSE 结果n或语句n(如果是语句，需要加分号)<br>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<br></code></pre></td></tr></table></figure><p>CASE 语句的语法结构2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#情况二：类似于多重if<br>CASE <br>WHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号) <br>WHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)<br>...<br>ELSE 结果n或语句n(如果是语句，需要加分号)<br>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<br></code></pre></td></tr></table></figure><ul><li><strong>举例1：</strong></li></ul><p>使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE val<br>　　　WHEN 1 THEN SELECT &#x27;val is 1&#x27;;<br>　　　WHEN 2 THEN SELECT &#x27;val is 2&#x27;;<br>　　　ELSE SELECT &#x27;val is not 1 or 2&#x27;;<br>END CASE;<br></code></pre></td></tr></table></figure><ul><li><strong>举例2：</strong></li></ul><p>使用CASE流程控制语句的第2种格式，判断val是否为空、小于0、大于0或者等于0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE<br>WHEN val IS NULL THEN SELECT &#x27;val is null&#x27;;<br>WHEN val &lt; 0 THEN SELECT &#x27;val is less than 0&#x27;;<br>WHEN val &gt; 0 THEN SELECT &#x27;val is greater than 0&#x27;;<br>ELSE SELECT &#x27;val is 0&#x27;;<br>END CASE;<br></code></pre></td></tr></table></figure><ul><li><strong>举例3：</strong>声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)<br>BEGIN<br>DECLARE emp_sal DOUBLE;<br>DECLARE bonus DECIMAL(3,2);<br><br>SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;<br>SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;<br><br>CASE<br>WHEN emp_sal&lt;9000<br>THEN UPDATE employees SET salary=9000 WHERE employee_id = emp_id;<br>WHEN emp_sal&lt;10000 AND bonus IS NULL<br>THEN UPDATE employees SET commission_pct=0.01 WHERE employee_id = emp_id;<br>ELSE<br>UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;<br>END CASE;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ul><li>举例4：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年，薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)<br>BEGIN<br>DECLARE emp_sal DOUBLE;<br>DECLARE hire_year DOUBLE;<br><br>SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;<br><br>SELECT ROUND(DATEDIFF(CURDATE(),hire_date)/365) INTO hire_year FROM employees WHERE employee_id = emp_id;<br><br>CASE hire_year<br>WHEN 0 THEN UPDATE employees SET salary=salary+50 WHERE employee_id = emp_id;<br>WHEN 1 THEN UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;<br>WHEN 2 THEN UPDATE employees SET salary=salary+200 WHERE employee_id = emp_id;<br>WHEN 3 THEN UPDATE employees SET salary=salary+300 WHERE employee_id = emp_id;<br>WHEN 4 THEN UPDATE employees SET salary=salary+400 WHERE employee_id = emp_id;<br>ELSE UPDATE employees SET salary=salary+500 WHERE employee_id = emp_id;<br>END CASE;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-3-循环结构之LOOP"><a href="#3-3-循环结构之LOOP" class="headerlink" title="3.3 循环结构之LOOP"></a>3.3 循环结构之LOOP</h3><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。</p><p>LOOP语句的基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[loop_label:] LOOP<br>循环执行的语句<br>END LOOP [loop_label]<br></code></pre></td></tr></table></figure><p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p><p><strong>举例1：</strong></p><p>使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE id INT DEFAULT 0;<br>add_loop:LOOP<br>SET id = id +1;<br>IF id &gt;= 10 THEN LEAVE add_loop;<br>END IF;<br><br>END LOOP add_loop;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_loop(OUT num INT)<br>BEGIN<br>DECLARE avg_salary DOUBLE;<br>DECLARE loop_count INT DEFAULT 0;<br><br>SELECT AVG(salary) INTO avg_salary FROM employees;<br><br>label_loop:LOOP<br>IF avg_salary &gt;= 12000 THEN LEAVE label_loop;<br>END IF;<br><br>UPDATE employees SET salary = salary * 1.1;<br>SET loop_count = loop_count + 1;<br>SELECT AVG(salary) INTO avg_salary FROM employees;<br>END LOOP label_loop;<br><br>SET num = loop_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-4-循环结构之WHILE"><a href="#3-4-循环结构之WHILE" class="headerlink" title="3.4 循环结构之WHILE"></a>3.4 循环结构之WHILE</h3><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[while_label:] WHILE 循环条件  DO<br>循环体<br>END WHILE [while_label];<br></code></pre></td></tr></table></figure><p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。</p><p><strong>举例1：</strong></p><p>WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE test_while()<br>BEGIN<br>DECLARE i INT DEFAULT 0;<br><br>WHILE i &lt; 10 DO<br>SET i = i + 1;<br>END WHILE;<br><br>SELECT i;<br>END //<br><br>DELIMITER ;<br>#调用<br>CALL test_while();<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_while(OUT num INT)<br>BEGIN<br>DECLARE avg_sal DOUBLE ;<br>DECLARE while_count INT DEFAULT 0;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br><br>WHILE avg_sal &gt; 5000 DO<br>UPDATE employees SET salary = salary * 0.9;<br><br>SET while_count = while_count + 1;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br>END WHILE;<br><br>SET num = while_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-5-循环结构之REPEAT"><a href="#3-5-循环结构之REPEAT" class="headerlink" title="3.5 循环结构之REPEAT"></a>3.5 循环结构之REPEAT</h3><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。</p><p>REPEAT语句的基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[repeat_label:] REPEAT<br>　　　　循环体的语句<br>UNTIL 结束循环的条件表达式<br>END REPEAT [repeat_label]<br></code></pre></td></tr></table></figure><p>repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至expr_condition为真。</p><p><strong>举例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE test_repeat()<br>BEGIN<br>DECLARE i INT DEFAULT 0;<br><br>REPEAT <br>SET i = i + 1;<br>UNTIL i &gt;= 10<br>END REPEAT;<br><br>SELECT i;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_repeat(OUT num INT)<br>BEGIN<br>DECLARE avg_sal DOUBLE ;<br>DECLARE repeat_count INT DEFAULT 0;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br><br>REPEAT<br>UPDATE employees SET salary = salary * 1.15;<br><br>SET repeat_count = repeat_count + 1;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br>UNTIL avg_sal &gt;= 13000<br>END REPEAT;<br><br>SET num = repeat_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>对比三种循环结构：</strong></p><p>1、这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。<br>2、<br>LOOP：一般用于实现简单的”死”循环<br>WHILE：先判断后执行<br>REPEAT：先执行后判断，无条件至少执行一次</p><h3 id="3-6-跳转语句之LEAVE语句"><a href="#3-6-跳转语句之LEAVE语句" class="headerlink" title="3.6 跳转语句之LEAVE语句"></a>3.6 跳转语句之LEAVE语句</h3><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p><p>基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LEAVE 标记名<br></code></pre></td></tr></table></figure><p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p><p><strong>举例1：</strong>创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在BEGIN…END中使用IF语句判断num参数的值。</p><ul><li>如果num&lt;&#x3D;0，则使用LEAVE语句退出BEGIN…END；</li><li>如果num&#x3D;1，则查询“employees”表的平均薪资；</li><li>如果num&#x3D;2，则查询“employees”表的最低薪资；</li><li>如果num&gt;2，则查询“employees”表的最高薪资。</li></ul><p>IF语句结束后查询“employees”表的总人数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE leave_begin(IN num INT)<br><br>begin_label: BEGIN<br>IF num&lt;=0 <br>THEN LEAVE begin_label;<br>ELSEIF num=1 <br>THEN SELECT AVG(salary) FROM employees;<br>ELSEIF num=2 <br>THEN SELECT MIN(salary) FROM employees;<br>ELSE <br>SELECT MAX(salary) FROM employees;<br>END IF;<br><br>SELECT COUNT(*) FROM employees;<br>END //<br><br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE leave_while(OUT num INT)<br><br>BEGIN <br>#<br>DECLARE avg_sal DOUBLE;#记录平均工资<br>DECLARE while_count INT DEFAULT 0; #记录循环次数<br><br>SELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件<br><br>while_label:WHILE TRUE DO  #② 循环条件<br><br>#③ 循环体<br>IF avg_sal &lt;= 10000 THEN<br>LEAVE while_label;<br>END IF;<br><br>UPDATE employees SET salary  = salary * 0.9;<br>SET while_count = while_count + 1;<br><br>#④ 迭代条件<br>SELECT AVG(salary) INTO avg_sal FROM employees;<br><br>END WHILE;<br><br>#赋值<br>SET num = while_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-7-跳转语句之ITERATE语句"><a href="#3-7-跳转语句之ITERATE语句" class="headerlink" title="3.7 跳转语句之ITERATE语句"></a>3.7 跳转语句之ITERATE语句</h3><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p><p>语句基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ITERATE label<br></code></pre></td></tr></table></figure><p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p><p><strong>举例：</strong>  定义局部变量num，初始值为0。循环结构中执行num + 1操作。</p><ul><li>如果num &lt; 10，则继续执行循环；</li><li>如果num &gt; 15，则退出循环结构；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE test_iterate()<br><br>BEGIN<br>DECLARE num INT DEFAULT 0;<br><br>my_loop:LOOP<br>SET num = num + 1;<br><br>IF num &lt; 10 <br>THEN ITERATE my_loop;<br>ELSEIF num &gt; 15 <br>THEN LEAVE my_loop;<br>END IF;<br><br>SELECT &#x27;尚硅谷：让天下没有难学的技术&#x27;;<br><br>END LOOP my_loop;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="4-游标"><a href="#4-游标" class="headerlink" title="4. 游标"></a>4. 游标</h2><h3 id="4-1-什么是游标（或光标）"><a href="#4-1-什么是游标（或光标）" class="headerlink" title="4.1 什么是游标（或光标）"></a>4.1 什么是游标（或光标）</h3><p>虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是<code>随意定位到某一条记录</code>，并对记录的数据进行处理。</p><p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。<strong>游标让 SQL 这种面向集合的语言有了面向过程开发的能力。</strong></p><p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标<code>充当了指针的作用</code>，我们可以通过操作游标来对数据行进行操作。</p><p>MySQL中游标可以在存储过程和函数中使用。</p><p>比如，我们查询了 employees 数据表中工资高于15000的员工都有哪些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,salary FROM employees<br>WHERE salary &gt; 15000;<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211111182656990.png" alt="image-20211111182656990"></p><p>这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果集上滚动游标，指向结果集中的任意一行。</p><h3 id="4-2-使用游标步骤"><a href="#4-2-使用游标步骤" class="headerlink" title="4.2 使用游标步骤"></a>4.2 使用游标步骤</h3><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。</p><p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p><p><strong>第一步，声明游标</strong></p><p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cursor_name CURSOR FOR select_statement; <br></code></pre></td></tr></table></figure><p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cursor_name CURSOR IS select_statement;<br></code></pre></td></tr></table></figure><p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cur_emp CURSOR FOR <br>SELECT employee_id,salary FROM employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cursor_fruit CURSOR FOR <br>SELECT f_name, f_price FROM fruits ;<br></code></pre></td></tr></table></figure><p><strong>第二步，打开游标</strong></p><p>打开游标的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">OPEN cursor_name<br></code></pre></td></tr></table></figure><p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的<code>逐条读取</code>结果集中的记录做准备。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">OPEN　cur_emp ;<br></code></pre></td></tr></table></figure><p><strong>第三步，使用游标（从游标中取得数据）</strong></p><p>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FETCH cursor_name INTO var_name [, var_name] ...<br></code></pre></td></tr></table></figure><p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p><p>注意：var_name必须在声明游标之前就定义好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FETCH　cur_emp INTO emp_id, emp_sal ;<br></code></pre></td></tr></table></figure><p>注意：<strong>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</strong>，否则，在存储过程执行的时候，MySQL 会提示错误。</p><p><strong>第四步，关闭游标</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CLOSE cursor_name<br></code></pre></td></tr></table></figure><p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会<code>占用系统资源</code>，如果不及时关闭，<strong>游标会一直保持到存储过程结束</strong>，影响系统运行的效率。而关闭游标的操作，会释放游标占用的系统资源。</p><p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CLOSE　cur_emp;<br></code></pre></td></tr></table></figure><h3 id="4-3-举例"><a href="#4-3-举例" class="headerlink" title="4.3 举例"></a>4.3 举例</h3><p>创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE,OUT total_count INT)<br><br>BEGIN<br>DECLARE sum_salary DOUBLE DEFAULT 0;  #记录累加的总工资<br>DECLARE cursor_salary DOUBLE DEFAULT 0; #记录某一个工资值<br>DECLARE emp_count INT DEFAULT 0; #记录循环个数<br>#定义游标<br>DECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;<br>#打开游标<br>OPEN emp_cursor;<br><br>REPEAT<br>#使用游标（从游标中获取数据）<br>FETCH emp_cursor INTO cursor_salary;<br><br>SET sum_salary = sum_salary + cursor_salary;<br>SET emp_count = emp_count + 1;<br><br>UNTIL sum_salary &gt;= limit_total_salary<br>END REPEAT;<br><br>SET total_count = emp_count;<br>#关闭游标<br>CLOSE emp_cursor;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="4-5-小结"><a href="#4-5-小结" class="headerlink" title="4.5 小结"></a>4.5 小结</h3><p>游标是 MySQL 的一个重要的功能，为<code>逐条读取</code>结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。</p><p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行<code>加锁</code>，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会<code>消耗系统资源</code>，造成内存不足，这是因为游标是在内存中进行的处理。</p><p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p><h2 id="补充：MySQL-8-0的新特性—全局变量的持久化"><a href="#补充：MySQL-8-0的新特性—全局变量的持久化" class="headerlink" title="补充：MySQL 8.0的新特性—全局变量的持久化"></a>补充：MySQL 8.0的新特性—全局变量的持久化</h2><p>在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可以通过设置系统变量max_execution_time来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET GLOBAL MAX_EXECUTION_TIME=2000;<br></code></pre></td></tr></table></figure><p>使用SET GLOBAL语句设置的变量值只会<code>临时生效</code>。<code>数据库重启</code>后，服务器又会从MySQL配置文件中读取变量的默认值。<br>MySQL 8.0版本新增了<code>SET PERSIST</code>命令。例如，设置服务器的最大连接数为1000：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET PERSIST global max_connections = 1000;<br></code></pre></td></tr></table></figure><p>MySQL会将该命令的配置保存到数据目录下的<code>mysqld-auto.cnf</code>文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。</p><p>举例：</p><p>查看全局变量max_connections的值，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;%max_connections%&#x27;;<br>+------------------------+-------+<br>| Variable_name          | Value |<br>+------------------------+-------+<br>| max_connections        | 151   |<br>| mysqlx_max_connections | 100   |<br>+------------------------+-------+<br>2 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>设置全局变量max_connections的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set persist max_connections=1000;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><code>重启MySQL服务器</code>，再次查询max_connections的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;%max_connections%&#x27;;<br>+------------------------+-------+<br>| Variable_name          | Value |<br>+------------------------+-------+<br>| max_connections        | 1000  |<br>| mysqlx_max_connections | 100   |<br>+------------------------+-------+<br>2 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql15存储过程与函数</title>
    <link href="/2023/04/11/sql15%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <url>/2023/04/11/sql15%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第15章-存储过程与函数"><a href="#第15章-存储过程与函数" class="headerlink" title="第15章_存储过程与函数"></a>第15章_存储过程与函数</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><p>MySQL从5.0版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。</p><h2 id="1-存储过程概述"><a href="#1-存储过程概述" class="headerlink" title="1. 存储过程概述"></a>1. 存储过程概述</h2><h3 id="1-1-理解"><a href="#1-1-理解" class="headerlink" title="1.1 理解"></a>1.1 理解</h3><p><strong>含义</strong>：存储过程的英文是 <code>Stored Procedure</code>。它的思想很简单，就是一组经过<code>预先编译</code>的 SQL 语句的封装。</p><p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><p><strong>好处</strong>：</p><p>1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力<br>2、减少操作过程中的失误，提高效率<br>3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）<br>4、减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性</p><p><strong>和视图、函数的对比</strong>：</p><p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是<code>虚拟表</code>，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以<code>直接操作底层数据表</code>，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p><p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是<code>没有返回值</code>的。</p><h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h3><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：</p><p>1、没有参数（无参数无返回）<br>2、仅仅带 IN 类型（有参数无返回）<br>3、仅仅带 OUT 类型（无参数有返回）<br>4、既带 IN 又带 OUT（有参数有返回）<br>5、带 INOUT（有参数有返回）</p><p>注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。</p><h2 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2. 创建存储过程"></a>2. 创建存储过程</h2><h3 id="2-1-语法分析"><a href="#2-1-语法分析" class="headerlink" title="2.1 语法分析"></a>2.1 语法分析</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)<br>[characteristics ...]<br>BEGIN<br>存储过程体<br><br>END<br></code></pre></td></tr></table></figure><p>类似于Java中的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">修饰符 返回类型 方法名(参数类型 参数名,...)&#123;<br><br>方法体;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><p>1、参数前面的符号的意思</p><ul><li><p><code>IN</code>：当前参数为输入参数，也就是表示入参；</p><p>存储过程只是读取这个参数的值。如果没有定义参数种类，<code>默认就是 IN</code>，表示输入参数。</p></li><li><p><code>OUT</code>：当前参数为输出参数，也就是表示出参；</p><p>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</p></li><li><p><code>INOUT</code>：当前参数既可以为输入参数，也可以为输出参数。</p></li></ul><p>2、形参类型可以是 MySQL数据库中的任意类型。</p><p>3、<code>characteristics</code> 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LANGUAGE SQL<br>| [NOT] DETERMINISTIC<br>| &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;<br>| SQL SECURITY &#123; DEFINER | INVOKER &#125;<br>| COMMENT &#x27;string&#x27;<br></code></pre></td></tr></table></figure><ul><li><code>LANGUAGE SQL</code>：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</li><li><code>[NOT] DETERMINISTIC</code>：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</li><li><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</code>：指明子程序使用SQL语句的限制。<ul><li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li><li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句；</li><li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；</li><li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。</li><li>默认情况下，系统会指定为CONTAINS SQL。</li></ul></li><li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code>：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。<ul><li><code>DEFINER</code>表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li><li><code>INVOKER</code>表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li><li>如果没有设置相关的值，则MySQL默认指定值为DEFINER。</li></ul></li><li><code>COMMENT &#39;string&#39;</code>：注释信息，可以用来描述存储过程。</li></ul><p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END</p><p>编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1. BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。<br>2. DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。<br>3. SET：赋值语句，用于对变量进行赋值。<br>4. SELECT… INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。<br></code></pre></td></tr></table></figure><p>5、需要设置新的结束标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER 新的结束标记<br></code></pre></td></tr></table></figure><p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用DELIMITER改变存储过程的结束符。</p><p>比如：“DELIMITER &#x2F;&#x2F;”语句的作用是将MySQL的结束符设置为&#x2F;&#x2F;，并以“END &#x2F;&#x2F;”结束存储过程。存储过程定义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p><p>当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER $<br><br>CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)<br>[characteristics ...]<br>BEGIN<br>sql语句1;<br>sql语句2;<br><br>END $<br></code></pre></td></tr></table></figure><h3 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h3><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER $<br><br>CREATE PROCEDURE select_all_data()<br>BEGIN<br>SELECT * FROM emps;<br><br>END $<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE avg_employee_salary ()<br>BEGIN<br>SELECT AVG(salary) AS avg_salary FROM emps;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例3：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE show_max_salary()<br>LANGUAGE SQL<br>NOT DETERMINISTIC<br>CONTAINS SQL<br>SQL SECURITY DEFINER<br>COMMENT &#x27;查看最高薪资&#x27;<br>BEGIN<br>SELECT MAX(salary) FROM emps;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms”输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_min_salary(OUT ms DOUBLE)<br>BEGIN<br>SELECT MIN(salary) INTO ms FROM emps;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例5：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_someone_salary(IN empname VARCHAR(20))<br>BEGIN<br>SELECT salary FROM emps WHERE ename = empname;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例6：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名，用OUT参数empsalary输出员工薪资。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_someone_salary2(IN empname VARCHAR(20),OUT empsalary DOUBLE)<br>BEGIN<br>SELECT salary INTO empsalary FROM emps WHERE ename = empname;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例7：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员工姓名，输出领导的姓名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_mgr_name(INOUT empname VARCHAR(20))<br>BEGIN<br>SELECT ename INTO empname FROM emps<br>WHERE eid = (SELECT MID FROM emps WHERE ename=empname);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="3-调用存储过程"><a href="#3-调用存储过程" class="headerlink" title="3. 调用存储过程"></a>3. 调用存储过程</h2><h3 id="3-1-调用格式"><a href="#3-1-调用格式" class="headerlink" title="3.1 调用格式"></a>3.1 调用格式</h3><p>存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL 存储过程名(实参列表)<br></code></pre></td></tr></table></figure><p><strong>格式：</strong></p><p>1、调用in模式的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL sp1(&#x27;值&#x27;);<br></code></pre></td></tr></table></figure><p>2、调用out模式的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @name;<br>CALL sp1(@name);<br>SELECT @name;<br></code></pre></td></tr></table></figure><p>3、调用inout模式的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @name=值;<br>CALL sp1(@name);<br>SELECT @name;<br></code></pre></td></tr></table></figure><h3 id="3-2-代码举例"><a href="#3-2-代码举例" class="headerlink" title="3.2 代码举例"></a>3.2 代码举例</h3><p><strong>举例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE CountProc(IN sid INT,OUT num INT)<br>BEGIN<br>SELECT COUNT(*) INTO num FROM fruits <br>WHERE s_id = sid;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL CountProc (101, @num);<br>Query OK, 1 row affected (0.00 sec)<br></code></pre></td></tr></table></figure><p>查看返回结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT @num;<br></code></pre></td></tr></table></figure><p>该存储过程返回了指定 s_id&#x3D;101 的水果商提供的水果种类，返回值存储在num变量中，使用SELECT查看，返回结果为3。</p><p><strong>举例2：</strong>创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE `add_num`(IN n INT)<br>BEGIN<br>       DECLARE i INT;<br>       DECLARE sum INT;<br>       <br>       SET i = 1;<br>       SET sum = 0;<br>       WHILE i &lt;= n DO<br>              SET sum = sum + i;<br>              SET i = i +1;<br>       END WHILE;<br>       SELECT sum;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>如果你用的是 Navicat 工具，那么在编写存储过程的时候，Navicat 会自动设置 DELIMITER 为其他符号，我们不需要再进行 DELIMITER 的操作。</p><p>直接使用 <code>CALL add_num(50);</code>即可。这里我传入的参数为 50，也就是统计 1+2+…+50 的积累之和。</p><h3 id="3-3-如何调试"><a href="#3-3-如何调试" class="headerlink" title="3.3 如何调试"></a>3.3 如何调试</h3><p>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样<code>逐步推进</code>，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独调试。</p><h2 id="4-存储函数的使用"><a href="#4-存储函数的使用" class="headerlink" title="4. 存储函数的使用"></a>4. 存储函数的使用</h2><p>前面学习了很多函数，使用这些函数可以对数据进行的各种处理操作，极大地提高用户对数据库的管理效率。MySQL支持自定义函数，定义好之后，调用方式与调用MySQL预定义的系统函数一样。</p><h3 id="4-1-语法分析"><a href="#4-1-语法分析" class="headerlink" title="4.1 语法分析"></a>4.1 语法分析</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE FUNCTION 函数名(参数名 参数类型,...) <br>RETURNS 返回值类型<br>[characteristics ...]<br>BEGIN<br>函数体   #函数体中肯定有 RETURN 语句<br><br>END<br></code></pre></td></tr></table></figure><p>说明：</p><p>1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。</p><p>2、RETURNS type 语句表示函数返回数据的类型；</p><p>RETURNS子句只能对FUNCTION做指定，对函数而言这是<code>强制</code>的。它用来指定函数的返回类型，而且函数体必须包含一个<code>RETURN value</code>语句。</p><p>3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。</p><p>4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略BEGIN…END。</p><h3 id="4-2-调用存储函数"><a href="#4-2-调用存储函数" class="headerlink" title="4.2 调用存储函数"></a>4.2 调用存储函数</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是<code>用户自己定义</code>的，而内部函数是MySQL的<code>开发者定义</code>的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 函数名(实参列表)<br></code></pre></td></tr></table></figure><h3 id="4-3-代码举例"><a href="#4-3-代码举例" class="headerlink" title="4.3 代码举例"></a>4.3 代码举例</h3><p><strong>举例1：</strong></p><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE FUNCTION email_by_name()<br>RETURNS VARCHAR(25)<br>DETERMINISTIC<br>CONTAINS SQL<br>BEGIN<br>RETURN (SELECT email FROM employees WHERE last_name = &#x27;Abel&#x27;);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT email_by_name();<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE FUNCTION email_by_id(emp_id INT)<br>RETURNS VARCHAR(25)<br>DETERMINISTIC<br>CONTAINS SQL<br>BEGIN<br>RETURN (SELECT email FROM employees WHERE employee_id = emp_id);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @emp_id = 102;<br>SELECT email_by_id(102);<br></code></pre></td></tr></table></figure><p><strong>举例3：</strong></p><p>创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE FUNCTION count_by_id(dept_id INT)<br>RETURNS INT<br>LANGUAGE SQL<br>NOT DETERMINISTIC<br>READS SQL DATA<br>SQL SECURITY DEFINER<br>COMMENT &#x27;查询部门平均工资&#x27;<br>BEGIN<br>RETURN (SELECT COUNT(*) FROM employees WHERE department_id = dept_id);<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @dept_id = 50;<br>SELECT count_by_id(@dept_id);<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>若在创建存储函数中报错“<code>you might want to use the less safe log_bin_trust_function_creators variable</code>”，有两种处理方法：</p><ul><li><p>方式1：加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}”</p></li><li><p>方式2：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET GLOBAL log_bin_trust_function_creators = 1;<br></code></pre></td></tr></table></figure><h3 id="4-4-对比存储函数和存储过程"><a href="#4-4-对比存储函数和存储过程" class="headerlink" title="4.4 对比存储函数和存储过程"></a>4.4 对比存储函数和存储过程</h3><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有0个或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时</td></tr></tbody></table><p>此外，<strong>存储函数可以放在查询语句中使用，存储过程不行</strong>。反之，存储过程的功能更加强大，包括能够执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p><h2 id="5-存储过程和函数的查看、修改、删除"><a href="#5-存储过程和函数的查看、修改、删除" class="headerlink" title="5. 存储过程和函数的查看、修改、删除"></a>5. 存储过程和函数的查看、修改、删除</h2><h3 id="5-1-查看"><a href="#5-1-查看" class="headerlink" title="5.1 查看"></a>5.1 查看</h3><p>创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p><p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。</p><p><strong>1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</strong></p><p>基本语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE &#123;PROCEDURE | FUNCTION&#125; 存储过程名或函数名<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE FUNCTION test_db.CountProc \G<br></code></pre></td></tr></table></figure><p><strong>2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</strong></p><p>基本语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW &#123;PROCEDURE | FUNCTION&#125; STATUS [LIKE &#x27;pattern&#x27;]<br></code></pre></td></tr></table></figure><p>这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。</p><p>[LIKE ‘pattern’]：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的所有存储过程或函数的信息。<br>举例：SHOW STATUS语句示例，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW PROCEDURE STATUS LIKE &#x27;SELECT%&#x27; \G <br>*************************** 1. row ***************************<br>                  Db: test_db<br>                Name: SelectAllData<br>                Type: PROCEDURE<br>             Definer: root@localhost<br>            Modified: 2021-10-16 15:55:07<br>             Created: 2021-10-16 15:55:07<br>       Security_type: DEFINER<br>             Comment: <br>character_set_client: utf8mb4<br>collation_connection: utf8mb4_general_ci<br>  Database Collation: utf8mb4_general_ci<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>3. 从information_schema.Routines表中查看存储过程和函数的信息</strong></p><p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.Routines<br>WHERE ROUTINE_NAME=&#x27;存储过程或函数的名&#x27; [AND ROUTINE_TYPE = &#123;&#x27;PROCEDURE|FUNCTION&#x27;&#125;];<br></code></pre></td></tr></table></figure><p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来指明查询的是存储过程还是函数。</p><p>举例：从Routines表中查询名称为CountProc的存储函数的信息，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.Routines<br>WHERE ROUTINE_NAME=&#x27;count_by_id&#x27;　AND　ROUTINE_TYPE = &#x27;FUNCTION&#x27; \G<br></code></pre></td></tr></table></figure><h3 id="5-2-修改"><a href="#5-2-修改" class="headerlink" title="5.2 修改"></a>5.2 修改</h3><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER &#123;PROCEDURE | FUNCTION&#125; 存储过程或函数的名 [characteristic ...]<br></code></pre></td></tr></table></figure><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;<br>| SQL SECURITY &#123; DEFINER | INVOKER &#125;<br>| COMMENT &#x27;string&#x27;<br></code></pre></td></tr></table></figure><ul><li><code>CONTAINS SQL</code>，表示子程序包含SQL语句，但不包含读或写数据的语句。</li><li><code>NO SQL</code>，表示子程序中不包含SQL语句。</li><li><code>READS SQL DATA</code>，表示子程序中包含读数据的语句。</li><li><code>MODIFIES SQL DATA</code>，表示子程序中包含写数据的语句。</li><li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code>，指明谁有权限来执行。<ul><li><code>DEFINER</code>，表示只有定义者自己才能够执行。</li><li><code>INVOKER</code>，表示调用者可以执行。</li></ul></li><li><code>COMMENT &#39;string&#39;</code>，表示注释信息。</li></ul><blockquote><p>修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两个语句的结构是一样的，语句中的所有参数也是一样的。</p></blockquote><p><strong>举例1：</strong></p><p>修改存储过程CountProc的定义。将读写权限改为MODIFIES SQL DATA，并指明调用者可以执行，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER　PROCEDURE　CountProc<br>MODIFIES SQL DATA<br>SQL SECURITY INVOKER ;<br></code></pre></td></tr></table></figure><p>查询修改后的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT specific_name,sql_data_access,security_type<br>FROM information_schema.`ROUTINES`<br>WHERE routine_name = &#x27;CountProc&#x27; AND routine_type = &#x27;PROCEDURE&#x27;;<br></code></pre></td></tr></table></figure><p>结果显示，存储过程修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ ACCESS）已经变成MODIFIES SQL DATA，安全类型（SECURITY_TYPE）已经变成INVOKER。</p><p><strong>举例2：</strong></p><p>修改存储函数CountProc的定义。将读写权限改为READS SQL DATA，并加上注释信息“FIND NAME”，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER　FUNCTION　CountProc<br>READS SQL DATA<br>COMMENT &#x27;FIND NAME&#x27; ;<br></code></pre></td></tr></table></figure><p>存储函数修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ACCESS）已经变成READS SQL DATA，函数注释（ROUTINE_COMMENT）已经变成FIND NAME。</p><h3 id="5-3-删除"><a href="#5-3-删除" class="headerlink" title="5.3 删除"></a>5.3 删除</h3><p>删除存储过程和函数，可以使用DROP语句，其语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP &#123;PROCEDURE | FUNCTION&#125; [IF EXISTS] 存储过程或函数的名<br></code></pre></td></tr></table></figure><p>IF EXISTS：如果程序或函数不存储，它可以防止发生错误，产生一个用SHOW WARNINGS查看的警告。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP PROCEDURE CountProc;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP FUNCTION CountProc;<br></code></pre></td></tr></table></figure><h2 id="6-关于存储过程使用的争议"><a href="#6-关于存储过程使用的争议" class="headerlink" title="6. 关于存储过程使用的争议"></a>6. 关于存储过程使用的争议</h2><p>尽管存储过程有诸多优点，但是对于存储过程的使用，<strong>一直都存在着很多争议</strong>，比如有些公司对于大型项目要求使用存储过程，而有些公司在手册中明确禁止使用存储过程，为什么这些公司对存储过程的使用需求差别这么大呢？</p><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><p><strong>1、存储过程可以一次编译多次使用。</strong>存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。</p><p><strong>2、可以减少开发工作量。</strong>将代码<code>封装</code>成模块，实际上是编程的核心思想之一，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以<code>重复使用</code>，在减少开发工作量的同时，还能保证代码的结构清晰。</p><p><strong>3、存储过程的安全性强。</strong>我们在设定存储过程的时候可以<code>设置对用户的使用权限</code>，这样就和视图一样具有较强的安全性。</p><p><strong>4、可以减少网络传输量。</strong>因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。</p><p><strong>5、良好的封装性。</strong>在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要<code>连接一次即可</code>。</p><h3 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3><p>基于上面这些优点，不少大公司都要求大型项目使用存储过程，比如微软、IBM 等公司。但是国内的阿里并不推荐开发人员使用存储过程，这是为什么呢？</p><blockquote><h4 id="阿里开发规范"><a href="#阿里开发规范" class="headerlink" title="阿里开发规范"></a>阿里开发规范</h4><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></blockquote><p>存储过程虽然有诸如上面的好处，但缺点也是很明显的。</p><p><strong>1、可移植性差。</strong>存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过程，在换成其他数据库时都需要重新编写。</p><p><strong>2、调试困难。</strong>只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。</p><p><strong>3、存储过程的版本管理很困难。</strong>比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</p><p><strong>4、它不适合高并发的场景。</strong>高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，<code>增加数据库的压力</code>，显然就不适用了。</p><p>小结：</p><p>存储过程既方便，又有局限性。尽管不同的公司对存储过程的态度不一，但是对于我们开发人员来说，不论怎样，掌握存储过程都是必备的技能之一。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql14视图</title>
    <link href="/2023/04/11/sql14%E8%A7%86%E5%9B%BE/"/>
    <url>/2023/04/11/sql14%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="第14章-视图"><a href="#第14章-视图" class="headerlink" title="第14章_视图"></a>第14章_视图</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-常见的数据库对象"><a href="#1-常见的数据库对象" class="headerlink" title="1. 常见的数据库对象"></a>1. 常见的数据库对象</h2><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>表(TABLE)</td><td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td></tr><tr><td>数据字典</td><td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看</td></tr><tr><td>约束(CONSTRAINT)</td><td>执行数据校验的规则，用于保证数据完整性的规则</td></tr><tr><td>视图(VIEW)</td><td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td></tr><tr><td>索引(INDEX)</td><td>用于提高查询性能，相当于书的目录</td></tr><tr><td>存储过程(PROCEDURE)</td><td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境</td></tr><tr><td>存储函数(FUNCTION)</td><td>用于完成一次特定的计算，具有一个返回值</td></tr><tr><td>触发器(TRIGGER)</td><td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td></tr></tbody></table><h2 id="2-视图概述"><a href="#2-视图概述" class="headerlink" title="2. 视图概述"></a>2. 视图概述</h2><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555430281798.png" alt="1555430281798"></p><h3 id="2-1-为什么使用视图？"><a href="#2-1-为什么使用视图？" class="headerlink" title="2.1 为什么使用视图？"></a>2.1 为什么使用视图？</h3><p>视图一方面可以帮我们使用表的一部分而不是所有的表，另一方面也可以针对不同的用户制定不同的查询视图。比如，针对一个公司的销售人员，我们只想给他看部分数据，而某些特殊的数据，比如采购的价格，则不会提供给他。再比如，人员薪酬是个敏感的字段，那么只给某个级别以上的人员开放，其他人的查询视图中则不提供这个字段。</p><p>刚才讲的只是视图的一个使用场景，实际上视图还有很多作用。最后，我们总结视图的优点。</p><h3 id="2-2-视图的理解"><a href="#2-2-视图的理解" class="headerlink" title="2.2 视图的理解"></a>2.2 视图的理解</h3><ul><li><p>视图是一种<code>虚拟表</code>，本身是<code>不具有数据</code>的，占用很少的内存空间，它是 SQL 中的一个重要概念。</p></li><li><p><strong>视图建立在已有表的基础上</strong>, 视图赖以建立的这些表称为<strong>基表</strong>。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211006211206990.png" alt="image-20211006211206990" style="zoom:67%;" /></li><li><p>视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然。</p></li><li><p>向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为<strong>存储起来的</strong> <strong>SELECT</strong> <strong>语句</strong> </p><ul><li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li></ul></li><li><p>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。</p></li></ul><h2 id="3-创建视图"><a href="#3-创建视图" class="headerlink" title="3. 创建视图"></a>3. 创建视图</h2><ul><li><strong>在</strong> <strong>CREATE VIEW</strong> <strong>语句中嵌入子查询</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE [OR REPLACE] <br>[ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] <br>VIEW 视图名称 [(字段列表)]<br>AS 查询语句<br>[WITH [CASCADED|LOCAL] CHECK OPTION]<br></code></pre></td></tr></table></figure><ul><li>精简版</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW 视图名称 <br>AS 查询语句<br></code></pre></td></tr></table></figure><h3 id="3-1-创建单表视图"><a href="#3-1-创建单表视图" class="headerlink" title="3.1 创建单表视图"></a>3.1 创建单表视图</h3><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW empvu80<br>AS <br>SELECT  employee_id, last_name, salary<br>FROM    employees<br>WHERE   department_id = 80;<br></code></pre></td></tr></table></figure><p>查询视图：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span>salvu80;<br></code></pre></td></tr></table></figure><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555430882363.png" alt="1555430882363" style="zoom:80%;" /><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW emp_year_salary (ename,year_salary)<br>AS <br>SELECT ename,salary*12*(1+IFNULL(commission_pct,0))<br>FROM t_employee;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW salvu50<br>AS <br>SELECT  employee_id ID_NUMBER, last_name NAME,salary*12 ANN_SALARY<br>FROM    employees<br>WHERE   department_id = 50;<br></code></pre></td></tr></table></figure><p>说明1：实际上就是我们在 SQL 查询语句的基础上封装了视图 VIEW，这样就会基于 SQL 语句的结果集形成一张虚拟表。</p><p>说明2：在创建视图时，没有在视图名后面指定字段列表，则视图中字段列表默认和SELECT语句中的字段列表一致。如果SELECT语句中给字段取了别名，那么视图中的字段名和别名相同。</p><h3 id="3-2-创建多表联合视图"><a href="#3-2-创建多表联合视图" class="headerlink" title="3.2 创建多表联合视图"></a>3.2 创建多表联合视图</h3><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW empview <br>AS <br>SELECT employee_id emp_id,last_name NAME,department_name<br>FROM employees e,departments d<br>WHERE e.department_id = d.department_id;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW emp_dept<br>AS <br>SELECT ename,dname<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEWdept_sum_vu<br>(name, minsal, maxsal, avgsal)<br>AS <br>SELECT d.department_name, MIN(e.salary), MAX(e.salary),AVG(e.salary)<br>FROM employees e, departments d<br>WHERE e.department_id = d.department_id <br>GROUP BY  d.department_name;<br></code></pre></td></tr></table></figure><ul><li><strong>利用视图对数据进行格式化</strong></li></ul><p>我们经常需要输出某个格式的内容，比如我们想输出员工姓名和对应的部门名，对应格式为 emp_name(department_name)，就可以使用视图来完成数据格式化的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW emp_depart<br>AS<br>SELECT CONCAT(last_name,&#x27;(&#x27;,department_name,&#x27;)&#x27;) AS emp_dept<br>FROM employees e JOIN departments d<br>WHERE e.department_id = d.department_id<br></code></pre></td></tr></table></figure><h3 id="3-3-基于视图创建视图"><a href="#3-3-基于视图创建视图" class="headerlink" title="3.3 基于视图创建视图"></a>3.3 基于视图创建视图</h3><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><p>举例：联合“emp_dept”视图和“emp_year_salary”视图查询员工姓名、部门名称、年薪信息创建 “emp_dept_ysalary”视图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW emp_dept_ysalary<br>AS <br>SELECT emp_dept.ename,dname,year_salary<br>FROM emp_dept INNER JOIN emp_year_salary<br>ON emp_dept.ename = emp_year_salary.ename;<br></code></pre></td></tr></table></figure><h2 id="4-查看视图"><a href="#4-查看视图" class="headerlink" title="4. 查看视图"></a>4. 查看视图</h2><p>语法1：查看数据库的表对象、视图对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TABLES;<br></code></pre></td></tr></table></figure><p>语法2：查看视图的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC / DESCRIBE 视图名称;<br></code></pre></td></tr></table></figure><p>语法3：查看视图的属性信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）<br>SHOW TABLE STATUS LIKE &#x27;视图名称&#x27;\G<br></code></pre></td></tr></table></figure><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。</p><p>语法4：查看视图的详细定义信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE VIEW 视图名称;<br></code></pre></td></tr></table></figure><h2 id="5-更新视图的数据"><a href="#5-更新视图的数据" class="headerlink" title="5. 更新视图的数据"></a>5. 更新视图的数据</h2><h3 id="5-1-一般情况"><a href="#5-1-一般情况" class="headerlink" title="5.1 一般情况"></a>5.1 一般情况</h3><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><p>举例：UPDATE操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename   | tel         |<br>+---------+-------------+<br>| 孙洪亮 | 13789098765 |<br>+---------+-------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; UPDATE emp_tel SET tel = &#x27;13789091234&#x27; WHERE ename = &#x27;孙洪亮&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename  | tel         |<br>+---------+-------------+<br>| 孙洪亮 | 13789091234 |<br>+---------+-------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT ename,tel FROM t_employee WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename   | tel         |<br>+---------+-------------+<br>| 孙洪亮 | 13789091234 |<br>+---------+-------------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><p>举例：DELETE操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename  | tel           |<br>+---------+-------------+<br>| 孙洪亮 | 13789091234 |<br>+---------+-------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; DELETE FROM emp_tel  WHERE ename = &#x27;孙洪亮&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>Empty set (0.00 sec)<br><br>mysql&gt; SELECT ename,tel FROM t_employee WHERE ename = &#x27;孙洪亮&#x27;;<br>Empty set (0.00 sec)<br><br></code></pre></td></tr></table></figure><h3 id="5-2-不可更新的视图"><a href="#5-2-不可更新的视图" class="headerlink" title="5.2 不可更新的视图"></a>5.2 不可更新的视图</h3><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在<code>一对一</code>的关系。另外当视图定义出现如下情况时，视图不支持更新操作：</p><ul><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了<code>JOIN联合查询</code>，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了<code>数学表达式</code>或<code>子查询</code>，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用<code>DISTINCT</code>、<code>聚合函数</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>等，视图将不支持INSERT、UPDATE、DELETE；</li><li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；</li><li>视图定义基于一个<code>不可更新视图</code>；</li><li>常量视图。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE OR REPLACE VIEW emp_dept<br>    -&gt; (ename,salary,birthday,tel,email,hiredate,dname)<br>    -&gt; AS SELECT ename,salary,birthday,tel,email,hiredate,dname<br>    -&gt; FROM t_employee INNER JOIN t_department<br>    -&gt; ON t_employee.did = t_department.did ;<br>Query OK, 0 rows affected (0.01 sec)<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO emp_dept(ename,salary,birthday,tel,email,hiredate,dname)<br>    -&gt; VALUES(&#x27;张三&#x27;,15000,&#x27;1995-01-08&#x27;,&#x27;18201587896&#x27;,<br>    -&gt; &#x27;zs@atguigu.com&#x27;,&#x27;2022-02-14&#x27;,&#x27;新部门&#x27;);<br>    <br>#ERROR 1393 (HY000): Can not modify more than one base table through a join view &#x27;atguigu_chapter9.emp_dept&#x27;<br><br></code></pre></td></tr></table></figure><p>从上面的SQL执行结果可以看出，在定义视图的SELECT语句中使用了JOIN联合查询，视图将不支持更新操作。</p><blockquote><p>虽然可以更新视图数据，但总的来说，视图作为<code>虚拟表</code>，主要用于<code>方便查询</code>，不建议更新视图的数据。<strong>对视图数据的更改，都是通过对实际数据表里数据的操作来完成的。</strong></p></blockquote><h2 id="6-修改、删除视图"><a href="#6-修改、删除视图" class="headerlink" title="6. 修改、删除视图"></a>6. 修改、删除视图</h2><h3 id="6-1-修改视图"><a href="#6-1-修改视图" class="headerlink" title="6.1 修改视图"></a>6.1 修改视图</h3><p>方式1：使用CREATE <strong>OR REPLACE</strong> VIEW 子句<strong>修改视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW empvu80<br>(id_number, name, sal, department_id)<br>AS <br>SELECT  employee_id, first_name || &#x27; &#x27; || last_name, salary, department_id<br>FROM employees<br>WHERE department_id = 80;<br></code></pre></td></tr></table></figure><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p>方式2：ALTER VIEW</p><p>修改视图的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER VIEW 视图名称 <br>AS<br>查询语句<br></code></pre></td></tr></table></figure><h3 id="6-2-删除视图"><a href="#6-2-删除视图" class="headerlink" title="6.2 删除视图"></a>6.2 删除视图</h3><ul><li><p>删除视图只是删除视图的定义，并不会删除基表的数据。</p></li><li><p>删除视图的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP VIEW IF EXISTS 视图名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP VIEW IF EXISTS 视图名称1,视图名称2,视图名称3,...;<br></code></pre></td></tr></table></figure></li><li><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP VIEW empvu80;<br></code></pre></td></tr></table></figure></li><li><p>说明：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这样的视图c需要手动删除或修改，否则影响使用。</p></li></ul><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><h3 id="7-1-视图优点"><a href="#7-1-视图优点" class="headerlink" title="7.1 视图优点"></a>7.1 视图优点</h3><p><strong>1. 操作简单</strong></p><p>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p><p><strong>2. 减少数据冗余</strong></p><p>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p><p><strong>3. 数据安全</strong></p><p>MySQL将用户对数据的<code>访问限制</code>在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用户不必直接查询或操作数据表。这也可以理解为视图具有<code>隔离性</code>。视图相当于在用户和实际的数据表之间加了一层虚拟表。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211010211744459.png" alt="image-20211010211744459"></p><p>同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上，<strong>用户不需要查询数据表，可以直接通过视图获取数据表中的信息</strong>。这在一定程度上保障了数据表中数据的安全性。</p><p><strong>4. 适应灵活多变的需求</strong><br>当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p><p><strong>5. 能够分解复杂的查询逻辑</strong><br>数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p><h3 id="7-2-视图不足"><a href="#7-2-视图不足" class="headerlink" title="7.2 视图不足"></a>7.2 视图不足</h3><p>如果我们在实际数据表的基础上创建了视图，那么，<strong>如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护</strong>。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂，<code>可读性不好</code>，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。</p><p>实际项目中，如果视图过多，会导致数据库维护成本的问题。</p><p>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql13约束</title>
    <link href="/2023/04/11/sql13%E7%BA%A6%E6%9D%9F/"/>
    <url>/2023/04/11/sql13%E7%BA%A6%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="第13章-约束"><a href="#第13章-约束" class="headerlink" title="第13章_约束"></a>第13章_约束</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-约束-constraint-概述"><a href="#1-约束-constraint-概述" class="headerlink" title="1. 约束(constraint)概述"></a>1. 约束(constraint)概述</h2><h3 id="1-1-为什么需要约束"><a href="#1-1-为什么需要约束" class="headerlink" title="1.1 为什么需要约束"></a>1.1 为什么需要约束</h3><p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p><p>为了保证数据的完整性，SQL规范以约束的方式对<strong>表数据进行额外的条件限制</strong>。从以下四个方面考虑：</p><ul><li><code>实体完整性（Entity Integrity）</code>：例如，同一个表中，不能存在两条完全相同无法区分的记录</li><li><code>域完整性（Domain Integrity）</code>：例如：年龄范围0-120，性别范围“男&#x2F;女”</li><li><code>引用完整性（Referential Integrity）</code>：例如：员工所在部门，在部门表中要能找到这个部门</li><li><code>用户自定义完整性（User-defined Integrity）</code>：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li></ul><h3 id="1-2-什么是约束"><a href="#1-2-什么是约束" class="headerlink" title="1.2 什么是约束"></a>1.2 什么是约束</h3><p>约束是表级的强制规定。</p><p>可以在<strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong>，或者在<strong>表创建之后通过 ALTER TABLE 语句规定约束</strong>。</p><h3 id="1-3-约束的分类"><a href="#1-3-约束的分类" class="headerlink" title="1.3 约束的分类"></a>1.3 约束的分类</h3><ul><li><strong>根据约束数据列的限制，</strong>约束可分为：<ul><li><strong>单列约束</strong>：每个约束只约束一列</li><li><strong>多列约束</strong>：每个约束可约束多列数据</li></ul></li><li><strong>根据约束的作用范围</strong>，约束可分为：<ul><li><strong>列级约束</strong>：只能作用在一个列上，跟在列的定义后面</li><li><strong>表级约束</strong>：可以作用在多个列上，不与列一起，而是单独定义</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">位置支持的约束类型是否可以起约束名<br>列级约束：列的后面语法都支持，但外键没有效果不可以<br>表级约束：所有列的下面   默认和非空不支持，其他支持   可以（主键没有效果）<br></code></pre></td></tr></table></figure><ul><li><strong>根据约束起的作用</strong>，约束可分为：<ul><li><strong>NOT NULL</strong> <strong>非空约束，规定某个字段不能为空</strong></li><li><strong>UNIQUE</strong>  <strong>唯一约束</strong>，<strong>规定某个字段在整个表中是唯一的</strong></li><li><strong>PRIMARY KEY  主键(非空且唯一)约束</strong></li><li><strong>FOREIGN KEY</strong>  <strong>外键约束</strong></li><li><strong>CHECK</strong>  <strong>检查约束</strong></li><li><strong>DEFAULT</strong>  <strong>默认值约束</strong></li></ul></li></ul><blockquote><p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</p></blockquote><ul><li>查看某个表已有的约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#information_schema数据库名（系统库）<br>#table_constraints表名称（专门存储各个表的约束）<br>SELECT * FROM information_schema.table_constraints <br>WHERE table_name = &#x27;表名称&#x27;;<br></code></pre></td></tr></table></figure><h2 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2. 非空约束"></a>2. 非空约束</h2><h3 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1 作用"></a>2.1 作用</h3><p>限定某个字段&#x2F;某列的值不允许为空</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555426972098.png" alt="1555426972098"></p><h3 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h3><p>NOT NULL</p><h3 id="2-3-特点"><a href="#2-3-特点" class="headerlink" title="2.3 特点"></a>2.3 特点</h3><ul><li><p>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</p></li><li><p>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</p></li><li><p>一个表可以有很多列都分别限定了非空</p></li><li><p>空字符串’’不等于NULL，0也不等于NULL</p></li></ul><h3 id="2-4-添加非空约束"><a href="#2-4-添加非空约束" class="headerlink" title="2.4 添加非空约束"></a>2.4 添加非空约束</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名称(<br>字段名  数据类型,<br>    字段名  数据类型 NOT NULL,  <br>    字段名  数据类型 NOT NULL<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp(<br>id INT(10) NOT NULL,<br>NAME VARCHAR(20) NOT NULL,<br>sex CHAR NULL<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE student(<br>sid int,<br>    sname varchar(20) not null,<br>    tel char(11) ,<br>    cardid char(18) not null<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;110222198912032545&#x27;); #成功<br><br>insert into student values(2,&#x27;李四&#x27;,&#x27;13710011002&#x27;,null);#身份证号为空<br>ERROR 1048 (23000): Column &#x27;cardid&#x27; cannot be null<br><br>insert into student values(2,&#x27;李四&#x27;,null,&#x27;110222198912032546&#x27;);#成功，tel允许为空<br><br>insert into student values(3,null,null,&#x27;110222198912032547&#x27;);#失败<br>ERROR 1048 (23000): Column &#x27;sname&#x27; cannot be null<br></code></pre></td></tr></table></figure><p>（2）建表后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 not null;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp<br>MODIFY sex VARCHAR(30) NOT NULL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table student modify sname varchar(20) not null;<br></code></pre></td></tr></table></figure><h3 id="2-5-删除非空约束"><a href="#2-5-删除非空约束" class="headerlink" title="2.5 删除非空约束"></a>2.5 删除非空约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允许为空<br><br>或 <br><br>alter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp<br>MODIFY sex VARCHAR(30) NULL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp<br>MODIFY NAME VARCHAR(15) DEFAULT &#x27;abc&#x27; NULL;<br></code></pre></td></tr></table></figure><h2 id="3-唯一性约束"><a href="#3-唯一性约束" class="headerlink" title="3. 唯一性约束"></a>3. 唯一性约束</h2><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h3><p>用来限制某个字段&#x2F;某列的值不能重复。</p><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555427198811.png" alt="1555427198811"></p><h3 id="3-2-关键字"><a href="#3-2-关键字" class="headerlink" title="3.2 关键字"></a>3.2 关键字</h3><p>UNIQUE</p><h3 id="3-3-特点"><a href="#3-3-特点" class="headerlink" title="3.3 特点"></a>3.3 特点</h3><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li><li>唯一性约束允许列值为空。</li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li><li><strong>MySQL会给唯一约束的列上默认创建一个唯一索引。</strong></li></ul><h3 id="3-4-添加唯一约束"><a href="#3-4-添加唯一约束" class="headerlink" title="3.4 添加唯一约束"></a>3.4 添加唯一约束</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型  unique,  <br>    字段名  数据类型  unique key,<br>    字段名  数据类型<br>);<br>create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    [constraint 约束名] unique key(字段名)<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br>sid int,<br>    sname varchar(20),<br>    tel char(11) unique,<br>    cardid char(18) unique key<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_course(<br>cid INT UNIQUE,<br>cname VARCHAR(100) UNIQUE,<br>description VARCHAR(200)<br>);<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE USER(<br> id INT NOT NULL,<br> NAME VARCHAR(25),<br> PASSWORD VARCHAR(16),<br> -- 使用表级约束语法<br> CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>表示用户名和密码组合不能重复</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;101223199012015623&#x27;);<br>insert into student values(2,&#x27;李四&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015624&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+-----+-------+-------------+--------------------+<br>| sid | sname | tel         | cardid             |<br>+-----+-------+-------------+--------------------+<br>|   1 | 张三  | 13710011002 | 101223199012015623 |<br>|   2 | 李四  | 13710011003 | 101223199012015624 |<br>+-----+-------+-------------+--------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(3,&#x27;王五&#x27;,&#x27;13710011004&#x27;,&#x27;101223199012015624&#x27;); #身份证号重复<br>ERROR 1062 (23000): Duplicate entry &#x27;101223199012015624&#x27; for key &#x27;cardid&#x27;<br><br>insert into student values(3,&#x27;王五&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015625&#x27;); <br>ERROR 1062 (23000): Duplicate entry &#x27;13710011003&#x27; for key &#x27;tel&#x27;<br></code></pre></td></tr></table></figure><p>（2）建表后指定唯一键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的<br>#方式1：<br>alter table 表名称 add unique key(字段列表); <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：<br>alter table 表名称 modify 字段名 字段类型 unique;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>ADD UNIQUE(NAME,PASSWORD);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>ADD CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>MODIFY NAME VARCHAR(20) UNIQUE;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br>sid int primary key,<br>    sname varchar(20),<br>    tel char(11) ,<br>    cardid char(18) <br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table student add unique key(tel);<br>alter table student add unique key(cardid);<br></code></pre></td></tr></table></figure><h3 id="3-5-关于复合唯一约束"><a href="#3-5-关于复合唯一约束" class="headerlink" title="3.5 关于复合唯一约束"></a>3.5 关于复合唯一约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#学生表<br>create table student(<br>sid int,#学号<br>    sname varchar(20),#姓名<br>    tel char(11) unique key,  #电话<br>    cardid char(18) unique key #身份证号<br>);<br><br>#课程表<br>create table course(<br>cid int,  #课程编号<br>    cname varchar(20)     #课程名称<br>);<br><br>#选课表<br>create table student_course(<br>    id int,<br>sid int,<br>    cid int,<br>    score int,<br>    unique key(sid,cid)  #复合唯一<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;101223199012015623&#x27;);#成功<br>insert into student values(2,&#x27;李四&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015624&#x27;);#成功<br>insert into course values(1001,&#x27;Java&#x27;),(1002,&#x27;MySQL&#x27;);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+-----+-------+-------------+--------------------+<br>| sid | sname | tel         | cardid             |<br>+-----+-------+-------------+--------------------+<br>|   1 | 张三  | 13710011002 | 101223199012015623 |<br>|   2 | 李四  | 13710011003 | 101223199012015624 |<br>+-----+-------+-------------+--------------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from course;<br>+------+-------+<br>| cid  | cname |<br>+------+-------+<br>| 1001 | Java  |<br>| 1002 | MySQL |<br>+------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values<br>(1, 1, 1001, 89),<br>(2, 1, 1002, 90),<br>(3, 2, 1001, 88),<br>(4, 2, 1002, 56);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student_course;<br>+----+------+------+-------+<br>| id | sid  | cid  | score |<br>+----+------+------+-------+<br>|  1 |    1 | 1001 |    89 |<br>|  2 |    1 | 1002 |    90 |<br>|  3 |    2 | 1001 |    88 |<br>|  4 |    2 | 1002 |    56 |<br>+----+------+------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values (5, 1, 1001, 88);#失败<br><br>#ERROR 1062 (23000): Duplicate entry &#x27;1-1001&#x27; for key &#x27;sid&#x27;   违反sid-cid的复合唯一<br></code></pre></td></tr></table></figure><h3 id="3-5-删除唯一约束"><a href="#3-5-删除唯一约束" class="headerlink" title="3.5 删除唯一约束"></a>3.5 删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名&#x27;; #查看都有哪些约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>DROP INDEX uk_name_pwd;<br></code></pre></td></tr></table></figure><blockquote><p>注意：可以通过 <code>show index from 表名称; </code>查看表的索引</p></blockquote><h2 id="4-PRIMARY-KEY-约束"><a href="#4-PRIMARY-KEY-约束" class="headerlink" title="4. PRIMARY KEY 约束"></a>4. PRIMARY KEY 约束</h2><h3 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4.1 作用"></a>4.1 作用</h3><p>用来唯一标识表中的一行记录。</p><h3 id="4-2-关键字"><a href="#4-2-关键字" class="headerlink" title="4.2 关键字"></a>4.2 关键字</h3><p>primary key</p><h3 id="4-3-特点"><a href="#4-3-特点" class="headerlink" title="4.3 特点"></a>4.3 特点</h3><ul><li>主键约束相当于<strong>唯一约束+非空约束的组合</strong>，主键约束列不允许重复，也不允许出现空值。</li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555427492244.png" alt="1555427492244"></p><ul><li><p>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</p></li><li><p>主键约束对应着表中的一列或者多列（复合主键）</p></li><li><p>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</p></li><li><p><strong>MySQL的主键名总是PRIMARY</strong>，就算自己命名了主键约束名也没用。</p></li><li><p>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<strong>主键索引</strong>（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</p></li><li><p>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</p></li></ul><h3 id="4-4-添加主键约束"><a href="#4-4-添加主键约束" class="headerlink" title="4.4 添加主键约束"></a>4.4 添加主键约束</h3><p>（1）建表时指定主键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key, #列级模式<br>    字段名  数据类型,  <br>    字段名  数据类型  <br>);<br>create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    [constraint 约束名] primary key(字段名) #表级模式<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>id int primary key,<br>    name varchar(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc temp;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| id    | int(11)     | NO   | PRI | NULL    |       |<br>| name  | varchar(20) | YES  |     | NULL    |       |<br>+-------+-------------+------+-----+---------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(1,&#x27;张三&#x27;);#成功<br>insert into temp values(2,&#x27;李四&#x27;);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from temp;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | 张三 |<br>|  2 | 李四 |<br>+----+------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(1,&#x27;张三&#x27;);#失败<br>ERROR 1062 (23000): Duplicate（重复） entry（键入，输入） &#x27;1&#x27; for key &#x27;PRIMARY&#x27;<br><br><br>insert into temp values(1,&#x27;王五&#x27;);#失败<br>ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;<br><br>insert into temp values(3,&#x27;张三&#x27;);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from temp;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | 张三 |<br>|  2 | 李四 |<br>|  3 | 张三 |<br>+----+------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(4,null);#成功<br><br><br>insert into temp values(null,&#x27;李琦&#x27;);#失败<br>ERROR 1048 (23000): Column &#x27;id&#x27; cannot be null<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from temp;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | 张三 |<br>|  2 | 李四 |<br>|  3 | 张三 |<br>|  4 | NULL |<br>+----+------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示一个表建立两个主键约束<br>create table temp(<br>id int primary key,<br>    name varchar(20) primary key<br>);<br>ERROR 1068 (42000): Multiple（多重的） primary key defined（定义）<br></code></pre></td></tr></table></figure><p>再举例：</p><ul><li>列级约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp4(<br>id INT PRIMARY KEY AUTO_INCREMENT ,<br>NAME VARCHAR(20)<br>);<br></code></pre></td></tr></table></figure><ul><li>表级约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp5(<br>id INT NOT NULL AUTO_INCREMENT,<br>NAME VARCHAR(20),<br>pwd VARCHAR(15),<br>CONSTRAINT emp5_id_pk PRIMARY KEY(id)<br>);<br></code></pre></td></tr></table></figure><p>（2）建表后增加主键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student ADD PRIMARY KEY (sid);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp5 ADD PRIMARY KEY(NAME,pwd);<br></code></pre></td></tr></table></figure><h3 id="4-5-关于复合主键"><a href="#4-5-关于复合主键" class="headerlink" title="4.5 关于复合主键"></a>4.5 关于复合主键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    primary key(字段名1,字段名2)  #表示字段1和字段2的组合是唯一的，也可以有更多个字段<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#学生表<br>create table student(<br>sid int primary key,  #学号<br>    sname varchar(20)     #学生姓名<br>);<br><br>#课程表<br>create table course(<br>cid int primary key,  #课程编号<br>    cname varchar(20)     #课程名称<br>);<br><br>#选课表<br>create table student_course(<br>sid int,<br>    cid int,<br>    score int,<br>    primary key(sid,cid)  #复合主键<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;),(2,&#x27;李四&#x27;);<br>insert into course values(1001,&#x27;Java&#x27;),(1002,&#x27;MySQL&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+-----+-------+<br>| sid | sname |<br>+-----+-------+<br>|   1 | 张三  |<br>|   2 | 李四  |<br>+-----+-------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from course;<br>+------+-------+<br>| cid  | cname |<br>+------+-------+<br>| 1001 | Java  |<br>| 1002 | MySQL |<br>+------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values(1, 1001, 89),(1,1002,90),(2,1001,88),(2,1002,56);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student_course;<br>+-----+------+-------+<br>| sid | cid  | score |<br>+-----+------+-------+<br>|   1 | 1001 |    89 |<br>|   1 | 1002 |    90 |<br>|   2 | 1001 |    88 |<br>|   2 | 1002 |    56 |<br>+-----+------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values(1, 1001, 100);<br>ERROR 1062 (23000): Duplicate entry &#x27;1-1001&#x27; for key &#x27;PRIMARY&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc student_course;<br>+-------+---------+------+-----+---------+-------+<br>| Field | Type    | Null | Key | Default | Extra |<br>+-------+---------+------+-----+---------+-------+<br>| sid   | int(11) | NO   | PRI | NULL    |       |<br>| cid   | int(11) | NO   | PRI | NULL    |       |<br>| score | int(11) | YES  |     | NULL    |       |<br>+-------+---------+------+-----+---------+-------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp6(<br>id INT NOT NULL,<br>NAME VARCHAR(20),<br>pwd VARCHAR(15),<br>CONSTRAINT emp7_pk PRIMARY KEY(NAME,pwd)<br>);<br></code></pre></td></tr></table></figure><h3 id="4-6-删除主键约束"><a href="#4-6-删除主键约束" class="headerlink" title="4.6 删除主键约束"></a>4.6 删除主键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop primary key;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp5 DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure><blockquote><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</p></blockquote><h2 id="5-自增列：AUTO-INCREMENT"><a href="#5-自增列：AUTO-INCREMENT" class="headerlink" title="5. 自增列：AUTO_INCREMENT"></a>5. 自增列：AUTO_INCREMENT</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><p>某个字段的值自增</p><h3 id="5-2-关键字"><a href="#5-2-关键字" class="headerlink" title="5.2 关键字"></a>5.2 关键字</h3><p>auto_increment</p><h3 id="5-3-特点和要求"><a href="#5-3-特点和要求" class="headerlink" title="5.3 特点和要求"></a>5.3 特点和要求</h3><p>（1）一个表最多只能有一个自增长列</p><p>（2）当需要产生唯一标识符或顺序值时，可设置自增长</p><p>（3）自增长列约束的列必须是键列（主键列，唯一键列）</p><p>（4）自增约束的列的数据类型必须是整数类型</p><p>（5）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</p><p>错误演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int auto_increment,<br>    ename varchar(20)<br>);<br># ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key   <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key,<br>    ename varchar(20) unique key auto_increment<br>);<br># ERROR 1063 (42000): Incorrect column specifier for column &#x27;ename&#x27;  因为ename不是整数类型<br></code></pre></td></tr></table></figure><h3 id="5-4-如何指定自增约束"><a href="#5-4-如何指定自增约束" class="headerlink" title="5.4 如何指定自增约束"></a>5.4 如何指定自增约束</h3><p><strong>（1）建表时</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key auto_increment,<br>    字段名  数据类型  unique key not null,  <br>    字段名  数据类型  unique key,<br>    字段名  数据类型  not null default 默认值, <br>);<br>create table 表名称(<br>字段名  数据类型 default 默认值 ,<br>    字段名  数据类型 unique key auto_increment,  <br>    字段名  数据类型 not null default 默认值,,<br>    primary key(字段名)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key auto_increment,<br>    ename varchar(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| ename | varchar(20) | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>（2）建表后</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 auto_increment;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key ,<br>    ename varchar(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify eid int auto_increment;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| ename | varchar(20) | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5-5-如何删除自增约束"><a href="#5-5-如何删除自增约束" class="headerlink" title="5.5 如何删除自增约束"></a>5.5 如何删除自增约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束<br><br>alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify eid int;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| eid   | int(11)     | NO   | PRI | NULL    |       |<br>| ename | varchar(20) | YES  |     | NULL    |       |<br>+-------+-------------+------+-----+---------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5-6-MySQL-8-0新特性—自增变量的持久化"><a href="#5-6-MySQL-8-0新特性—自增变量的持久化" class="headerlink" title="5.6 MySQL 8.0新特性—自增变量的持久化"></a>5.6 MySQL 8.0新特性—自增变量的持久化</h3><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发现的问题。<br>下面通过案例来对比不同的版本中自增变量是否持久化。<br>在MySQL 5.7版本中，测试步骤如下：<br>创建的数据表中包含自增主键的id字段，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test1(<br>id INT PRIMARY KEY AUTO_INCREMENT<br>);<br></code></pre></td></tr></table></figure><p>插入4个空值，执行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test1<br>VALUES(0),(0),(0),(0);<br></code></pre></td></tr></table></figure><p>查询数据表test1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  4 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>删除id为4的记录，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM test1 WHERE id = 4;<br></code></pre></td></tr></table></figure><p>再次插入一个空值，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test1 VALUES(0);<br></code></pre></td></tr></table></figure><p>查询此时数据表test1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  5 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，虽然删除了id为4的记录，但是再次插入空值时，并没有重用被删除的4，而是分配了5。<br>删除id为5的记录，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM test1 where id=5;<br></code></pre></td></tr></table></figure><p><strong>重启数据库</strong>，重新插入一个空值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test1 values(0);<br></code></pre></td></tr></table></figure><p>再次查询数据表test1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  4 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，新插入的0值分配的是4，按照重启前的操作逻辑，此处应该分配6。出现上述结果的主要原因是自增主键没有持久化。<br>在MySQL 5.7系统中，对于自增主键的分配规则，是由InnoDB数据字典内部一个<code>计数器</code>来决定的，而该计数器只在<code>内存中维护</code>，并不会持久化到磁盘中。当数据库重启时，该计数器会被初始化。</p><p>在MySQL 8.0版本中，上述测试步骤最后一步的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  6 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，自增变量已经持久化了。</p><p>MySQL 8.0将自增主键的计数器持久化到<code>重做日志</code>中。每次计数器发生改变，都会将其写入重做日志中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</p><h2 id="6-FOREIGN-KEY-约束"><a href="#6-FOREIGN-KEY-约束" class="headerlink" title="6. FOREIGN KEY 约束"></a>6. FOREIGN KEY 约束</h2><h3 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h3><p>限定某个表的某个字段的引用完整性。</p><p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555428214706.png" alt="1555428214706"></p><h3 id="6-2-关键字"><a href="#6-2-关键字" class="headerlink" title="6.2 关键字"></a>6.2 关键字</h3><p>FOREIGN KEY</p><h3 id="6-3-主表和从表-x2F-父表和子表"><a href="#6-3-主表和从表-x2F-父表和子表" class="headerlink" title="6.3 主表和从表&#x2F;父表和子表"></a>6.3 主表和从表&#x2F;父表和子表</h3><p>主表（父表）：被引用的表，被参考的表</p><p>从表（子表）：引用别人的表，参考别人的表</p><p>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</p><p>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</p><h3 id="6-4-特点"><a href="#6-4-特点" class="headerlink" title="6.4 特点"></a>6.4 特点</h3><p>（1）从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列</p><p>​          为什么？因为被依赖&#x2F;被参考的值必须是唯一的</p><p>（2）在创建外键约束时，如果不给外键约束命名，<strong>默认名不是列名，而是自动产生一个外键名</strong>（例如 student_ibfk_1;），也可以指定外键约束名。</p><p>（3）创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</p><p>（4）删表时，先删从表（或先删除外键约束），再删除主表</p><p>（5）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据</p><p>（6）在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p><p>（7）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。</p><p>​          例如：都是表示部门编号，都是int类型。</p><p>（8）<strong>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引</strong>。但是索引名是外键的约束名。（根据外键查询效率很高）</p><p>（9）删除外键约束后，必须<code>手动</code>删除对应的索引</p><h3 id="6-5-添加外键约束"><a href="#6-5-添加外键约束" class="headerlink" title="6.5 添加外键约束"></a>6.5 添加外键约束</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 主表名称(<br>字段1  数据类型  primary key,<br>    字段2  数据类型<br>);<br><br>create table 从表名称(<br>字段1  数据类型  primary key,<br>    字段2  数据类型,<br>    [CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段)<br>);<br>#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样<br>#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样<br><br>-- FOREIGN KEY: 在表级指定子表中的列<br>-- REFERENCES: 标示在父表中的列<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept( #主表<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(#从表<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)   #在从表中指定外键约束<br>    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br>);<br><br>说明：<br>（1）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。<br>（2）删除表时，先删除从表emp，再删除主表dept<br></code></pre></td></tr></table></figure><p>（2）建表后</p><p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那么，就要用修改表的方式来补充定义。</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp1<br>ADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int#员工所在的部门<br>);<br>#这两个表创建时，没有指定外键的话，那么创建顺序是随意<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table emp add foreign key (deptid) references dept(did);<br></code></pre></td></tr></table></figure><h3 id="6-6-演示问题"><a href="#6-6-演示问题" class="headerlink" title="6.6 演示问题"></a>6.6 演示问题</h3><p>（1）失败：不是键列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int ,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)<br>);<br>#ERROR 1215 (HY000): Cannot add foreign key constraint  原因是dept的did不是键列<br></code></pre></td></tr></table></figure><p>（2）失败：数据类型不一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid char,#员工所在的部门<br>    foreign key (deptid) references dept(did)<br>);<br>#ERROR 1215 (HY000): Cannot add foreign key constraint  原因是从表的deptid字段和主表的did字段的数据类型不一致，并且要它俩的逻辑意义一致<br></code></pre></td></tr></table></figure><p>（3）成功，两个表字段名一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    did int,#员工所在的部门<br>    foreign key (did) references dept(did)  <br>    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br>    #是否重名没问题，因为两个did在不同的表中<br>);<br></code></pre></td></tr></table></figure><p>（4）添加、删除、修改问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)  <br>    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1003, &#x27;财务部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #添加从表记录成功，在添加这条记录时，要求部门表有1001部门<br><br>insert into emp values(2,&#x27;李四&#x27;,1005);#添加从表记录失败<br>ERROR 1452 (23000): Cannot add（添加） or update（修改） a child row: a foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`)) 从表emp添加记录失败，因为主表dept没有1005部门<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部  |<br>| 1003 | 财务部  |<br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三   |   1001 |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update emp set deptid = 1002 where eid = 1;#修改从表失败 <br>ERROR 1452 (23000): Cannot add（添加） or update（修改） a child row（子表的记录）: a foreign key constraint fails（外键约束失败） (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`))  #部门表did字段现在没有1002的值，所以员工表中不能修改员工所在部门deptid为1002<br><br>update dept set did = 1002 where did = 1001;#修改主表失败<br>ERROR 1451 (23000): Cannot delete（删除） or update（修改） a parent row（父表的记录）: a foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`)) #部门表did的1001字段已经被emp引用了，所以部门表的1001字段就不能修改了。<br><br>update dept set did = 1002 where did = 1003;#修改主表成功  因为部门表的1003部门没有被emp表引用，所以可以修改<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from dept where did=1001; #删除主表失败<br>ERROR 1451 (23000): Cannot delete（删除） or update（修改） a parent row（父表记录）: a foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`))  #因为部门表did的1001字段已经被emp引用了，所以部门表的1001字段对应的记录就不能被删除<br></code></pre></td></tr></table></figure><p>总结：约束关系是针对双方的</p><ul><li><p>添加了外键约束后，主表的修改和删除数据受约束</p></li><li><p>添加了外键约束后，从表的添加和修改数据受约束</p></li><li><p>在从表上建立外键，要求主表必须存在</p></li><li><p>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</p></li></ul><h3 id="6-7-约束等级"><a href="#6-7-约束等级" class="headerlink" title="6.7 约束等级"></a>6.7 约束等级</h3><ul><li><p><code>Cascade方式</code>：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录 </p></li><li><p><code>Set null方式</code>：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null  </p></li><li><p><code>No action方式</code>：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作  </p></li><li><p><code>Restrict方式</code>：同no action， 都是立即检查外键约束</p></li><li><p><code>Set default方式</code>（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置成一个默认的值，但Innodb不能识别</p></li></ul><p>如果没有指定等级，就相当于Restrict方式。</p><p>对于外键约束，最好是采用: <code>ON UPDATE CASCADE ON DELETE RESTRICT</code> 的方式。</p><p>（1）演示1：on update cascade on delete set null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)  on update cascade on delete set null<br>    #把修改操作设置为级联修改等级，把删除操作设置为set null等级<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1002, &#x27;财务部&#x27;);<br>insert into dept values(1003, &#x27;咨询部&#x27;);<br><br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #在添加这条记录时，要求部门表有1001部门<br>insert into emp values(2,&#x27;李四&#x27;,1001);<br>insert into emp values(3,&#x27;王五&#x27;,1002);<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br><br>mysql&gt; select * from emp;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改主表成功，从表也跟着修改，修改了主表被引用的字段1002为1004，从表的引用字段就跟着修改为1004了<br>mysql&gt; update dept set did = 1004 where did = 1002;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #原来是1002，修改为1004<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1004 | #原来是1002，跟着修改为1004<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除主表的记录成功，从表对应的字段的值被修改为null<br>mysql&gt; delete from dept where did = 1001;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  | #记录1001部门被删除了<br>+------+--------+<br>| 1003 | 咨询部  |<br>| 1004 | 财务部  |<br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   NULL | #原来引用1001部门的员工，deptid字段变为null<br>|   2 | 李四  |   NULL |<br>|   3 | 王五  |   1004 |<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（2）演示2：on update set null on delete cascade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)  on update set null on delete cascade<br>    #把修改操作设置为set null等级，把删除操作设置为级联删除等级<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1002, &#x27;财务部&#x27;);<br>insert into dept values(1003, &#x27;咨询部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #在添加这条记录时，要求部门表有1001部门<br>insert into emp values(2,&#x27;李四&#x27;,1001);<br>insert into emp values(3,&#x27;王五&#x27;,1002);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1002 | 财务部 |<br>| 1003 | 咨询部 |<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1002 |<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改主表，从表对应的字段设置为null<br>mysql&gt; update dept set did = 1004 where did = 1002;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #原来did是1002<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   NULL | #原来deptid是1002，因为部门表1002被修改了，1002没有对应的了，就设置为null<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除主表的记录成功，主表的1001行被删除了，从表相应的记录也被删除了<br>mysql&gt; delete from dept where did=1001;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  | #部门表中1001部门被删除<br>+------+--------+<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 |<br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |#原来1001部门的员工也被删除了<br>+-----+-------+--------+<br>|   3 | 王五  |   NULL |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><p>（3）演示：on update cascade on delete cascade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)  on update cascade on delete cascade<br>    #把修改操作设置为级联修改等级，把删除操作也设置为级联删除等级<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1002, &#x27;财务部&#x27;);<br>insert into dept values(1003, &#x27;咨询部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #在添加这条记录时，要求部门表有1001部门<br>insert into emp values(2,&#x27;李四&#x27;,1001);<br>insert into emp values(3,&#x27;王五&#x27;,1002);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1002 | 财务部 |<br>| 1003 | 咨询部 |<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1002 |<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改主表，从表对应的字段自动修改<br>mysql&gt; update dept set did = 1004 where did = 1002;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #部门1002修改为1004<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1004 | #级联修改<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除主表的记录成功，主表的1001行被删除了，从表相应的记录也被删除了<br>mysql&gt; delete from dept where did=1001;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  | #1001部门被删除了<br>+------+--------+<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | <br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |  #1001部门的员工也被删除了<br>+-----+-------+--------+<br>|   3 | 王五  |   1004 |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-8-删除外键约束"><a href="#6-8-删除外键约束" class="headerlink" title="6.8 删除外键约束"></a>6.8 删除外键约束</h3><p>流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">(1)第一步先查看约束名和删除外键约束<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;#查看某个表的约束名<br><br>ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;<br><br>（2）第二步查看索引名和删除索引。（注意，只能手动删除）<br>SHOW INDEX FROM 表名称; #查看某个表的索引名<br><br>ALTER TABLE 从表名 DROP INDEX 索引名;<br><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;emp&#x27;;<br><br>mysql&gt; alter table emp drop foreign key emp_ibfk_1;<br>Query OK, 0 rows affected (0.02 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show index from emp;<br><br>mysql&gt; alter table emp drop index deptid;<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt;  show index from emp;<br></code></pre></td></tr></table></figure><h3 id="6-9-开发场景"><a href="#6-9-开发场景" class="headerlink" title="6.9 开发场景"></a>6.9 开发场景</h3><p><strong>问题1：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否一定要建外键约束？</strong></p><p>答：不是的</p><p><strong>问题2：建和不建外键约束有什么区别？</strong></p><p>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p><p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的<code>引用完整性</code>，只能依<code>靠程序员的自觉</code>，或者是<code>在Java程序中进行限定</code>。例如：在员工表中，可以添加一个员工的信息，它的部门指定为一个完全不存在的部门。</p><p><strong>问题3：那么建和不建外键约束和查询有没有关系？</strong></p><p>答：没有</p><blockquote><p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适合。比如大型网站的中央数据库，可能会<code>因为外键约束的系统开销而变得非常慢</code>。所以， MySQL 允许你不使用系统自带的外键约束，在<code>应用层面</code>完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p></blockquote><h3 id="6-10-阿里开发规范"><a href="#6-10-阿里开发规范" class="headerlink" title="6.10 阿里开发规范"></a>6.10 阿里开发规范</h3><p>【<code>强制</code>】不得使用外键与级联，一切外键概念必须在应用层解决。 </p><p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于<code>单机低并发</code>，不适合<code>分布式</code>、<code>高并发集群</code>；级联更新是强阻塞，存在数据库<code>更新风暴</code>的风险；外键影响数据库的<code>插入速度</code>。</p><h2 id="7-CHECK-约束"><a href="#7-CHECK-约束" class="headerlink" title="7. CHECK 约束"></a>7. CHECK 约束</h2><h3 id="7-1-作用"><a href="#7-1-作用" class="headerlink" title="7.1 作用"></a>7.1 作用</h3><p>检查某个字段的值是否符号xx要求，一般指的是值的范围</p><h3 id="2、关键字"><a href="#2、关键字" class="headerlink" title="2、关键字"></a>2、关键字</h3><p>CHECK</p><h3 id="3、说明：MySQL-5-7-不支持"><a href="#3、说明：MySQL-5-7-不支持" class="headerlink" title="3、说明：MySQL 5.7 不支持"></a>3、说明：MySQL 5.7 不支持</h3><p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</p><p>但是<strong>MySQL 8.0中可以使用check约束了</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key,<br>    ename varchar(5),<br>    gender char check (&#x27;男&#x27; or &#x27;女&#x27;)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee values(1,&#x27;张三&#x27;,&#x27;妖&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employee;<br>+-----+-------+--------+<br>| eid | ename | gender |<br>+-----+-------+--------+<br>|   1 | 张三   | 妖     |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp(<br>id INT AUTO_INCREMENT,<br>NAME VARCHAR(20),<br>age INT CHECK(age &gt; 20),<br>PRIMARY KEY(id)<br>);<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">age tinyint check(age &gt;20) 或 sex char(2) check(sex in(‘男’,’女’))<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CHECK(height&gt;=0 AND height&lt;3)<br></code></pre></td></tr></table></figure><h2 id="8-DEFAULT约束"><a href="#8-DEFAULT约束" class="headerlink" title="8. DEFAULT约束"></a>8. DEFAULT约束</h2><h3 id="8-1-作用"><a href="#8-1-作用" class="headerlink" title="8.1 作用"></a>8.1 作用</h3><p>给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><h3 id="8-2-关键字"><a href="#8-2-关键字" class="headerlink" title="8.2 关键字"></a>8.2 关键字</h3><p>DEFAULT</p><h3 id="8-3-如何给字段加默认值"><a href="#8-3-如何给字段加默认值" class="headerlink" title="8.3 如何给字段加默认值"></a>8.3 如何给字段加默认值</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key,<br>    字段名  数据类型  unique key not null,  <br>    字段名  数据类型  unique key,<br>    字段名  数据类型  not null default 默认值, <br>);<br>create table 表名称(<br>字段名  数据类型 default 默认值 ,<br>    字段名  数据类型 not null default 默认值,  <br>    字段名  数据类型 not null default 默认值,<br>    primary key(字段名),<br>    unique key(字段名)<br>);<br><br>说明：默认值约束一般不在唯一键和主键列上加<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key,<br>    ename varchar(20) not null,<br>    gender char default &#x27;男&#x27;,<br>    tel char(11) not null default &#x27;&#x27; #默认是空字符串<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | NO   |     | NULL    |       |<br>| gender | char(1)     | YES  |     | 男      |       |<br>| tel    | char(11)    | NO   |     |         |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee values(1,&#x27;汪飞&#x27;,&#x27;男&#x27;,&#x27;13700102535&#x27;); #成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employee;<br>+-----+-------+--------+-------------+<br>| eid | ename | gender | tel         |<br>+-----+-------+--------+-------------+<br>|   1 | 汪飞  | 男     | 13700102535 |<br>+-----+-------+--------+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee(eid,ename) values(2,&#x27;天琪&#x27;); #成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employee;<br>+-----+-------+--------+-------------+<br>| eid | ename | gender | tel         |<br>+-----+-------+--------+-------------+<br>|   1 | 汪飞  | 男     | 13700102535 |<br>|   2 | 天琪  | 男     |             |<br>+-----+-------+--------+-------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee(eid,ename) values(3,&#x27;二虎&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;&#x27; for key &#x27;tel&#x27;  <br>#如果tel有唯一性约束的话会报错，如果tel没有唯一性约束，可以添加成功<br></code></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE myemp(<br>id INT AUTO_INCREMENT PRIMARY KEY,<br>NAME VARCHAR(15),<br>salary DOUBLE(10,2) DEFAULT 2000<br>);<br></code></pre></td></tr></table></figure><p>（2）建表后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 default 默认值;<br><br>#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了<br>#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了<br>alter table 表名称 modify 字段名 数据类型 default 默认值 not null;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key,<br>    ename varchar(20),<br>    gender char,<br>    tel char(11) not null<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | YES  |     | NULL    |       |<br>| gender | char(1)     | YES  |     | NULL    |       |<br>| tel    | char(11)    | NO   |     | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify gender char default &#x27;男&#x27;;  #给gender字段增加默认值约束<br>alter table employee modify tel char(11) default &#x27;&#x27;; #给tel字段增加默认值约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | YES  |     | NULL    |       |<br>| gender | char(1)     | YES  |     | 男      |       |<br>| tel    | char(11)    | YES  |     |         |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify tel char(11) default &#x27;&#x27;  not null;#给tel字段增加默认值约束，并保留非空约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | YES  |     | NULL    |       |<br>| gender | char(1)     | YES  |     | 男      |       |<br>| tel    | char(11)    | NO   |     |         |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="8-4-如何删除默认值约束"><a href="#8-4-如何删除默认值约束" class="headerlink" title="8.4 如何删除默认值约束"></a>8.4 如何删除默认值约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束<br><br>alter table 表名称 modify 字段名 数据类型  not null; #删除默认值约束，保留非空约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify gender char; #删除gender字段默认值约束，如果有非空约束，也一并删除<br>alter table employee modify tel char(11)  not null;#删除tel字段默认值约束，保留非空约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | YES  |     | NULL    |       |<br>| gender | char(1)     | YES  |     | NULL    |       |<br>| tel    | char(11)    | NO   |     | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="9-面试"><a href="#9-面试" class="headerlink" title="9. 面试"></a>9. 面试</h2><p><strong>面试1、为什么建表时，加 not null default ‘’ 或 default 0</strong></p><p>答：不想让表中出现null值。</p><p><strong>面试2、为什么不想要 null 的值</strong></p><p>答:（1）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通常返回null。</p><p>​     （2）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</p><p><strong>面试3、带AUTO_INCREMENT约束的字段值是从1开始的吗？</strong><br>在MySQL中，默认AUTO_INCREMENT的初始值是1，每新增一条记录，字段值自动加1。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一条记录，同时指定id值为5，则以后插入的记录的id值就会从6开始往上增加。添加主键约束时，往往需要设置字段自动增加属性。</p><p><strong>面试4、并不是每个表都可以任意选择存储引擎？</strong><br>外键约束（FOREIGN KEY）不能跨引擎使用。</p><p>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql12MySQL数据类型</title>
    <link href="/2023/04/11/sql12MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/04/11/sql12MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第12章-MySQL数据类型精讲"><a href="#第12章-MySQL数据类型精讲" class="headerlink" title="第12章_MySQL数据类型精讲"></a>第12章_MySQL数据类型精讲</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-MySQL中的数据类型"><a href="#1-MySQL中的数据类型" class="headerlink" title="1. MySQL中的数据类型"></a>1. MySQL中的数据类型</h2><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON；<br/>集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><p>常见数据类型的属性，如下：</p><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr></tbody></table><h2 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a>2. 整数类型</h2><h3 id="2-1-类型介绍"><a href="#2-1-类型介绍" class="headerlink" title="2.1 类型介绍"></a>2.1 类型介绍</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p><p>它们的区别如下表所示：</p><table><thead><tr><th><strong>整数类型</strong></th><th><strong>字节</strong></th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h3 id="2-2-可选属性"><a href="#2-2-可选属性" class="headerlink" title="2.2 可选属性"></a>2.2 可选属性</h3><p><strong>整数类型的可选属性有三个：</strong></p><h4 id="2-2-1-M"><a href="#2-2-1-M" class="headerlink" title="2.2.1 M"></a>2.2.1 M</h4><p><code>M</code>: 表示显示宽度，M的取值范围是(0, 255)。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用字符填满宽度。该项功能需要配合“<code>ZEROFILL</code>”使用，表示用“0”填满宽度，否则指定显示宽度无效。</p><p>如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？</p><p>答案：不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即<code>显示宽度与类型可以存储的值范围无关</code>。<strong>从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性。</strong></p><p>整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_int1 ( x TINYINT,　y SMALLINT,　z MEDIUMINT,　m INT,　n BIGINT );<br></code></pre></td></tr></table></figure><p>查看表结构 （MySQL5.7中显式如下，MySQL8中不再显式范围）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc test_int1;<br>+-------+--------------+------+-----+---------+-------+<br>| Field | Type         | Null | Key | Default | Extra |<br>+-------+--------------+------+-----+---------+-------+<br>|   x   | tinyint(4)   | YES  |     | NULL    |       |<br>| 　y   | smallint(6)  | YES  |     | NULL    |       |<br>| 　z   | mediumint(9) | YES  |     | NULL    |       |<br>| 　m   | int(11)      | YES  |     | NULL    |       |<br>| 　n   | bigint(20)   | YES  |     | NULL    |       |<br>+-------+--------------+------+-----+---------+-------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>TINYINT有符号数和无符号数的取值范围分别为-128<del>127和0</del>255，由于负号占了一个数字位，因此TINYINT默认的显示宽度为4。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_int2(<br>f1 INT,<br>f2 INT(5),<br>f3 INT(5) ZEROFILL<br>)<br><br>DESC test_int2;<br><br>INSERT INTO test_int2(f1,f2,f3)<br>VALUES(1,123,123);<br><br>INSERT INTO test_int2(f1,f2)<br>VALUES(123456,123456);<br><br>INSERT INTO test_int2(f1,f2,f3)<br>VALUES(123456,123456,123456);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_int2;<br>+--------+--------+--------+<br>| f1     | f2     | f3     |<br>+--------+--------+--------+<br>|      1 |    123 |  00123 |<br>| 123456 | 123456 |   NULL |<br>| 123456 | 123456 | 123456 |<br>+--------+--------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="2-2-2-UNSIGNED"><a href="#2-2-2-UNSIGNED" class="headerlink" title="2.2.2 UNSIGNED"></a>2.2.2 UNSIGNED</h4><p><code>UNSIGNED</code>: 无符号类型（非负），所有的整数类型都有一个可选的属性UNSIGNED（无符号属性），无符号整数类型的最小取值为0。所以，如果需要在MySQL数据库中保存非负整数值时，可以将整数类型设置为无符号类型。</p><p>int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_int3(<br>f1 INT UNSIGNED<br>);<br><br>mysql&gt; desc test_int3;<br>+-------+------------------+------+-----+---------+-------+<br>| Field | Type             | Null | Key | Default | Extra |<br>+-------+------------------+------+-----+---------+-------+<br>| f1    | int(10) unsigned | YES  |     | NULL    |       |<br>+-------+------------------+------+-----+---------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="2-2-3-ZEROFILL"><a href="#2-2-3-ZEROFILL" class="headerlink" title="2.2.3 ZEROFILL"></a>2.2.3 ZEROFILL</h4><p><code>ZEROFILL</code>: 0填充,（如果某列是ZEROFILL，那么MySQL会自动为当前列添加UNSIGNED属性），如果指定了ZEROFILL只是表示不够M位时，用0在左边填充，如果超过M位，只要不超过数据存储范围即可。</p><p>原来，在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。 int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。也就是说，<strong>int(M)，必须和UNSIGNED ZEROFILL一起使用才有意义。</strong>如果整数值超过M位，就按照实际位数存储。只是无须再用字符 0 进行填充。</p><h3 id="2-3-适用场景"><a href="#2-3-适用场景" class="headerlink" title="2.3 适用场景"></a>2.3 适用场景</h3><p><code>TINYINT</code>：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</p><p><code>SMALLINT</code>：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。</p><p><code>MEDIUMINT</code>：用于较大整数的计算，比如车站每日的客流量等。</p><p><code>INT、INTEGER</code>：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。</p><p><code>BIGINT</code>：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p><h3 id="2-4-如何选择？"><a href="#2-4-如何选择？" class="headerlink" title="2.4 如何选择？"></a>2.4 如何选择？</h3><p>在评估用哪种整数类型的时候，你需要考虑<code>存储空间</code>和<code>可靠性</code>的平衡问题：一方 面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起<code>系统错误</code>，影响可靠性。 </p><p>举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。</p><p>如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围 65535。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。 </p><p>你要注意的是，在实际工作中，<strong>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本</strong>。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><h2 id="3-浮点类型"><a href="#3-浮点类型" class="headerlink" title="3. 浮点类型"></a>3. 浮点类型</h2><h3 id="3-1-类型介绍"><a href="#3-1-类型介绍" class="headerlink" title="3.1 类型介绍"></a>3.1 类型介绍</h3><p>浮点数和定点数类型的特点是可以<code>处理小数</code>，你可以把整数看成小数的一个特例。因此，浮点数和定点数的使用场景，比整数大多了。 MySQL支持的浮点数类型，分别是 FLOAT、DOUBLE、REAL。</p><ul><li>FLOAT 表示单精度浮点数；</li><li>DOUBLE 表示双精度浮点数；</li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211007173312237.png" alt="image-20211007173312237"></p><ul><li><p>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“<code>REAL_AS_FLOAT</code>”，那 么，MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET sql_mode = “REAL_AS_FLOAT”;<br></code></pre></td></tr></table></figure></li></ul><p><strong>问题1：</strong>FLOAT 和 DOUBLE 这两种数据类型的区别是啥呢？</p><p>FLOAT 占用字节数少，取值范围小；DOUBLE 占用字节数多，取值范围也大。</p><p><strong>问题2：</strong>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？ </p><p>MySQL 存储浮点数的格式为：<code>符号(S)</code>、<code>尾数(M)</code>和 <code>阶码(E)</code>。因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p><h3 id="3-2-数据精度说明"><a href="#3-2-数据精度说明" class="headerlink" title="3.2 数据精度说明"></a>3.2 数据精度说明</h3><p>对于浮点类型，在MySQL中单精度值使用<code>4</code>个字节，双精度值使用<code>8</code>个字节。</p><ul><li><p>MySQL允许使用<code>非标准语法</code>（其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么用）：<code>FLOAT(M,D)</code>或<code>DOUBLE(M,D)</code>。这里，M称为<code>精度</code>，D称为<code>标度</code>。(M,D)中 M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255，0&lt;&#x3D;D&lt;&#x3D;30。</p><p>例如，定义为FLOAT(5,2)的一个列可以显示为-999.99-999.99。如果超过这个范围会报错。</p></li><li><p>FLOAT和DOUBLE类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示。</p></li><li><p>说明：浮点类型，也可以加<code>UNSIGNED</code>，但是不会改变数据范围，例如：FLOAT(3,2) UNSIGNED仍然只能表示0-9.99的范围。</p></li><li><p>不管是否显式设置了精度(M,D)，这里MySQL的处理方案如下：</p><ul><li><p>如果存储时，整数部分超出了范围，MySQL就会报错，不允许存这样的值</p></li><li><p>如果存储时，小数点部分若超出范围，就分以下情况：</p><ul><li>若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余的小数位后保存。例如在FLOAT(5,2)列内插入999.009，近似结果是999.01。</li><li>若四舍五入后，整数部分超出范围，则MySQL报错，并拒绝处理。如FLOAT(5,2)列内插入999.995和-999.995都会报错。</li></ul></li></ul></li><li><p><strong>从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用</strong>，将来可能被移除。另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_double1(<br>f1 FLOAT,<br>f2 FLOAT(5,2),<br>f3 DOUBLE,<br>f4 DOUBLE(5,2)<br>);<br><br>DESC test_double1;<br><br>INSERT INTO test_double1<br>VALUES(123.456,123.456,123.4567,123.45);<br><br>#Out of range value for column &#x27;f2&#x27; at row 1<br>INSERT INTO test_double1<br>VALUES(123.456,1234.456,123.4567,123.45); <br><br>SELECT * FROM test_double1;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-3-精度误差说明"><a href="#3-3-精度误差说明" class="headerlink" title="3.3 精度误差说明"></a>3.3 精度误差说明</h3><p>浮点数类型有个缺陷，就是不精准。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如，我们设计一个表，有f1这个字段，插入值分别为0.47,0.44,0.19，我们期待的运行结果是：0.47 + 0.44 + 0.19 &#x3D; 1.1。而使用sum之后查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_double2(<br>f1 DOUBLE<br>);<br><br>INSERT INTO test_double2<br>VALUES(0.47),(0.44),(0.19);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1)<br>    -&gt; FROM test_double2;<br>+--------------------+<br>| SUM(f1)            |<br>+--------------------+<br>| 1.0999999999999999 |<br>+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1) = 1.1,1.1 = 1.1<br>    -&gt; FROM test_double2;<br>+---------------+-----------+<br>| SUM(f1) = 1.1 | 1.1 = 1.1 |<br>+---------------+-----------+<br>|             0 |         1 |<br>+---------------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>查询结果是 1.0999999999999999。看到了吗？虽然误差很小，但确实有误差。 你也可以尝试把数据类型改成 FLOAT，然后运行求和查询，得到的是， 1.0999999940395355。显然，误差更大了。</p><p>那么，为什么会存在这样的误差呢？问题还是出在 MySQL 对浮点类型数据的存储方式上。 </p><p>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成 1.001101×2^3。如果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。 </p><p>在编程中，如果用到浮点数，要特别注意误差问题，<strong>因为浮点数是不准确的，所以我们要避免使用“&#x3D;”来判断两个数是否相等。</strong>同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数类型：<code>DECIMAL</code>。</p><h2 id="4-定点数类型"><a href="#4-定点数类型" class="headerlink" title="4. 定点数类型"></a>4. 定点数类型</h2><h3 id="4-1-类型介绍"><a href="#4-1-类型介绍" class="headerlink" title="4.1 类型介绍"></a>4.1 类型介绍</h3><ul><li><p>MySQL中的定点数类型只有 DECIMAL 一种类型。</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2字节</td><td>有效范围由M和D决定</td></tr></tbody></table><p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，D&lt;M。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p></li><li><p><strong>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样</strong>，但是有效的数据范围是由M和D决定的。DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可以更大一些。</p></li><li><p>定点数在MySQL内部是以<code>字符串</code>的形式进行存储，这就决定了它一定是精准的。</p></li><li><p>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的精度范围时，则MySQL同样会进行四舍五入处理。</p></li><li><p><strong>浮点数 vs 定点数</strong></p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</li></ul></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_decimal1(<br>f1 DECIMAL,<br>f2 DECIMAL(5,2)<br>);<br><br>DESC test_decimal1;<br><br>INSERT INTO test_decimal1(f1,f2)<br>VALUES(123.123,123.456);<br><br>#Out of range value for column &#x27;f2&#x27; at row 1<br>INSERT INTO test_decimal1(f2)<br>VALUES(1234.34);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_decimal1;<br>+------+--------+<br>| f1   | f2     |<br>+------+--------+<br>|  123 | 123.46 |<br>+------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure></li><li><p>举例</p><p>我们运行下面的语句，把test_double2表中字段“f1”的数据类型修改为 DECIMAL(5,2)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE test_double2<br>MODIFY f1 DECIMAL(5,2);<br></code></pre></td></tr></table></figure><p>然后，我们再一次运行求和语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1)<br>    -&gt; FROM test_double2;<br>+---------+<br>| SUM(f1) |<br>+---------+<br>|    1.10 |<br>+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1) = 1.1<br>    -&gt; FROM test_double2;<br>+---------------+<br>| SUM(f1) = 1.1 |<br>+---------------+<br>|             1 |<br>+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-开发中经验"><a href="#4-2-开发中经验" class="headerlink" title="4.2 开发中经验"></a>4.2 开发中经验</h3><blockquote><p>“由于 DECIMAL 数据类型的精准性，在我们的项目中，除了极少数（比如商品编号）用到整数类型外，其他的数值都用的是 DECIMAL，原因就是这个项目所处的零售行业，要求精准，一分钱也不能差。 ” ——来自某项目经理</p></blockquote><h2 id="5-位类型：BIT"><a href="#5-位类型：BIT" class="headerlink" title="5. 位类型：BIT"></a>5. 位类型：BIT</h2><p>BIT类型中存储的是二进制值，类似010110。</p><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1 &lt;&#x3D; M &lt;&#x3D; 64</td><td>约为(M + 7)&#x2F;8个字节</td></tr></tbody></table><p>BIT类型，如果没有指定(M)，默认是1位。这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的位数，位数最小值为1，最大值为64。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_bit1(<br>f1 BIT,<br>f2 BIT(5),<br>f3 BIT(64)<br>);<br><br>INSERT INTO test_bit1(f1)<br>VALUES(1);<br><br>#Data too long for column &#x27;f1&#x27; at row 1<br>INSERT INTO test_bit1(f1)<br>VALUES(2);<br><br>INSERT INTO test_bit1(f2)<br>VALUES(23);<br></code></pre></td></tr></table></figure><p>注意：在向BIT类型的字段中插入数据时，一定要确保插入的数据在BIT类型支持的范围内。</p><p>使用SELECT命令查询位字段时，可以用<code>BIN()</code>或<code>HEX()</code>函数进行读取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_bit1;<br>+------------+------------+------------+<br>| f1         | f2         | f3         |<br>+------------+------------+------------+<br>| 0x01       | NULL       | NULL       |<br>| NULL       | 0x17       | NULL       |<br>+------------+------------+------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BIN(f2),HEX(f2)<br>    -&gt; FROM test_bit1;<br>+---------+---------+<br>| BIN(f2) | HEX(f2) |<br>+---------+---------+<br>| NULL    | NULL    |<br>| 10111   | 17      |<br>+---------+---------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT f2 + 0<br>    -&gt; FROM test_bit1;<br>+--------+<br>| f2 + 0 |<br>+--------+<br>|   NULL |<br>|     23 |<br>+--------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，使用b+0查询数据时，可以直接查询出存储的十进制数据的值。</p><h2 id="6-日期与时间类型"><a href="#6-日期与时间类型" class="headerlink" title="6. 日期与时间类型"></a>6. 日期与时间类型</h2><p>日期与时间是重要的信息，在我们的系统中，几乎所有的数据表都用得到。原因是客户需要知道数据的时间标签，从而进行数据查询、统计和处理。 </p><p>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL8.0版本支持的日期和时间类型主要有：YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</p><ul><li><code>YEAR</code>类型通常用来表示年</li><li><code>DATE</code>类型通常用来表示年、月、日</li><li><code>TIME</code>类型通常用来表示时、分、秒</li><li><code>DATETIME</code>类型通常用来表示年、月、日、时、分、秒</li><li><code>TIMESTAMP</code>类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY或YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-03</td></tr><tr><td>DATETIME</td><td>日期时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>日期时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:00 UTC</td><td>2038-01-19 03:14:07UTC</td></tr></tbody></table><p>可以看到，不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据实际需要灵活选取。</p><p>为什么时间类型 TIME 的取值范围不是 -23:59:59～23:59:59 呢？原因是 MySQL 设计的 TIME 类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p><h3 id="6-1-YEAR类型"><a href="#6-1-YEAR类型" class="headerlink" title="6.1 YEAR类型"></a>6.1 YEAR类型</h3><p>YEAR类型用来表示年份，在所有的日期时间类型中所占用的存储空间最小，只需要<code>1个字节</code>的存储空间。</p><p>在MySQL中，YEAR有以下几种存储格式：</p><ul><li>以4位字符串或数字格式表示YEAR类型，其格式为YYYY，最小值为1901，最大值为2155。</li><li>以2位字符串格式表示YEAR类型，最小值为00，最大值为99。<ul><li>当取值为01到69时，表示2001到2069；</li><li>当取值为70到99时，表示1970到1999；</li><li>当取值整数的0或00添加的话，那么是0000年；</li><li>当取值是日期&#x2F;字符串的’0’添加的话，是2000年。</li></ul></li></ul><p><strong>从MySQL5.5.27开始，2位格式的YEAR已经不推荐使用</strong>。YEAR默认格式就是“YYYY”，没必要写成YEAR(4)，从MySQL 8.0.19开始，不推荐使用指定显示宽度的YEAR(4)数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_year(<br>f1 YEAR,<br>f2 YEAR(4)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DESC test_year;<br>+-------+---------+------+-----+---------+-------+<br>| Field | Type    | Null | Key | Default | Extra |<br>+-------+---------+------+-----+---------+-------+<br>| f1    | year(4) | YES  |     | NULL    |       |<br>| f2    | year(4) | YES  |     | NULL    |       |<br>+-------+---------+------+-----+---------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_year<br>VALUES(&#x27;2020&#x27;,&#x27;2021&#x27;);<br><br>mysql&gt; SELECT * FROM test_year;<br>+------+------+<br>| f1   | f2   |<br>+------+------+<br>| 2020 | 2021 |<br>+------+------+<br>1 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_year<br>VALUES(&#x27;45&#x27;,&#x27;71&#x27;);<br><br>INSERT INTO test_year<br>VALUES(0,&#x27;0&#x27;);<br><br>mysql&gt; SELECT * FROM test_year;<br>+------+------+<br>| f1   | f2   |<br>+------+------+<br>| 2020 | 2021 |<br>| 2045 | 1971 |<br>| 0000 | 2000 |<br>+------+------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-2-DATE类型"><a href="#6-2-DATE类型" class="headerlink" title="6.2 DATE类型"></a>6.2 DATE类型</h3><p>DATE类型表示日期，没有时间部分，格式为<code>YYYY-MM-DD</code>，其中，YYYY表示年份，MM表示月份，DD表示日期。需要<code>3个字节</code>的存储空间。在向DATE类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD</code>格式或者<code>YYYYMMDD</code>格式表示的字符串日期，其最小取值为1000-01-01，最大取值为9999-12-03。YYYYMMDD格式会被转化为YYYY-MM-DD格式。</li><li>以<code>YY-MM-DD</code>格式或者<code>YYMMDD</code>格式表示的字符串日期，此格式中，年份为两位数值或字符串满足YEAR类型的格式条件为：当年份取值为00到69时，会被转化为2000到2069；当年份取值为70到99时，会被转化为1970到1999。</li><li>使用<code>CURRENT_DATE()</code>或者<code>NOW()</code>函数，会插入当前系统的日期。</li></ul><p><strong>举例：</strong></p><p>创建数据表，表中只包含一个DATE类型的字段f1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_date1(<br>f1 DATE<br>);<br>Query OK, 0 rows affected (0.13 sec)<br></code></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_date1<br>VALUES (&#x27;2020-10-01&#x27;), (&#x27;20201001&#x27;),(20201001);<br><br>INSERT INTO test_date1<br>VALUES (&#x27;00-01-01&#x27;), (&#x27;000101&#x27;), (&#x27;69-10-01&#x27;), (&#x27;691001&#x27;), (&#x27;70-01-01&#x27;), (&#x27;700101&#x27;), (&#x27;99-01-01&#x27;), (&#x27;990101&#x27;);<br><br>INSERT INTO test_date1<br>VALUES (000301), (690301), (700301), (990301); <br><br>INSERT INTO test_date1<br>VALUES (CURRENT_DATE()), (NOW());<br><br>SELECT *<br>FROM test_date1;<br></code></pre></td></tr></table></figure><h3 id="6-3-TIME类型"><a href="#6-3-TIME类型" class="headerlink" title="6.3 TIME类型"></a>6.3 TIME类型</h3><p>TIME类型用来表示时间，不包含日期部分。在MySQL中，需要<code>3个字节</code>的存储空间来存储TIME类型的数据，可以使用“HH:MM:SS”格式来表示TIME类型，其中，HH表示小时，MM表示分钟，SS表示秒。</p><p>在MySQL中，向TIME类型的字段插入数据时，也可以使用几种不同的格式。<br>（1）可以使用带有冒号的字符串，比如’<code>D HH:MM:SS&#39;</code>、’<code>HH:MM:SS</code>‘、’<code>HH:MM</code>‘、’<code>D HH:MM</code>‘、’<code>D HH</code>‘或’<code>SS</code>‘格式，都能被正确地插入TIME类型的字段中。其中D表示天，其最小值为0，最大值为34。如果使用带有D格式的字符串插入TIME类型的字段时，D会被转化为小时，计算格式为D*24+HH。当使用带有冒号并且不带D的字符串表示时间时，表示当天的时间，比如12:10表示12:10:00，而不是00:12:10。<br>（2）可以使用不带有冒号的字符串或者数字，格式为’<code>HHMMSS</code>‘或者<code>HHMMSS</code>。如果插入一个不合法的字符串或者数字，MySQL在存储数据时，会将其自动转化为00:00:00进行存储。比如1210，MySQL会将最右边的两位解析成秒，表示00:12:10，而不是12:10:00。<br>（3）使用<code>CURRENT_TIME()</code>或者<code>NOW()</code>，会插入当前系统的时间。</p><p><strong>举例：</strong></p><p>创建数据表，表中包含一个TIME类型的字段f1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_time1(<br>f1 TIME<br>);<br>Query OK, 0 rows affected (0.02 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_time1<br>VALUES(&#x27;2 12:30:29&#x27;), (&#x27;12:35:29&#x27;), (&#x27;12:40&#x27;), (&#x27;2 12:40&#x27;),(&#x27;1 05&#x27;), (&#x27;45&#x27;);<br><br>INSERT INTO test_time1<br>VALUES (&#x27;123520&#x27;), (124011),(1210);<br><br>INSERT INTO test_time1<br>VALUES (NOW()), (CURRENT_TIME());<br><br>SELECT * FROM test_time1;<br></code></pre></td></tr></table></figure><h3 id="6-4-DATETIME类型"><a href="#6-4-DATETIME类型" class="headerlink" title="6.4 DATETIME类型"></a>6.4 DATETIME类型</h3><p>DATETIME类型在所有的日期时间类型中占用的存储空间最大，总共需要<code>8</code>个字节的存储空间。在格式上为DATE类型和TIME类型的组合，可以表示为<code>YYYY-MM-DD HH:MM:SS</code>，其中YYYY表示年份，MM表示月份，DD表示日期，HH表示小时，MM表示分钟，SS表示秒。</p><p>在向DATETIME类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD HH:MM:SS</code>格式或者<code>YYYYMMDDHHMMSS</code>格式的字符串插入DATETIME类型的字段时，最小值为1000-01-01 00:00:00，最大值为9999-12-03 23:59:59。<ul><li>以YYYYMMDDHHMMSS格式的数字插入DATETIME类型的字段时，会被转化为YYYY-MM-DD HH:MM:SS格式。</li></ul></li><li>以<code>YY-MM-DD HH:MM:SS</code>格式或者<code>YYMMDDHHMMSS</code>格式的字符串插入DATETIME类型的字段时，两位数的年份规则符合YEAR类型的规则，00到69表示2000到2069；70到99表示1970到1999。</li><li>使用函数<code>CURRENT_TIMESTAMP()</code>和<code>NOW()</code>，可以向DATETIME类型的字段插入系统的当前日期和时间。</li></ul><p><strong>举例：</strong></p><p>创建数据表，表中包含一个DATETIME类型的字段dt。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_datetime1(<br>dt DATETIME<br>);<br>Query OK, 0 rows affected (0.02 sec)<br></code></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_datetime1<br>VALUES (&#x27;2021-01-01 06:50:30&#x27;), (&#x27;20210101065030&#x27;);<br><br>INSERT INTO test_datetime1<br>VALUES (&#x27;99-01-01 00:00:00&#x27;), (&#x27;990101000000&#x27;), (&#x27;20-01-01 00:00:00&#x27;), (&#x27;200101000000&#x27;);<br><br>INSERT INTO test_datetime1<br>VALUES (20200101000000), (200101000000), (19990101000000), (990101000000);<br> <br>INSERT INTO test_datetime1<br>VALUES (CURRENT_TIMESTAMP()), (NOW());<br></code></pre></td></tr></table></figure><h3 id="6-5-TIMESTAMP类型"><a href="#6-5-TIMESTAMP类型" class="headerlink" title="6.5 TIMESTAMP类型"></a>6.5 TIMESTAMP类型</h3><p>TIMESTAMP类型也可以表示日期时间，其显示格式与DATETIME类型相同，都是<code>YYYY-MM-DD HH:MM:SS</code>，需要4个字节的存储空间。但是TIMESTAMP存储的时间范围比DATETIME要小很多，只能存储“1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间。其中，UTC表示世界统一时间，也叫作世界标准时间。</p><ul><li><strong>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。</strong></li></ul><p>向TIMESTAMP类型的字段插入数据时，当插入的数据格式满足YY-MM-DD HH:MM:SS和YYMMDDHHMMSS时，两位数值的年份同样符合YEAR类型的规则条件，只不过表示的时间范围要小很多。</p><p>如果向TIMESTAMP类型的字段插入的时间超出了TIMESTAMP类型的范围，则MySQL会抛出错误信息。</p><p><strong>举例：</strong></p><p>创建数据表，表中包含一个TIMESTAMP类型的字段ts。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_timestamp1(<br>ts TIMESTAMP<br>);<br></code></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_timestamp1<br>VALUES (&#x27;1999-01-01 03:04:50&#x27;), (&#x27;19990101030405&#x27;), (&#x27;99-01-01 03:04:05&#x27;), (&#x27;990101030405&#x27;);<br><br>INSERT INTO test_timestamp1<br>VALUES (&#x27;2020@01@01@00@00@00&#x27;), (&#x27;20@01@01@00@00@00&#x27;);<br><br>INSERT INTO test_timestamp1<br>VALUES (CURRENT_TIMESTAMP()), (NOW());<br><br>#Incorrect datetime value<br>INSERT INTO test_timestamp1<br>VALUES (&#x27;2038-01-20 03:14:07&#x27;);<br></code></pre></td></tr></table></figure><p><strong>TIMESTAMP和DATETIME的区别：</strong></p><ul><li><p>TIMESTAMP存储空间比较小，表示的日期时间范围也比较小</p></li><li><p>底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。</p></li><li><p>两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。</p></li><li><p>TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。而DATETIME则只能反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp_time(<br>d1 DATETIME,<br>d2 TIMESTAMP<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO temp_time VALUES(&#x27;2021-9-2 14:45:52&#x27;,&#x27;2021-9-2 14:45:52&#x27;);<br><br>INSERT INTO temp_time VALUES(NOW(),NOW());<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM temp_time;<br>+---------------------+---------------------+<br>| d1                  | d2                  |<br>+---------------------+---------------------+<br>| 2021-09-02 14:45:52 | 2021-09-02 14:45:52 |<br>| 2021-11-03 17:38:17 | 2021-11-03 17:38:17 |<br>+---------------------+---------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改当前的时区<br>SET time_zone = &#x27;+9:00&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM temp_time;<br>+---------------------+---------------------+<br>| d1                  | d2                  |<br>+---------------------+---------------------+<br>| 2021-09-02 14:45:52 | 2021-09-02 15:45:52 |<br>| 2021-11-03 17:38:17 | 2021-11-03 18:38:17 |<br>+---------------------+---------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-6-开发中经验"><a href="#6-6-开发中经验" class="headerlink" title="6.6 开发中经验"></a>6.6 开发中经验</h3><p>用得最多的日期时间类型，就是 <code>DATETIME</code>。虽然 MySQL 也支持 YEAR（年）、 TIME（时间）、DATE（日期），以及 TIMESTAMP 类型，但是在实际项目中，尽量用 DATETIME 类型。因为这个数据类型包括了完整的日期和时间信息，取值范围也最大，使用起来比较方便。毕竟，如果日期时间信息分散在好几个字段，很不容易记，而且查询的时候，SQL 语句也会更加复杂。 </p><p>此外，一般存注册时间、商品发布时间等，不建议使用DATETIME存储，而是使用<code>时间戳</code>，因为DATETIME虽然直观，但不便于计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT UNIX_TIMESTAMP();<br>+------------------+<br>| UNIX_TIMESTAMP() |<br>+------------------+<br>|       1635932762 |<br>+------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="7-文本字符串类型"><a href="#7-文本字符串类型" class="headerlink" title="7. 文本字符串类型"></a>7. 文本字符串类型</h2><p>在实际的项目中，我们还经常遇到一种数据，就是字符串数据。</p><p>MySQL中，文本字符串总体上分为<code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code>、<code>ENUM</code>、<code>SET</code>等类型。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012003508730.png" alt="image-20211012003508730"></p><h3 id="7-1-CHAR与VARCHAR类型"><a href="#7-1-CHAR与VARCHAR类型" class="headerlink" title="7.1 CHAR与VARCHAR类型"></a>7.1 CHAR与VARCHAR类型</h3><p>CHAR和VARCHAR类型都可以存储比较短的字符串。</p><table><thead><tr><th>字符串(文本)类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 255</td><td>M个字节</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 65535</td><td>(实际长度 + 1) 个字节</td></tr></tbody></table><p><strong>CHAR类型：</strong></p><ul><li>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是1个字符。</li><li>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在<code>右侧填充</code>空格以达到指定的长度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。</li><li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_char1(<br>c1 CHAR,<br>c2 CHAR(5)<br>);<br><br>DESC test_char1;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_char1<br>VALUES(&#x27;a&#x27;,&#x27;Tom&#x27;);<br><br>SELECT c1,CONCAT(c2,&#x27;***&#x27;) FROM test_char1;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_char1(c2)<br>VALUES(&#x27;a  &#x27;);<br><br>SELECT CHAR_LENGTH(c2)<br>FROM test_char1;<br></code></pre></td></tr></table></figure><p><strong>VARCHAR类型：</strong></p><ul><li>VARCHAR(M) 定义时，<code>必须指定</code>长度M，否则报错。</li><li>MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字节） ；MySQL5.0版本以上，varchar(20)：指的是20字符。</li><li>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间为字符串实际长度加1个字节。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_varchar1(<br>NAME VARCHAR  #错误<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#Column length too big for column &#x27;NAME&#x27; (max = 21845);<br>CREATE TABLE test_varchar2(<br>NAME VARCHAR(65535)  #错误<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_varchar3(<br>NAME VARCHAR(5)<br>);<br><br>INSERT INTO test_varchar3<br>VALUES(&#x27;尚硅谷&#x27;),(&#x27;尚硅谷教育&#x27;);<br><br>#Data too long for column &#x27;NAME&#x27; at row 1<br>INSERT INTO test_varchar3<br>VALUES(&#x27;尚硅谷IT教育&#x27;);<br></code></pre></td></tr></table></figure><p><strong>哪些情况使用 CHAR 或 VARCHAR 更好</strong></p><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>适用场景</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>浪费存储空间</td><td>效率高</td><td>存储不大，速度要求高</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非CHAR的情况</td></tr></tbody></table><p>情况1：存储很短的信息。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</p><p>情况2：固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。</p><p>情况3：十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。</p><p>情况4：具体存储引擎中的情况：</p><ul><li><p><code>MyISAM</code> 数据存储引擎和数据列：MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化，从而使<code>数据检索更快</code>，用空间换时间。</p></li><li><p><code>MEMORY</code> 存储引擎和数据列：MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。</p></li><li><p><code>InnoDB</code>存储引擎，建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且<strong>主要影响性能的因素是数据行使用的存储总量</strong>，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的，其他考虑varchar。这样节省空间，对磁盘I&#x2F;O和数据存储总量比较好。</p></li></ul><h3 id="7-2-TEXT类型"><a href="#7-2-TEXT类型" class="headerlink" title="7.2 TEXT类型"></a>7.2 TEXT类型</h3><p>在MySQL中，TEXT用来保存文本类型的字符串，总共包含4种类型，分别为TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT 类型。</p><p>在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和 VARCHAR类型相同。</p><p>每种TEXT类型保存的数据长度和所占用的存储空间不同，如下：</p><table><thead><tr><th>文本字符串类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>小文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 2 个字节</td></tr><tr><td>TEXT</td><td>文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>中等文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215</td><td>L + 3 个字节</td></tr><tr><td>LONGTEXT</td><td>大文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L&lt;&#x3D; 4294967295（相当于4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p><strong>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键</strong>。遇到这种情况，你只能采用 CHAR(M)，或者 VARCHAR(M)。</p><p><strong>举例：</strong></p><p>创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_text(<br>tx TEXT<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_text<br>VALUES(&#x27;atguigu   &#x27;);<br><br>SELECT CHAR_LENGTH(tx)<br>FROM test_text; #10<br></code></pre></td></tr></table></figure><p>说明在保存和查询数据时，并没有删除TEXT类型的数据尾部的空格。</p><p><strong>开发中经验：</strong></p><p>TEXT文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用CHAR，VARCHAR来代替。还有TEXT类型不用加默认值，加了也没用。而且text和blob类型的数据删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含TEXT类型字段，建议单独分出去，单独用一个表。</p><h2 id="8-ENUM类型"><a href="#8-ENUM类型" class="headerlink" title="8. ENUM类型"></a>8. ENUM类型</h2><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM类型只允许从成员中选取单个值，不能一次选取多个值。</p><p>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>ENUM</td><td>L</td><td>1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>1或2个字节</td></tr></tbody></table><ul><li><p>当ENUM类型包含1～255个成员时，需要1个字节的存储空间；</p></li><li><p>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。</p></li><li><p>ENUM类型的成员个数的上限为65535个。</p></li></ul><p>举例：</p><p>创建表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_enum(<br>season ENUM(&#x27;春&#x27;,&#x27;夏&#x27;,&#x27;秋&#x27;,&#x27;冬&#x27;,&#x27;unknow&#x27;)<br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_enum<br>VALUES(&#x27;春&#x27;),(&#x27;秋&#x27;);<br><br># 忽略大小写<br>INSERT INTO test_enum<br>VALUES(&#x27;UNKNOW&#x27;);<br><br># 允许按照角标的方式获取指定索引位置的枚举值<br>INSERT INTO test_enum<br>VALUES(&#x27;1&#x27;),(3);<br><br># Data truncated for column &#x27;season&#x27; at row 1<br>INSERT INTO test_enum<br>VALUES(&#x27;ab&#x27;);<br><br># 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的<br>INSERT INTO test_enum<br>VALUES(NULL);<br></code></pre></td></tr></table></figure><h2 id="9-SET类型"><a href="#9-SET类型" class="headerlink" title="9. SET类型"></a>9. SET类型</h2><p>SET表示一个字符串对象，可以包含0个或多个成员，但成员个数的上限为<code>64</code>。设置字段值时，可以取取值范围内的 0 个或多个值。</p><p>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p><table><thead><tr><th>成员个数范围（L表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1 &lt;&#x3D; L &lt;&#x3D; 8</td><td>1个字节</td></tr><tr><td>9 &lt;&#x3D; L &lt;&#x3D; 16</td><td>2个字节</td></tr><tr><td>17 &lt;&#x3D; L &lt;&#x3D; 24</td><td>3个字节</td></tr><tr><td>25 &lt;&#x3D; L &lt;&#x3D; 32</td><td>4个字节</td></tr><tr><td>33 &lt;&#x3D; L &lt;&#x3D; 64</td><td>8个字节</td></tr></tbody></table><p>SET类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET类型在选取成员时，可以一次选择多个成员，这一点与ENUM类型不同。</p><p>举例：</p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_set(<br>s SET (&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;)<br>);<br></code></pre></td></tr></table></figure><p>向表中插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_set (s) VALUES (&#x27;A&#x27;), (&#x27;A,B&#x27;);<br><br>#插入重复的SET类型成员时，MySQL会自动删除重复的成员<br>INSERT INTO test_set (s) VALUES (&#x27;A,B,C,A&#x27;);<br><br>#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。<br>INSERT INTO test_set (s) VALUES (&#x27;A,B,C,D&#x27;);<br><br>SELECT *<br>FROM test_set;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp_mul(<br>gender ENUM(&#x27;男&#x27;,&#x27;女&#x27;),<br>hobby SET(&#x27;吃饭&#x27;,&#x27;睡觉&#x27;,&#x27;打豆豆&#x27;,&#x27;写代码&#x27;)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO temp_mul VALUES(&#x27;男&#x27;,&#x27;睡觉,打豆豆&#x27;); #成功<br><br># Data truncated for column &#x27;gender&#x27; at row 1<br>INSERT INTO temp_mul VALUES(&#x27;男,女&#x27;,&#x27;睡觉,写代码&#x27;); #失败<br><br># Data truncated for column &#x27;gender&#x27; at row 1<br>INSERT INTO temp_mul VALUES(&#x27;妖&#x27;,&#x27;睡觉,写代码&#x27;);#失败<br><br><br>INSERT INTO temp_mul VALUES(&#x27;男&#x27;,&#x27;睡觉,写代码,吃饭&#x27;); #成功<br></code></pre></td></tr></table></figure><h2 id="10-二进制字符串类型"><a href="#10-二进制字符串类型" class="headerlink" title="10. 二进制字符串类型"></a>10. 二进制字符串类型</h2><p>MySQL中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数据。</p><p>MySQL中支持的二进制字符串类型主要包括BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB类型。</p><h4 id="BINARY与VARBINARY类型"><a href="#BINARY与VARBINARY类型" class="headerlink" title="BINARY与VARBINARY类型"></a>BINARY与VARBINARY类型</h4><p>BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是0~255个字符。如果未指定(M)，表示只能存储<code>1个字节</code>。例如BINARY (8)，表示最多能存储8个字节，如果字段值不足(M)个字节，将在右边填充’\0’以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长度限制65535，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要1或2个字节来存储数据的字节数。VARBINARY类型<code>必须指定(M)</code>，否则报错。</p><table><thead><tr><th>二进制字符串类型</th><th>特点</th><th>值的长度</th><th>占用空间</th></tr></thead><tbody><tr><td>BINARY(M)</td><td>固定长度</td><td>M （0 &lt;&#x3D; M &lt;&#x3D; 255）</td><td>M个字节</td></tr><tr><td>VARBINARY(M)</td><td>可变长度</td><td>M（0 &lt;&#x3D; M &lt;&#x3D; 65535）</td><td>M+1个字节</td></tr></tbody></table><p>举例：</p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_binary1(<br>f1 BINARY,<br>f2 BINARY(3),<br># f3 VARBINARY,<br>f4 VARBINARY(10)<br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_binary1(f1,f2)<br>VALUES(&#x27;a&#x27;,&#x27;a&#x27;);<br><br>INSERT INTO test_binary1(f1,f2)<br>VALUES(&#x27;尚&#x27;,&#x27;尚&#x27;);#失败<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_binary1(f2,f4)<br>VALUES(&#x27;ab&#x27;,&#x27;ab&#x27;);<br><br>mysql&gt; SELECT LENGTH(f2),LENGTH(f4)<br>    -&gt; FROM test_binary1;<br>+------------+------------+<br>| LENGTH(f2) | LENGTH(f4) |<br>+------------+------------+<br>|          3 |       NULL |<br>|          3 |          2 |<br>+------------+------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h4><p>BLOB是一个<code>二进制大对象</code>，可以容纳可变数量的数据。</p><p>MySQL中的BLOB类型包括TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB 4种类型，它们可容纳值的最大长度不同。可以存储一个二进制的大对象，比如<code>图片</code>、<code>音频</code>和<code>视频</code>等。</p><p>需要注意的是，在实际工作中，往往不会在MySQL数据库中使用BLOB类型存储大对象数据，通常会将图片、音频和视频文件存储到<code>服务器的磁盘上</code>，并将图片、音频和视频的访问路径存储到MySQL中。</p><table><thead><tr><th>二进制字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 1 个字节</td></tr><tr><td>BLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535（相当于64KB）</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215 （相当于16MB）</td><td>L + 3 个字节</td></tr><tr><td>LONGBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 4294967295（相当于4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_blob1(<br>id INT,<br>img MEDIUMBLOB<br>);<br></code></pre></td></tr></table></figure><p><strong>TEXT和BLOB的使用注意事项：</strong></p><p>在使用text和blob字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p><p>① BLOB和TEXT值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值会在数据表中留下很大的”<code>空洞</code>“，以后填入这些”空洞”的记录可能长度不同。为了提高性能，建议定期使用 OPTIMIZE TABLE 功能对这类表进行<code>碎片整理</code>。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了<code>前缀索引</code>。但是仍然要在不必要的时候避免检索大型的BLOB或TEXT值。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的WHERE子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把BLOB或TEXT列<code>分离到单独的表</code>中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会<code>减少主表中的碎片</code>，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过网络传输大量的BLOB或TEXT值。</p><h2 id="11-JSON-类型"><a href="#11-JSON-类型" class="headerlink" title="11. JSON 类型"></a>11. JSON 类型</h2><p>JSON（JavaScript Object Notation）是一种轻量级的<code>数据交换格式</code>。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<strong>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</strong></p><p>在MySQL 5.7中，就已经支持JSON数据类型。在MySQL 8.x版本中，JSON类型提供了可以进行自动验证的JSON文档和优化的存储结构，使得在MySQL中存储和读取JSON类型的数据更加方便和高效。<br>创建数据表，表中包含一个JSON类型的字段 js 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_json(<br>js json<br><br>);<br></code></pre></td></tr></table></figure><p>向表中插入JSON数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_json (js) <br>VALUES (&#x27;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;, &quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#x27;);<br></code></pre></td></tr></table></figure><p>查询t19表中的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT *<br>    -&gt; FROM test_json;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211104192516324.png" alt="image-20211104192516324"></p><p>当需要检索JSON类型的字段中数据的某个具体值时，可以使用“-&gt;”和“-&gt;&gt;”符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT js -&gt; &#x27;$.name&#x27; AS NAME,js -&gt; &#x27;$.age&#x27; AS age ,js -&gt; &#x27;$.address.province&#x27; AS province, js -&gt; &#x27;$.address.city&#x27; AS city<br>    -&gt; FROM test_json;<br>+----------+------+-----------+-----------+<br>| NAME     | age  | province  | city      |<br>+----------+------+-----------+-----------+<br>| &quot;songhk&quot; | 18   | &quot;beijing&quot; | &quot;beijing&quot; |<br>+----------+------+-----------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值。</p><h2 id="12-空间类型"><a href="#12-空间类型" class="headerlink" title="12. 空间类型"></a>12. 空间类型</h2><p>MySQL 空间类型扩展支持地理特征的生成、存储和分析。这里的地理特征表示世界上具有位置的任何东西，可以是一个实体，例如一座山；可以是空间，例如一座办公楼；也可以是一个可定义的位置，例如一个十字路口等等。MySQL中使用<code>Geometry（几何）</code>来表示所有地理特征。Geometry指一个点或点的集合，代表世界上任何具有位置的事物。</p><p>MySQL的空间数据类型（Spatial Data Type）对应于OpenGIS类，包括单值类型：GEOMETRY、POINT、LINESTRING、POLYGON以及集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION 。</p><ul><li>Geometry是所有空间集合类型的基类，其他类型如POINT、LINESTRING、POLYGON都是Geometry的子类。<ul><li>Point，顾名思义就是点，有一个坐标值。例如POINT(121.213342 31.234532)，POINT(30 10)，坐标值支持DECIMAL类型，经度（longitude）在前，维度（latitude）在后，用空格分隔。</li><li>LineString，线，由一系列点连接而成。如果线从头至尾没有交叉，那就是简单的（simple）；如果起点和终点重叠，那就是封闭的（closed）。例如LINESTRING(30 10,10 30,40 40)，点与点之间用逗号分隔，一个点中的经纬度用空格分隔，与POINT格式一致。</li><li>Polygon，多边形。可以是一个实心平面形，即没有内部边界，也可以有空洞，类似纽扣。最简单的就是只有一个外边界的情况，例如POLYGON((0 0,10 0,10 10, 0 10))。</li></ul></li></ul><p>下面展示几种常见的几何图形元素：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211104192912988.png" alt="image-20211104192912988"></p><ul><li>MultiPoint、MultiLineString、MultiPolygon、GeometryCollection 这4种类型都是集合类，是多个Point、LineString或Polygon组合而成。</li></ul><p>下面展示的是多个同类或异类几何图形元素的组合：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211104193330204.png" alt="image-20211104193330204"></p><h2 id="13-小结及选择建议"><a href="#13-小结及选择建议" class="headerlink" title="13. 小结及选择建议"></a>13. 小结及选择建议</h2><p>在定义数据类型时，如果确定是<code>整数</code>，就用<code> INT</code>； 如果是<code>小数</code>，一定用定点数类型 <code>DECIMAL(M,D)</code>； 如果是日期与时间，就用 <code>DATETIME</code>。 </p><p>这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><p>关于字符串的选择，建议参考如下阿里巴巴的《Java开发手册》规范：</p><p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p><ul><li>任何字段如果为非负数，必须是 UNSIGNED</li><li>【<code>强制</code>】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。 <ul><li>说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并分开存储。</li></ul></li><li>【<code>强制</code>】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。 </li><li>【<code>强制</code>】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql11增删改查</title>
    <link href="/2023/04/11/sql11%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <url>/2023/04/11/sql11%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="第11章-数据处理之增删改"><a href="#第11章-数据处理之增删改" class="headerlink" title="第11章_数据处理之增删改"></a>第11章_数据处理之增删改</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1. 插入数据"></a>1. 插入数据</h2><h3 id="1-1-实际问题"><a href="#1-1-实际问题" class="headerlink" title="1.1 实际问题"></a>1.1 实际问题</h3><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555425366064.png" alt="1555425366064" style="zoom:80%;" /><p>解决方式：使用 INSERT 语句向表中插入数据。</p><h3 id="1-2-方式1：VALUES的方式添加"><a href="#1-2-方式1：VALUES的方式添加" class="headerlink" title="1.2 方式1：VALUES的方式添加"></a>1.2 方式1：VALUES的方式添加</h3><p>使用这种语法一次只能向表中插入<strong>一条</strong>数据。</p><p><strong>情况1：为表的所有字段按默认顺序插入数据</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名<br><span class="hljs-keyword">VALUES</span> (value1,value2,....);<br></code></pre></td></tr></table></figure><p>值列表中需要为表的每一个字段指定值，并且值的顺序必须和数据表中字段定义时的顺序相同。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO departments<br>VALUES (70, &#x27;Pub&#x27;, 100, 1700);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTOdepartments<br>VALUES(100, &#x27;Finance&#x27;, NULL, NULL);<br></code></pre></td></tr></table></figure><p><strong>情况2：为表的指定字段插入数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名(column1 [, column2, …, columnn]) <br>VALUES (value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>为表的指定字段插入数据，就是在INSERT语句中只向部分字段中插入值，而其他字段的值为表定义时的默认值。</p><p>在 INSERT 子句中随意列出列名，但是一旦列出，VALUES中要插入的value1,….valuen需要与column1,…columnn列一一对应。如果类型不同，将无法插入，并且MySQL会产生错误。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO departments(department_id, department_name)<br>VALUES (80, &#x27;IT&#x27;);<br></code></pre></td></tr></table></figure><p> <strong>情况3：同时插入多条记录</strong></p><p>INSERT语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔开，基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO table_name <br>VALUES <br>(value1 [,value2, …, valuen]),<br>(value1 [,value2, …, valuen]),<br>……<br>(value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO table_name(column1 [, column2, …, columnn]) <br>VALUES <br>(value1 [,value2, …, valuen]),<br>(value1 [,value2, …, valuen]),<br>……<br>(value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO emp(emp_id,emp_name)<br>    -&gt; VALUES (1001,&#x27;shkstart&#x27;),<br>    -&gt; (1002,&#x27;atguigu&#x27;),<br>    -&gt; (1003,&#x27;Tom&#x27;);<br>Query OK, 3 rows affected (0.00 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure><p>使用INSERT同时插入多条记录时，MySQL会返回一些在执行单行插入时没有的额外信息，这些信息的含义如下：<br>●　Records：表明插入的记录条数。<br>●　Duplicates：表明插入时被忽略的记录，原因可能是这些记录包含了重复的主键值。<br>●　Warnings：表明有问题的数据值，例如发生数据类型转换。</p><blockquote><p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句在处理过程中<code>效率更高</code>。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</p></blockquote><p><strong>小结：</strong></p><ul><li><p><code>VALUES</code>也可以写成<code>VALUE</code>，但是VALUES是标准写法。</p></li><li><p>字符和日期型数据应包含在单引号中。</p></li></ul><h3 id="1-3-方式2：将查询结果插入到表中"><a href="#1-3-方式2：将查询结果插入到表中" class="headerlink" title="1.3 方式2：将查询结果插入到表中"></a>1.3 方式2：将查询结果插入到表中</h3><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p><p>基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 目标表名<br>(tar_column1 [, tar_column2, …, tar_columnn])<br>SELECT<br>(src_column1 [, src_column2, …, src_columnn])<br>FROM 源表名<br>[WHERE condition]<br></code></pre></td></tr></table></figure><ul><li>在 INSERT 语句中加入子查询。 </li><li><strong>不必书写</strong> <strong>VALUES</strong> <strong>子句。</strong> </li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp2 <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> sales_reps(id, name, salary, commission_pct)<br><span class="hljs-keyword">SELECT</span> employee_id, last_name, salary, commission_pct<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  job_id <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%REP%&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2. 更新数据"></a>2. 更新数据</h2><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555425824246.png" alt="1555425824246"></p><ul><li>使用 UPDATE 语句更新数据。语法如下：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE table_name<br><span class="hljs-built_in">SET</span> <span class="hljs-attribute">column1</span>=value1, <span class="hljs-attribute">column2</span>=value2, … , <span class="hljs-attribute">column</span>=valuen<br>[WHERE condition]<br></code></pre></td></tr></table></figure><ul><li><p>可以一次更新<strong>多条</strong>数据。</p></li><li><p>如果需要回滚数据，需要保证在DML前，进行设置：<strong>SET AUTOCOMMIT &#x3D; FALSE;</strong></p></li></ul><hr><ul><li>使用 <strong>WHERE</strong> 子句指定需要更新的数据。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> employees<br><span class="hljs-keyword">SET</span>    department_id <span class="hljs-operator">=</span> <span class="hljs-number">70</span><br><span class="hljs-keyword">WHERE</span>  employee_id <span class="hljs-operator">=</span> <span class="hljs-number">113</span>;<br></code></pre></td></tr></table></figure><ul><li>如果省略 WHERE 子句，则表中的所有数据都将被更新。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> copy_emp<br><span class="hljs-keyword">SET</span>    department_id <span class="hljs-operator">=</span> <span class="hljs-number">110</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>更新中的数据完整性错误</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> employees<br><span class="hljs-keyword">SET</span>    department_id <span class="hljs-operator">=</span> <span class="hljs-number">55</span><br><span class="hljs-keyword">WHERE</span>  department_id <span class="hljs-operator">=</span> <span class="hljs-number">110</span>;<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555426069578.png" alt="1555426069578"></p><blockquote><p>说明：不存在 55 号部门</p></blockquote><h2 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h2><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555426124751.png" alt="1555426124751"></p><ul><li>使用 DELETE 语句从表中删除数据</li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555426162264.png" alt="1555426162264"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM table_name [WHERE &lt;condition&gt;];<br></code></pre></td></tr></table></figure><p>table_name指定要执行删除操作的表；“[WHERE <condition>]”为可选参数，指定删除条件，如果没有WHERE子句，DELETE语句将删除表中的所有记录。</p><ul><li>使用 WHERE 子句删除指定的记录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> departments<br><span class="hljs-keyword">WHERE</span>  department_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Finance&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>如果省略 WHERE 子句，则表中的全部数据将被删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span>  copy_emp;<br></code></pre></td></tr></table></figure><ul><li><strong>删除中的数据完整性错误</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> departments<br><span class="hljs-keyword">WHERE</span>       department_id <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555426258516.png" alt="1555426258516"></p><blockquote><p>说明：You cannot delete a row that contains a primary key that is used as a foreign key in another table.</p></blockquote><h2 id="4-MySQL8新特性：计算列"><a href="#4-MySQL8新特性：计算列" class="headerlink" title="4. MySQL8新特性：计算列"></a>4. MySQL8新特性：计算列</h2><p>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</p><p>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲解。</p><p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的值。<br>首先创建测试表tb1，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE tb1(<br>id INT,<br>a INT,<br>b INT,<br>c INT GENERATED ALWAYS AS (a + b) VIRTUAL<br>);<br></code></pre></td></tr></table></figure><p>插入演示数据，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO tb1(a,b) VALUES (100,200);<br></code></pre></td></tr></table></figure><p>查询数据表tb1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM tb1;<br>+------+------+------+------+<br>| id   | a    | b    | c    |<br>+------+------+------+------+<br>| NULL |  100 |  200 |  300 |<br>+------+------+------+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>更新数据中的数据，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; UPDATE tb1 SET a = 500;<br>Query OK, 0 rows affected (0.00 sec)<br>Rows matched: 1  Changed: 0  Warnings: 0<br></code></pre></td></tr></table></figure><h2 id="5-综合案例"><a href="#5-综合案例" class="headerlink" title="5. 综合案例"></a>5. 综合案例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、创建数据库test01_library<br><br># 2、创建表 books，表结构如下：<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段名</th><th>字段说明</th><th>数据类型</th></tr></thead><tbody><tr><td>id</td><td>书编号</td><td>INT</td></tr><tr><td>name</td><td>书名</td><td>VARCHAR(50)</td></tr><tr><td>authors</td><td>作者</td><td>VARCHAR(100)</td></tr><tr><td>price</td><td>价格</td><td>FLOAT</td></tr><tr><td>pubdate</td><td>出版日期</td><td>YEAR</td></tr><tr><td>note</td><td>说明</td><td>VARCHAR(100)</td></tr><tr><td>num</td><td>库存</td><td>INT</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 3、向books表中插入记录<br><br># 1）不指定字段名称，插入第一条记录<br># 2）指定所有字段名称，插入第二记录<br># 3）同时插入多条记录（剩下的所有记录）<br></code></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>authors</th><th>price</th><th>pubdate</th><th>note</th><th>num</th></tr></thead><tbody><tr><td>1</td><td>Tal of AAA</td><td>Dickes</td><td>23</td><td>1995</td><td>novel</td><td>11</td></tr><tr><td>2</td><td>EmmaT</td><td>Jane lura</td><td>35</td><td>1993</td><td>joke</td><td>22</td></tr><tr><td>3</td><td>Story of Jane</td><td>Jane Tim</td><td>40</td><td>2001</td><td>novel</td><td>0</td></tr><tr><td>4</td><td>Lovey Day</td><td>George Byron</td><td>20</td><td>2005</td><td>novel</td><td>30</td></tr><tr><td>5</td><td>Old land</td><td>Honore Blade</td><td>30</td><td>2010</td><td>law</td><td>0</td></tr><tr><td>6</td><td>The Battle</td><td>Upton Sara</td><td>30</td><td>1999</td><td>medicine</td><td>40</td></tr><tr><td>7</td><td>Rose Hood</td><td>Richard haggard</td><td>28</td><td>2008</td><td>cartoon</td><td>28</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 4、将小说类型(novel)的书的价格都增加5。<br><br># 5、将名称为EmmaT的书的价格改为40，并将说明改为drama。<br><br># 6、删除库存为0的记录。<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 7、统计书名中包含a字母的书<br><br># 8、统计书名中包含a字母的书的数量和库存总量<br><br># 9、找出“novel”类型的书，按照价格降序排列<br><br># 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列<br><br># 11、按照note分类统计书的数量<br><br># 12、按照note分类统计书的库存量，显示库存量超过30本的<br><br># 13、查询所有图书，每页显示5本，显示第二页<br><br># 14、按照note分类统计书的库存量，显示库存量最多的<br><br># 15、查询书名达到10个字符的书，不包括里面的空格<br><br># 16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话<br><br># 17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货<br><br># 18、统计每一种note的库存量，并合计总量<br><br># 19、统计每一种note的数量，并合计总量<br><br># 20、统计库存量前三名的图书<br><br># 21、找出最早出版的一本书<br><br># 22、找出novel中价格最高的一本书<br><br># 23、找出书名中字数最多的一本书，不含空格<br></code></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1、创建数据库test01_library<br>CREATE DATABASE IF NOT EXISTS test01_library CHARACTER SET &#x27;utf8&#x27;;<br><br>#指定使用哪个数据库<br>USE test01_library;<br><br>#2、创建表 books<br>CREATE TABLE books(<br>id INT,<br>name VARCHAR(50),<br>`authors` VARCHAR(100) ,<br>price FLOAT,<br>pubdate YEAR ,<br>note VARCHAR(100),<br>num INT<br>);<br><br>#3、向books表中插入记录<br># 1）不指定字段名称，插入第一条记录<br>INSERT INTO books <br>VALUES(1,&#x27;Tal of AAA&#x27;,&#x27;Dickes&#x27;,23,1995,&#x27;novel&#x27;,11);<br># 2）指定所有字段名称，插入第二记录<br>INSERT INTO books (id,name,`authors`,price,pubdate,note,num)<br>VALUES(2,&#x27;EmmaT&#x27;,&#x27;Jane lura&#x27;,35,1993,&#x27;Joke&#x27;,22);<br># 3）同时插入多条记录（剩下的所有记录）<br>INSERT INTO books (id,name,`authors`,price,pubdate,note,num) VALUES<br>(3,&#x27;Story of Jane&#x27;,&#x27;Jane Tim&#x27;,40,2001,&#x27;novel&#x27;,0),<br>(4,&#x27;Lovey Day&#x27;,&#x27;George Byron&#x27;,20,2005,&#x27;novel&#x27;,30),<br>(5,&#x27;Old land&#x27;,&#x27;Honore Blade&#x27;,30,2010,&#x27;Law&#x27;,0),<br>(6,&#x27;The Battle&#x27;,&#x27;Upton Sara&#x27;,30,1999,&#x27;medicine&#x27;,40),<br>(7,&#x27;Rose Hood&#x27;,&#x27;Richard haggard&#x27;,28,2008,&#x27;cartoon&#x27;,28);<br><br># 4、将小说类型(novel)的书的价格都增加5。<br>UPDATE books SET price=price+5 WHERE note = &#x27;novel&#x27;;<br><br># 5、将名称为EmmaT的书的价格改为40，并将说明改为drama。<br>UPDATE books SET price=40,note=&#x27;drama&#x27; WHERE name=&#x27;EmmaT&#x27;;<br><br># 6、删除库存为0的记录。<br>DELETE FROM books WHERE num=0;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 7、统计书名中包含a字母的书<br>SELECT * FROM books WHERE name LIKE &#x27;%a%&#x27;;<br><br># 8、统计书名中包含a字母的书的数量和库存总量<br>SELECT COUNT(*),SUM(num) FROM books WHERE name LIKE &#x27;%a%&#x27;;<br><br># 9、找出“novel”类型的书，按照价格降序排列<br>SELECT * FROM books WHERE note = &#x27;novel&#x27; ORDER BY price DESC;<br><br># 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列<br>SELECT * FROM books ORDER BY num DESC,note ASC;<br><br># 11、按照note分类统计书的数量<br>SELECT note,COUNT(*) FROM books GROUP BY note;<br><br># 12、按照note分类统计书的库存量，显示库存量超过30本的<br>SELECT note,SUM(num) FROM books GROUP BY note HAVING SUM(num)&gt;30;<br><br># 13、查询所有图书，每页显示5本，显示第二页<br>SELECT * FROM books LIMIT 5,5;<br><br># 14、按照note分类统计书的库存量，显示库存量最多的<br>SELECT note,SUM(num) sum_num FROM books GROUP BY note ORDER BY sum_num DESC LIMIT 0,1;<br><br># 15、查询书名达到10个字符的书，不包括里面的空格<br>SELECT * FROM books WHERE CHAR_LENGTH(REPLACE(name,&#x27; &#x27;,&#x27;&#x27;))&gt;=10;<br><br>/*<br>16、查询书名和类型，<br> 其中note值为 novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话<br>*/<br>SELECT name AS &quot;书名&quot; ,note, CASE note <br> WHEN &#x27;novel&#x27; THEN &#x27;小说&#x27;<br> WHEN &#x27;law&#x27; THEN &#x27;法律&#x27;<br> WHEN &#x27;medicine&#x27; THEN &#x27;医药&#x27;<br> WHEN &#x27;cartoon&#x27; THEN &#x27;卡通&#x27;<br> WHEN &#x27;joke&#x27; THEN &#x27;笑话&#x27;<br> END AS &quot;类型&quot;<br>FROM books;<br><br><br># 17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货<br>SELECT name,num,CASE <br>  WHEN num&gt;30 THEN &#x27;滞销&#x27;<br>  WHEN num&gt;0 AND num&lt;10 THEN &#x27;畅销&#x27;<br>  WHEN num=0 THEN &#x27;无货&#x27;<br>  ELSE &#x27;正常&#x27;<br>  END AS &quot;库存状态&quot;<br>FROM books;<br><br># 18、统计每一种note的库存量，并合计总量<br>SELECT IFNULL(note,&#x27;合计总库存量&#x27;) AS note,SUM(num) FROM books GROUP BY note WITH ROLLUP;<br><br># 19、统计每一种note的数量，并合计总量<br>SELECT IFNULL(note,&#x27;合计总数&#x27;) AS note,COUNT(*) FROM books GROUP BY note WITH ROLLUP;<br><br># 20、统计库存量前三名的图书<br>SELECT * FROM books ORDER BY num DESC LIMIT 0,3;<br><br># 21、找出最早出版的一本书<br>SELECT * FROM books ORDER BY pubdate ASC LIMIT 0,1;<br><br># 22、找出novel中价格最高的一本书<br>SELECT * FROM books WHERE note = &#x27;novel&#x27; ORDER BY price DESC LIMIT 0,1;<br><br># 23、找出书名中字数最多的一本书，不含空格<br>SELECT * FROM books ORDER BY CHAR_LENGTH(REPLACE(name,&#x27; &#x27;,&#x27;&#x27;)) DESC LIMIT 0,1;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql10创建和管理表</title>
    <link href="/2023/04/11/sql10%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/"/>
    <url>/2023/04/11/sql10%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第10章-创建和管理表"><a href="#第10章-创建和管理表" class="headerlink" title="第10章_创建和管理表"></a>第10章_创建和管理表</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><h3 id="1-1-一条数据存储的过程"><a href="#1-1-一条数据存储的过程" class="headerlink" title="1.1 一条数据存储的过程"></a>1.1 一条数据存储的过程</h3><p><code>存储数据是处理数据的第一步</code>。只有正确地把数据存储起来，我们才能进行有效的处理和分析。否则，只能是一团乱麻，无从下手。</p><p>那么，怎样才能把用户各种经营相关的、纷繁复杂的数据，有序、高效地存储起来呢？ 在 MySQL 中，一个完整的数据存储过程总共有 4 步，分别是创建数据库、确认字段、创建数据表、插入数据。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211007155810920.png" alt="image-20211007155810920"></p><p>我们要先创建一个数据库，而不是直接创建数据表呢？ </p><p>因为从系统架构的层次上看，MySQL 数据库系统从大到小依次是<code>数据库服务器</code>、<code>数据库</code>、<code>数据表</code>、数据表的<code>行与列</code>。 </p><p>MySQL 数据库服务器之前已经安装。所以，我们就从创建数据库开始。</p><h3 id="1-2-标识符命名规则"><a href="#1-2-标识符命名规则" class="headerlink" title="1.2 标识符命名规则"></a>1.2 标识符命名规则</h3><ul><li>数据库名、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h3 id="1-3-MySQL中的数据类型"><a href="#1-3-MySQL中的数据类型" class="headerlink" title="1.3 MySQL中的数据类型"></a>1.3 MySQL中的数据类型</h3><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、**INT(或INTEGER)**、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td><strong>DECIMAL</strong></td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、<strong>DATE</strong>、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、<strong>VARCHAR</strong>、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON；<br/>集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><p>其中，常用的几类类型介绍如下：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td></tr><tr><td>CHAR(size)</td><td>定长字符数据。若未指定，默认为1个字符，最大长度255</td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存，<strong>必须指定长度</strong></td></tr><tr><td>FLOAT(M,D)</td><td>单精度，占用4个字节，M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;6</td></tr><tr><td>DOUBLE(M,D)</td><td>双精度，占用8个字节，D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;15</td></tr><tr><td>DECIMAL(M,D)</td><td>高精度小数，占用M+2个字节，D&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，最大取值范围与DOUBLE相同。</td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td></tr></tbody></table><h2 id="2-创建和管理数据库"><a href="#2-创建和管理数据库" class="headerlink" title="2. 创建和管理数据库"></a>2. 创建和管理数据库</h2><h3 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h3><ul><li>方式1：创建数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE 数据库名; <br></code></pre></td></tr></table></figure><ul><li>方式2：创建数据库并指定字符集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE 数据库名 CHARACTER SET 字符集;<br></code></pre></td></tr></table></figure><ul><li>方式3：判断数据库是否已经存在，不存在则创建数据库（<code>推荐</code>）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS 数据库名; <br></code></pre></td></tr></table></figure><p>如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p><blockquote><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删旧库完成的。</p></blockquote><h3 id="2-2-使用数据库"><a href="#2-2-使用数据库" class="headerlink" title="2.2 使用数据库"></a>2.2 使用数据库</h3><ul><li>查看当前所有的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW DATABASES; #有一个S，代表多个数据库<br></code></pre></td></tr></table></figure><ul><li>查看当前正在使用的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DATABASE();  #使用的一个 mysql 中的全局函数<br></code></pre></td></tr></table></figure><ul><li>查看指定库下所有的表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TABLES FROM 数据库名;<br></code></pre></td></tr></table></figure><ul><li>查看数据库的创建信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE DATABASE 数据库名;<br>或者：<br>SHOW CREATE DATABASE 数据库名\G<br></code></pre></td></tr></table></figure><ul><li>使用&#x2F;切换数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE 数据库名;<br></code></pre></td></tr></table></figure><blockquote><p>注意：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“数据库名.”。</p></blockquote><h3 id="2-3-修改数据库"><a href="#2-3-修改数据库" class="headerlink" title="2.3 修改数据库"></a>2.3 修改数据库</h3><ul><li>更改数据库字符集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER DATABASE 数据库名 CHARACTER SET 字符集;  #比如：gbk、utf8等<br></code></pre></td></tr></table></figure><h3 id="2-4-删除数据库"><a href="#2-4-删除数据库" class="headerlink" title="2.4 删除数据库"></a>2.4 删除数据库</h3><ul><li>方式1：删除指定的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP DATABASE 数据库名;<br></code></pre></td></tr></table></figure><ul><li>方式2：删除指定的数据库（<code>推荐</code>）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP DATABASE IF EXISTS 数据库名;<br></code></pre></td></tr></table></figure><h2 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3. 创建表"></a>3. 创建表</h2><h3 id="3-1-创建方式1"><a href="#3-1-创建方式1" class="headerlink" title="3.1 创建方式1"></a>3.1 创建方式1</h3><ul><li><strong>必须具备：</strong><ul><li>CREATE TABLE权限</li><li>存储空间</li></ul></li><li><strong>语法格式：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE [IF NOT EXISTS] 表名(<br>字段1, 数据类型 [约束条件] [默认值],<br>字段2, 数据类型 [约束条件] [默认值],<br>字段3, 数据类型 [约束条件] [默认值],<br>……<br>[表约束条件]<br>);<br></code></pre></td></tr></table></figure><blockquote><p>加上了IF NOT EXISTS关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表；如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</p></blockquote><ul><li><strong>必须指定：</strong><ul><li>表名</li><li>列名(或字段名)，数据类型，<strong>长度</strong></li></ul></li><li><strong>可选指定：</strong><ul><li>约束条件</li><li>默认值</li></ul></li><li>创建表举例1：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建表<br>CREATE TABLE emp (<br>  -- int类型<br>  emp_id INT,<br>  -- 最多保存20个中英文字符<br>  emp_name VARCHAR(20),<br>  -- 总位数不超过15位<br>  salary DOUBLE,<br>  -- 日期类型<br>  birthday DATE<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC emp;<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211016160557995.png" alt="image-20211016160557995"></p><p>MySQL在执行建表语句时，将id字段的类型设置为int(11)，这里的11实际上是int类型指定的显示宽度，默认的显示宽度为11。也可以在创建数据表的时候指定数据的显示宽度。</p><ul><li>创建表举例2：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dept(<br>    -- int类型，自增<br>deptno INT(2) AUTO_INCREMENT,<br>dname VARCHAR(14),<br>loc VARCHAR(13),<br>    -- 主键<br>    PRIMARY KEY (deptno)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE dept;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211016160643445.png" alt="image-20211016160643445"></p><blockquote><p>在MySQL 8.x版本中，不再推荐为INT类型指定显示长度，并在未来的版本中可能去掉这样的语法。</p></blockquote><h3 id="3-2-创建方式2"><a href="#3-2-创建方式2" class="headerlink" title="3.2 创建方式2"></a>3.2 创建方式2</h3><ul><li><p>使用 AS subquery 选项，<strong>将创建表和插入数据结合起来</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554997882872.png" alt="1554997882872"></p></li><li><p>指定的列和子查询中的列要一一对应</p></li><li><p>通过列名和默认值定义列</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp1 AS SELECT * FROM employees;<br><br>CREATE TABLE emp2 AS SELECT * FROM employees WHERE 1=2; -- 创建的emp2是空表<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dept80<br>AS <br>SELECT  employee_id, last_name, salary*12 ANNSAL, hire_date<br>FROM    employees<br>WHERE   department_id = 80;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE dept80;<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554997998148.png" alt="1554997998148"></p><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554998004494.png" alt="1554998004494"></p><h3 id="3-3-查看数据表结构"><a href="#3-3-查看数据表结构" class="headerlink" title="3.3 查看数据表结构"></a>3.3 查看数据表结构</h3><p>在MySQL中创建好数据表之后，可以查看数据表的结构。MySQL支持使用<code>DESCRIBE/DESC</code>语句查看数据表结构，也支持使用<code>SHOW CREATE TABLE</code>语句查看数据表结构。</p><p>语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE TABLE 表名\G<br></code></pre></td></tr></table></figure><p>使用SHOW CREATE TABLE语句不仅可以查看表创建时的详细语句，还可以查看存储引擎和字符编码。</p><h2 id="4-修改表"><a href="#4-修改表" class="headerlink" title="4. 修改表"></a>4. 修改表</h2><p>修改表指的是修改数据库中已经存在的数据表的结构。</p><p><strong>使用 ALTER TABLE 语句可以实现：</strong></p><ul><li><p>向已有的表中添加列</p></li><li><p>修改现有表中的列</p></li><li><p>删除现有表中的列</p></li><li><p>重命名现有表中的列</p></li></ul><h3 id="4-1-追加一个列"><a href="#4-1-追加一个列" class="headerlink" title="4.1 追加一个列"></a>4.1 追加一个列</h3><p>语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST|AFTER 字段名】;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE dept80 <br>ADD job_id varchar(15);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554998139815.png" alt="1554998139815"></p><h3 id="4-2-修改一个列"><a href="#4-2-修改一个列" class="headerlink" title="4.2 修改一个列"></a>4.2 修改一个列</h3><ul><li><p>可以修改列的数据类型，长度、默认值和位置</p></li><li><p>修改字段数据类型、长度、默认值、位置的语法格式如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名2】;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLEdept80<br>MODIFY last_name VARCHAR(30);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLEdept80<br>MODIFY salary double(9,2) default 1000;<br></code></pre></td></tr></table></figure><ul><li>对默认值的修改只影响今后对表的修改</li><li>此外，还可以通过此种方式修改列的约束。这里暂先不讲。</li></ul><h3 id="4-3-重命名一个列"><a href="#4-3-重命名一个列" class="headerlink" title="4.3 重命名一个列"></a>4.3 重命名一个列</h3><p>使用 CHANGE old_column  new_column  dataType子句重命名列。语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE  dept80<br>CHANGE department_name dept_name varchar(15); <br></code></pre></td></tr></table></figure><h3 id="4-4-删除一个列"><a href="#4-4-删除一个列" class="headerlink" title="4.4 删除一个列"></a>4.4 删除一个列</h3><p>删除表中某个字段的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 DROP 【COLUMN】字段名<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE  dept80<br>DROP COLUMN  job_id; <br></code></pre></td></tr></table></figure><h2 id="5-重命名表"><a href="#5-重命名表" class="headerlink" title="5. 重命名表"></a>5. 重命名表</h2><ul><li>方式一：使用RENAME</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">RENAME TABLE emp<br>TO myemp;<br></code></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER table dept<br>RENAME [TO] detail_dept;  -- [TO]可以省略<br></code></pre></td></tr></table></figure><ul><li>必须是对象的拥有者</li></ul><h2 id="6-删除表"><a href="#6-删除表" class="headerlink" title="6. 删除表"></a>6. 删除表</h2><ul><li><p>在MySQL中，当一张数据表<code>没有与其他任何数据表形成关联关系</code>时，可以将当前数据表直接删除。</p></li><li><p>数据和结构都被删除</p></li><li><p>所有正在运行的相关事务被提交</p></li><li><p>所有相关索引被删除</p></li><li><p>语法格式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];<br></code></pre></td></tr></table></figure><p><code>IF EXISTS</code>的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE dept80;<br></code></pre></td></tr></table></figure><ul><li>DROP TABLE 语句不能回滚</li></ul><h2 id="7-清空表"><a href="#7-清空表" class="headerlink" title="7. 清空表"></a>7. 清空表</h2><ul><li><p>TRUNCATE TABLE语句：</p><ul><li>删除表中所有的数据</li><li>释放表的存储空间</li></ul></li><li><p>举例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">TRUNCATE TABLE detail_dept;<br></code></pre></td></tr></table></figure><ul><li><p>TRUNCATE语句<strong>不能回滚</strong>，而使用 DELETE 语句删除数据，可以回滚</p></li><li><p>对比：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET autocommit = FALSE;<br>  <br>DELETE FROM emp2; <br>#TRUNCATE TABLE emp2;<br>  <br>SELECT * FROM emp2;<br>  <br>ROLLBACK;<br>  <br>SELECT * FROM emp2;<br></code></pre></td></tr></table></figure><blockquote><p>阿里开发规范：</p><p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 TRIGGER，有可能造成事故，故不建议在开发代码中使用此语句。 </p><p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote><h2 id="8-内容拓展"><a href="#8-内容拓展" class="headerlink" title="8. 内容拓展"></a>8. 内容拓展</h2><h3 id="拓展1：阿里巴巴《Java开发手册》之MySQL字段命名"><a href="#拓展1：阿里巴巴《Java开发手册》之MySQL字段命名" class="headerlink" title="拓展1：阿里巴巴《Java开发手册》之MySQL字段命名"></a>拓展1：阿里巴巴《Java开发手册》之MySQL字段命名</h3><ul><li><p>【<code>强制</code>】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><ul><li>正例：aliyun_admin，rdc_config，level3_name </li><li>反例：AliyunAdmin，rdcConfig，level_3_name</li></ul></li><li><p>【<code>强制</code>】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p>【<code>强制</code>】表必备三字段：id, gmt_create, gmt_modified。 </p><ul><li>说明：其中 id 必为主键，类型为BIGINT UNSIGNED、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新</li></ul></li><li><p>【<code>推荐</code>】表的命名最好是遵循 “业务名称_表的作用”。 </p><ul><li>正例：alipay_task 、 force_project、 trade_config</li></ul></li><li><p>【<code>推荐</code>】库名与应用名称尽量一致。</p></li><li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。 </p><ul><li>正例：无符号值可以避免误存负数，且扩大了表示范围。</li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211024012735469.png" alt="image-20211024012735469"></p></li></ul><h3 id="拓展2：如何理解清空表、删除表等操作需谨慎？！"><a href="#拓展2：如何理解清空表、删除表等操作需谨慎？！" class="headerlink" title="拓展2：如何理解清空表、删除表等操作需谨慎？！"></a>拓展2：如何理解清空表、删除表等操作需谨慎？！</h3><p><code>表删除</code>操作将把表的定义和表中的数据一起删除，并且MySQL在执行删除操作时，不会有任何的确认信息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行<code>备份</code>，这样当操作失误时可以对数据进行恢复，以免造成无法挽回的后果。</p><p>同样的，在使用 <code>ALTER TABLE</code> 进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进行完整的<code>备份</code>，因为数据库的改变是<code>无法撤销</code>的，如果添加了一个不需要的字段，可以将其删除；相同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</p><h3 id="拓展3：MySQL8新特性—DDL的原子化"><a href="#拓展3：MySQL8新特性—DDL的原子化" class="headerlink" title="拓展3：MySQL8新特性—DDL的原子化"></a>拓展3：MySQL8新特性—DDL的原子化</h3><p>在MySQL 8.0版本中，InnoDB表的DDL支持事务完整性，即<code>DDL操作要么成功要么回滚</code>。DDL操作回滚日志写入到data dictionary数据字典表mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到）中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p><p>分别在MySQL 5.7版本和MySQL 8.0版本中创建数据库和数据表，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE mytest;<br><br>USE mytest;<br><br>CREATE TABLE book1(<br>book_id INT ,<br>book_name VARCHAR(255)<br>);<br><br>SHOW TABLES;<br></code></pre></td></tr></table></figure><p>（1）在MySQL 5.7版本中，测试步骤如下：<br>删除数据表book1和数据表book2，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP TABLE book1,book2;<br>ERROR 1051 (42S02): Unknown table &#x27;mytest.book2&#x27;<br></code></pre></td></tr></table></figure><p>再次查询数据库中的数据表名称，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW TABLES;<br>Empty set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，虽然删除操作时报错了，但是仍然删除了数据表book1。</p><p>（2）在MySQL 8.0版本中，测试步骤如下：<br>删除数据表book1和数据表book2，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP TABLE book1,book2;<br>ERROR 1051 (42S02): Unknown table &#x27;mytest.book2&#x27;<br></code></pre></td></tr></table></figure><p>再次查询数据库中的数据表名称，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show tables;<br>+------------------+<br>| Tables_in_mytest |<br>+------------------+<br>| book1            |<br>+------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，数据表book1并没有被删除。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql09子查询</title>
    <link href="/2023/04/11/sql09%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/04/11/sql09%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="第09章-子查询"><a href="#第09章-子查询" class="headerlink" title="第09章_子查询"></a>第09章_子查询</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p><p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p><h2 id="1-需求分析与问题解决"><a href="#1-需求分析与问题解决" class="headerlink" title="1. 需求分析与问题解决"></a>1. 需求分析与问题解决</h2><h3 id="1-1-实际问题"><a href="#1-1-实际问题" class="headerlink" title="1.1 实际问题"></a>1.1 实际问题</h3><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991034688.png" alt="1554991034688" style="zoom:80%;" /><p>现有解决方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式一：<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;;<br><br>SELECT last_name,salary<br>FROM employees<br>WHERE salary &gt; 11000;<br><br>#方式二：自连接<br>SELECT e2.last_name,e2.salary<br>FROM employees e1,employees e2<br>WHERE e1.last_name = &#x27;Abel&#x27;<br>AND e1.`salary` &lt; e2.`salary`<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式三：子查询<br>SELECT last_name,salary<br>FROM employees<br>WHERE salary &gt; (<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br>);<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991316599.png" alt="1554991316599"></p><h3 id="1-2-子查询的基本使用"><a href="#1-2-子查询的基本使用" class="headerlink" title="1.2 子查询的基本使用"></a>1.2 子查询的基本使用</h3><ul><li>子查询的基本语法结构：</li></ul><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991054388.png" alt="1554991054388"></p><ul><li>子查询（内查询）在主查询之前一次执行完成。</li><li>子查询的结果被主查询（外查询）使用 。</li><li><strong>注意事项</strong><ul><li>子查询要包含在括号内</li><li>将子查询放在比较条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul></li></ul><h3 id="1-3-子查询的分类"><a href="#1-3-子查询的分类" class="headerlink" title="1.3 子查询的分类"></a>1.3 子查询的分类</h3><p><strong>分类方式1：</strong></p><p>我们按内查询的结果返回一条还是多条记录，将子查询分为<code>单行子查询</code>、<code>多行子查询</code>。</p><ul><li><p>单行子查询</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991538719.png" alt="1554991538719"></p></li><li><p>多行子查询</p></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991555669.png" alt="1554991555669"></p><p><strong>分类方式2：</strong></p><p>我们按内查询是否被执行多次，将子查询划分为<code>相关(或关联)子查询</code>和<code>不相关(或非关联)子查询</code>。</p><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。</p><p>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p><h2 id="2-单行子查询"><a href="#2-单行子查询" class="headerlink" title="2. 单行子查询"></a>2. 单行子查询</h2><h3 id="2-1-单行比较操作符"><a href="#2-1-单行比较操作符" class="headerlink" title="2.1 单行比较操作符"></a>2.1 单行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2 代码示例"></a>2.2 代码示例</h3><p><strong>题目：查询工资大于149号员工工资的员工的信息</strong></p><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914232952626.png" alt="image-20210914232952626"></p><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914232935062.png" alt="image-20210914232935062"></p><p><strong>题目：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name, job_id, salary<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  job_id <span class="hljs-operator">=</span>  <br>                (<span class="hljs-keyword">SELECT</span> job_id<br>                 <span class="hljs-keyword">FROM</span>   employees<br>                 <span class="hljs-keyword">WHERE</span>  employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span>)<br><span class="hljs-keyword">AND</span>    salary <span class="hljs-operator">&gt;</span><br>                (<span class="hljs-keyword">SELECT</span> salary<br>                 <span class="hljs-keyword">FROM</span>   employees<br>                 <span class="hljs-keyword">WHERE</span>  employee_id <span class="hljs-operator">=</span> <span class="hljs-number">143</span>);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991892770.png" alt="1554991892770"></p><p><strong>题目：返回公司工资最少的员工的last_name,job_id和salary</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name, job_id, salary<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  salary <span class="hljs-operator">=</span> <br>                (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary)<br>                 <span class="hljs-keyword">FROM</span>   employees);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554991935186.png" alt="1554991935186"></p><p><strong>题目：查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id，manager_id，department_id</strong></p><p>实现方式1：不成对比较</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">SELECT</span>  employee_id, manager_id, department_id<br><span class="hljs-keyword">FROM</span>    employees<br><span class="hljs-keyword">WHERE</span>   manager_id <span class="hljs-keyword">IN</span><br>  (<span class="hljs-keyword">SELECT</span>  manager_id<br>                   <span class="hljs-keyword">FROM</span>    employees<br>                   <span class="hljs-keyword">WHERE</span>   employee_id <span class="hljs-keyword">IN</span> (174,141))<br><span class="hljs-keyword">AND</span>     department_id <span class="hljs-keyword">IN</span> <br>  (<span class="hljs-keyword">SELECT</span>  department_id<br>                   <span class="hljs-keyword">FROM</span>    employees<br>                   <span class="hljs-keyword">WHERE</span>   employee_id <span class="hljs-keyword">IN</span> (174,141))<br><span class="hljs-keyword">AND</span>employee_id <span class="hljs-keyword">NOT</span> I<span class="hljs-meta">N</span>(174,141);<br></code></pre></td></tr></table></figure><p>实现方式2：成对比较</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span>employee_id, manager_id, department_id<br><span class="hljs-keyword">FROM</span>employees<br><span class="hljs-keyword">WHERE</span>  (manager_id, department_id) <span class="hljs-keyword">IN</span><br>                      (<span class="hljs-keyword">SELECT</span> manager_id, department_id<br>                       <span class="hljs-keyword">FROM</span>   employees<br>                       <span class="hljs-keyword">WHERE</span>  employee_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">141</span>,<span class="hljs-number">174</span>))<br><span class="hljs-keyword">AND</span>employee_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">141</span>,<span class="hljs-number">174</span>);<br></code></pre></td></tr></table></figure><h3 id="2-3-HAVING-中的子查询"><a href="#2-3-HAVING-中的子查询" class="headerlink" title="2.3 HAVING 中的子查询"></a>2.3 HAVING 中的子查询</h3><ul><li>首先执行子查询。</li><li>向主查询中的HAVING 子句返回结果。</li></ul><p><strong>题目：查询最低工资大于50号部门最低工资的部门id和其最低工资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   department_id, <span class="hljs-built_in">MIN</span>(salary)<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id<br><span class="hljs-keyword">HAVING</span>   <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-operator">&gt;</span><br>                       (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary)<br>                        <span class="hljs-keyword">FROM</span>   employees<br>                        <span class="hljs-keyword">WHERE</span>  department_id <span class="hljs-operator">=</span> <span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><h3 id="2-4-CASE中的子查询"><a href="#2-4-CASE中的子查询" class="headerlink" title="2.4 CASE中的子查询"></a>2.4 CASE中的子查询</h3><p>在CASE表达式中使用单列子查询：</p><p><strong>题目：显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800的department_id相同，则location为’Canada’，其余则为’USA’。</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> employee_id, last_name,<br>       (<span class="hljs-keyword">CASE</span> department_id<br>        <span class="hljs-keyword">WHEN</span><br>             (<span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span> departments<br>      <span class="hljs-keyword">WHERE</span> location_id = <span class="hljs-number">1800</span>)           <br>        <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;Canada&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;USA&#x27;</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">location</span><br><span class="hljs-keyword">FROM</span>   employees;<br></code></pre></td></tr></table></figure><h3 id="2-5-子查询中的空值问题"><a href="#2-5-子查询中的空值问题" class="headerlink" title="2.5 子查询中的空值问题"></a>2.5 子查询中的空值问题</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name, job_id<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  job_id <span class="hljs-operator">=</span><br>                (<span class="hljs-keyword">SELECT</span> job_id<br>                 <span class="hljs-keyword">FROM</span>   employees<br>                 <span class="hljs-keyword">WHERE</span>  last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Haas&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992067381.png" alt="1554992067381"></p><blockquote><p><strong>子查询不返回任何行</strong></p></blockquote><h3 id="2-5-非法使用子查询"><a href="#2-5-非法使用子查询" class="headerlink" title="2.5 非法使用子查询"></a>2.5 非法使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id, last_name<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  salary <span class="hljs-operator">=</span><br>                (<span class="hljs-keyword">SELECT</span>   <span class="hljs-built_in">MIN</span>(salary)<br>                 <span class="hljs-keyword">FROM</span>     employees<br>                 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992135819.png" alt="1554992135819"></p><blockquote><p><strong>多行子查询使用单行比较符</strong></p></blockquote><h2 id="3-多行子查询"><a href="#3-多行子查询" class="headerlink" title="3. 多行子查询"></a>3. 多行子查询</h2><ul><li>也称为集合比较子查询</li><li>内查询返回多行</li><li>使用多行比较操作符</li></ul><h3 id="3-1-多行比较操作符"><a href="#3-1-多行比较操作符" class="headerlink" title="3.1 多行比较操作符"></a>3.1 多行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的<strong>任意一个</strong></td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的<strong>某一个</strong>值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的<strong>所有</strong>值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><blockquote><p>体会 ANY 和 ALL 的区别</p></blockquote><h3 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3.2 代码示例"></a>3.2 代码示例</h3><p><strong>题目：返回其它job_id中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992658876.png" alt="1554992658876"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992664594.png" alt="1554992664594"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992668429.png" alt="1554992668429"></p><p><strong>题目：返回其它job_id中比job_id为‘IT_PROG’部门所有工资都低的员工的员工号、姓名、job_id以及salary</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992753654.png" alt="1554992753654"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992759467.png" alt="1554992759467"></p><p><strong>题目：查询平均工资最低的部门id</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) = (<br>SELECT MIN(avg_sal)<br>FROM (<br>SELECT AVG(salary) avg_sal<br>FROM employees<br>GROUP BY department_id<br>) dept_avg_sal<br>)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) &lt;= ALL (<br>SELECT AVG(salary) avg_sal<br>FROM employees<br>GROUP BY department_id<br>)<br></code></pre></td></tr></table></figure><h3 id="3-3-空值问题"><a href="#3-3-空值问题" class="headerlink" title="3.3 空值问题"></a>3.3 空值问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name<br>FROM employees<br>WHERE employee_id NOT IN (<br>SELECT manager_id<br>FROM employees<br>);<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211027195906773.png" alt="image-20211027195906773"></p><h2 id="4-相关子查询"><a href="#4-相关子查询" class="headerlink" title="4. 相关子查询"></a>4. 相关子查询</h2><h3 id="4-1-相关子查询执行流程"><a href="#4-1-相关子查询执行流程" class="headerlink" title="4.1 相关子查询执行流程"></a>4.1 相关子查询执行流程</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为<code>关联子查询</code>。</p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992898234.png" alt="1554992898234" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992925281.png" alt="1554992925281" style="zoom:80%;" /><p>说明：<strong>子查询中使用主查询中的列</strong></p><h3 id="4-2-代码示例"><a href="#4-2-代码示例" class="headerlink" title="4.2 代码示例"></a>4.2 代码示例</h3><p><strong>题目：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</strong></p><p><strong>方式一：相关子查询</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554992986225.png" alt="1554992986225"></p><p><strong>方式二：在 FROM 中使用子查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,salary,e1.department_id<br><span class="hljs-keyword">FROM</span> employees e1,(<span class="hljs-keyword">SELECT</span> department_id,<span class="hljs-built_in">AVG</span>(salary) dept_avg_sal <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id) e2<br><span class="hljs-keyword">WHERE</span> e1.`department_id` <span class="hljs-operator">=</span> e2.department_id<br><span class="hljs-keyword">AND</span> e2.dept_avg_sal <span class="hljs-operator">&lt;</span> e1.`salary`;<br></code></pre></td></tr></table></figure><blockquote><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别名，<br>把它当成一张“临时的虚拟的表”来使用。</p></blockquote><p>在ORDER BY 中使用子查询：</p><p><strong>题目：查询员工的id,salary,按照department_name 排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,salary<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (<br>  <span class="hljs-keyword">SELECT</span> department_name<br>  <span class="hljs-keyword">FROM</span> departments d<br>  <span class="hljs-keyword">WHERE</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br>);<br></code></pre></td></tr></table></figure><p><strong>题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同id的员工的employee_id,last_name和其job_id</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">e</span>.employee_id, last_name,<span class="hljs-built_in">e</span>.job_id<br><span class="hljs-keyword">FROM</span>   employees <span class="hljs-built_in">e</span> <br><span class="hljs-keyword">WHERE</span>  <span class="hljs-number">2</span> &lt;= (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(*)<br>             <span class="hljs-keyword">FROM</span>   job_history <br>             <span class="hljs-keyword">WHERE</span>  employee_id = <span class="hljs-built_in">e</span>.employee_id);<br></code></pre></td></tr></table></figure><h3 id="4-3-EXISTS-与-NOT-EXISTS关键字"><a href="#4-3-EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="4.3 EXISTS 与 NOT EXISTS关键字"></a>4.3 EXISTS 与 NOT EXISTS关键字</h3><ul><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li><li><strong>如果在子查询中不存在满足条件的行：</strong><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><strong>如果在子查询中存在满足条件的行：</strong><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li></ul><p><strong>题目：查询公司管理者的employee_id，last_name，job_id，department_id信息</strong></p><p>方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id, last_name, job_id, department_id<br><span class="hljs-keyword">FROM</span>   employees e1<br><span class="hljs-keyword">WHERE</span>  <span class="hljs-keyword">EXISTS</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>                 <span class="hljs-keyword">FROM</span>   employees e2<br>                 <span class="hljs-keyword">WHERE</span>  e2.manager_id <span class="hljs-operator">=</span> <br>                        e1.employee_id);<br></code></pre></td></tr></table></figure><p>方式二：自连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> e1.employee_id, e1.last_name, e1.job_id, e1.department_id<br><span class="hljs-keyword">FROM</span>   employees e1 <span class="hljs-keyword">JOIN</span> employees e2<br><span class="hljs-keyword">WHERE</span> e1.employee_id <span class="hljs-operator">=</span> e2.manager_id;<br></code></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,job_id,department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-keyword">IN</span> (<br>     <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> manager_id<br>     <span class="hljs-keyword">FROM</span> employees<br>     <br>     );<br></code></pre></td></tr></table></figure><p><strong>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> department_id, department_name<br><span class="hljs-keyword">FROM</span> departments d<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;X&#x27;</span><br>                  <span class="hljs-keyword">FROM</span>   employees<br>                  <span class="hljs-keyword">WHERE</span>  department_id <span class="hljs-operator">=</span> d.department_id);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554993169269.png" alt="1554993169269"></p><h3 id="4-4-相关更新"><a href="#4-4-相关更新" class="headerlink" title="4.4 相关更新"></a>4.4 相关更新</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table1 alias1<br><span class="hljs-keyword">SET</span>    <span class="hljs-keyword">column</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> expression<br>                 <span class="hljs-keyword">FROM</span>   table2 alias2<br>                 <span class="hljs-keyword">WHERE</span>  alias1.column <span class="hljs-operator">=</span> alias2.column);<br></code></pre></td></tr></table></figure><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><p><strong>题目：在employees中增加一个department_name字段，数据为员工对应的部门名称</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1）<br>ALTER TABLE employees<br>ADD(department_name VARCHAR2(14));<br><br># 2）<br>UPDATE employees e<br>SET department_name =  (SELECT department_name <br>                       FROM   departments d<br>                       WHERE  e.department_id = d.department_id);<br><br></code></pre></td></tr></table></figure><h3 id="4-4-相关删除"><a href="#4-4-相关删除" class="headerlink" title="4.4 相关删除"></a>4.4 相关删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table1 alias1<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">column</span> operator (<span class="hljs-keyword">SELECT</span> expression<br>                       <span class="hljs-keyword">FROM</span>   table2 alias2<br>                       <span class="hljs-keyword">WHERE</span>  alias1.column <span class="hljs-operator">=</span> alias2.column);<br></code></pre></td></tr></table></figure><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p><strong>题目：删除表employees中，其与emp_history表皆有的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-keyword">in</span>  <br>           (<span class="hljs-keyword">SELECT</span> employee_id<br>            <span class="hljs-keyword">FROM</span>   emp_history <br>            <span class="hljs-keyword">WHERE</span>  employee_id <span class="hljs-operator">=</span> e.employee_id);<br></code></pre></td></tr></table></figure><h2 id="5-抛一个思考题"><a href="#5-抛一个思考题" class="headerlink" title="5. 抛一个思考题"></a>5. 抛一个思考题</h2><p><strong>问题：</strong>谁的工资比Abel的高？</p><p><strong>解答：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：自连接<br>SELECT e2.last_name,e2.salary<br>FROM employees e1,employees e2<br>WHERE e1.last_name = &#x27;Abel&#x27;<br>AND e1.`salary` &lt; e2.`salary`<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：子查询<br>SELECT last_name,salary<br>FROM employees<br>WHERE salary &gt; (<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br>);<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>以上两种方式有好坏之分吗？</p><p><strong>解答：</strong>自连接方式好！</p><p>题目中可以使用子查询，也可以使用自连接。一般情况建议你使用自连接，因为在许多 DBMS 的处理过程中，对于自连接的处理速度要比子查询快得多。</p><p>可以这样理解：子查询实际上是通过未知表进行查询后的条件判断，而自连接是通过已知的自身数据表进行条件判断，因此在大部分 DBMS 中都对自连接处理进行了优化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql08聚合函数</title>
    <link href="/2023/04/11/sql08%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <url>/2023/04/11/sql08%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第08章-聚合函数"><a href="#第08章-聚合函数" class="headerlink" title="第08章_聚合函数"></a>第08章_聚合函数</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><p>我们上一章讲到了 SQL 单行函数。实际上 SQL 函数还有一类，叫做聚合（或聚集、分组）函数，它是对一组数据进行汇总的函数，输入的是一组数据的集合，输出的是单个值。</p><h2 id="1-聚合函数介绍"><a href="#1-聚合函数介绍" class="headerlink" title="1. 聚合函数介绍"></a>1. 聚合函数介绍</h2><ul><li><strong>什么是聚合函数</strong></li></ul><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554980924940.png" alt="1554980924940"></p><ul><li><p><strong>聚合函数类型</strong></p><ul><li><strong>AVG()</strong> </li><li><strong>SUM()</strong></li><li><strong>MAX()</strong> </li><li><strong>MIN()</strong> </li><li>**COUNT() **</li></ul></li><li><p>聚合函数语法</p></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981029920.png" alt="1554981029920"></p><ul><li>聚合函数不能嵌套调用。比如不能出现类似“AVG(SUM(字段名称))”形式的调用。</li></ul><h3 id="1-1-AVG和SUM函数"><a href="#1-1-AVG和SUM函数" class="headerlink" title="1.1 AVG和SUM函数"></a>1.1 AVG和SUM函数</h3><p>可以对<strong>数值型数据</strong>使用AVG 和 SUM 函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary), <span class="hljs-built_in">MAX</span>(salary),<span class="hljs-built_in">MIN</span>(salary), <span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  job_id <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%REP%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981279723.png" alt="1554981279723"></p><h3 id="1-2-MIN和MAX函数"><a href="#1-2-MIN和MAX函数" class="headerlink" title="1.2 MIN和MAX函数"></a>1.2 MIN和MAX函数</h3><p>可以对<strong>任意数据类型</strong>的数据使用 MIN 和 MAX 函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(hire_date), <span class="hljs-built_in">MAX</span>(hire_date)<br><span class="hljs-keyword">FROM</span>  employees;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981253194.png" alt="1554981253194"></p><h3 id="1-3-COUNT函数"><a href="#1-3-COUNT函数" class="headerlink" title="1.3 COUNT函数"></a>1.3 COUNT函数</h3><ul><li>COUNT(*)返回表中记录总数，适用于<strong>任意数据类型</strong>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span>  employees<br><span class="hljs-keyword">WHERE</span>  department_id <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981241299.png" alt="1554981241299"></p><ul><li>COUNT(expr) 返回<strong>expr不为空</strong>的记录总数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(commission_pct)<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  department_id <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981328678.png" alt="1554981328678"></p><ul><li><p><strong>问题：用count(*)，count(1)，count(列名)谁好呢?</strong></p><p>其实，对于MyISAM引擎的表是没有区别的。这种引擎内部有一计数器在维护着行数。</p><p>Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。</p></li><li><p><strong>问题：能不能使用count(列名)替换count(*)?</strong></p><p>不要使用 count(列名)来替代 <code>count(*)</code>，<code>count(*)</code>是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 </p><p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p></li></ul><h2 id="2-GROUP-BY"><a href="#2-GROUP-BY" class="headerlink" title="2. GROUP BY"></a>2. GROUP BY</h2><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h3><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981374920.png" alt="1554981374920"></p><p><strong>可以使用GROUP BY子句将表中的数据分成若干组</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">column</span>, group_function(<span class="hljs-keyword">column</span>)<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span><br>[<span class="hljs-keyword">WHERE</span><span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>group_by_expression]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><span class="hljs-keyword">column</span>];<br></code></pre></td></tr></table></figure><blockquote><p><strong>明确：WHERE一定放在FROM后面</strong></p></blockquote><p><strong>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   department_id, <span class="hljs-built_in">AVG</span>(salary)<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981539408.png" alt="1554981539408"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981544191.png" alt="1554981544191"></p><p>包含在 GROUP BY 子句中的列不必包含在SELECT 列表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   <span class="hljs-built_in">AVG</span>(salary)<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981574152.png" alt="1554981574152"></p><h3 id="2-2-使用多个列分组"><a href="#2-2-使用多个列分组" class="headerlink" title="2.2 使用多个列分组"></a>2.2 使用多个列分组</h3><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981607442.png" alt="1554981607442"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   department_id dept_id, job_id, <span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id, job_id ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981624864.png" alt="1554981624864"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981629733.png" alt="1554981629733"></p><h3 id="2-3-GROUP-BY中使用WITH-ROLLUP"><a href="#2-3-GROUP-BY中使用WITH-ROLLUP" class="headerlink" title="2.3 GROUP BY中使用WITH ROLLUP"></a>2.3 GROUP BY中使用WITH ROLLUP</h3><p>使用<code>WITH ROLLUP</code>关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT department_id,AVG(salary)<br>FROM employees<br>WHERE department_id &gt; 80<br>GROUP BY department_id WITH ROLLUP;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。</p></blockquote><h2 id="3-HAVING"><a href="#3-HAVING" class="headerlink" title="3. HAVING"></a>3. HAVING</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981656798.png" alt="1554981656798"></p><p><strong>过滤分组：HAVING子句</strong></p><ol><li>行已经被分组。</li><li>使用了聚合函数。</li><li>满足HAVING 子句中条件的分组将被显示。</li><li>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</li></ol><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981808091.png" alt="1554981808091"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   department_id, <span class="hljs-built_in">MAX</span>(salary)<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id<br><span class="hljs-keyword">HAVING</span>   <span class="hljs-built_in">MAX</span>(salary)<span class="hljs-operator">&gt;</span><span class="hljs-number">10000</span> ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981824564.png" alt="1554981824564"></p><ul><li><strong>非法使用聚合函数 ： 不能在 WHERE 子句中使用聚合函数。</strong>如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   department_id, <span class="hljs-built_in">AVG</span>(salary)<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">WHERE</span>    <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">8000</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id;<br></code></pre></td></tr></table></figure><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554981724375.png" alt="1554981724375"></p><h3 id="3-2-WHERE和HAVING的对比"><a href="#3-2-WHERE和HAVING的对比" class="headerlink" title="3.2 WHERE和HAVING的对比"></a>3.2 WHERE和HAVING的对比</h3><p><strong>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong> </p><p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为，在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成的。另外，WHERE排除的记录不再包括在分组中。</p><p><strong>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。</strong> 这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用的资源就比较多，执行效率也较低。 </p><p>小结如下：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>WHERE</td><td>先筛选数据再关联，执行效率高</td><td>不能使用分组中的计算函数进行筛选</td></tr><tr><td>HAVING</td><td>可以使用分组中的计算函数</td><td>在最后的结果集中进行筛选，执行效率较低</td></tr></tbody></table><p><strong>开发中的选择：</strong></p><p>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</p><h2 id="4-SELECT的执行过程"><a href="#4-SELECT的执行过程" class="headerlink" title="4. SELECT的执行过程"></a>4. SELECT的执行过程</h2><h3 id="4-1-查询的结构"><a href="#4-1-查询的结构" class="headerlink" title="4.1 查询的结构"></a>4.1 查询的结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：<br>SELECT ...,....,...<br>FROM ...,...,....<br>WHERE 多表的连接条件<br>AND 不包含组函数的过滤条件<br>GROUP BY ...,...<br>HAVING 包含组函数的过滤条件<br>ORDER BY ... ASC/DESC<br>LIMIT ...,...<br><br>#方式2：<br>SELECT ...,....,...<br>FROM ... JOIN ... <br>ON 多表的连接条件<br>JOIN ...<br>ON ...<br>WHERE 不包含组函数的过滤条件<br>AND/OR 不包含组函数的过滤条件<br>GROUP BY ...,...<br>HAVING 包含组函数的过滤条件<br>ORDER BY ... ASC/DESC<br>LIMIT ...,...<br><br>#其中：<br>#（1）from：从哪些表中筛选<br>#（2）on：关联多表查询时，去除笛卡尔积<br>#（3）where：从表中筛选的条件<br>#（4）group by：分组依据<br>#（5）having：在统计结果中再次筛选<br>#（6）order by：排序<br>#（7）limit：分页<br></code></pre></td></tr></table></figure><h3 id="4-2-SELECT执行顺序"><a href="#4-2-SELECT执行顺序" class="headerlink" title="4.2 SELECT执行顺序"></a>4.2 SELECT执行顺序</h3><p>你需要记住 SELECT 查询时的两个顺序：</p><p><strong>1. 关键字的顺序是不能颠倒的：</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">SELECT</span> <span class="hljs-params">...</span> FROM <span class="hljs-params">...</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-params">...</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-params">...</span> HAVING <span class="hljs-params">...</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-params">...</span> LIMIT<span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><p><strong>2.SELECT 语句的执行顺序</strong>（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">FROM</span> -&gt; <span class="hljs-keyword">WHERE</span> -&gt; <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> -&gt; <span class="hljs-keyword">HAVING</span> -&gt; <span class="hljs-keyword">SELECT</span> 的字段 -&gt; <span class="hljs-keyword">DISTINCT</span> -&gt; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> -&gt; <span class="hljs-keyword">LIMIT</span><br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1566872301088.png" alt="1566872301088"></p><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5<br>FROM player JOIN team ON player.team_id = team.team_id # 顺序 1<br>WHERE height &gt; 1.80 # 顺序 2<br>GROUP BY player.team_id # 顺序 3<br>HAVING num &gt; 2 # 顺序 4<br>ORDER BY num DESC # 顺序 6<br>LIMIT 2 # 顺序 7<br></code></pre></td></tr></table></figure><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个<code>虚拟表</code>，然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p><h3 id="4-3-SQL-的执行原理"><a href="#4-3-SQL-的执行原理" class="headerlink" title="4.3 SQL 的执行原理"></a>4.3 SQL 的执行原理</h3><p>SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p><ol><li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li><li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li><li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li></ol><p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p><p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 <code>vt1</code>，就可以在此基础上再进行 <code>WHERE 阶段</code>。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code>。</p><p>然后进入第三步和第四步，也就是 <code>GROUP 和 HAVING 阶段</code>。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3</code> 和 <code>vt4</code>。</p><p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT 和 DISTINCT 阶段</code>。</p><p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表 <code>vt5-1</code> 和 <code>vt5-2</code>。</p><p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <code>ORDER BY 阶段</code>，得到虚拟表 <code>vt6</code>。</p><p>最后在 vt6 的基础上，取出指定行的记录，也就是 <code>LIMIT 阶段</code>，得到最终的结果，对应的是虚拟表 <code>vt7</code>。</p><p>当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。</p><p>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的关键字顺序，<strong>所谓底层运行的原理，就是我们刚才讲到的执行顺序。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql07单行函数</title>
    <link href="/2023/04/11/sql07%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2023/04/11/sql07%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第07章-单行函数"><a href="#第07章-单行函数" class="headerlink" title="第07章_单行函数"></a>第07章_单行函数</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-函数的理解"><a href="#1-函数的理解" class="headerlink" title="1. 函数的理解"></a>1. 函数的理解</h2><h3 id="1-1-什么是函数"><a href="#1-1-什么是函数" class="headerlink" title="1.1 什么是函数"></a>1.1 什么是函数</h3><p>函数在计算机语言的使用中贯穿始终，函数的作用是什么呢？它可以把我们经常使用的代码封装起来，需要的时候直接调用即可。这样既<code>提高了代码效率</code>，又<code>提高了可维护性</code>。在 SQL 中我们也可以使用函数对检索出来的数据进行函数操作。使用这些函数，可以极大地<code>提高用户对数据库的管理效率</code>。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979529525.png" alt="1554979529525"></p><p>从函数定义的角度出发，我们可以将函数分成<code>内置函数</code>和<code>自定义函数</code>。在 SQL 语言中，同样也包括了内置函数和自定义函数。内置函数是系统内置的通用函数，而自定义函数是我们根据自己的需要编写的，本章及下一章讲解的是 SQL 的内置函数。</p><h3 id="1-2-不同DBMS函数的差异"><a href="#1-2-不同DBMS函数的差异" class="headerlink" title="1.2 不同DBMS函数的差异"></a>1.2 不同DBMS函数的差异</h3><p>我们在使用 SQL 语言的时候，不是直接和这门语言打交道，而是通过它使用不同的数据库软件，即 DBMS。<strong>DBMS 之间的差异性很大，远大于同一个语言不同版本之间的差异。</strong>实际上，只有很少的函数是被 DBMS 同时支持的。比如，大多数 DBMS 使用（||）或者（+）来做拼接符，而在 MySQL 中的字符串拼接函数为concat()。大部分 DBMS 会有自己特定的函数，这就意味着<strong>采用 SQL 函数的代码可移植性是很差的</strong>，因此在使用函数的时候需要特别注意。</p><h3 id="1-3-MySQL的内置函数及分类"><a href="#1-3-MySQL的内置函数及分类" class="headerlink" title="1.3 MySQL的内置函数及分类"></a>1.3 MySQL的内置函数及分类</h3><p>MySQL提供了丰富的内置函数，这些函数使得数据的维护与管理更加方便，能够更好地提供数据的分析与统计功能，在一定程度上提高了开发人员进行数据分析与统计的效率。</p><p>MySQL提供的内置函数从<code>实现的功能角度</code>可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里，我将这些丰富的内置函数再分为两类：<code>单行函数</code>、<code>聚合函数（或分组函数）</code>。</p><p><strong>两种SQL函数</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1555433204337.png" alt="1555433204337"></p><p><strong>单行函数</strong></p><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li><strong>只对一行进行变换</strong></li><li><strong>每行返回一个结果</strong></li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul><h2 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2. 数值函数"></a>2. 数值函数</h2><h3 id="2-1-基本函数"><a href="#2-1-基本函数" class="headerlink" title="2.1 基本函数"></a>2.1 基本函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT ABS(-123),ABS(32),SIGN(-23),SIGN(43),PI(),CEIL(32.32),CEILING(-43.23),FLOOR(32.32),<br>FLOOR(-43.23),MOD(12,5)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025162304844.png" alt="image-20211025162304844"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT RAND(),RAND(),RAND(10),RAND(10),RAND(-1),RAND(-1)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025162538958.png" alt="image-20211025162538958"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT ROUND(12.33),ROUND(12.343,2),ROUND(12.324,-1),TRUNCATE(12.66,1),TRUNCATE(12.66,-1)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025162730421.png" alt="image-20211025162730421"></p><h3 id="2-2-角度与弧度互换函数"><a href="#2-2-角度与弧度互换函数" class="headerlink" title="2.2 角度与弧度互换函数"></a>2.2 角度与弧度互换函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT RADIANS(30),RADIANS(60),RADIANS(90),DEGREES(2*PI()),DEGREES(RADIANS(90))<br>FROM DUAL;<br></code></pre></td></tr></table></figure><h3 id="2-3-三角函数"><a href="#2-3-三角函数" class="headerlink" title="2.3 三角函数"></a>2.3 三角函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>SIN(x)</td><td>返回x的正弦值，其中，参数x为弧度值</td></tr><tr><td>ASIN(x)</td><td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr></tbody></table><p>举例：</p><p>ATAN2(M,N)函数返回两个参数的反正切值。<br>与ATAN(X)函数相比，ATAN2(M,N)需要两个参数，例如有两个点point(x1,y1)和point(x2,y2)，使用ATAN(X)函数计算反正切值为ATAN((y2-y1)&#x2F;(x2-x1))，使用ATAN2(M,N)计算反正切值则为ATAN2(y2-y1,x2-x1)。由使用方式可以看出，当x2-x1等于0时，ATAN(X)函数会报错，而ATAN2(M,N)函数则仍然可以计算。</p><p>ATAN2(M,N)函数的使用示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SIN(RADIANS(30)),DEGREES(ASIN(1)),TAN(RADIANS(45)),DEGREES(ATAN(1)),DEGREES(ATAN2(1,1))<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025163846974.png" alt="image-20211025163846974"></p><h3 id="2-4-指数与对数"><a href="#2-4-指数与对数" class="headerlink" title="2.4 指数与对数"></a>2.4 指数与对数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG10(X)</td><td>返回以10为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG2(X)</td><td>返回以2为底的X的对数，当X &lt;&#x3D; 0 时，返回NULL</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT POW(2,5),POWER(2,4),EXP(2),LN(10),LOG10(10),LOG2(4)<br>    -&gt; FROM DUAL;<br>+----------+------------+------------------+-------------------+-----------+---------+<br>| POW(2,5) | POWER(2,4) | EXP(2)           | LN(10)            | LOG10(10) | LOG2(4) |<br>+----------+------------+------------------+-------------------+-----------+---------+<br>|       32 |         16 | 7.38905609893065 | 2.302585092994046 |         1 |       2 |<br>+----------+------------+------------------+-------------------+-----------+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="2-5-进制间的转换"><a href="#2-5-进制间的转换" class="headerlink" title="2.5 进制间的转换"></a>2.5 进制间的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BIN(10),HEX(10),OCT(10),CONV(10,2,8)<br>    -&gt; FROM DUAL;<br>+---------+---------+---------+--------------+<br>| BIN(10) | HEX(10) | OCT(10) | CONV(10,2,8) |<br>+---------+---------+---------+--------------+<br>| 1010    | A       | 12      | 2            |<br>+---------+---------+---------+--------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3-字符串函数"><a href="#3-字符串函数" class="headerlink" title="3. 字符串函数"></a>3. 字符串函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,……,sn)</td><td>连接s1,s2,……,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2,……,sn)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str, idx, len, replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str, a, b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s) 或 UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s)  或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str, len, pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str ,len, pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回0</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如果m&#x3D;n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td></tr></tbody></table><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT FIELD(&#x27;mm&#x27;,&#x27;hello&#x27;,&#x27;msm&#x27;,&#x27;amma&#x27;),FIND_IN_SET(&#x27;mm&#x27;,&#x27;hello,mm,amma&#x27;)<br>    -&gt; FROM DUAL;<br>+----------------------------------+-----------------------------------+<br>| FIELD(&#x27;mm&#x27;,&#x27;hello&#x27;,&#x27;msm&#x27;,&#x27;amma&#x27;) | FIND_IN_SET(&#x27;mm&#x27;,&#x27;hello,mm,amma&#x27;) |<br>+----------------------------------+-----------------------------------+<br>|                                0 |                                 2 |<br>+----------------------------------+-----------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULLIF(&#x27;mysql&#x27;,&#x27;mysql&#x27;),NULLIF(&#x27;mysql&#x27;, &#x27;&#x27;);<br>+-------------------------+---------------------+<br>| NULLIF(&#x27;mysql&#x27;,&#x27;mysql&#x27;) | NULLIF(&#x27;mysql&#x27;, &#x27;&#x27;) |<br>+-------------------------+---------------------+<br>| NULL                    | mysql               |<br>+-------------------------+---------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="4-日期和时间函数"><a href="#4-日期和时间函数" class="headerlink" title="4. 日期和时间函数"></a>4. 日期和时间函数</h2><h3 id="4-1-获取日期、时间"><a href="#4-1-获取日期、时间" class="headerlink" title="4.1 获取日期、时间"></a>4.1 获取日期、时间</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><strong>CURDATE()</strong> ，CURRENT_DATE()</td><td>返回当前日期，只包含年、月、日</td></tr><tr><td><strong>CURTIME()</strong> ， CURRENT_TIME()</td><td>返回当前时间，只包含时、分、秒</td></tr><tr><td><strong>NOW()</strong> &#x2F; SYSDATE() &#x2F; CURRENT_TIMESTAMP() &#x2F; LOCALTIME() &#x2F; LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间）日期</td></tr><tr><td>UTC_TIME()</td><td>返回UTC（世界标准时间）时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT CURDATE(),CURTIME(),NOW(),SYSDATE()+0,UTC_DATE(),UTC_DATE()+0,UTC_TIME(),UTC_TIME()+0<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025193742633.png" alt="image-20211025193742633"></p><h3 id="4-2-日期与时间戳的转换"><a href="#4-2-日期与时间戳的转换" class="headerlink" title="4.2 日期与时间戳的转换"></a>4.2 日期与时间戳的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() -&gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回。</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT UNIX_TIMESTAMP(now());<br>+-----------------------+<br>| UNIX_TIMESTAMP(now()) |<br>+-----------------------+<br>|            1576380910 |<br>+-----------------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; SELECT UNIX_TIMESTAMP(CURDATE());<br>+---------------------------+<br>| UNIX_TIMESTAMP(CURDATE()) |<br>+---------------------------+<br>|                1576339200 |<br>+---------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT UNIX_TIMESTAMP(CURTIME());<br>+---------------------------+<br>| UNIX_TIMESTAMP(CURTIME()) |<br>+---------------------------+<br>|                1576380969 |<br>+---------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT UNIX_TIMESTAMP(&#x27;2011-11-11 11:11:11&#x27;)<br>+---------------------------------------+<br>| UNIX_TIMESTAMP(&#x27;2011-11-11 11:11:11&#x27;) |<br>+---------------------------------------+<br>|                            1320981071 |<br>+---------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT FROM_UNIXTIME(1576380910);<br>+---------------------------+<br>| FROM_UNIXTIME(1576380910) |<br>+---------------------------+<br>| 2019-12-15 11:35:10       |<br>+---------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="4-3-获取月份、星期、星期数、天数等函数"><a href="#4-3-获取月份、星期、星期数、天数等函数" class="headerlink" title="4.3 获取月份、星期、星期数、天数等函数"></a>4.3 获取月份、星期、星期数、天数等函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>YEAR(date) &#x2F; MONTH(date) &#x2F; DAY(date)</td><td>返回具体的日期值</td></tr><tr><td>HOUR(time) &#x2F; MINUTE(time) &#x2F; SECOND(time)</td><td>返回具体的时间值</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份：January，…</td></tr><tr><td>DAYNAME(date)</td><td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周1是0，周2是1，。。。周日是6</td></tr><tr><td>QUARTER(date)</td><td>返回日期对应的季度，范围为1～4</td></tr><tr><td>WEEK(date) ， WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回日期是一年中的第几天</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回日期位于所在月份的第几天</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回周几，注意：周日是1，周一是2，。。。周六是7</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT YEAR(CURDATE()),MONTH(CURDATE()),DAY(CURDATE()),<br>HOUR(CURTIME()),MINUTE(NOW()),SECOND(SYSDATE())<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025213504115.png" alt="image-20211025213504115"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT MONTHNAME(&#x27;2021-10-26&#x27;),DAYNAME(&#x27;2021-10-26&#x27;),WEEKDAY(&#x27;2021-10-26&#x27;),<br>QUARTER(CURDATE()),WEEK(CURDATE()),DAYOFYEAR(NOW()),<br>DAYOFMONTH(NOW()),DAYOFWEEK(NOW())<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211025214818623.png" alt="image-20211025214818623"></p><h3 id="4-4-日期的操作函数"><a href="#4-4-日期的操作函数" class="headerlink" title="4.4 日期的操作函数"></a>4.4 日期的操作函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>EXTRACT(type FROM date)</td><td>返回指定日期中特定的部分，type指定返回的值</td></tr></tbody></table><p>EXTRACT(type FROM date)函数中type的取值与含义：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012142639469.png" alt="image-20211012142639469"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012142746444.png" alt="image-20211012142746444"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT EXTRACT(MINUTE FROM NOW()),EXTRACT( WEEK FROM NOW()),<br>EXTRACT( QUARTER FROM NOW()),EXTRACT( MINUTE_SECOND FROM NOW())<br>FROM DUAL;<br></code></pre></td></tr></table></figure><h3 id="4-5-时间和秒钟转换的函数"><a href="#4-5-时间和秒钟转换的函数" class="headerlink" title="4.5 时间和秒钟转换的函数"></a>4.5 时间和秒钟转换的函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>TIME_TO_SEC(time)</td><td>将 time 转化为秒并返回结果值。转化的公式为：<code>小时*3600+分钟*60+秒</code></td></tr><tr><td>SEC_TO_TIME(seconds)</td><td>将 seconds 描述转化为包含小时、分钟和秒的时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT TIME_TO_SEC(NOW());<br>+--------------------+<br>| TIME_TO_SEC(NOW()) |<br>+--------------------+<br>|               78774 |<br>+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SEC_TO_TIME(78774);<br>+--------------------+<br>| SEC_TO_TIME(78774) |<br>+--------------------+<br>| 21:52:54            |<br>+--------------------+<br>1 row in set (0.12 sec)<br></code></pre></td></tr></table></figure><h3 id="4-6-计算日期和时间的函数"><a href="#4-6-计算日期和时间的函数" class="headerlink" title="4.6 计算日期和时间的函数"></a>4.6 计算日期和时间的函数</h3><p><strong>第1组：</strong></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_ADD(datetime, INTERVAL  expr type)，ADDDATE(date,INTERVAL expr type)</td><td>返回与给定日期时间相差INTERVAL时间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)，SUBDATE(date,INTERVAL expr type)</td><td>返回与date相差INTERVAL时间间隔的日期</td></tr></tbody></table><p>上述函数中type的取值：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012143203355.png" alt="image-20211012143203355"></p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DATE_ADD(NOW(), INTERVAL 1 DAY) AS col1,DATE_ADD(&#x27;2021-10-21 23:32:12&#x27;,INTERVAL 1 SECOND) AS col2,<br>ADDDATE(&#x27;2021-10-21 23:32:12&#x27;,INTERVAL 1 SECOND) AS col3,<br>DATE_ADD(&#x27;2021-10-21 23:32:12&#x27;,INTERVAL &#x27;1_1&#x27; MINUTE_SECOND) AS col4,<br>DATE_ADD(NOW(), INTERVAL -1 YEAR) AS col5, #可以是负数<br>DATE_ADD(NOW(), INTERVAL &#x27;1_1&#x27; YEAR_MONTH) AS col6 #需要单引号<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DATE_SUB(&#x27;2021-01-21&#x27;,INTERVAL 31 DAY) AS col1,<br>SUBDATE(&#x27;2021-01-21&#x27;,INTERVAL 31 DAY) AS col2,<br>DATE_SUB(&#x27;2021-01-21 02:01:01&#x27;,INTERVAL &#x27;1 1&#x27; DAY_HOUR) AS col3<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><strong>第2组：</strong></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>返回time1 - time2的时间间隔</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date)</td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n)</td><td>返回time加上n后的时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT ADDTIME(NOW(),20),SUBTIME(NOW(),30),SUBTIME(NOW(),&#x27;1:1:3&#x27;),DATEDIFF(NOW(),&#x27;2021-10-01&#x27;),<br>TIMEDIFF(NOW(),&#x27;2021-10-25 22:10:10&#x27;),FROM_DAYS(366),TO_DAYS(&#x27;0000-12-25&#x27;),<br>LAST_DAY(NOW()),MAKEDATE(YEAR(NOW()),12),MAKETIME(10,21,23),PERIOD_ADD(20200101010101,10)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ADDTIME(NOW(), 50);<br>+---------------------+<br>| ADDTIME(NOW(), 50)  |<br>+---------------------+<br>| 2019-12-15 22:17:47 |<br>+---------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT ADDTIME(NOW(), &#x27;1:1:1&#x27;);<br>+-------------------------+<br>| ADDTIME(NOW(), &#x27;1:1:1&#x27;) |<br>+-------------------------+<br>| 2019-12-15 23:18:46     |<br>+-------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUBTIME(NOW(), &#x27;1:1:1&#x27;);<br>+-------------------------+<br>| SUBTIME(NOW(), &#x27;1:1:1&#x27;) |<br>+-------------------------+<br>| 2019-12-15 21:23:50     |<br>+-------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT SUBTIME(NOW(), &#x27;-1:-1:-1&#x27;); <br>+----------------------------+<br>| SUBTIME(NOW(), &#x27;-1:-1:-1&#x27;) |<br>+----------------------------+<br>| 2019-12-15 22:25:11        |<br>+----------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT FROM_DAYS(366);<br>+----------------+<br>| FROM_DAYS(366) |<br>+----------------+<br>| 0001-01-01     |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT MAKEDATE(2020,1);<br>+------------------+<br>| MAKEDATE(2020,1) |<br>+------------------+<br>| 2020-01-01       |<br>+------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT MAKEDATE(2020,32);<br>+-------------------+<br>| MAKEDATE(2020,32) |<br>+-------------------+<br>| 2020-02-01        |<br>+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT MAKETIME(1,1,1);<br>+-----------------+<br>| MAKETIME(1,1,1) |<br>+-----------------+<br>| 01:01:01        |<br>+-----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT PERIOD_ADD(20200101010101,1);<br>+------------------------------+<br>| PERIOD_ADD(20200101010101,1) |<br>+------------------------------+<br>|               20200101010102 |<br>+------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT TO_DAYS(NOW());<br>+----------------+<br>| TO_DAYS(NOW()) |<br>+----------------+<br>|          737773 |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：查询 7 天内的新增用户数有多少？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(*) as num FROM new_user WHERE TO_DAYS(NOW())-TO_DAYS(regist_time)&lt;=7<br></code></pre></td></tr></table></figure><h3 id="4-7-日期的格式化与解析"><a href="#4-7-日期的格式化与解析" class="headerlink" title="4.7 日期的格式化与解析"></a>4.7 日期的格式化与解析</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str, fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p>上述<code>非GET_FORMAT</code>函数中fmt参数常用的格式符：</p><table><thead><tr><th>格式符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份（01,02,03。。。）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数（1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制（01,02..）</td><td>%h和%I</td><td>两位数字表示小时，12小时制（01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时，12小时制（1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.，Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数(0&#x3D;Sunday,1&#x3D;Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以3位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周，（1,2,3。。）其中Sunday为周中第一天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周，（1,2,3。。）其中Monday为周中第一天</td><td></td><td></td></tr><tr><td>%T</td><td>24小时制</td><td>%r</td><td>12小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><p>GET_FORMAT函数中date_type和format_type参数取值如下：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012145231321.png" alt="image-20211012145231321"></p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT DATE_FORMAT(NOW(), &#x27;%H:%i:%s&#x27;);<br>+--------------------------------+<br>| DATE_FORMAT(NOW(), &#x27;%H:%i:%s&#x27;) |<br>+--------------------------------+<br>| 22:57:34                        |<br>+--------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT STR_TO_DATE(&#x27;09/01/2009&#x27;,&#x27;%m/%d/%Y&#x27;)<br>FROM DUAL;<br><br>SELECT STR_TO_DATE(&#x27;20140422154706&#x27;,&#x27;%Y%m%d%H%i%s&#x27;)<br>FROM DUAL;<br><br>SELECT STR_TO_DATE(&#x27;2014-04-22 15:47:06&#x27;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT GET_FORMAT(DATE, &#x27;USA&#x27;);<br>+-------------------------+<br>| GET_FORMAT(DATE, &#x27;USA&#x27;) |<br>+-------------------------+<br>| %m.%d.%Y                |<br>+-------------------------+<br>1 row in set (0.00 sec)<br><br>SELECT DATE_FORMAT(NOW(),GET_FORMAT(DATE,&#x27;USA&#x27;)),<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT STR_TO_DATE(&#x27;2020-01-01 00:00:00&#x27;,&#x27;%Y-%m-%d&#x27;); <br>+-----------------------------------------------+<br>| STR_TO_DATE(&#x27;2020-01-01 00:00:00&#x27;,&#x27;%Y-%m-%d&#x27;) |<br>+-----------------------------------------------+<br>| 2020-01-01                                    |<br>+-----------------------------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="5-流程控制函数"><a href="#5-流程控制函数" class="headerlink" title="5. 流程控制函数"></a>5. 流程控制函数</h2><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1，否则返回value2</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE  expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT IF(1 &gt; 0,&#x27;正确&#x27;,&#x27;错误&#x27;)    <br>-&gt;正确<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT IFNULL(null,&#x27;Hello Word&#x27;)<br>-&gt;Hello Word<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT CASE <br>　　WHEN 1 &gt; 0<br>　　THEN &#x27;1 &gt; 0&#x27;<br>　　WHEN 2 &gt; 0<br>　　THEN &#x27;2 &gt; 0&#x27;<br>　　ELSE &#x27;3 &gt; 0&#x27;<br>　　END<br>-&gt;1 &gt; 0<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT CASE 1 <br>　　WHEN 1 THEN &#x27;我是1&#x27;<br>　　WHEN 2 THEN &#x27;我是2&#x27;<br>ELSE &#x27;你是谁&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,salary, CASE WHEN salary&gt;=15000 THEN &#x27;高薪&#x27; <br>  WHEN salary&gt;=10000 THEN &#x27;潜力股&#x27;  <br>  WHEN salary&gt;=8000 THEN &#x27;屌丝&#x27; <br>  ELSE &#x27;草根&#x27; END  &quot;描述&quot;<br>FROM employees; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT oid,`status`, CASE `status` WHEN 1 THEN &#x27;未付款&#x27; <br>   WHEN 2 THEN &#x27;已付款&#x27; <br>   WHEN 3 THEN &#x27;已发货&#x27;  <br>   WHEN 4 THEN &#x27;确认收货&#x27;  <br>   ELSE &#x27;无效订单&#x27; END <br>FROM t_order;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CASE WHEN 1 &gt; 0 THEN &#x27;yes&#x27; WHEN 1 &lt;= 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END;<br>+---------------------------------------------------------------------+<br>| CASE WHEN 1 &gt; 0 THEN &#x27;yes&#x27; WHEN 1 &lt;= 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END |<br>+---------------------------------------------------------------------+<br>| yes                                                                  |<br>+---------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT CASE WHEN 1 &lt; 0 THEN &#x27;yes&#x27; WHEN 1 = 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END;  <br>+--------------------------------------------------------------------+<br>| CASE WHEN 1 &lt; 0 THEN &#x27;yes&#x27; WHEN 1 = 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END |<br>+--------------------------------------------------------------------+<br>| unknown                                                             |<br>+--------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CASE 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END;<br>+------------------------------------------------+<br>| CASE 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END |<br>+------------------------------------------------+<br>|                                               1 |<br>+------------------------------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT CASE -1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END;<br>+-------------------------------------------------+<br>| CASE -1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END |<br>+-------------------------------------------------+<br>|                                               -1 |<br>+-------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,12 * salary * (1 + IFNULL(commission_pct,0))<br>FROM employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, job_id, salary,<br>       CASE job_id WHEN &#x27;IT_PROG&#x27;  THEN  1.10*salary<br>                   WHEN &#x27;ST_CLERK&#x27; THEN  1.15*salary<br>                   WHEN &#x27;SA_REP&#x27;   THEN  1.20*salary<br>          ELSE      salary END     &quot;REVISED_SALARY&quot;<br>FROM   employees;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554980865631.png" alt="1554980865631"></p><p><strong>练习：查询部门号为 10,20, 30 的员工信息, 若部门号为 10, 则打印其工资的 1.1 倍, 20 号部门, 则打印其工资的 1.2 倍, 30 号部门打印其工资的 1.3 倍数。</strong></p><h2 id="6-加密与解密函数"><a href="#6-加密与解密函数" class="headerlink" title="6. 加密与解密函数"></a>6. 加密与解密函数</h2><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，41位长的字符串。加密结果<code>不可逆</code>，常用于用户的密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL</td></tr><tr><td>SHA(str)</td><td>从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。<code>SHA加密算法比MD5更加安全</code>。</td></tr><tr><td>ENCODE(value,password_seed)</td><td>返回使用password_seed作为加密密码加密value</td></tr><tr><td>DECODE(value,password_seed)</td><td>返回使用password_seed作为加密密码解密value</td></tr></tbody></table><p>可以看到，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT PASSWORD(&#x27;mysql&#x27;), PASSWORD(NULL);<br>+-------------------------------------------+----------------+<br>| PASSWORD(&#x27;mysql&#x27;)                         | PASSWORD(NULL) |<br>+-------------------------------------------+----------------+<br>| *E74858DB86EBA20BC33D0AECAE8A8108C56B17FA |                |<br>+-------------------------------------------+----------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT md5(&#x27;123&#x27;)<br>-&gt;202cb962ac59075b964b07152d234b70<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SHA(&#x27;Tom123&#x27;)<br>-&gt;c7c506980abc31cc390a2438c90861d0f1216d50<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ENCODE(&#x27;mysql&#x27;, &#x27;mysql&#x27;);<br>+--------------------------+<br>| ENCODE(&#x27;mysql&#x27;, &#x27;mysql&#x27;) |<br>+--------------------------+<br>| íg　¼　ìÉ                  |<br>+--------------------------+<br>1 row in set, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT DECODE(ENCODE(&#x27;mysql&#x27;,&#x27;mysql&#x27;),&#x27;mysql&#x27;);<br>+-----------------------------------------+<br>| DECODE(ENCODE(&#x27;mysql&#x27;,&#x27;mysql&#x27;),&#x27;mysql&#x27;) |<br>+-----------------------------------------+<br>| mysql                                   |<br>+-----------------------------------------+<br>1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="7-MySQL信息函数"><a href="#7-MySQL信息函数" class="headerlink" title="7. MySQL信息函数"></a>7. MySQL信息函数</h2><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地对数据库进行维护工作。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回当前MySQL的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前MySQL服务器的连接数</td></tr><tr><td>DATABASE()，SCHEMA()</td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td>USER()，CURRENT_USER()、SYSTEM_USER()，SESSION_USER()</td><td>返回当前连接MySQL的用户名，返回结果格式为“主机名@用户名”</td></tr><tr><td>CHARSET(value)</td><td>返回字符串value自变量的字符集</td></tr><tr><td>COLLATION(value)</td><td>返回字符串value的比较规则</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT DATABASE();<br>+------------+<br>| DATABASE() |<br>+------------+<br>| test       |<br>+------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT DATABASE();<br>+------------+<br>| DATABASE() |<br>+------------+<br>| test       |<br>+------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT USER(), CURRENT_USER(), SYSTEM_USER(),SESSION_USER();<br>+----------------+----------------+----------------+----------------+<br>| USER()         | CURRENT_USER() | SYSTEM_USER()  | SESSION_USER() |<br>+----------------+----------------+----------------+----------------+<br>| root@localhost | root@localhost | root@localhost | root@localhost |<br>+----------------+----------------+----------------+----------------+<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CHARSET(&#x27;ABC&#x27;);<br>+----------------+<br>| CHARSET(&#x27;ABC&#x27;) |<br>+----------------+<br>| utf8mb4        |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT COLLATION(&#x27;ABC&#x27;);<br>+--------------------+<br>| COLLATION(&#x27;ABC&#x27;)   |<br>+--------------------+<br>| utf8mb4_general_ci |<br>+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="8-其他函数"><a href="#8-其他函数" class="headerlink" title="8. 其他函数"></a>8. 其他函数</h2><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>FORMAT(value,n)</td><td>返回对数字value进行格式化后的结果数据。n表示<code>四舍五入</code>后保留到小数点后n位</td></tr><tr><td>CONV(value,from,to)</td><td>将value的值进行不同进制之间的转换</td></tr><tr><td>INET_ATON(ipvalue)</td><td>将以点分隔的IP地址转化为一个数字</td></tr><tr><td>INET_NTOA(value)</td><td>将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td>BENCHMARK(n,expr)</td><td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间</td></tr><tr><td>CONVERT(value USING char_code)</td><td>将value所使用的字符编码修改为char_code</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 如果n的值小于或者等于0，则只保留整数部分<br>mysql&gt; SELECT FORMAT(123.123, 2), FORMAT(123.523, 0), FORMAT(123.123, -2); <br>+--------------------+--------------------+---------------------+<br>| FORMAT(123.123, 2) | FORMAT(123.523, 0) | FORMAT(123.123, -2) |<br>+--------------------+--------------------+---------------------+<br>| 123.12             | 124                | 123                 |<br>+--------------------+--------------------+---------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CONV(16, 10, 2), CONV(8888,10,16), CONV(NULL, 10, 2);<br>+-----------------+------------------+-------------------+<br>| CONV(16, 10, 2) | CONV(8888,10,16) | CONV(NULL, 10, 2) |<br>+-----------------+------------------+-------------------+<br>| 10000           | 22B8             | NULL              |<br>+-----------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT INET_ATON(&#x27;192.168.1.100&#x27;);<br>+----------------------------+<br>| INET_ATON(&#x27;192.168.1.100&#x27;) |<br>+----------------------------+<br>|                 3232235876 |<br>+----------------------------+<br>1 row in set (0.00 sec)<br><br># 以“192.168.1.100”为例，计算方式为192乘以256的3次方，加上168乘以256的2次方，加上1乘以256，再加上100。<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT INET_NTOA(3232235876);<br>+-----------------------+<br>| INET_NTOA(3232235876) |<br>+-----------------------+<br>| 192.168.1.100         |<br>+-----------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BENCHMARK(1, MD5(&#x27;mysql&#x27;));<br>+----------------------------+<br>| BENCHMARK(1, MD5(&#x27;mysql&#x27;)) |<br>+----------------------------+<br>|                          0 |<br>+----------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT BENCHMARK(1000000, MD5(&#x27;mysql&#x27;)); <br>+----------------------------------+<br>| BENCHMARK(1000000, MD5(&#x27;mysql&#x27;)) |<br>+----------------------------------+<br>|                                0 |<br>+----------------------------------+<br>1 row in set (0.20 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CHARSET(&#x27;mysql&#x27;), CHARSET(CONVERT(&#x27;mysql&#x27; USING &#x27;utf8&#x27;));<br>+------------------+----------------------------------------+<br>| CHARSET(&#x27;mysql&#x27;) | CHARSET(CONVERT(&#x27;mysql&#x27; USING &#x27;utf8&#x27;)) |<br>+------------------+----------------------------------------+<br>| utf8mb4          | utf8                                   |<br>+------------------+----------------------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql06多表查询</title>
    <link href="/2023/04/11/sql06%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/04/11/sql06%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="第06章-多表查询"><a href="#第06章-多表查询" class="headerlink" title="第06章_多表查询"></a>第06章_多表查询</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</p><p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p><h2 id="1-一个案例引发的多表连接"><a href="#1-一个案例引发的多表连接" class="headerlink" title="1. 一个案例引发的多表连接"></a>1. 一个案例引发的多表连接</h2><h3 id="1-1-案例说明"><a href="#1-1-案例说明" class="headerlink" title="1.1 案例说明"></a>1.1 案例说明</h3><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554974984600.png" alt="1554974984600"></p><p>从多个表中获取数据：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554975020388.png" alt="1554975020388"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#案例：查询员工的姓名及其部门名称<br>SELECT last_name, department_name<br>FROM employees, departments;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554975097631.png" alt="1554975097631"></p><p>查询结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">+-----------+----------------------+<br>| last_name | department_name      |<br>+-----------+----------------------+<br>| King      | Administration       |<br>| King      | Marketing            |<br>| King      | Purchasing           |<br>| King      | Human Resources      |<br>| King      | Shipping             |<br>| King      | IT                   |<br>| King      | Public Relations     |<br>| King      | Sales                |<br>| King      | Executive            |<br>| King      | Finance              |<br>| King      | Accounting           |<br>| King      | Treasury             |<br>...<br>| Gietz     | IT Support           |<br>| Gietz     | NOC                  |<br>| Gietz     | IT Helpdesk          |<br>| Gietz     | Government Sales     |<br>| Gietz     | Retail Sales         |<br>| Gietz     | Recruiting           |<br>| Gietz     | Payroll              |<br>+-----------+----------------------+<br>2889 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>分析错误情况：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(employee_id) FROM employees;<br>#输出107行<br><br>SELECT COUNT(department_id)FROM departments;<br>#输出27行<br><br>SELECT 107*27 FROM dual;<br></code></pre></td></tr></table></figure><p>我们把上述多表查询中出现的问题称为：笛卡尔积的错误。</p><h3 id="1-2-笛卡尔积（或交叉连接）的理解"><a href="#1-2-笛卡尔积（或交叉连接）的理解" class="headerlink" title="1.2 笛卡尔积（或交叉连接）的理解"></a>1.2 笛卡尔积（或交叉连接）的理解</h3><p>笛卡尔乘积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数即为两个集合中元素个数的乘积数。</p><img src="https://images0.cnblogs.com/i/595518/201403/302046364841977.jpg" alt="img" style="zoom:80%;" /><p>SQL92中，笛卡尔积也称为<code>交叉连接</code>，英文是 <code>CROSS JOIN</code>。在 SQL99 中也是使用 CROSS JOIN表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。在MySQL中如下情况会出现笛卡尔积：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工姓名和所在部门名称<br>SELECT last_name,department_name FROM employees,departments;<br>SELECT last_name,department_name FROM employees CROSS JOIN departments;<br>SELECT last_name,department_name FROM employees INNER JOIN departments;<br>SELECT last_name,department_name FROM employees JOIN departments;<br></code></pre></td></tr></table></figure><h3 id="1-3-案例分析与问题解决"><a href="#1-3-案例分析与问题解决" class="headerlink" title="1.3 案例分析与问题解决"></a>1.3 案例分析与问题解决</h3><ul><li><p><strong>笛卡尔积的错误会在下面条件下产生</strong>：</p><ul><li>省略多个表的连接条件（或关联条件）</li><li>连接条件（或关联条件）无效</li><li>所有表中的所有行互相连接</li></ul></li><li><p>为了避免笛卡尔积， 可以<strong>在 WHERE 加入有效的连接条件。</strong></p></li><li><p>加入连接条件后，查询语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECTtable1.column, table2.column<br>FROMtable1, table2<br>WHEREtable1.column1 = table2.column2;  #连接条件<br></code></pre></td></tr></table></figure><ul><li><strong>在 WHERE子句中写入连接条件。</strong></li></ul></li><li><p>正确写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#案例：查询员工的姓名及其部门名称<br>SELECT last_name, department_name<br>FROM employees, departments<br>WHERE employees.department_id = departments.department_id;<br></code></pre></td></tr></table></figure></li><li><p><strong>在表中有相同列时，在列名之前加上表名前缀。</strong></p></li></ul><h2 id="2-多表查询分类讲解"><a href="#2-多表查询分类讲解" class="headerlink" title="2. 多表查询分类讲解"></a>2. 多表查询分类讲解</h2><h3 id="分类1：等值连接-vs-非等值连接"><a href="#分类1：等值连接-vs-非等值连接" class="headerlink" title="分类1：等值连接 vs 非等值连接"></a>分类1：等值连接 vs 非等值连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554975496900.png" alt="1554975496900"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employees.employee_id, employees.last_name, <br>       employees.department_id, departments.department_id,<br>       departments.location_id<br>FROM   employees, departments<br>WHERE  employees.department_id = departments.department_id;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554975522600.png" alt="1554975522600"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554975526339.png" alt="1554975526339"></p><p><strong>拓展1：多个连接条件与 AND 操作符</strong> </p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554975606231.png" alt="1554975606231"></p><p><strong>拓展2：区分重复的列名</strong></p><ul><li><strong>多个表中有相同列时，必须在列名之前加上表名前缀。</strong></li><li>在不同表中具有相同列名的列可以用<code>表名</code>加以区分。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employees.last_name, departments.department_name,employees.department_id<br>FROM employees, departments<br>WHERE employees.department_id = departments.department_id;<br></code></pre></td></tr></table></figure><p><strong>拓展3：表的别名</strong></p><ul><li><p>使用别名可以简化查询。</p></li><li><p>列名前使用表名前缀可以提高查询效率。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.employee_id, e.last_name, e.department_id,<br>       d.department_id, d.location_id<br>FROM   employees e , departments d<br>WHERE  e.department_id = d.department_id;<br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是，如果我们使用了表的别名，在查询字段中、过滤条件中就只能使用别名进行代替，不能使用原有的表名，否则就会报错。</p></blockquote><blockquote><p><code>阿里开发规范</code>：</p><p>【<code>强制</code>】对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或 表名）进行限定。 </p><p><code>说明</code>：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。 </p><p><code>正例</code>：select t1.name from table_first as t1 , table_second as t2 where t1.id&#x3D;t2.id; </p><p><code>反例</code>：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在 某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常：Column  ‘name’ in field list is ambiguous。</p></blockquote><p><strong>拓展4：连接多个表</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978354431.png" alt="1554978354431"></p><p><strong>总结：连接 n个表,至少需要n-1个连接条件。</strong>比如，连接三个表，至少需要两个连接条件。</p><p>练习：查询出公司员工的 last_name,department_name, city</p><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978442447.png" alt="1554978442447"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.last_name, e.salary, j.grade_level<br>FROM   employees e, job_grades j<br>WHERE  e.salary BETWEEN j.lowest_sal AND j.highest_sal;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978477013.png" alt="1554978477013"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978482652.png" alt="1554978482652"></p><h3 id="分类2：自连接-vs-非自连接"><a href="#分类2：自连接-vs-非自连接" class="headerlink" title="分类2：自连接 vs 非自连接"></a>分类2：自连接 vs 非自连接</h3><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978514321.png" alt="1554978514321"></p><ul><li>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义。然后两个表再进行内连接，外连接等查询。</li></ul><p><strong>题目：查询employees表，返回“Xxx  works for Xxx”</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT CONCAT(worker.last_name ,&#x27; works for &#x27; <br>       , manager.last_name)<br>FROM   employees worker, employees manager<br>WHERE  worker.manager_id = manager.employee_id ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978684947.png" alt="1554978684947"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978690764.png" alt="1554978690764"></p><p>练习：查询出last_name为 ‘Chen’ 的员工的 manager 的信息。</p><h3 id="分类3：内连接-vs-外连接"><a href="#分类3：内连接-vs-外连接" class="headerlink" title="分类3：内连接 vs 外连接"></a>分类3：内连接 vs 外连接</h3><p>除了查询满足条件的记录以外，外连接还可以查询某一方不满足条件的记录。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554978955659.png" alt="1554978955659"></p><ul><li><p>内连接: 合并具有同一列的两个以上的表的行, <strong>结果集中不包含一个表与另一个表不匹配的行</strong></p></li><li><p>外连接: 两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的行</strong> <strong>，这种连接称为左（或右） 外连接</strong>。没有匹配的行时, 结果表中相应的列为空(NULL)。</p></li><li><p>如果是左外连接，则连接条件中左边的表也称为<code>主表</code>，右边的表称为<code>从表</code>。</p><p>如果是右外连接，则连接条件中右边的表也称为<code>主表</code>，左边的表称为<code>从表</code>。</p></li></ul><h4 id="SQL92：使用-创建连接"><a href="#SQL92：使用-创建连接" class="headerlink" title="SQL92：使用(+)创建连接"></a>SQL92：使用(+)创建连接</h4><ul><li><p>在 SQL92 中采用（+）代表从表所在的位置。即左或右外连接中，(+) 表示哪个是从表。</p></li><li><p>Oracle 对 SQL92 支持较好，而 MySQL 则不支持 SQL92 的外连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左外连接<br>SELECT last_name,department_name<br>FROM employees ,departments<br>WHERE employees.department_id = departments.department_id(+);<br><br>#右外连接<br>SELECT last_name,department_name<br>FROM employees ,departments<br>WHERE employees.department_id(+) = departments.department_id;<br></code></pre></td></tr></table></figure></li><li><p>而且在 SQL92 中，只有左外连接和右外连接，没有满（或全）外连接。</p></li></ul><h2 id="3-SQL99语法实现多表查询"><a href="#3-SQL99语法实现多表查询" class="headerlink" title="3. SQL99语法实现多表查询"></a>3. SQL99语法实现多表查询</h2><h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h3><ul><li><p>使用JOIN…ON子句创建连接的语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT table1.column, table2.column,table3.column<br>FROM table1<br>    JOIN table2 ON table1 和 table2 的连接条件<br>        JOIN table3 ON table2 和 table3 的连接条件<br></code></pre></td></tr></table></figure><p>它的嵌套逻辑类似我们使用的 FOR 循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">for t1 in table1:<br>    for t2 in table2:<br>       if condition1:<br>           for t3 in table3:<br>              if condition2:<br>                  output t1 + t2 + t3<br></code></pre></td></tr></table></figure><p>SQL99 采用的这种嵌套结构非常清爽、层次性更强、可读性更强，即使再多的表进行连接也都清晰可见。如果你采用 SQL92，可读性就会大打折扣。</p></li><li><p>语法说明：</p><ul><li><strong>可以使用</strong> <strong>ON</strong> <strong>子句指定额外的连接条件</strong>。</li><li>这个连接条件是与其它条件分开的。</li><li><strong>ON</strong> <strong>子句使语句具有更高的易读性</strong>。</li><li>关键字 JOIN、INNER JOIN、CROSS JOIN 的含义是一样的，都表示内连接</li></ul></li></ul><h3 id="3-2-内连接-INNER-JOIN-的实现"><a href="#3-2-内连接-INNER-JOIN-的实现" class="headerlink" title="3.2 内连接(INNER JOIN)的实现"></a>3.2 内连接(INNER JOIN)的实现</h3><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表<br>FROM A表 INNER JOIN B表<br>ON 关联条件<br>WHERE 等其他子句;<br></code></pre></td></tr></table></figure><p>题目1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.employee_id, e.last_name, e.department_id, <br>       d.department_id, d.location_id<br>FROM   employees e JOIN departments d<br>ON     (e.department_id = d.department_id);<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979073996.png" alt="1554979073996"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979079395.png" alt="1554979079395"></p><p>题目2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, city, department_name<br>FROM   employees e <br>JOIN   departments d<br>ON     d.department_id = e.department_id <br>JOIN   locations l<br>ON     d.location_id = l.location_id;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979110008.png" alt="1554979110008"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979115642.png" alt="1554979115642"></p><h3 id="3-3-外连接-OUTER-JOIN-的实现"><a href="#3-3-外连接-OUTER-JOIN-的实现" class="headerlink" title="3.3 外连接(OUTER JOIN)的实现"></a>3.3 外连接(OUTER JOIN)的实现</h3><h4 id="3-3-1-左外连接-LEFT-OUTER-JOIN"><a href="#3-3-1-左外连接-LEFT-OUTER-JOIN" class="headerlink" title="3.3.1 左外连接(LEFT OUTER JOIN)"></a>3.3.1 左外连接(LEFT OUTER JOIN)</h4><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现查询结果是A<br>SELECT 字段列表<br>FROM A表 LEFT JOIN B表<br>ON 关联条件<br>WHERE 等其他子句;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.last_name, e.department_id, d.department_name<br>FROM   employees e<br>LEFT OUTER JOIN departments d<br>ON   (e.department_id = d.department_id) ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979200961.png" alt="1554979200961"></p><h4 id="3-3-2-右外连接-RIGHT-OUTER-JOIN"><a href="#3-3-2-右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="3.3.2 右外连接(RIGHT OUTER JOIN)"></a>3.3.2 右外连接(RIGHT OUTER JOIN)</h4><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现查询结果是B<br>SELECT 字段列表<br>FROM A表 RIGHT JOIN B表<br>ON 关联条件<br>WHERE 等其他子句;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.last_name, e.department_id, d.department_name<br>FROM   employees e<br>RIGHT OUTER JOIN departments d<br>ON    (e.department_id = d.department_id) ;<br></code></pre></td></tr></table></figure><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979243194.png" alt="1554979243194"></p><blockquote><p>需要注意的是，LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在，只能用 (+) 表示。</p></blockquote><h4 id="3-3-3-满外连接-FULL-OUTER-JOIN"><a href="#3-3-3-满外连接-FULL-OUTER-JOIN" class="headerlink" title="3.3.3 满外连接(FULL OUTER JOIN)"></a>3.3.3 满外连接(FULL OUTER JOIN)</h4><ul><li>满外连接的结果 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li><li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li><li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN <strong>UNION</strong> RIGHT join代替。</li></ul><h2 id="4-UNION的使用"><a href="#4-UNION的使用" class="headerlink" title="4. UNION的使用"></a>4. UNION的使用</h2><p><strong>合并查询结果</strong><br>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT column,... FROM table1<br>UNION [ALL]<br>SELECT column,... FROM table2<br></code></pre></td></tr></table></figure><p><strong>UNION操作符</strong></p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979317187.png" alt="1554979317187" style="zoom: 67%;" /><p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</p><p><strong>UNION ALL操作符</strong></p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979343634.png" alt="1554979343634" style="zoom: 67%;" /><p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p><blockquote><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p></blockquote><p>举例：查询部门编号&gt;90或邮箱包含a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1<br>SELECT * FROM employees WHERE email LIKE &#x27;%a%&#x27; OR department_id&gt;90;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2<br>SELECT * FROM employees  WHERE email LIKE &#x27;%a%&#x27;<br>UNION<br>SELECT * FROM employees  WHERE department_id&gt;90;<br></code></pre></td></tr></table></figure><p>举例：查询中国用户中男性的信息以及美国用户中年男性的用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT id,cname FROM t_chinamale WHERE csex=&#x27;男&#x27;<br>UNION ALL<br>SELECT id,tname FROM t_usmale WHERE tGender=&#x27;male&#x27;;<br></code></pre></td></tr></table></figure><h2 id="5-7种SQL-JOINS的实现"><a href="#5-7种SQL-JOINS的实现" class="headerlink" title="5. 7种SQL JOINS的实现"></a>5. 7种SQL JOINS的实现</h2><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554979255233.png" alt="1554979255233" style="zoom:80%;" /><h3 id="5-7-1-代码实现"><a href="#5-7-1-代码实现" class="headerlink" title="5.7.1 代码实现"></a>5.7.1 代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#中图：内连接 A∩B<br>SELECT employee_id,last_name,department_name<br>FROM employees e JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左上图：左外连接<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#右上图：右外连接<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左中图：A - A∩B<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE d.`department_id` IS NULL<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#右中图：B-A∩B<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE e.`department_id` IS NULL<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左下图：满外连接<br># 左中图 + 右上图  A∪B<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE d.`department_id` IS NULL<br>UNION ALL  #没有去重操作，效率高<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#右下图<br>#左中图 + 右中图  A ∪B- A∩B 或者 (A -  A∩B) ∪ （B - A∩B）<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE d.`department_id` IS NULL<br>UNION ALL<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE e.`department_id` IS NULL<br></code></pre></td></tr></table></figure><h3 id="5-7-2-语法格式小结"><a href="#5-7-2-语法格式小结" class="headerlink" title="5.7.2 语法格式小结"></a>5.7.2 语法格式小结</h3><ul><li>左中图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现A -  A∩B<br>select 字段列表<br>from A表 left join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句;<br></code></pre></td></tr></table></figure><ul><li>右中图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现B -  A∩B<br>select 字段列表<br>from A表 right join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句;<br></code></pre></td></tr></table></figure><ul><li>左下图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现查询结果是A∪B<br>#用左外的A，union 右外的B<br>select 字段列表<br>from A表 left join B表<br>on 关联条件<br>where 等其他子句<br><br>union <br><br>select 字段列表<br>from A表 right join B表<br>on 关联条件<br>where 等其他子句;<br></code></pre></td></tr></table></figure><ul><li>右下图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现A∪B -  A∩B  或   (A -  A∩B) ∪ （B - A∩B）<br>#使用左外的 (A -  A∩B)  union 右外的（B - A∩B）<br>select 字段列表<br>from A表 left join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句<br><br>union<br><br>select 字段列表<br>from A表 right join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句<br></code></pre></td></tr></table></figure><h2 id="6-SQL99语法新特性"><a href="#6-SQL99语法新特性" class="headerlink" title="6. SQL99语法新特性"></a>6. SQL99语法新特性</h2><h3 id="6-1-自然连接"><a href="#6-1-自然连接" class="headerlink" title="6.1 自然连接"></a>6.1 自然连接</h3><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如 <code>NATURAL JOIN</code> 用来表示自然连接。我们可以把自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p><p>在SQL92标准中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>AND e.`manager_id` = d.`manager_id`;<br></code></pre></td></tr></table></figure><p>在 SQL99 中你可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e NATURAL JOIN departments d;<br></code></pre></td></tr></table></figure><h3 id="6-2-USING连接"><a href="#6-2-USING连接" class="headerlink" title="6.2 USING连接"></a>6.2 USING连接</h3><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的<code>同名字段</code>进行等值连接。但是只能配合JOIN一起使用。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e JOIN departments d<br>USING (department_id);<br></code></pre></td></tr></table></figure><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING 的括号 () 中填入要指定的同名字段。同时使用 <code>JOIN...USING</code> 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e ,departments d<br>WHERE e.department_id = d.department_id;<br></code></pre></td></tr></table></figure><h2 id="7-章节小结"><a href="#7-章节小结" class="headerlink" title="7. 章节小结"></a>7. 章节小结</h2><p>表连接的约束条件可以有三种方式：WHERE, ON, USING</p><ul><li><p>WHERE：适用于所有关联查询</p></li><li><p><code>ON</code>：只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起写，但分开写可读性更好。</p></li><li><p>USING：只能和JOIN一起使用，而且要求<strong>两个</strong>关联字段在关联表中名称一致，而且只能表示关联字段值相等</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#关联条件<br>#把关联条件写在where后面<br>SELECT last_name,department_name <br>FROM employees,departments <br>WHERE employees.department_id = departments.department_id;<br><br>#把关联条件写在on后面，只能和JOIN一起使用<br>SELECT last_name,department_name <br>FROM employees INNER JOIN departments <br>ON employees.department_id = departments.department_id;<br><br>SELECT last_name,department_name <br>FROM employees CROSS JOIN departments <br>ON employees.department_id = departments.department_id;<br><br>SELECT last_name,department_name  <br>FROM employees JOIN departments <br>ON employees.department_id = departments.department_id;<br><br>#把关联字段写在using()中，只能和JOIN一起使用<br>#而且两个表中的关联字段必须名称相同，而且只能表示=<br>#查询员工姓名与基本工资<br>SELECT last_name,job_title<br>FROM employees INNER JOIN jobs USING(job_id);<br><br>#n张表关联，需要n-1个关联条件<br>#查询员工姓名，基本工资，部门名称<br>SELECT last_name,job_title,department_name FROM employees,departments,jobs <br>WHERE employees.department_id = departments.department_id <br>AND employees.job_id = jobs.job_id;<br><br>SELECT last_name,job_title,department_name <br>FROM employees INNER JOIN departments INNER JOIN jobs <br>ON employees.department_id = departments.department_id <br>AND employees.job_id = jobs.job_id;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>我们要<code>控制连接表的数量</code>。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保证被关联的字段需要有索引。 </p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p><p>来源：阿里巴巴《Java开发手册》</p></blockquote><h2 id="附录：常用的-SQL-标准有哪些"><a href="#附录：常用的-SQL-标准有哪些" class="headerlink" title="附录：常用的 SQL 标准有哪些"></a>附录：常用的 SQL 标准有哪些</h2><p>在正式开始讲连接表的种类时，我们首先需要知道 SQL 存在不同版本的标准规范，因为不同规范下的表连接操作是有区别的。</p><p>SQL 有两个主要的标准，分别是 <code>SQL92</code> 和 <code>SQL99</code>。92 和 99 代表了标准提出的时间，SQL92 就是 92 年提出的标准规范。当然除了 SQL92 和 SQL99 以外，还存在 SQL-86、SQL-89、SQL:2003、SQL:2008、SQL:2011 和 SQL:2016 等其他的标准。</p><p>这么多标准，到底该学习哪个呢？<strong>实际上最重要的 SQL 标准就是 SQL92 和 SQL99</strong>。一般来说 SQL92 的形式更简单，但是写的 SQL 语句会比较长，可读性较差。而 SQL99 相比于 SQL92 来说，语法更加复杂，但可读性更强。我们从这两个标准发布的页数也能看出，SQL92 的标准有 500 页，而 SQL99 标准超过了 1000 页。实际上从 SQL99 之后，很少有人能掌握所有内容，因为确实太多了。就好比我们使用 Windows、Linux 和 Office 的时候，很少有人能掌握全部内容一样。我们只需要掌握一些核心的功能，满足日常工作的需求即可。</p><p><strong>SQL92 和 SQL99 是经典的 SQL 标准，也分别叫做 SQL-2 和 SQL-3 标准。</strong>也正是在这两个标准发布之后，SQL 影响力越来越大，甚至超越了数据库领域。现如今 SQL 已经不仅仅是数据库领域的主流语言，还是信息领域中信息处理的主流语言。在图形检索、图像检索以及语音检索中都能看到 SQL 语言的使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql05排序与分页</title>
    <link href="/2023/04/11/sql05%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/"/>
    <url>/2023/04/11/sql05%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="第05章-排序与分页"><a href="#第05章-排序与分页" class="headerlink" title="第05章_排序与分页"></a>第05章_排序与分页</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-排序数据"><a href="#1-排序数据" class="headerlink" title="1. 排序数据"></a>1. 排序数据</h2><h3 id="1-1-排序规则"><a href="#1-1-排序规则" class="headerlink" title="1.1 排序规则"></a>1.1 排序规则</h3><ul><li>使用 ORDER BY 子句排序<ul><li><strong>ASC（ascend）: 升序</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><strong>ORDER BY 子句在SELECT语句的结尾。</strong></li></ul><h3 id="1-2-单列排序"><a href="#1-2-单列排序" class="headerlink" title="1.2 单列排序"></a>1.2 单列排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT   last_name, job_id, department_id, hire_date<br>FROM     employees<br>ORDER BY hire_date ;<br></code></pre></td></tr></table></figure><p> <img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974255957.png" alt="1554974255957"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974260133.png" alt="1554974260133"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT   last_name, job_id, department_id, hire_date<br>FROM     employees<br>ORDER BY hire_date DESC ;<br></code></pre></td></tr></table></figure><p> <img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974822229.png" alt="1554974822229"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974827522.png" alt="1554974827522"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, salary*12 annsal<br>FROM   employees<br>ORDER BY annsal;<br></code></pre></td></tr></table></figure><p> <img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974853194.png" alt="1554974853194"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974858252.png" alt="1554974858252"></p><h3 id="1-3-多列排序"><a href="#1-3-多列排序" class="headerlink" title="1.3 多列排序"></a>1.3 多列排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, department_id, salary<br>FROM   employees<br>ORDER BY department_id, salary DESC;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974901572.png" alt="1554974901572"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554974907498.png" alt="1554974907498"></p><ul><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><h2 id="2-分页"><a href="#2-分页" class="headerlink" title="2. 分页"></a>2. 分页</h2><h3 id="2-1-背景"><a href="#2-1-背景" class="headerlink" title="2.1 背景"></a>2.1 背景</h3><p>背景1：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景2：表里有 4 条数据，我们只想要显示第 2、3 条数据怎么办呢？</p><h3 id="2-2-实现规则"><a href="#2-2-实现规则" class="headerlink" title="2.2 实现规则"></a>2.2 实现规则</h3><ul><li><p>分页原理</p><p>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p></li><li><p><strong>MySQL中使用 LIMIT 实现分页</strong></p></li><li><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LIMIT [位置偏移量,] 行数<br></code></pre></td></tr></table></figure><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</p></li><li><p>举例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">--前10条记录：<br>SELECT * FROM 表名 LIMIT 0,10;<br>或者<br>SELECT * FROM 表名 LIMIT 10;<br><br>--第11至20条记录：<br>SELECT * FROM 表名 LIMIT 10,10;<br><br>--第21至30条记录： <br>SELECT * FROM 表名 LIMIT 20,10;<br></code></pre></td></tr></table></figure><blockquote><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote><ul><li>分页显式公式<strong>：（当前页数-1）*每页条数，每页条数</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM table <br>LIMIT(PageNo - 1)*PageSize,PageSize;<br></code></pre></td></tr></table></figure><ul><li><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></li><li>使用 LIMIT 的好处</li></ul><p>约束返回结果的数量可以<code>减少数据表的网络传输量</code>，也可以<code>提升查询效率</code>。如果我们知道返回结果只有 1 条，就可以使用<code>LIMIT 1</code>，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p><h3 id="2-3-拓展"><a href="#2-3-拓展" class="headerlink" title="2.3 拓展"></a>2.3 拓展</h3><p>在不同的 DBMS 中使用的关键字可能不同。在 MySQL、PostgreSQL、MariaDB 和 SQLite 中使用 LIMIT 关键字，而且需要放到 SELECT 语句的最后面。</p><ul><li>如果是 SQL Server 和 Access，需要使用 <code>TOP</code> 关键字，比如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT TOP 5 name, hp_max FROM heros ORDER BY hp_max DESC<br></code></pre></td></tr></table></figure><ul><li>如果是 DB2，使用<code>FETCH FIRST 5 ROWS ONLY</code>这样的关键字：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT name, hp_max FROM heros ORDER BY hp_max DESC FETCH FIRST 5 ROWS ONLY<br></code></pre></td></tr></table></figure><ul><li>如果是 Oracle，你需要基于 <code>ROWNUM</code> 来统计行数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT rownum,last_name,salary FROM employees WHERE rownum &lt; 5 ORDER BY salary DESC;<br></code></pre></td></tr></table></figure><p>需要说明的是，这条语句是先取出来前 5 条数据行，然后再按照 hp_max 从高到低的顺序进行排序。但这样产生的结果和上述方法的并不一样。我会在后面讲到子查询，你可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT rownum, last_name,salary<br>FROM (<br>    SELECT last_name,salary<br>    FROM employees<br>    ORDER BY salary DESC)<br>WHERE rownum &lt; 10;<br></code></pre></td></tr></table></figure><p>得到与上述方法一致的结果。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql04运算符</title>
    <link href="/2023/04/11/sql04%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/04/11/sql04%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="第04章-运算符"><a href="#第04章-运算符" class="headerlink" title="第04章_运算符"></a>第04章_运算符</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012100749193.png" alt="image-20211012100749193"></p><p><strong>1．加法与减法运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 100, 100 + 0, 100 - 0, 100 + 50, 100 + 50 -30, 100 + 35.5, 100 - 35.5 FROM dual;<br>+-----+---------+---------+----------+--------------+------------+------------+<br>| 100 | 100 + 0 | 100 - 0 | 100 + 50 | 100 + 50 -30 | 100 + 35.5 | 100 - 35.5 |<br>+-----+---------+---------+----------+--------------+------------+------------+<br>| 100 |     100 |     100 |      150 |          120 |      135.5 |       64.5 |<br>+-----+---------+---------+----------+--------------+------------+------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li><li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li><li>加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；</li><li>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）</li></ul></blockquote><p><strong>2．乘法与除法运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 100, 100 * 1, 100 * 1.0, 100 / 1.0, 100 / 2,100 + 2 * 5 / 2,100 /3, 100 DIV 0 FROM dual;<br>+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+<br>| 100 | 100 * 1 | 100 * 1.0 | 100 / 1.0 | 100 / 2 | 100 + 2 * 5 / 2 | 100 /3  | 100 DIV 0 |<br>+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+<br>| 100 |     100 |     100.0 |  100.0000 | 50.0000 |        105.0000 | 33.3333 |      NULL |<br>+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#计算出员工的年基本工资<br>SELECT employee_id,salary,salary * 12 annual_sal <br>FROM employees;<br></code></pre></td></tr></table></figure><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个数乘以整数1和除以整数1后仍得原数；</li><li>一个数乘以浮点数1和除以浮点数1后变成浮点数，数值与原数相等；</li><li>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</li><li>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；</li><li>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</li><li>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</li></ul></blockquote><p><strong>3．求模（求余）运算符</strong><br>将t22表中的字段i对3和5进行求模（求余）运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 12 % 3, 12 MOD 5 FROM dual;<br>+--------+----------+<br>| 12 % 3 | 12 MOD 5 |<br>+--------+----------+<br>|      0 |        2 |<br>+--------+----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#筛选出employee_id是偶数的员工<br>SELECT * FROM employees<br>WHERE employee_id MOD 2 = 0;<br></code></pre></td></tr></table></figure><p>可以看到，100对3求模后的结果为3，对5求模后的结果为0。</p><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。</p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012101110021.png" alt="image-20211012101110021" /><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012104955094.png" alt="image-20211012104955094"></p><p><strong>1．等号运算符</strong></p><ul><li><p>等号运算符（&#x3D;）判断等号两边的值、字符串或表达式是否相等，如果相等则返回1，不相等则返回0。</p></li><li><p>在使用等号运算符时，遵循如下规则：</p><ul><li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的是每个字符串中字符的ANSI编码是否相等。</li><li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。</li><li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</li><li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</li></ul></li><li><p>对比：SQL中赋值符号使用 :&#x3D;</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 = 1, 1 = &#x27;1&#x27;, 1 = 0, &#x27;a&#x27; = &#x27;a&#x27;, (5 + 3) = (2 + 6), &#x27;&#x27; = NULL , NULL = NULL; <br>+-------+---------+-------+-----------+-------------------+-----------+-------------+<br>| 1 = 1 | 1 = &#x27;1&#x27; | 1 = 0 | &#x27;a&#x27; = &#x27;a&#x27; | (5 + 3) = (2 + 6) | &#x27;&#x27; = NULL | NULL = NULL |<br>+-------+---------+-------+-----------+-------------------+-----------+-------------+<br>|    1  |     1   |   0   |      1    |             1     |    NULL   |        NULL  |<br>+-------+---------+-------+-----------+-------------------+-----------+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 = 2, 0 = &#x27;abc&#x27;, 1 = &#x27;abc&#x27; FROM dual;<br>+-------+-----------+-----------+<br>| 1 = 2 | 0 = &#x27;abc&#x27; | 1 = &#x27;abc&#x27; |<br>+-------+-----------+-----------+<br>|     0 |         1 |         0 |<br>+-------+-----------+-----------+<br>1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询salary=10000，注意在Java中比较是==<br>SELECT employee_id,salary FROM employees WHERE salary = 10000;<br></code></pre></td></tr></table></figure><p><strong>2．安全等于运算符</strong><br>安全等于运算符（&lt;&#x3D;&gt;）与等于运算符（&#x3D;）的作用是相似的，<code>唯一的区别</code>是‘&lt;&#x3D;&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &lt;=&gt; &#x27;1&#x27;, 1 &lt;=&gt; 0, &#x27;a&#x27; &lt;=&gt; &#x27;a&#x27;, (5 + 3) &lt;=&gt; (2 + 6), &#x27;&#x27; &lt;=&gt; NULL,NULL &lt;=&gt; NULL FROM dual;<br>+-----------+---------+-------------+---------------------+-------------+---------------+<br>| 1 &lt;=&gt; &#x27;1&#x27; | 1 &lt;=&gt; 0 | &#x27;a&#x27; &lt;=&gt; &#x27;a&#x27; | (5 + 3) &lt;=&gt; (2 + 6) | &#x27;&#x27; &lt;=&gt; NULL | NULL &lt;=&gt; NULL |<br>+-----------+---------+-------------+---------------------+-------------+---------------+<br>|         1 |       0 |           1 |                   1 |           0 |             1 |<br>+-----------+---------+-------------+---------------------+-------------+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询commission_pct等于0.40<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct = 0.40;<br><br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; 0.40;<br><br>#如果把0.40改成 NULL 呢？<br></code></pre></td></tr></table></figure><p>可以看到，使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为1而不是NULL，其他返回结果与等于运算符相同。</p><p><strong>3．不等于运算符</strong><br>不等于运算符（&lt;&gt;和!&#x3D;）用于判断两边的数字、字符串或者表达式的值是否不相等，如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，或两边都为NULL，则结果为NULL。<br>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &lt;&gt; 1, 1 != 2, &#x27;a&#x27; != &#x27;b&#x27;, (3+4) &lt;&gt; (2+6), &#x27;a&#x27; != NULL, NULL &lt;&gt; NULL; <br>+--------+--------+------------+----------------+-------------+--------------+<br>| 1 &lt;&gt; 1 | 1 != 2 | &#x27;a&#x27; != &#x27;b&#x27; | (3+4) &lt;&gt; (2+6) | &#x27;a&#x27; != NULL | NULL &lt;&gt; NULL |<br>+--------+--------+------------+----------------+-------------+--------------+<br>|      0 |   1    |       1    |            1   |     NULL    |         NULL |<br>+--------+--------+------------+----------------+-------------+--------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>此外，还有非符号类型的运算符：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012105303219.png" alt="image-20211012105303219"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012105030527.png" alt="image-20211012105030527"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012105052456.png" alt="image-20211012105052456"></p><p><strong>4. 空运算符</strong><br>空运算符（IS NULL或者ISNULL）判断一个值是否为NULL，如果为NULL则返回1，否则返回0。<br>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULL IS NULL, ISNULL(NULL), ISNULL(&#x27;a&#x27;), 1 IS NULL;<br>+--------------+--------------+-------------+-----------+<br>| NULL IS NULL | ISNULL(NULL) | ISNULL(&#x27;a&#x27;) | 1 IS NULL |<br>+--------------+--------------+-------------+-----------+<br>|            1 |            1 |           0 |         0 |<br>+--------------+--------------+-------------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询commission_pct等于NULL。比较如下的四种写法<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE ISNULL(commission_pct);<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct = NULL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, manager_id<br>FROM   employees<br>WHERE  manager_id IS NULL;<br></code></pre></td></tr></table></figure><p><strong>5. 非空运算符</strong><br>非空运算符（IS NOT NULL）判断一个值是否不为NULL，如果不为NULL则返回1，否则返回0。<br>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULL IS NOT NULL, &#x27;a&#x27; IS NOT NULL,  1 IS NOT NULL; <br>+------------------+-----------------+---------------+<br>| NULL IS NOT NULL | &#x27;a&#x27; IS NOT NULL | 1 IS NOT NULL |<br>+------------------+-----------------+---------------+<br>|                0 |               1 |             1 |<br>+------------------+-----------------+---------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询commission_pct不等于NULL<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NOT NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE NOT commission_pct &lt;=&gt; NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE NOT ISNULL(commission_pct);<br></code></pre></td></tr></table></figure><p><strong>6. 最小值运算符</strong><br>语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT LEAST (1,0,2), LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;), LEAST(1,NULL,2);<br>+---------------+--------------------+-----------------+<br>| LEAST (1,0,2) | LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | LEAST(1,NULL,2) |<br>+---------------+--------------------+-----------------+<br>|       0       |        a           |      NULL       |<br>+---------------+--------------------+-----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由结果可以看到，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><p><strong>7. 最大值运算符</strong><br>语法格式为：GREATEST(值1，值2，…，值n)。其中，n表示参数列表中有n个值。当有两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT GREATEST(1,0,2), GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;), GREATEST(1,NULL,2);<br>+-----------------+-----------------------+--------------------+<br>| GREATEST(1,0,2) | GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | GREATEST(1,NULL,2) |<br>+-----------------+-----------------------+--------------------+<br>|               2 | c                     |               NULL |<br>+-----------------+-----------------------+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时，返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><p><strong>8. BETWEEN AND运算符</strong><br>BETWEEN运算符使用的格式通常为SELECT D FROM TABLE WHERE C BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为1，否则结果为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 BETWEEN 0 AND 1, 10 BETWEEN 11 AND 12, &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;<br>+-------------------+----------------------+-------------------------+<br>| 1 BETWEEN 0 AND 1 | 10 BETWEEN 11 AND 12 | &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27; |<br>+-------------------+----------------------+-------------------------+<br>|                 1 |                    0 |                       1 |<br>+-------------------+----------------------+-------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, salary<br>FROM   employees<br>WHERE  salary BETWEEN 2500 AND 3500;<br></code></pre></td></tr></table></figure><p><strong>9. IN运算符</strong><br>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27;a&#x27; IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;), 1 IN (2,3), NULL IN (&#x27;a&#x27;,&#x27;b&#x27;), &#x27;a&#x27; IN (&#x27;a&#x27;, NULL);<br>+----------------------+------------+-------------------+--------------------+<br>| &#x27;a&#x27; IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) | 1 IN (2,3) | NULL IN (&#x27;a&#x27;,&#x27;b&#x27;) | &#x27;a&#x27; IN (&#x27;a&#x27;, NULL) |<br>+----------------------+------------+-------------------+--------------------+<br>|            1         |        0   |         NULL      |         1          |<br>+----------------------+------------+-------------------+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, salary, manager_id<br>FROM   employees<br>WHERE  manager_id IN (100, 101, 201);<br></code></pre></td></tr></table></figure><p><strong>10. NOT IN运算符</strong><br>NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一个值，则返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27;a&#x27; NOT IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;), 1 NOT IN (2,3);<br>+--------------------------+----------------+<br>| &#x27;a&#x27; NOT IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) | 1 NOT IN (2,3) |<br>+--------------------------+----------------+<br>|                 0        |            1   |<br>+--------------------------+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>11. LIKE运算符</strong><br>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</p><p>LIKE运算符通常使用如下通配符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">“%”：匹配0个或多个字符。<br>“_”：只能匹配一个字符。<br></code></pre></td></tr></table></figure><p>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULL LIKE &#x27;abc&#x27;, &#x27;abc&#x27; LIKE NULL;  <br>+-----------------+-----------------+<br>| NULL LIKE &#x27;abc&#x27; | &#x27;abc&#x27; LIKE NULL |<br>+-----------------+-----------------+<br>|          NULL   |          NULL   |<br>+-----------------+-----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECTfirst_name<br>FROM employees<br>WHEREfirst_name LIKE &#x27;S%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name<br>FROM   employees<br>WHERE  last_name LIKE &#x27;_o%&#x27;;<br></code></pre></td></tr></table></figure><p><strong>ESCAPE</strong></p><ul><li>回避特殊符号的：<strong>使用转义符</strong>。例如：将[%]转为[$%]、[]转为[$]，然后再加上[ESCAPE‘$’]即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT job_id<br>FROM   jobs<br>WHERE  job_id LIKE ‘IT\_%‘;<br></code></pre></td></tr></table></figure><ul><li>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT job_id<br>FROM   jobs<br>WHERE  job_id LIKE ‘IT$_%‘ escape ‘$‘;<br></code></pre></td></tr></table></figure><p><strong>12. REGEXP运算符</strong></p><p>REGEXP运算符用来匹配字符串，语法格式为：<code>expr REGEXP 匹配条件</code>。如果expr满足匹配条件，返回1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果为NULL。</p><p>REGEXP运算符在进行匹配时，常用的有下面几种通配符：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">（1）‘^’匹配以该字符后面的字符开头的字符串。<br>（2）‘$’匹配以该字符前面的字符结尾的字符串。<br>（3）‘.’匹配任何一个单字符。<br>（4）“<span class="hljs-comment">[...]</span>”匹配在方括号内的任何字符。例如，“<span class="hljs-comment">[abc]</span>”匹配“a”或“b”或“c”。为了命名字符的范围，使用一个‘-’。“<span class="hljs-comment">[a-z]</span>”匹配任何字母，而“<span class="hljs-comment">[0-9]</span>”匹配任何数字。<br>（5）‘*’匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的‘x’字符，“<span class="hljs-comment">[0-9]</span>*”匹配任何数量的数字，而“*”匹配任何数量的任何字符。<br></code></pre></td></tr></table></figure><p>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;;<br>+------------------------+------------------------+-------------------------+<br>| &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27; | &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27; | &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;  |<br>+------------------------+------------------------+-------------------------+<br>|                      1 |                      1 |                       1 |<br>+------------------------+------------------------+-------------------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27;atguigu&#x27; REGEXP &#x27;gu.gu&#x27;, &#x27;atguigu&#x27; REGEXP &#x27;[ab]&#x27;;<br>+--------------------------+-------------------------+<br>| &#x27;atguigu&#x27; REGEXP &#x27;gu.gu&#x27; | &#x27;atguigu&#x27; REGEXP &#x27;[ab]&#x27; |<br>+--------------------------+-------------------------+<br>|                        1 |                       1 |<br>+--------------------------+-------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。</p><p>MySQL中支持4种逻辑运算符如下：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012110241418.png" alt="image-20211012110241418"></p><p><strong>1．逻辑非运算符</strong><br>逻辑非（NOT或!）运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0；当给定的值为NULL时，返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NOT 1, NOT 0, NOT(1+1), NOT !1, NOT NULL;    <br>+-------+-------+----------+--------+----------+<br>| NOT 1 | NOT 0 | NOT(1+1) | NOT !1 | NOT NULL |<br>+-------+-------+----------+--------+----------+<br>|     0 |     1 |        0 |      1 |     NULL |<br>+-------+-------+----------+--------+----------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, job_id<br>FROM   employees<br>WHERE  job_id NOT IN (&#x27;IT_PROG&#x27;, &#x27;ST_CLERK&#x27;, &#x27;SA_REP&#x27;);<br></code></pre></td></tr></table></figure><p><strong>2．逻辑与运算符</strong><br>逻辑与（AND或&amp;&amp;）运算符是当给定的所有值均为非0值，并且都不为NULL时，返回1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 AND -1, 0 AND 1, 0 AND NULL, 1 AND NULL;<br>+----------+---------+------------+------------+<br>| 1 AND -1 | 0 AND 1 | 0 AND NULL | 1 AND NULL |<br>+----------+---------+------------+------------+<br>|        1 |       0 |          0 |       NULL |<br>+----------+---------+------------+------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, job_id, salary<br>FROM   employees<br>WHERE  salary &gt;=10000<br>AND    job_id LIKE &#x27;%MAN%&#x27;;<br></code></pre></td></tr></table></figure><p><strong>3．逻辑或运算符</strong><br>逻辑或（OR或||）运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；当两个值都为NULL时，返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 OR -1, 1 OR 0, 1 OR NULL, 0 || NULL, NULL || NULL;     <br>+---------+--------+-----------+-----------+--------------+<br>| 1 OR -1 | 1 OR 0 | 1 OR NULL | 0 || NULL | NULL || NULL |<br>+---------+--------+-----------+-----------+--------------+<br>|       1 |      1 |         1 |    NULL   |       NULL   |<br>+---------+--------+-----------+-----------+--------------+<br>1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询基本薪资不在9000-12000之间的员工编号和基本薪资<br>SELECT employee_id,salary FROM employees <br>WHERE NOT (salary &gt;= 9000 AND salary &lt;= 12000);<br><br>SELECT employee_id,salary FROM employees <br>WHERE salary &lt;9000 OR salary &gt; 12000;<br><br>SELECT employee_id,salary FROM employees <br>WHERE salary NOT BETWEEN 9000 AND 12000;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, job_id, salary<br>FROM   employees<br>WHERE  salary &gt;= 10000<br>OR     job_id LIKE &#x27;%MAN%&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</p></blockquote><p><strong>4．逻辑异或运算符</strong><br>逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 XOR -1, 1 XOR 0, 0 XOR 0, 1 XOR NULL, 1 XOR 1 XOR 1, 0 XOR 0 XOR 0;<br>+----------+---------+---------+------------+---------------+---------------+<br>| 1 XOR -1 | 1 XOR 0 | 0 XOR 0 | 1 XOR NULL | 1 XOR 1 XOR 1 | 0 XOR 0 XOR 0 |<br>+----------+---------+---------+------------+---------------+---------------+<br>|        0 |       1 |       0 |       NULL |             1 |             0 |<br>+----------+---------+---------+------------+---------------+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select last_name,department_id,salary <br>from employees<br>where department_id in (10,20) XOR salary &gt; 8000;<br></code></pre></td></tr></table></figure><h2 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p><p>MySQL支持的位运算符如下：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012110511223.png" alt="image-20211012110511223"></p><p><strong>1．按位与运算符</strong><br>按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二进制位的数值都为1时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &amp; 10, 20 &amp; 30;<br>+--------+---------+<br>| 1 &amp; 10 | 20 &amp; 30 |<br>+--------+---------+<br>|      0 |      20 |<br>+--------+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0001，10的二进制数为1010，所以1 &amp; 10的结果为0000，对应的十进制数为0。20的二进制数为10100，30的二进制数为11110，所以20 &amp; 30的结果为10100，对应的十进制数为20。</p><p><strong>2. 按位或运算符</strong><br>按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的二进制位的数值有一个或两个为1时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 | 10, 20 | 30; <br>+--------+---------+<br>| 1 | 10 | 20 | 30 |<br>+--------+---------+<br>|     11 |      30 |<br>+--------+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0001，10的二进制数为1010，所以1 | 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 | 30的结果为11110，对应的十进制数为30。</p><p><strong>3. 按位异或运算符</strong><br>按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值对应的二进制位的数值不同时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 ^ 10, 20 ^ 30; <br>+--------+---------+<br>| 1 ^ 10 | 20 ^ 30 |<br>+--------+---------+<br>|     11 |      10 |<br>+--------+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0001，10的二进制数为1010，所以1 ^ 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 ^ 30的结果为01010，对应的十进制数为10。</p><p>再举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 12 &amp; 5, 12 | 5,12 ^ 5 FROM DUAL;<br>+--------+--------+--------+<br>| 12 &amp; 5 | 12 | 5 | 12 ^ 5 |<br>+--------+--------+--------+<br>|      4 |     13 |      9 |<br>+--------+--------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211023115738415.png" alt="image-20211023115738415" style="zoom:80%;" /><p><strong>4. 按位取反运算符</strong><br>按位取反（~）运算符将给定的值的二进制数逐位进行取反操作，即将1变为0，将0变为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 10 &amp; ~1;<br>+---------+<br>| 10 &amp; ~1 |<br>+---------+<br>|      10 |<br>+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以10 &amp; ~1，首先，对数字1进行按位取反操作，结果除了最低位为0，其他位都为1，然后与10进行按位与操作，结果为10。</p><p><strong>5. 按位右移运算符</strong><br>按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &gt;&gt; 2, 4 &gt;&gt; 2;<br>+--------+--------+<br>| 1 &gt;&gt; 2 | 4 &gt;&gt; 2 |<br>+--------+--------+<br>|      0 |      1 |<br>+--------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0000 0001，右移2位为0000 0000，对应的十进制数为0。4的二进制数为0000 0100，右移2位为0000 0001，对应的十进制数为1。</p><p><strong>6. 按位左移运算符</strong><br>按位左移（&lt;&lt;）运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用0补齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &lt;&lt; 2, 4 &lt;&lt; 2;  <br>+--------+--------+<br>| 1 &lt;&lt; 2 | 4 &lt;&lt; 2 |<br>+--------+--------+<br>|      4 |     16 |<br>+--------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0000 0001，左移两位为0000 0100，对应的十进制数为4。4的二进制数为0000 0100，左移两位为0001 0000，对应的十进制数为16。</p><h2 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5. 运算符的优先级"></a>5. 运算符的优先级</h2><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012111042395.png" alt="image-20211012111042395"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211012110731059.png" alt="image-20211012110731059"></p><p>数字编号越大，优先级越高，优先级高的运算符先进行计算。可以看到，赋值运算符的优先级最低，使用“()”括起来的表达式的优先级最高。</p><h2 id="拓展：使用正则表达式查询"><a href="#拓展：使用正则表达式查询" class="headerlink" title="拓展：使用正则表达式查询"></a>拓展：使用正则表达式查询</h2><p>正则表达式通常被用来检索或替换那些符合某个模式的文本内容，根据指定的匹配模式匹配文本中符合要求的特殊字符串。例如，从一个文本文件中提取电话号码，查找一篇文章中重复的单词或者替换用户输入的某些敏感词语等，这些地方都可以使用正则表达式。正则表达式强大而且灵活，可以应用于非常复杂的查询。</p><p>MySQL中使用REGEXP关键字指定正则表达式的字符匹配模式。下表列出了REGEXP操作符中常用字符匹配列表。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210926151249943.png" alt="image-20210926151249943"></p><p><strong>1. 查询以特定字符或字符串开头的记录</strong><br>字符‘^’匹配以特定字符或者字符串开头的文本。</p><p>在fruits表中，查询f_name字段以字母‘b’开头的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^b&#x27;;<br></code></pre></td></tr></table></figure><p><strong>2. 查询以特定字符或字符串结尾的记录</strong><br>字符‘$’匹配以特定字符或者字符串结尾的文本。</p><p>在fruits表中，查询f_name字段以字母‘y’结尾的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;y$&#x27;;<br></code></pre></td></tr></table></figure><p><strong>3. 用符号”.”来替代字符串中的任意一个字符</strong><br>字符‘.’匹配任意一个字符。<br>在fruits表中，查询f_name字段值包含字母‘a’与‘g’且两个字母之间只有一个字母的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;a.g&#x27;;<br></code></pre></td></tr></table></figure><p><strong>4. 使用”*”和”+”来匹配多个字符</strong><br>星号‘*’匹配前面的字符任意多次，包括0次。加号‘+’匹配前面的字符至少一次。</p><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^ba*&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’至少一次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^ba+&#x27;;<br></code></pre></td></tr></table></figure><p><strong>5. 匹配指定字符串</strong><br>正则表达式可以匹配指定字符串，只要这个字符串在查询文本中即可，如要匹配多个字符串，多个字符串之间使用分隔符‘|’隔开。</p><p>在fruits表中，查询f_name字段值包含字符串“on”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;on&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值包含字符串“on”或者“ap”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;on|ap&#x27;;<br></code></pre></td></tr></table></figure><p>之前介绍过，LIKE运算符也可以匹配指定的字符串，但与REGEXP不同，LIKE匹配的字符串如果在文本中间出现，则找不到它，相应的行也不会返回。REGEXP在文本内进行匹配，如果被匹配的字符串在文本中出现，REGEXP将会找到它，相应的行也会被返回。对比结果如下所示。</p><p>在fruits表中，使用LIKE运算符查询f_name字段值为“on”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name like &#x27;on&#x27;;<br>Empty set(0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>6. 匹配指定字符中的任意一个</strong><br>方括号“[]”指定一个字符集合，只匹配其中任何一个字符，即为所查找的文本。</p><p>在fruits表中，查找f_name字段中包含字母‘o’或者‘t’的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;[ot]&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询s_id字段中包含4、5或者6的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE s_id REGEXP &#x27;[456]&#x27;;<br></code></pre></td></tr></table></figure><p><strong>7. 匹配指定字符以外的字符</strong><br><code>“[^字符集合]”</code>匹配不在指定集合中的任何字符。</p><p>在fruits表中，查询f_id字段中包含字母a<del>e和数字1</del>2以外字符的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_id REGEXP &#x27;[^a-e1-2]&#x27;;<br></code></pre></td></tr></table></figure><p><strong>8. 使用{n,}或者{n,m}来指定字符串连续出现的次数</strong><br>“字符串{n,}”表示至少匹配n次前面的字符；“字符串{n,m}”表示匹配前面的字符串不少于n次，不多于m次。例如，a{2,}表示字母a连续出现至少2次，也可以大于2次；a{2,4}表示字母a连续出现最少2次，最多不能超过4次。</p><p>在fruits表中，查询f_name字段值出现字母‘x’至少2次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;x&#123;2,&#125;&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值出现字符串“ba”最少1次、最多3次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;ba&#123;1,3&#125;&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql03基本SELECT语句</title>
    <link href="/2023/04/11/sql03%E5%9F%BA%E6%9C%ACSELECT%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/04/11/sql03%E5%9F%BA%E6%9C%ACSELECT%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="第03章-基本的SELECT语句"><a href="#第03章-基本的SELECT语句" class="headerlink" title="第03章_基本的SELECT语句"></a>第03章_基本的SELECT语句</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-SQL概述"><a href="#1-SQL概述" class="headerlink" title="1. SQL概述"></a>1. SQL概述</h2><h3 id="1-1-SQL背景知识"><a href="#1-1-SQL背景知识" class="headerlink" title="1.1 SQL背景知识"></a>1.1 SQL背景知识</h3><ul><li><p>1946 年，世界上第一台电脑诞生，如今，借由这台电脑发展起来的互联网已经自成江湖。在这几十年里，无数的技术、产业在这片江湖里沉浮，有的方兴未艾，有的已经几幕兴衰。但在这片浩荡的波动里，有一门技术从未消失，甚至“老当益壮”，那就是 SQL。</p><ul><li>45 年前，也就是 1974 年，IBM 研究员发布了一篇揭开数据库技术的论文《SEQUEL：一门结构化的英语查询语言》，直到今天这门结构化的查询语言并没有太大的变化，相比于其他语言，<code>SQL 的半衰期可以说是非常长</code>了。</li></ul></li><li><p>不论是前端工程师，还是后端算法工程师，都一定会和数据打交道，都需要了解如何又快又准确地提取自己想要的数据。更别提数据分析师了，他们的工作就是和数据打交道，整理不同的报告，以便指导业务决策。</p></li><li><p>SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言，<code>与数据直接打交道</code>，由<code>IBM</code>上世纪70年代开发出来。后由美国国家标准局（ANSI）开始着手制定SQL标准，先后有<code>SQL-86</code>，<code>SQL-89</code>，<code>SQL-92</code>，<code>SQL-99</code>等标准。</p><ul><li>SQL 有两个重要的标准，分别是 SQL92 和 SQL99，它们分别代表了 92 年和 99 年颁布的 SQL 标准，我们今天使用的 SQL 语言依然遵循这些标准。</li></ul></li><li><p>不同的数据库生产厂商都支持SQL语句，但都有特有内容。</p></li></ul><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\SQLisputonghua.jpg" alt="SQLisputonghua" style="zoom:67%;" /><h3 id="1-2-SQL语言排行榜"><a href="#1-2-SQL语言排行榜" class="headerlink" title="1.2 SQL语言排行榜"></a>1.2 SQL语言排行榜</h3><p>自从 SQL 加入了 TIOBE 编程语言排行榜，就一直保持在 Top 10。</p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\image-20211014230114639.png" alt="image-20211014230114639" style="zoom:80%;" /><h3 id="1-3-SQL-分类"><a href="#1-3-SQL-分类" class="headerlink" title="1.3 SQL 分类"></a>1.3 SQL 分类</h3><p>SQL语言在功能上主要分为如下3大类：</p><ul><li><p><strong>DDL（Data Definition Languages、数据定义语言）</strong>，这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</p><ul><li>主要的语句关键字包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等。</li></ul></li><li><p><strong>DML（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记录，并检查数据完整性。</p><ul><li>主要的语句关键字包括<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>等。</li><li><strong>SELECT是SQL语言的基础，最为重要。</strong></li></ul></li><li><p><strong>DCL（Data Control Language、数据控制语言）</strong>，用于定义数据库、表、字段、用户的访问权限和安全级别。</p><ul><li>主要的语句关键字包括<code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SAVEPOINT</code>等。</li></ul></li></ul><blockquote><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p><p>还有单独将<code>COMMIT</code>、<code>ROLLBACK</code> 取出来称为TCL （Transaction Control Language，事务控制语言）。</p></blockquote><h2 id="2-SQL语言的规则与规范"><a href="#2-SQL语言的规则与规范" class="headerlink" title="2. SQL语言的规则与规范"></a>2. SQL语言的规则与规范</h2><h3 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2.1 基本规则"></a>2.1 基本规则</h3><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h3 id="2-2-SQL大小写规范-（建议遵守）"><a href="#2-2-SQL大小写规范-（建议遵守）" class="headerlink" title="2.2 SQL大小写规范 （建议遵守）"></a>2.2 SQL大小写规范 （建议遵守）</h3><ul><li><strong>MySQL 在 Windows 环境下是大小写不敏感的</strong></li><li><strong>MySQL 在 Linux 环境下是大小写敏感的</strong><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><strong>推荐采用统一的书写规范：</strong><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="2-3-注-释"><a href="#2-3-注-释" class="headerlink" title="2.3 注 释"></a>2.3 注 释</h3><p>可以使用如下格式的注释结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">单行注释：#注释文字(MySQL特有的方式)<br>单行注释：-- 注释文字(--后面必须包含一个空格。)<br>多行注释：/* 注释文字  */<br></code></pre></td></tr></table></figure><h3 id="2-4-命名规则（暂时了解）"><a href="#2-4-命名规则（暂时了解）" class="headerlink" title="2.4 命名规则（暂时了解）"></a>2.4 命名规则（暂时了解）</h3><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#以下两句是一样的，不区分大小写<br>show databases;<br>SHOW DATABASES;<br><br>#创建表格<br>#create table student info(...); #表名错误，因为表名有空格<br>create table student_info(...); <br><br>#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了<br>CREATE TABLE `order`(<br>    id INT,<br>    lname VARCHAR(20)<br>);<br><br>select id as &quot;编号&quot;, `name` as &quot;姓名&quot; from t_stu; #起别名时，as都可以省略<br>select id as 编号, `name` as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略&quot;&quot;<br>select id as 编 号, `name` as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略&quot;&quot;<br></code></pre></td></tr></table></figure><h3 id="2-5-数据导入指令"><a href="#2-5-数据导入指令" class="headerlink" title="2.5 数据导入指令"></a>2.5 数据导入指令</h3><p>在命令行客户端登录mysql，使用source指令导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; source d:\mysqldb.sql<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employees;<br>+----------------+-------------+------+-----+---------+-------+<br>| Field          | Type        | Null | Key | Default | Extra |<br>+----------------+-------------+------+-----+---------+-------+<br>| employee_id    | int(6)      | NO   | PRI | 0       |       |<br>| first_name     | varchar(20) | YES  |     | NULL    |       |<br>| last_name      | varchar(25) | NO   |     | NULL    |       |<br>| email          | varchar(25) | NO   | UNI | NULL    |       |<br>| phone_number   | varchar(20) | YES  |     | NULL    |       |<br>| hire_date      | date        | NO   |     | NULL    |       |<br>| job_id         | varchar(10) | NO   | MUL | NULL    |       |<br>| salary         | double(8,2) | YES  |     | NULL    |       |<br>| commission_pct | double(2,2) | YES  |     | NULL    |       |<br>| manager_id     | int(6)      | YES  | MUL | NULL    |       |<br>| department_id  | int(4)      | YES  | MUL | NULL    |       |<br>+----------------+-------------+------+-----+---------+-------+<br>11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3-基本的SELECT语句"><a href="#3-基本的SELECT语句" class="headerlink" title="3. 基本的SELECT语句"></a>3. 基本的SELECT语句</h2><h3 id="3-0-SELECT…"><a href="#3-0-SELECT…" class="headerlink" title="3.0 SELECT…"></a>3.0 SELECT…</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 1; #没有任何子句<br>SELECT 9/2; #没有任何子句<br></code></pre></td></tr></table></figure><h3 id="3-1-SELECT-…-FROM"><a href="#3-1-SELECT-…-FROM" class="headerlink" title="3.1 SELECT … FROM"></a>3.1 SELECT … FROM</h3><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   标识选择哪些列<br><span class="hljs-keyword">FROM</span>     标识从哪个表中选择<br></code></pre></td></tr></table></figure><ul><li>选择全部列：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span>   departments;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554950890895.png" alt="1554950890895"></p><blockquote><p>一般情况下，除非需要使用表中所有的字段数据，最好不要使用通配符‘*’。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</p><p>在生产环境下，不推荐你直接使用<code>SELECT *</code>进行查询。</p></blockquote><ul><li>选择特定的列：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> department_id, location_id<br><span class="hljs-keyword">FROM</span>   departments;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554950947969.png" alt="1554950947969"></p><blockquote><p>MySQL中的SQL语句是不区分大小写的，因此SELECT和select的作用是相同的，但是，许多开发人员习惯将关键字大写、数据列和表名小写，读者也应该养成一个良好的编程习惯，这样写出来的代码更容易阅读和维护。</p></blockquote><h3 id="3-2-列的别名"><a href="#3-2-列的别名" class="headerlink" title="3.2 列的别名"></a>3.2 列的别名</h3><ul><li><p>重命名一个列</p></li><li><p>便于计算</p></li><li><p>紧跟列名，也可以<strong>在列名和别名之间加入关键字AS，别名使用双引号</strong>，以便在别名中包含空格或特殊的字符并区分大小写。</p></li><li><p>AS 可以省略</p></li><li><p>建议别名简短，见名知意</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name AS name, commission_pct comm<br>FROM   employees;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951616598.png" alt="1554951616598"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951622467.png" alt="1554951622467"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name &quot;Name&quot;, salary*12 &quot;Annual Salary&quot;<br>FROM   employees;<br></code></pre></td></tr></table></figure></li></ul><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951648377.png" alt="1554951648377"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951655368.png" alt="1554951655368"></p><h3 id="3-3-去除重复行"><a href="#3-3-去除重复行" class="headerlink" title="3.3 去除重复行"></a>3.3 去除重复行</h3><p>默认情况下，查询会返回全部行，包括重复行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> department_id<br><span class="hljs-keyword">FROM</span>   employees;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951711115.png" alt="1554951711115"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951715923.png" alt="1554951715923"></p><p><strong>在SELECT语句中使用关键字DISTINCT去除重复行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id<br><span class="hljs-keyword">FROM</span>   employees;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951796570.png" alt="1554951796570"></p><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554951801044.png" alt="1554951801044"></p><p>针对于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT department_id,salary <br>FROM employees;<br></code></pre></td></tr></table></figure><p>这里有两点需要注意：</p><ol><li>DISTINCT 需要放到所有列名的前面，如果写成<code>SELECT salary, DISTINCT department_id FROM employees</code>会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重，你能看到最后的结果是 74 条，因为这 74 个部门id不同，都有 salary 这个属性值。如果你想要看都有哪些不同的部门（department_id），只需要写<code>DISTINCT department_id</code>即可，后面不需要再加其他的列名了。</li></ol><h3 id="3-4-空值参与运算"><a href="#3-4-空值参与运算" class="headerlink" title="3.4 空值参与运算"></a>3.4 空值参与运算</h3><ul><li>所有运算符或列值遇到null值，运算的结果都为null</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,salary,commission_pct,<br><span class="hljs-number">12</span> <span class="hljs-operator">*</span> salary <span class="hljs-operator">*</span> (<span class="hljs-number">1</span> <span class="hljs-operator">+</span> commission_pct) &quot;annual_sal&quot;<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p>这里你一定要注意，在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</p><h3 id="3-5-着重号"><a href="#3-5-着重号" class="headerlink" title="3.5 着重号"></a>3.5 着重号</h3><ul><li>错误的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM ORDER;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;ORDER&#x27; at line 1<br></code></pre></td></tr></table></figure><ul><li>正确的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM `ORDER`;<br>+----------+------------+<br>| order_id | order_name |<br>+----------+------------+<br>|        1 | shkstart   |<br>|        2 | tomcat     |<br>|        3 | dubbo      |<br>+----------+------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; SELECT * FROM `order`;<br>+----------+------------+<br>| order_id | order_name |<br>+----------+------------+<br>|        1 | shkstart   |<br>|        2 | tomcat     |<br>|        3 | dubbo      |<br>+----------+------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>结论</li></ul><p>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在SQL语句中使用一对&#96;&#96;（着重号）引起来。</p><h3 id="3-6-5、查询常数"><a href="#3-6-5、查询常数" class="headerlink" title="3.6 5、查询常数"></a>3.6 5、查询常数</h3><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</p><p>你可能会问为什么我们还要对常数进行查询呢？</p><p>SQL 中的 SELECT 语法的确提供了这个功能，一般来说我们只从一个表中查询数据，通常不需要增加一个固定的常数列，但如果我们想整合不同的数据源，用常数列作为这个表的标记，就需要查询常数。</p><p>比如说，我们想对 employees 数据表中的员工姓名进行查询，同时增加一列字段<code>corporation</code>，这个字段固定值为“尚硅谷”，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT &#x27;尚硅谷&#x27; as corporation, last_name FROM employees;<br></code></pre></td></tr></table></figure><h2 id="4-显示表结构"><a href="#4-显示表结构" class="headerlink" title="4. 显示表结构"></a>4. 显示表结构</h2><p>使用DESCRIBE 或 DESC 命令，表示表结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE employees;<br>或<br>DESC employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employees;<br>+----------------+-------------+------+-----+---------+-------+<br>| Field          | Type        | Null | Key | Default | Extra |<br>+----------------+-------------+------+-----+---------+-------+<br>| employee_id    | int(6)      | NO   | PRI | 0       |       |<br>| first_name     | varchar(20) | YES  |     | NULL    |       |<br>| last_name      | varchar(25) | NO   |     | NULL    |       |<br>| email          | varchar(25) | NO   | UNI | NULL    |       |<br>| phone_number   | varchar(20) | YES  |     | NULL    |       |<br>| hire_date      | date        | NO   |     | NULL    |       |<br>| job_id         | varchar(10) | NO   | MUL | NULL    |       |<br>| salary         | double(8,2) | YES  |     | NULL    |       |<br>| commission_pct | double(2,2) | YES  |     | NULL    |       |<br>| manager_id     | int(6)      | YES  | MUL | NULL    |       |<br>| department_id  | int(4)      | YES  | MUL | NULL    |       |<br>+----------------+-------------+------+-----+---------+-------+<br>11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>其中，各个字段的含义分别解释如下：</p><ul><li>Field：表示字段名称。 </li><li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一部分；MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，那么值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li></ul><h2 id="5-过滤数据"><a href="#5-过滤数据" class="headerlink" title="5. 过滤数据"></a>5. 过滤数据</h2><ul><li>背景：</li></ul><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554952199742.png" alt="1554952199742"></p><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段1,字段2<br>FROM 表名<br>WHERE 过滤条件<br></code></pre></td></tr></table></figure><ul><li>使用WHERE 子句，将不满足条件的行过滤掉</li><li><strong>WHERE子句紧随 FROM子句</strong></li></ul></li><li><p>举例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id, last_name, job_id, department_id<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  department_id <span class="hljs-operator">=</span> <span class="hljs-number">90</span> ;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\notebook\MySQLmd笔记\mysql基础篇笔记\images\1554952277028.png" alt="1554952277028"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql02MySQL环境搭载</title>
    <link href="/2023/04/11/sql02MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E8%BD%BD/"/>
    <url>/2023/04/11/sql02MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="第02章-MySQL环境搭建"><a href="#第02章-MySQL环境搭建" class="headerlink" title="第02章_MySQL环境搭建"></a>第02章_MySQL环境搭建</h1><p>讲师：尚硅谷 宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-MySQL的卸载"><a href="#1-MySQL的卸载" class="headerlink" title="1. MySQL的卸载"></a>1. MySQL的卸载</h2><h3 id="步骤1：停止MySQL服务"><a href="#步骤1：停止MySQL服务" class="headerlink" title="步骤1：停止MySQL服务"></a>步骤1：停止MySQL服务</h3><p>在卸载之前，先停止MySQL8.0的服务。按键盘上的“Ctrl + Alt + Delete”组合键，打开“任务管理器”对话框，可以在“服务”列表找到“MySQL8.0”的服务，如果现在“正在运行”状态，可以右键单击服务，选择“停止”选项停止MySQL8.0的服务，如图所示。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014153604802.png" alt="image-20211014153604802"></p><h3 id="步骤2：软件的卸载"><a href="#步骤2：软件的卸载" class="headerlink" title="步骤2：软件的卸载"></a>步骤2：软件的卸载</h3><p><strong>方式1：通过控制面板方式</strong></p><p>卸载MySQL8.0的程序可以和其他桌面应用程序一样直接在“控制面板”选择“卸载程序”，并在程序列表中找到MySQL8.0服务器程序，直接双击卸载即可，如图所示。这种方式删除，数据目录下的数据不会跟着删除。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014153657668.png" alt="image-20211014153657668"></p><p><strong>方式2：通过360或电脑管家等软件卸载</strong></p><p>略</p><p><strong>方式3：通过安装包提供的卸载功能卸载</strong></p><p>你也可以通过安装向导程序进行MySQL8.0服务器程序的卸载。</p><p>① 再次双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。安装向导会自动检测已安装的MySQL服务器程序。</p><p>② 选择要卸载的MySQL服务器程序，单击“Remove”（移除），即可进行卸载。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014153722683.png" alt="image-20211014153722683"></p><p>③ 单击“Next”（下一步）按钮，确认卸载。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014153747283.png" alt="image-20211014153747283"></p><p>④ 弹出是否同时移除数据目录选择窗口。如果想要同时删除MySQL服务器中的数据，则勾选“Remove the data directory”，如图所示。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014154112574.png" alt="image-20211014154112574" style="zoom:80%;" /><p>⑤ 执行卸载。单击“Execute”（执行）按钮进行卸载。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014154006530.png" alt="image-20211014154006530" style="zoom:90%;" /><p>⑥ 完成卸载。单击“Finish”（完成）按钮即可。如果想要同时卸载MySQL8.0的安装向导程序，勾选“Yes，Uninstall MySQL Installer”即可，如图所示。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014154046268.png" alt="image-20211014154046268" style="zoom:80%;" /><h3 id="步骤3：残余文件的清理"><a href="#步骤3：残余文件的清理" class="headerlink" title="步骤3：残余文件的清理"></a>步骤3：残余文件的清理</h3><p>如果再次安装不成功，可以卸载后对残余文件进行清理后再安装。</p><p>（1）服务目录：mysql服务的安装目录</p><p>（2）数据目录：默认在C:\ProgramData\MySQL</p><p>如果自己单独指定过数据目录，就找到自己的数据目录进行删除即可。</p><blockquote><p>注意：请在卸载前做好数据备份</p><p>在操作完以后，需要重启计算机，然后进行安装即可。<strong>如果仍然安装失败，需要继续操作如下步骤4。</strong></p></blockquote><h3 id="步骤4：清理注册表（选做）"><a href="#步骤4：清理注册表（选做）" class="headerlink" title="步骤4：清理注册表（选做）"></a>步骤4：清理注册表（选做）</h3><p>如果前几步做了，再次安装还是失败，那么可以清理注册表。</p><p>如何打开注册表编辑器：在系统的搜索框中输入<code>regedit</code></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL服务 目录删除<br><br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL服务 目录删除<br><br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL服务 目录删除<br><br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除<br><br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务目录删除<br><br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务删除<br></code></pre></td></tr></table></figure><blockquote><p>注册表中的ControlSet001,ControlSet002,不一定是001和002,可能是ControlSet005、006之类</p></blockquote><h3 id="步骤5：删除环境变量配置"><a href="#步骤5：删除环境变量配置" class="headerlink" title="步骤5：删除环境变量配置"></a>步骤5：删除环境变量配置</h3><p>找到path环境变量，将其中关于mysql的环境变量删除，<strong>切记不要全部删除。</strong></p><p>例如：删除  D:\develop_tools\mysql\MySQLServer8.0.26\bin;  这个部分</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1575694476072.png" alt="1575694476072"></p><h2 id="2-MySQL的下载、安装、配置"><a href="#2-MySQL的下载、安装、配置" class="headerlink" title="2. MySQL的下载、安装、配置"></a>2. MySQL的下载、安装、配置</h2><h3 id="2-1-MySQL的4大版本"><a href="#2-1-MySQL的4大版本" class="headerlink" title="2.1 MySQL的4大版本"></a>2.1 MySQL的4大版本</h3><blockquote><ul><li><p><strong>MySQL Community Server 社区版本</strong>，开源免费，自由下载，但不提供官方技术支持，适用于大多数普通用户。</p></li><li><p><strong>MySQL Enterprise Edition 企业版本</strong>，需付费，不能在线下载，可以试用30天。提供了更多的功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户。</p></li><li><p><strong>MySQL Cluster 集群版</strong>，开源免费。用于架设集群服务器，可将几个MySQL Server封装成一个Server。需要在社区版或企业版的基础上使用。</p></li><li><p><strong>MySQL Cluster CGE 高级集群版</strong>，需付费。</p></li></ul></blockquote><ul><li><p>目前最新版本为<code>8.0.27</code>，发布时间<code>2021年10月</code>。此前，8.0.0 在 2016.9.12日就发布了。</p></li><li><p>本课程中使用<code>8.0.26版本</code>。</p></li></ul><p>此外，官方还提供了<code>MySQL Workbench</code>（GUITOOL）一款专为MySQL设计的<code>图形界面管理工具</code>。MySQLWorkbench又分为两个版本，分别是<code>社区版</code>（MySQL Workbench OSS）、<code>商用版</code>（MySQL WorkbenchSE）。</p><h3 id="2-2-软件的下载"><a href="#2-2-软件的下载" class="headerlink" title="2.2 软件的下载"></a>2.2 软件的下载</h3><p><strong>1. 下载地址</strong></p><p>官网：<a href="https://www.mysql.com/">https://www.mysql.com</a></p><p><strong>2. 打开官网，点击DOWNLOADS</strong></p><p>然后，点击<code>MySQL Community(GPL) Downloads</code></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210817185920150.png" alt="image-20210817185920150"></p><p><strong>3. 点击 MySQL Community Server</strong></p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210817185955123.png" alt="image-20210817185955123" style="zoom:80%;" /><p><strong>4. 在General Availability(GA) Releases中选择适合的版本</strong></p><p>Windows平台下提供两种安装文件：MySQL二进制分发版（.msi安装文件）和免安装版（.zip压缩文件）。一般来讲，应当使用二进制分发版，因为该版本提供了图形化的安装向导过程，比其他的分发版使用起来要简单，不再需要其他工具启动就可以运行MySQL。</p><ul><li>这里在Windows 系统下推荐下载<code>MSI安装程序</code>；点击<code>Go to Download Page</code>进行下载即可</li></ul> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210727192819147.png" alt="image-20210727192819147" style="zoom:67%;" /><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014163001964.png" alt="image-20211014163001964"></p><ul><li>Windows下的MySQL8.0安装有两种安装程序<ul><li><code>mysql-installer-web-community-8.0.26.0.msi</code> 下载程序大小：2.4M；安装时需要联网安装组件。</li><li><code>mysql-installer-community-8.0.26.0.msi</code> 下载程序大小：450.7M；安装时离线安装即可。<strong>推荐。</strong></li></ul></li><li>如果安装MySQL5.7版本的话，选择<code>Archives</code>，接着选择MySQL5.7的相应版本即可。这里下载最近期的MySQL5.7.34版本。</li></ul><p> <img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014163228051.png" alt="image-20211014163228051"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014163353156.png" alt="image-20211014163353156"></p><h3 id="2-3-MySQL8-0-版本的安装"><a href="#2-3-MySQL8-0-版本的安装" class="headerlink" title="2.3 MySQL8.0 版本的安装"></a>2.3 MySQL8.0 版本的安装</h3><p>MySQL下载完成后，找到下载文件，双击进行安装，具体操作步骤如下。</p><p>步骤1：双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。</p><p>步骤2：打开“Choosing a Setup Type”（选择安装类型）窗口，在其中列出了5种安装类型，分别是Developer Default（默认安装类型）、Server only（仅作为服务器）、Client only（仅作为客户端）、Full（完全安装）、Custom（自定义安装）。这里选择“Custom（自定义安装）”类型按钮，单击“Next(下一步)”按钮。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014170553535.png" alt="image-20211014170553535" style="zoom:90%;" /><p>步骤3：打开“Select Products” （选择产品）窗口，可以定制需要安装的产品清单。例如，选择“MySQL Server 8.0.26-X64”后，单击“→”添加按钮，即可选择安装MySQL服务器，如图所示。采用通用的方法，可以添加其他你需要安装的产品。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014170638699.png" alt="image-20211014170638699" style="zoom:80%;" /><p>此时如果直接“Next”（下一步），则产品的安装路径是默认的。如果想要自定义安装目录，则可以选中对应的产品，然后在下面会出现“Advanced Options”（高级选项）的超链接。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014170814386.png" alt="image-20211014170814386" style="zoom:80%;" /><p>单击“Advanced Options”（高级选项）则会弹出安装目录的选择窗口，如图所示，此时你可以分别设置MySQL的服务程序安装目录和数据存储目录。如果不设置，默认分别在C盘的Program Files目录和ProgramData目录（这是一个隐藏目录）。如果自定义安装目录，请避免“中文”目录。另外，建议服务目录和数据目录分开存放。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014170857263.png" alt="image-20211014170857263" style="zoom:80%;" /><p>步骤4：在上一步选择好要安装的产品之后，单击“Next”（下一步）进入确认窗口，如图所示。单击“Execute”（执行）按钮开始安装。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014170934889.png" alt="image-20211014170934889" style="zoom:90%;" /><p>步骤5：安装完成后在“Status”（状态）列表下将显示“Complete”（安装完成），如图所示。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014171002259.png" alt="image-20211014171002259" style="zoom:90%;" /><h3 id="2-4-配置MySQL8-0"><a href="#2-4-配置MySQL8-0" class="headerlink" title="2.4 配置MySQL8.0"></a>2.4 配置MySQL8.0</h3><p>MySQL安装之后，需要对服务器进行配置。具体的配置步骤如下。</p><p>步骤1：在上一个小节的最后一步，单击“Next”（下一步）按钮，就可以进入产品配置窗口。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image002-1634203188594.jpg" alt="img" style="zoom:80%;" /><p>步骤2：单击“Next”（下一步）按钮，进入MySQL服务器类型配置窗口，如图所示。端口号一般选择默认端口号3306。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image004-1634203188595.jpg" alt="img" style="zoom:80%;" /><p>其中，“Config Type”选项用于设置服务器的类型。单击该选项右侧的下三角按钮，即可查看3个选项，如图所示。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image006-1634203188595.jpg" alt="img" style="zoom:80%;" /><ul><li><p><code>Development Machine（开发机器）</code>：该选项代表典型个人用桌面工作站。此时机器上需要运行多个应用程序，那么MySQL服务器将占用最少的系统资源。</p></li><li><p><code>Server Machine（服务器）</code>：该选项代表服务器，MySQL服务器可以同其他服务器应用程序一起运行，例如Web服务器等。MySQL服务器配置成适当比例的系统资源。</p></li><li><p><code>Dedicated Machine（专用服务器）</code>：该选项代表只运行MySQL服务的服务器。MySQL服务器配置成使用所有可用系统资源。</p></li></ul><p>步骤3：单击“Next”（下一步）按钮，打开设置授权方式窗口。其中，上面的选项是MySQL8.0提供的新的授权方式，采用SHA256基础的密码加密方法；下面的选项是传统授权方法（保留5.x版本兼容性）。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image008-1634203188595.jpg" alt="img" style="zoom:80%;" /><p>步骤4：单击“Next”（下一步）按钮，打开设置服务器root超级管理员的密码窗口，如图所示，需要输入两次同样的登录密码。也可以通过“Add User”添加其他用户，添加其他用户时，需要指定用户名、允许该用户名在哪台&#x2F;哪些主机上登录，还可以指定用户角色等。此处暂不添加用户，用户管理在MySQL高级特性篇中讲解。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image010-1634203188595.jpg" alt="img" style="zoom:80%;" /><p>步骤5：单击“Next”（下一步）按钮，打开设置服务器名称窗口，如图所示。该服务名会出现在Windows服务列表中，也可以在命令行窗口中使用该服务名进行启动和停止服务。本书将服务名设置为“MySQL80”。如果希望开机自启动服务，也可以勾选“Start the MySQL Server at System Startup”选项（推荐）。</p><p>下面是选择以什么方式运行服务？可以选择“Standard System Account”(标准系统用户)或者“Custom User”(自定义用户)中的一个。这里推荐前者。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image012-1634203188596.jpg" alt="img" style="zoom:80%;" /><p>步骤6：单击“Next”（下一步）按钮，打开确认设置服务器窗口，单击“Execute”（执行）按钮。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image014-1634203188596.jpg" alt="img" style="zoom:80%;" /><p>步骤7：完成配置，如图所示。单击“Finish”（完成）按钮，即可完成服务器的配置。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image016.jpg" alt="img" style="zoom:80%;" /><p>步骤8：如果还有其他产品需要配置，可以选择其他产品，然后继续配置。如果没有，直接选择“Next”（下一步），直接完成整个安装和配置过程。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image018.jpg" alt="img" style="zoom:80%;" /><p>步骤9：结束安装和配置。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image020.jpg" alt="img" style="zoom:80%;" /><h3 id="2-5-配置MySQL8-0-环境变量"><a href="#2-5-配置MySQL8-0-环境变量" class="headerlink" title="2.5 配置MySQL8.0 环境变量"></a>2.5 配置MySQL8.0 环境变量</h3><p>如果不配置MySQL环境变量，就不能在命令行直接输入MySQL登录命令。下面说如何配置MySQL的环境变量：</p><p>步骤1：在桌面上右击【此电脑】图标，在弹出的快捷菜单中选择【属性】菜单命令。<br>步骤2：打开【系统】窗口，单击【高级系统设置】链接。<br>步骤3：打开【系统属性】对话框，选择【高级】选项卡，然后单击【环境变量】按钮。<br>步骤4：打开【环境变量】对话框，在系统变量列表中选择path变量。<br>步骤5：单击【编辑】按钮，在【编辑环境变量】对话框中，将MySQL应用程序的bin目录（C:\Program Files\MySQL\MySQL Server 8.0\bin）添加到变量值中，用分号将其与其他路径分隔开。<br>步骤6：添加完成之后，单击【确定】按钮，这样就完成了配置path变量的操作，然后就可以直接输入MySQL命令来登录数据库了。</p><h3 id="2-6-MySQL5-7-版本的安装、配置"><a href="#2-6-MySQL5-7-版本的安装、配置" class="headerlink" title="2.6 MySQL5.7 版本的安装、配置"></a>2.6 MySQL5.7 版本的安装、配置</h3><ul><li><strong>安装</strong></li></ul><p>此版本的安装过程与上述过程除了版本号不同之外，其它环节都是相同的。所以这里省略了MySQL5.7.34版本的安装截图。</p><ul><li><strong>配置</strong></li></ul><p>配置环节与MySQL8.0版本确有细微不同。大部分情况下直接选择“Next”即可，不影响整理使用。</p><p>这里配置MySQL5.7时，重点强调：<strong>与前面安装好的MySQL8.0不能使用相同的端口号。</strong></p><h3 id="2-7-安装失败问题"><a href="#2-7-安装失败问题" class="headerlink" title="2.7 安装失败问题"></a>2.7 安装失败问题</h3><p>MySQL的安装和配置是一件非常简单的事，但是在操作过程中也可能出现问题，特别是初学者。</p><p><strong>问题1：无法打开MySQL8.0软件安装包或者安装过程中失败，如何解决？</strong></p><p>在运行MySQL8.0软件安装包之前，用户需要确保系统中已经安装了.Net Framework相关软件，如果缺少此软件，将不能正常地安装MySQL8.0软件。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image002.gif" alt="img" style="zoom:80%;" /><p>解决方案：到这个地址<a href="https://www.microsoft.com/en-us/download/details.aspx?id=42642%E4%B8%8B%E8%BD%BDMicrosoft">https://www.microsoft.com/en-us/download/details.aspx?id=42642下载Microsoft</a> .NET Framework 4.5并安装后，再去安装MySQL。</p><p>另外，还要确保Windows Installer正常安装。windows上安装mysql8.0需要操作系统提前已安装好Microsoft Visual C++ 2015-2019。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image004.gif" alt="img" style="zoom:75%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/clip_image006.gif" alt="img" style="zoom:75%;" /><p>解决方案同样是，提前到微软官网<a href="https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0%EF%BC%8C%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%9A%84%E7%8E%AF%E5%A2%83%E3%80%82">https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0，下载相应的环境。</a></p><p><strong>问题2：卸载重装MySQL失败？</strong></p><p>该问题通常是因为MySQL卸载时，没有完全清除相关信息导致的。</p><p>解决办法是，把以前的安装目录删除。如果之前安装并未单独指定过服务安装目录，则默认安装目录是“C:\Program Files\MySQL”，彻底删除该目录。同时删除MySQL的Data目录，如果之前安装并未单独指定过数据目录，则默认安装目录是“C:\ProgramData\MySQL”，该目录一般为隐藏目录。删除后，重新安装即可。</p><p><strong>问题3：如何在Windows系统删除之前的未卸载干净的MySQL服务列表？</strong></p><p>操作方法如下，在系统“搜索框”中输入“cmd”，按“Enter”（回车）键确认，弹出命令提示符界面。然后输入“sc delete MySQL服务名”,按“Enter”（回车）键，就能彻底删除残余的MySQL服务了。</p><h2 id="3-MySQL的登录"><a href="#3-MySQL的登录" class="headerlink" title="3. MySQL的登录"></a>3. MySQL的登录</h2><h3 id="3-1-服务的启动与停止"><a href="#3-1-服务的启动与停止" class="headerlink" title="3.1 服务的启动与停止"></a>3.1 服务的启动与停止</h3><p>MySQL安装完毕之后，需要启动服务器进程，不然客户端无法连接数据库。</p><p>在前面的配置过程中，已经将MySQL安装为Windows服务，并且勾选当Windows启动、停止时，MySQL也自动启动、停止。</p><h4 id="方式1：使用图形界面工具"><a href="#方式1：使用图形界面工具" class="headerlink" title="方式1：使用图形界面工具"></a>方式1：使用图形界面工具</h4><ul><li><p>步骤1：打开windows服务</p><ul><li>方式1：计算机（点击鼠标右键）→ 管理（点击）→ 服务和应用程序（点击）→ 服务（点击）</li><li>方式2：控制面板（点击）→ 系统和安全（点击）→ 管理工具（点击）→ 服务（点击）</li><li>方式3：任务栏（点击鼠标右键）→ 启动任务管理器（点击）→ 服务（点击）</li><li>方式4：单击【开始】菜单，在搜索框中输入“services.msc”，按Enter键确认</li></ul></li><li><p>步骤2：找到MySQL80（点击鼠标右键）→ 启动或停止（点击）</p></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014183908375.png" alt="image-20211014183908375"></p><h4 id="方式2：使用命令行工具"><a href="#方式2：使用命令行工具" class="headerlink" title="方式2：使用命令行工具"></a>方式2：使用命令行工具</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 启动 MySQL 服务命令：<br>net start MySQL服务名<br><br># 停止 MySQL 服务命令：<br>net stop MySQL服务名<br></code></pre></td></tr></table></figure><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014184037414.png" alt="image-20211014184037414" style="zoom:80%;" /><p>说明：</p><ol><li><p>start和stop后面的服务名应与之前配置时指定的服务名一致。</p></li><li><p>如果当你输入命令后，提示“拒绝服务”，请以<code>系统管理员身份</code>打开命令提示符界面重新尝试。</p></li></ol><h3 id="3-2-自带客户端的登录与退出"><a href="#3-2-自带客户端的登录与退出" class="headerlink" title="3.2 自带客户端的登录与退出"></a>3.2 自带客户端的登录与退出</h3><p>当MySQL服务启动完成后，便可以通过客户端来登录MySQL数据库。注意：确认服务是开启的。</p><h4 id="登录方式1：MySQL自带客户端"><a href="#登录方式1：MySQL自带客户端" class="headerlink" title="登录方式1：MySQL自带客户端"></a>登录方式1：MySQL自带客户端</h4><p>开始菜单 → 所有程序 → MySQL → MySQL 8.0 Command Line Client</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014184425147.png" alt="image-20211014184425147" style="zoom:80%;" /><blockquote><p>说明：仅限于root用户</p></blockquote><h4 id="登录方式2：windows命令行"><a href="#登录方式2：windows命令行" class="headerlink" title="登录方式2：windows命令行"></a>登录方式2：windows命令行</h4><ul><li>格式：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -h 主机名 -<span class="hljs-selector-tag">P</span> 端口号 -u 用户名 -<span class="hljs-selector-tag">p</span>密码<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -h localhost -P 3306 -u root -pabc123  # 这里我设置的root用户的密码是abc123<br></code></pre></td></tr></table></figure><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014185035137.png" alt="image-20211014185035137" style="zoom:80%;" /><p>注意：</p><p>（1）-p与密码之间不能有空格，其他参数名与参数值之间可以有空格也可以没有空格。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>hlocalhost <span class="hljs-operator">-</span>P3306 <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>pabc123<br></code></pre></td></tr></table></figure><p>（2）密码建议在下一行输入，保证安全</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>h localhost <span class="hljs-operator">-</span>P <span class="hljs-number">3306</span> <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br>Enter password:<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br></code></pre></td></tr></table></figure><p>（3）客户端和服务器在同一台机器上，所以输入localhost或者IP地址127.0.0.1。同时，因为是连接本机：<br>-hlocalhost就可以省略，如果端口号没有修改：-P3306也可以省略</p><p>  简写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br>Enter password:<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br></code></pre></td></tr></table></figure><p>连接成功后，有关于MySQL Server服务版本的信息，还有第几次连接的id标识。</p><p>也可以在命令行通过以下方式获取MySQL Server服务版本的信息：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">c:</span>\&gt; mysql -V<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">c:\&gt; mysql <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>或<strong>登录</strong>后，通过以下方式查看当前版本信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mysql&gt; <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">version</span>()</span>;<br></code></pre></td></tr></table></figure><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br>或<br>quit<br></code></pre></td></tr></table></figure><h2 id="4-MySQL演示使用"><a href="#4-MySQL演示使用" class="headerlink" title="4. MySQL演示使用"></a>4. MySQL演示使用</h2><h3 id="4-1-MySQL的使用演示"><a href="#4-1-MySQL的使用演示" class="headerlink" title="4.1 MySQL的使用演示"></a>4.1 MySQL的使用演示</h3><p>1、查看所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure><blockquote><p>“information_schema”是 MySQL 系统自带的数据库，主要保存 MySQL 数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件 所在的文件夹和系统使用的文件夹，等等</p><p>“performance_schema”是 MySQL 系统自带的数据库，可以用来监控 MySQL 的各类性能指标。 </p><p>“sys”数据库是 MySQL 系统自带的数据库，主要作用是以一种更容易被理解的方式展示 MySQL 数据库服务器的各类性能指标，帮助系统管理员和开发人员监控 MySQL 的技术性能。 </p><p>“mysql”数据库保存了 MySQL 数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等</p></blockquote><p>为什么 Workbench 里面我们只能看到“demo”和“sys”这 2 个数据库呢？ </p><p>这是因为，Workbench 是图形化的管理工具，主要面向开发人 员，“demo”和“sys”这 2 个数据库已经够用了。如果有特殊需求，比如，需要监控 MySQL 数据库各项性能指标、直接操作 MySQL 数据库系统文件等，可以由 DBA 通过 SQL 语句，查看其它的系统数据库。</p><p>2、创建自己的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database 数据库名;<br><br>#创建atguigudb数据库，该名称不能与已经存在的数据库重名。<br>create database atguigudb;<br></code></pre></td></tr></table></figure><p>3、使用自己的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名;<br><br>#使用atguigudb数据库<br>use atguigudb;<br></code></pre></td></tr></table></figure><p>说明：如果没有使用use语句，后面针对数据库的操作也没有加“数据名”的限定，那么会报“ERROR 1046 (3D000): No database selected”（没有选择数据库）</p><p>使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另一个数据库操作，那么要重新use。</p><p>4、查看某个库的所有表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;  #要求前面有use语句<br><br>show tables from 数据库名;<br></code></pre></td></tr></table></figure><p>5、创建新的表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>字段名 数据类型<br>);<br></code></pre></td></tr></table></figure><p>说明：如果是最后一个字段，后面就用加逗号，因为逗号的作用是分割每个字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建学生表<br>create table student(<br>id int,<br>    name varchar(20)  #说名字最长不超过20个字符<br>);<br></code></pre></td></tr></table></figure><p>6、查看一个表的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from 数据库表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看学生表的数据<br>select * from student;<br></code></pre></td></tr></table></figure><p>7、添加一条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 values(值列表);<br><br>#添加两条记录到student表中<br>insert into student values(1,&#x27;张三&#x27;);<br>insert into student values(2,&#x27;李四&#x27;);<br></code></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; insert into student values(1,&#x27;张三&#x27;);<br>ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;name&#x27; at row 1<br>mysql&gt; insert into student values(2,&#x27;李四&#x27;);<br>ERROR 1366 (HY000): Incorrect string value: &#x27;\xC0\xEE\xCB\xC4&#x27; for column &#x27;name&#x27; at row 1<br>mysql&gt; show create table student;<br></code></pre></td></tr></table></figure><p>字符集的问题。</p><p>8、查看表的创建信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table 表名称\G<br><br><br>#查看student表的详细创建信息<br>show create table student\G<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#结果如下<br>*************************** 1. row ***************************<br>       Table: student<br>Create Table: CREATE TABLE `student` (<br>  `id` int(11) DEFAULT NULL,<br>  `name` varchar(20) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>上面的结果显示student的表格的默认字符集是“latin1”不支持中文。</p><p>9、查看数据库的创建信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create database 数据库名\G<br><br>#查看atguigudb数据库的详细创建信息<br>show create database atguigudb\G<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#结果如下<br>*************************** 1. row ***************************<br>       Database: atguigudb<br>Create Database: CREATE DATABASE `atguigudb` /*!40100 DEFAULT CHARACTER SET latin1 */<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>上面的结果显示atguigudb数据库也不支持中文，字符集默认是latin1。</p><p>10、删除表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table 表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除学生表<br>drop table student;<br></code></pre></td></tr></table></figure><p>11、删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除atguigudb数据库<br>drop database atguigudb;<br></code></pre></td></tr></table></figure><h3 id="4-2-MySQL的编码设置"><a href="#4-2-MySQL的编码设置" class="headerlink" title="4.2 MySQL的编码设置"></a>4.2 MySQL的编码设置</h3><h4 id="MySQL5-7中"><a href="#MySQL5-7中" class="headerlink" title="MySQL5.7中"></a>MySQL5.7中</h4><p><strong>问题再现：命令行操作sql乱码问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO t_stu VALUES(1,&#x27;张三&#x27;,&#x27;男&#x27;);<br>ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;sname&#x27; at row 1<br></code></pre></td></tr></table></figure><p><strong>问题解决</strong></p><p>步骤1：查看编码命令</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;character_%&#x27;</span>;<br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;collation_%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>步骤2：修改mysql的数据目录下的my.ini配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span>  <span class="hljs-comment">#大概在63行左右，在其下添加</span><br>... <br><span class="hljs-attr">default-character-set</span>=utf8  <span class="hljs-comment">#默认字符集</span><br><br><span class="hljs-section">[mysqld]</span>  <span class="hljs-comment"># 大概在76行左右，在其下添加</span><br>...<br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-attr">collation-server</span>=utf8_general_ci<br></code></pre></td></tr></table></figure><blockquote><p>注意：建议修改配置文件使用notepad++等高级文本编辑器，使用记事本等软件打开修改后可能会导致文件编码修改为“含BOM头”的编码，从而服务重启失败。</p></blockquote><p>步骤3：重启服务</p><p>步骤4：查看编码命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;character_%&#x27;</span>;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;collation_%&#x27;</span>;<br></code></pre></td></tr></table></figure><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/MySQL编码1.jpg" style="zoom:90%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/MySQL编码2.jpg" style="zoom:90%;" /><ul><li>如果是以上配置就说明对了。接着我们就可以新创建数据库、新创建数据表，接着添加包含中文的数据了。</li></ul><h4 id="MySQL8-0中"><a href="#MySQL8-0中" class="headerlink" title="MySQL8.0中"></a>MySQL8.0中</h4><p>在MySQL 8.0版本之前，默认字符集为latin1，utf8字符集指向的是utf8mb3。网站开发人员在数据库设计的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL 8.0开始，数据库的默认编码改为<code>utf8mb4</code>，从而避免了上述的乱码问题。</p><h2 id="5-MySQL图形化管理工具"><a href="#5-MySQL图形化管理工具" class="headerlink" title="5. MySQL图形化管理工具"></a>5. MySQL图形化管理工具</h2><p>MySQL图形化管理工具极大地方便了数据库的操作与管理，常用的图形化管理工具有：MySQL Workbench、phpMyAdmin、Navicat Preminum、MySQLDumper、SQLyog、dbeaver、MySQL ODBC Connector。</p><h3 id="工具1-MySQL-Workbench"><a href="#工具1-MySQL-Workbench" class="headerlink" title="工具1. MySQL Workbench"></a>工具1. MySQL Workbench</h3><p>MySQL官方提供的图形化管理工具MySQL Workbench完全支持MySQL 5.0以上的版本。MySQL Workbench分为社区版和商业版，社区版完全免费，而商业版则是按年收费。</p><p>MySQL Workbench 为数据库管理员、程序开发者和系统规划师提供可视化设计、模型建立、以及数据库管理功能。它包含了用于创建复杂的数据建模ER模型，正向和逆向数据库工程，也可以用于执行通常需要花费大量时间的、难以变更和管理的文档任务。</p><p>下载地址：<a href="http://dev.mysql.com/downloads/workbench/%E3%80%82">http://dev.mysql.com/downloads/workbench/。</a></p><p>使用：</p><p>首先，我们点击 Windows 左下角的“开始”按钮，如果你是 Win10 系统，可以直接看到所有程序。接着，找到“MySQL”，点开，找到“MySQL Workbench 8.0 CE”。点击打开 Workbench，如下图所示：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211007153522427.png" alt="image-20211007153522427"></p><p>左下角有个本地连接，点击，录入 Root 的密码，登录本地 MySQL 数据库服务器，如下图所示：</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195108502.png" alt="image-20211014195108502" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195129219.png" alt="image-20211014195129219" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195142849.png" alt="image-20211014195142849" style="zoom:80%;" /><p>这是一个图形化的界面，我来给你介绍下这个界面。 </p><ul><li><p>上方是菜单。左上方是导航栏，这里我们可以看到 MySQL 数据库服务器里面的数据 库，包括数据表、视图、存储过程和函数；左下方是信息栏，可以显示上方选中的数据 库、数据表等对象的信息。 </p></li><li><p>中间上方是工作区，你可以在这里写 SQL 语句，点击上方菜单栏左边的第三个运行按 钮，就可以执行工作区的 SQL 语句了。 </p></li><li><p>中间下方是输出区，用来显示 SQL 语句的运行情况，包括什么时间开始运行的、运行的 内容、运行的输出，以及所花费的时长等信息。</p></li></ul><p>好了，下面我们就用 Workbench 实际创建一个数据库，并且导入一个 Excel 数据文件， 来生成一个数据表。数据表是存储数据的载体，有了数据表以后，我们就能对数据进行操作了。 </p><h3 id="工具2-Navicat"><a href="#工具2-Navicat" class="headerlink" title="工具2. Navicat"></a>工具2. Navicat</h3><p>Navicat MySQL是一个强大的MySQL数据库服务器管理和开发工具。它可以与任何3.21或以上版本的MySQL一起工作，支持触发器、存储过程、函数、事件、视图、管理用户等，对于新手来说易学易用。其精心设计的图形用户界面（GUI）可以让用户用一种安全简便的方式来快速方便地创建、组织、访问和共享信息。Navicat支持中文，有免费版本提供。<br>下载地址：<a href="http://www.navicat.com/%E3%80%82">http://www.navicat.com/。</a></p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1557378069584.png" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210913180359685.png" alt="image-20210913180359685" style="zoom:80%;" /><h3 id="工具3-SQLyog"><a href="#工具3-SQLyog" class="headerlink" title="工具3. SQLyog"></a>工具3. SQLyog</h3><p>SQLyog 是业界著名的 Webyog 公司出品的一款简洁高效、功能强大的图形化 MySQL 数据库管理工具。这款工具是使用C++语言开发的。该工具可以方便地创建数据库、表、视图和索引等，还可以方便地进行插入、更新和删除等操作，同时可以方便地进行数据库、数据表的备份和还原。该工具不仅可以通过SQL文件进行大量文件的导入和导出，还可以导入和导出XML、HTML和CSV等多种格式的数据。<br>下载地址：<a href="http://www.webyog.com/%EF%BC%8C%E8%AF%BB%E8%80%85%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E4%B8%AD%E6%96%87%E7%89%88%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E3%80%82">http://www.webyog.com/，读者也可以搜索中文版的下载地址。</a></p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014213018979.png" alt="image-20211014213018979" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014213036470.png" alt="image-20211014213036470" style="zoom:80%;" /><h3 id="工具4：dbeaver"><a href="#工具4：dbeaver" class="headerlink" title="工具4：dbeaver"></a>工具4：dbeaver</h3><p>DBeaver是一个通用的数据库管理工具和 SQL 客户端，支持所有流行的数据库：MySQL、PostgreSQL、SQLite、Oracle、DB2、SQL Server、 Sybase、MS Access、Teradata、 Firebird、Apache Hive、Phoenix、Presto等。DBeaver比大多数的SQL管理工具要轻量，而且支持中文界面。DBeaver社区版作为一个免费开源的产品，和其他类似的软件相比，在功能和易用性上都毫不逊色。</p><p>唯一需要注意是 DBeaver 是用Java编程语言开发的，所以需要拥有 JDK（Java Development ToolKit）环境。如果电脑上没有JDK，在选择安装DBeaver组件时，勾选“Include Java”即可。</p><p>下载地址：<a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195237457.png" alt="image-20211014195237457" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195251371.png" alt="image-20211014195251371" style="zoom:75%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195300510.png" alt="image-20211014195300510" style="zoom:80%;" /><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211014195309805.png" alt="image-20211014195309805" style="zoom:70%;" /><h3 id="可能出现连接问题："><a href="#可能出现连接问题：" class="headerlink" title="可能出现连接问题："></a>可能出现连接问题：</h3><p>有些图形界面工具，特别是旧版本的图形界面工具，在连接MySQL8时出现“Authentication plugin ‘caching_sha2_password’ cannot be loaded”错误。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211019215249254.png" alt="image-20211019215249254" style="zoom:80%;" /><p>出现这个原因是MySQL8之前的版本中加密规则是mysql_native_password，而在MySQL8之后，加密规则是caching_sha2_password。解决问题方法有两种，第一种是升级图形界面工具版本，第二种是把MySQL8用户登录密码加密规则还原成mysql_native_password。</p><p>第二种解决方案如下，用命令行登录MySQL数据库之后，执行如下命令修改用户密码加密规则并更新用户密码，这里修改用户名为“root@localhost”的用户密码规则为“mysql_native_password”，密码值为“123456”，如图所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#使用mysql数据库<br>USE mysql; <br><br>#修改&#x27;root&#x27;@&#x27;localhost&#x27;用户的密码规则和密码<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;abc123&#x27;; <br><br>#刷新权限<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211019215408965.png" alt="image-20211019215408965" style="zoom:80%;" /><h2 id="6-MySQL目录结构与源码"><a href="#6-MySQL目录结构与源码" class="headerlink" title="6. MySQL目录结构与源码"></a>6. MySQL目录结构与源码</h2><h3 id="6-1-主要目录结构"><a href="#6-1-主要目录结构" class="headerlink" title="6.1 主要目录结构"></a>6.1 主要目录结构</h3><table><thead><tr><th>MySQL的目录结构</th><th>说明</th></tr></thead><tbody><tr><td>bin目录</td><td>所有MySQL的可执行文件。如：mysql.exe</td></tr><tr><td>MySQLInstanceConfig.exe</td><td>数据库的配置向导，在安装时出现的内容</td></tr><tr><td>data目录</td><td>系统数据库所在的目录</td></tr><tr><td>my.ini文件</td><td>MySQL的主要配置文件</td></tr><tr><td>c:\ProgramData\MySQL\MySQL Server 8.0\data\</td><td>用户创建的数据库所在的目录</td></tr></tbody></table><h3 id="6-2-MySQL-源代码获取"><a href="#6-2-MySQL-源代码获取" class="headerlink" title="6.2 MySQL 源代码获取"></a>6.2 MySQL 源代码获取</h3><p>首先，你要进入 MySQL下载界面。 这里你不要选择用默认的“Microsoft Windows”，而是要通过下拉栏，找到“Source Code”，在下面的操作系统版本里面， 选择 Windows（Architecture Independent），然后点击下载。 </p><p>接下来，把下载下来的压缩文件解压，我们就得到了 MySQL 的源代码。</p><p>MySQL 是用 C++ 开发而成的，我简单介绍一下源代码的组成。 </p><p>mysql-8.0.22 目录下的各个子目录，包含了 MySQL 各部分组件的源代码： </p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211007154113052.png" alt="image-20211007154113052"></p><ul><li><p>sql 子目录是 MySQL 核心代码；</p></li><li><p>libmysql 子目录是客户端程序 API；</p></li><li><p>mysql-test 子目录是测试工具；</p></li><li><p>mysys 子目录是操作系统相关函数和辅助函数；</p></li></ul><p>源代码可以用记事本打开查看，如果你有 C++ 的开发环境，也可以在开发环境中打开查看。 </p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211007154213156.png" alt="image-20211007154213156"></p><p>如上图所示，源代码并不神秘，就是普通的 C++ 代码，跟你熟悉的一样，而且有很多注释，可以帮助你理解。阅读源代码就像在跟 MySQL 的开发人员对话一样，十分有趣。</p><h2 id="7-常见问题的解决-课外内容"><a href="#7-常见问题的解决-课外内容" class="headerlink" title="7. 常见问题的解决(课外内容)"></a>7. 常见问题的解决(课外内容)</h2><h3 id="问题1：root用户密码忘记，重置的操作"><a href="#问题1：root用户密码忘记，重置的操作" class="headerlink" title="问题1：root用户密码忘记，重置的操作"></a>问题1：root用户密码忘记，重置的操作</h3><p>1: 通过任务管理器或者服务管理，关掉mysqld(服务进程)<br>2: 通过命令行+特殊参数开启mysqld<br>mysqld –defaults-file&#x3D;”D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini” –skip-grant-tables</p><p>3: 此时，mysqld服务进程已经打开。并且不需要权限检查<br>4: mysql -uroot 无密码登陆服务器。另启动一个客户端进行<br>5: 修改权限表<br>（1） use mysql;<br>（2）update user set authentication_string&#x3D;password(‘新密码’) where user&#x3D;’root’ and Host&#x3D;’localhost’;<br>（3）flush privileges;<br>6: 通过任务管理器，关掉mysqld服务进程。<br>7: 再次通过服务管理，打开mysql服务。<br>8: 即可用修改后的新密码登陆。</p><h3 id="问题2：mysql命令报“不是内部或外部命令”"><a href="#问题2：mysql命令报“不是内部或外部命令”" class="headerlink" title="问题2：mysql命令报“不是内部或外部命令”"></a>问题2：mysql命令报“不是内部或外部命令”</h3><p>如果输入mysql命令报“不是内部或外部命令”，把mysql安装目录的bin目录配置到环境变量path中。如下：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914093150145.png" alt="image-20210914093150145"></p><h3 id="问题3：错误ERROR-：没有选择数据库就操作表格和数据"><a href="#问题3：错误ERROR-：没有选择数据库就操作表格和数据" class="headerlink" title="问题3：错误ERROR ：没有选择数据库就操作表格和数据"></a>问题3：错误ERROR ：没有选择数据库就操作表格和数据</h3><table><thead><tr><th>ERROR 1046 (3D000): No database selected</th></tr></thead><tbody><tr><td>解决方案一：就是使用“USE 数据库名;”语句，这样接下来的语句就默认针对这个数据库进行操作</td></tr><tr><td>解决方案二：就是所有的表对象前面都加上“数据库.”</td></tr></tbody></table><h3 id="问题4：命令行客户端的字符集问题"><a href="#问题4：命令行客户端的字符集问题" class="headerlink" title="问题4：命令行客户端的字符集问题"></a>问题4：命令行客户端的字符集问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO t_stu VALUES(1,&#x27;张三&#x27;,&#x27;男&#x27;);<br>ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;sname&#x27; at row 1<br></code></pre></td></tr></table></figure><p>原因：服务器端认为你的客户端的字符集是utf-8，而实际上你的客户端的字符集是GBK。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554912924219.png" alt="1554912924219"></p><p>查看所有字符集：<strong>SHOW VARIABLES LIKE ‘character_set_%’;</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554912943186.png" alt="1554912943186"></p><p>解决方案，设置当前连接的客户端字符集 <strong>“SET NAMES GBK;”</strong></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/1554912957353.png" alt="1554912957353"></p><h3 id="问题5：修改数据库和表的字符编码"><a href="#问题5：修改数据库和表的字符编码" class="headerlink" title="问题5：修改数据库和表的字符编码"></a>问题5：修改数据库和表的字符编码</h3><p>修改编码：</p><p>（1)先停止服务，（2）修改my.ini文件（3）重新启动服务</p><p>说明：</p><p>如果是在修改my.ini之前建的库和表，那么库和表的编码还是原来的Latin1，要么删了重建，要么使用alter语句修改编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create database 0728db charset Latin1;<br>Query OK, 1 row affected (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql&gt; use <span class="hljs-number">0728</span>db<span class="hljs-comment">;</span><br>Database changed<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table student (id int , name varchar(20)) charset Latin1;<br>Query OK, 0 rows affected (0.02 sec)<br><br><br>mysql&gt; show create table student\G<br>*************************** 1. row ***************************<br>       Table: student<br>Create Table: CREATE TABLE `student` (<br>  `id` int(11) NOT NULL,<br>  `name` varchar(20) DEFAULT NULL,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; alter table student charset utf8; #修改表字符编码为UTF8<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br><br>mysql&gt; show create table student\G<br>*************************** 1. row ***************************<br>       Table: student<br>Create Table: CREATE TABLE `student` (<br>  `id` int(11) NOT NULL,<br>  `name` varchar(20) CHARACTER SET latin1 DEFAULT NULL,  #字段仍然是latin1编码<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br>1 row in set (0.00 sec)<br><br><br>mysql&gt; alter table student modify name varchar(20) charset utf8; #修改字段字符编码为UTF8<br>Query OK, 0 rows affected (0.05 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br><br>mysql&gt; show create table student\G<br>*************************** 1. row ***************************<br>       Table: student<br>Create Table: CREATE TABLE `student` (<br>  `id` int(11) NOT NULL,<br>  `name` varchar(20) DEFAULT NULL,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show create database 0728db;;<br>+--------+-----------------------------------------------------------------+<br>|Database| Create Database                                                 |<br>+------+-------------------------------------------------------------------+<br>|0728db| CREATE DATABASE `0728db` /*!40100 DEFAULT CHARACTER SET latin1 */ |<br>+------+-------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br><br><br>mysql&gt; alter database 0728db charset utf8; #修改数据库的字符编码为utf8<br>Query OK, 1 row affected (0.00 sec)<br><br><br>mysql&gt; show create database 0728db;<br>+--------+-----------------------------------------------------------------+<br>|Database| Create Database                                                 |<br>+--------+-----------------------------------------------------------------+<br>| 0728db | CREATE DATABASE `0728db` /*!40100 DEFAULT CHARACTER SET utf8 */ |<br>+--------+-----------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql01数据库概述</title>
    <link href="/2023/04/11/sql01%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/04/11/sql01%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第01章-数据库概述"><a href="#第01章-数据库概述" class="headerlink" title="第01章_数据库概述"></a>第01章_数据库概述</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-为什么要使用数据库"><a href="#1-为什么要使用数据库" class="headerlink" title="1. 为什么要使用数据库"></a>1. 为什么要使用数据库</h2><ul><li>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘上加以”固化”</strong>，而持久化的实现过程大多通过各种关系数据库来完成。</li><li>持久化的主要作用是<strong>将内存中的数据存储在关系型数据库中</strong>，当然也可以存储在磁盘文件、XML数据文件中。</li></ul><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211020202152071.png" alt="image-20211020202152071" style="zoom:50%;" /><p>生活中的例子：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image_20211020132711.jpg"></p><h2 id="2-数据库与数据库管理系统"><a href="#2-数据库与数据库管理系统" class="headerlink" title="2. 数据库与数据库管理系统"></a>2. 数据库与数据库管理系统</h2><h3 id="2-1-数据库的相关概念"><a href="#2-1-数据库的相关概念" class="headerlink" title="2.1 数据库的相关概念"></a>2.1 数据库的相关概念</h3><table><thead><tr><th><strong>DB：数据库（Database）</strong></th></tr></thead><tbody><tr><td>即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</td></tr><tr><td><strong>DBMS：数据库管理系统（Database Management System）</strong></td></tr><tr><td>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据。</td></tr><tr><td><strong>SQL：结构化查询语言（Structured Query Language）</strong></td></tr><tr><td>专门用来与数据库通信的语言。</td></tr></tbody></table><h3 id="2-2-数据库与数据库管理系统的关系"><a href="#2-2-数据库与数据库管理系统的关系" class="headerlink" title="2.2 数据库与数据库管理系统的关系"></a>2.2 数据库与数据库管理系统的关系</h3><p>数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。 </p><p>数据库管理系统、数据库和表的关系如图所示：</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211013202511233.png" alt="image-20211013202511233"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210915112546261.png" alt="image-20210915112546261"></p><h3 id="2-3-常见的数据库管理系统排名-DBMS"><a href="#2-3-常见的数据库管理系统排名-DBMS" class="headerlink" title="2.3 常见的数据库管理系统排名(DBMS)"></a>2.3 常见的数据库管理系统排名(DBMS)</h3><p>目前互联网上常见的数据库管理软件有Oracle、MySQL、MS SQL Server、DB2、PostgreSQL、Access、Sybase、Informix这几种。以下是2021年<strong>DB-Engines Ranking</strong> 对各数据库受欢迎程度进行调查后的统计结果：（查看数据库最新排名:<a href="https://db-engines.com/en/ranking%EF%BC%89">https://db-engines.com/en/ranking）</a></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211013202815851.png" alt="image-20211013202815851"></p><p>。。。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211013202940798.png" alt="image-20211013202940798"></p><p>对应的走势图：（<a href="https://db-engines.com/en/ranking_trend%EF%BC%89">https://db-engines.com/en/ranking_trend）</a></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211013203029492.png" alt="image-20211013203029492"></p><h3 id="2-4-常见的数据库介绍"><a href="#2-4-常见的数据库介绍" class="headerlink" title="2.4 常见的数据库介绍"></a>2.4 常见的数据库介绍</h3><p><strong>Oracle</strong></p><p>1979 年，Oracle 2 诞生，它是第一个商用的 RDBMS（关系型数据库管理系统）。随着 Oracle 软件的名气越来越大，公司也改名叫 Oracle 公司。</p><p>2007年，总计85亿美金收购BEA Systems。</p><p>2009年，总计74亿美金收购SUN。此前的2008年，SUN以10亿美金收购MySQL。意味着Oracle 同时拥有了 MySQL 的管理权，至此 Oracle 在数据库领域中成为绝对的领导者。</p><p>2013年，甲骨文超越IBM，成为继Microsoft后全球第二大软件公司。</p><p>如今 Oracle 的年收入达到了 400 亿美金，足以证明商用（收费）数据库软件的价值。</p><p><strong>SQL Server</strong></p><p>SQL Server 是微软开发的大型商业数据库，诞生于 1989 年。C#、.net等语言常使用，与WinNT完全集成，也可以很好地与Microsoft BackOffice产品集成。</p><p><strong>DB2</strong></p><p>IBM公司的数据库产品,收费的。常应用在银行系统中。</p><p><strong>PostgreSQL</strong></p><p>PostgreSQL 的稳定性极强，最符合SQL标准，开放源码，具备商业级DBMS质量。PG对数据量大的文本以及SQL处理较快。</p><p><strong>SyBase</strong></p><p>已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。 </p><p><strong>SQLite</strong></p><p>嵌入式的小型数据库，应用在手机端。 零配置，SQlite3不用安装，不用配置，不用启动，关闭或者配置数据库实例。当系统崩溃后不用做任何恢复操作，再下次使用数据库的时候自动恢复。</p><p><strong>informix</strong></p><p>IBM公司出品，取自Information 和Unix的结合，它是第一个被移植到Linux上的商业数据库产品。仅运行于unix&#x2F;linux平台，命令行操作。 性能较高，支持集群，适应于安全性要求极高的系统，尤其是银行，证券系统的应用。  </p><h2 id="3-MySQL介绍"><a href="#3-MySQL介绍" class="headerlink" title="3. MySQL介绍"></a>3. MySQL介绍</h2><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210829230656830.png" alt="image-20210829230656830"></p><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ul><li>MySQL是一个<code>开放源代码的关系型数据库管理系统</code>，由瑞典MySQL AB（创始人Michael Widenius）公司1995年开发，迅速成为开源数据库的 No.1。</li><li>2008被<code>Sun</code>收购（10亿美金），2009年Sun被<code>Oracle</code>收购。<code>MariaDB</code>应运而生。（MySQL 的创造者担心 MySQL 有闭源的风险，因此创建了 MySQL 的分支项目 MariaDB）</li><li>MySQL6.x 版本之后分为<code>社区版</code>和<code>商业版</code>。</li><li>MySQL是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>MySQL是开源的，所以你不需要支付额外的费用。</li><li>MySQL是可以定制的，采用了<code>GPL（GNU General Public License）</code>协议，你可以修改源码来开发自己的MySQL系统。</li><li>MySQL支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL支持大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大可支持<code>4GB</code>，64位系统支持最大的表文件为<code>8TB</code>。</li><li>MySQL使用<code>标准的SQL数据语言</code>形式。</li><li>MySQL可以允许运行于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP和Ruby等。</li></ul><h3 id="3-2-MySQL发展史重大事件"><a href="#3-2-MySQL发展史重大事件" class="headerlink" title="3.2 MySQL发展史重大事件"></a>3.2 MySQL发展史重大事件</h3><p>MySQL的历史就是整个互联网的发展史。互联网业务从社交领域、电商领域到金融领域的发展，推动着应用对数据库的需求提升，对传统的数据库服务能力提出了挑战。高并发、高性能、高可用、轻资源、易维护、易扩展的需求，促进了MySQL的长足发展。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210730161043856.png" alt="image-20210730161043856"></p><h3 id="1-4-关于MySQL-8-0"><a href="#1-4-关于MySQL-8-0" class="headerlink" title="1.4 关于MySQL 8.0"></a>1.4 关于MySQL 8.0</h3><p><code>MySQL从5.7版本直接跳跃发布了8.0版本</code>，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="1-5-Why-choose-MySQL"><a href="#1-5-Why-choose-MySQL" class="headerlink" title="1.5 Why choose MySQL?"></a>1.5 Why choose MySQL?</h3><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211013210429011.png" alt="image-20211013210429011"></p><p>为什么如此多的厂商要选用MySQL？大概总结的原因主要有以下几点：</p><ol><li><p>   开放源代码，使用成本低。</p></li><li><p>   性能卓越，服务稳定。</p></li><li><p>   软件体积小，使用简单，并且易于维护。</p></li><li><p>   历史悠久，社区用户非常活跃，遇到问题可以寻求帮助。</p></li><li><p>   许多互联网公司在用，经过了时间的验证。</p></li></ol><h3 id="1-6-Oracle-vs-MySQL"><a href="#1-6-Oracle-vs-MySQL" class="headerlink" title="1.6 Oracle vs MySQL"></a>1.6 Oracle vs MySQL</h3><p>Oracle 更适合大型跨国企业的使用，因为他们对费用不敏感，但是对性能要求以及安全性有更高的要求。</p><p>MySQL 由于其<strong>体积小、速度快、总体拥有成本低，可处理上千万条记录的大型数据库，尤其是开放源码这一特点，使得很多互联网公司、中小型网站选择了MySQL作为网站数据库</strong>（Facebook，Twitter，YouTube，阿里巴巴&#x2F;蚂蚁金服，去哪儿，美团外卖，腾讯）。</p><h2 id="4-RDBMS-与-非RDBMS"><a href="#4-RDBMS-与-非RDBMS" class="headerlink" title="4. RDBMS 与 非RDBMS"></a>4. RDBMS 与 非RDBMS</h2><p>从排名中我们能看出来，关系型数据库绝对是 DBMS 的主流，其中使用最多的 DBMS 分别是 Oracle、MySQL 和 SQL Server。这些都是关系型数据库（RDBMS）。</p><h3 id="4-1-关系型数据库-RDBMS"><a href="#4-1-关系型数据库-RDBMS" class="headerlink" title="4.1 关系型数据库(RDBMS)"></a>4.1 关系型数据库(RDBMS)</h3><h4 id="4-1-1-实质"><a href="#4-1-1-实质" class="headerlink" title="4.1.1 实质"></a>4.1.1 实质</h4><ul><li><p>这种类型的数据库是<code>最古老</code>的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的<code>二元关系</code>（即二维表格形式）。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211020145811031.png" alt="image-20211020145811031"></p></li><li><p>关系型数据库以<code>行(row)</code>和<code>列(column)</code>的形式存储数据，以便于用户理解。这一系列的行和列被称为<code>表(table)</code>，一组表组成了一个库(database)。</p></li><li><p>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用<code>关系模型</code>来表示。关系型数据库，就是建立在<code>关系模型</code>基础上的数据库。</p></li><li><p>SQL 就是关系型数据库的查询语言。</p></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914235413708.png" alt="image-20210914235413708"></p><h4 id="4-1-2-优势"><a href="#4-1-2-优势" class="headerlink" title="4.1.2 优势"></a>4.1.2 优势</h4><ul><li><strong>复杂查询</strong><br>可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li><strong>事务支持</strong><br>使得对于安全性能很高的数据访问要求得以实现。</li></ul><h3 id="4-2-非关系型数据库-非RDBMS"><a href="#4-2-非关系型数据库-非RDBMS" class="headerlink" title="4.2 非关系型数据库(非RDBMS)"></a>4.2 非关系型数据库(非RDBMS)</h3><h4 id="4-2-1-介绍"><a href="#4-2-1-介绍" class="headerlink" title="4.2.1 介绍"></a>4.2.1 介绍</h4><p><strong>非关系型数据库</strong>，可看成传统关系型数据库的功能<code>阉割版本</code>，基于键值对存储数据，不需要经过SQL层的解析，<code>性能非常高</code>。同时，通过减少不常用的功能，进一步提高性能。</p><p>目前基本上大部分主流的非关系型数据库都是免费的。</p><h4 id="4-2-2-有哪些非关系型数据库"><a href="#4-2-2-有哪些非关系型数据库" class="headerlink" title="4.2.2 有哪些非关系型数据库"></a>4.2.2 有哪些非关系型数据库</h4><p>相比于 SQL，NoSQL 泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和列存储等，除此以外还包括图形数据库。也只有用 NoSQL 一词才能将这些技术囊括进来。</p><p><strong>键值型数据库</strong></p><p>键值型数据库通过 Key-Value 键值的方式来存储数据，其中 Key 和 Value 可以是简单的对象，也可以是复杂的对象。Key 作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法像关系型数据库一样使用条件过滤（比如 WHERE），如果你不知道去哪里找数据，就要遍历所有的键，这就会消耗大量的计算。</p><p>键值型数据库典型的使用场景是作为<code>内存缓存</code>。<code>Redis </code>是最流行的键值型数据库。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211020172958427.png" alt="image-20211020172958427"></p><p><strong>文档型数据库</strong></p><p>此类数据库可存放并获取文档，可以是XML、JSON等格式。在数据库中文档作为处理信息的基本单位，一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB 是最流行的文档型数据库。此外，还有CouchDB等。</p><p><strong>搜索引擎数据库</strong></p><p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。核心原理是“倒排索引”。</p><p>典型产品：Solr、Elasticsearch、Splunk 等。</p><p><strong>列式数据库</strong></p><p>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server 等数据库都是采用的行式存储（Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的 I&#x2F;O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase等。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211020173921726.png" alt="image-20211020173921726"></p><p><strong>图形数据库</strong></p><p>图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关系问题。</p><p>图形数据库顾名思义，就是一种存储图形关系的数据库。它利用了图这种数据结构存储了实体（对象）之间的关系。关系型数据用于存储明确关系的数据，但对于复杂关系的数据存储却有些力不从心。如社交网络中人物之间的关系，如果用关系型数据库则非常复杂，用图形数据库将非常简单。典型产品：Neo4J、InfoGrid等。</p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20211020180934455.png" alt="image-20211020180934455" style="zoom:80%;" /><h4 id="4-2-3-NoSQL的演变"><a href="#4-2-3-NoSQL的演变" class="headerlink" title="4.2.3 NoSQL的演变"></a>4.2.3 NoSQL的演变</h4><p>由于 SQL 一直称霸 DBMS，因此许多人在思考是否有一种数据库技术能远离 SQL，于是 NoSQL 诞生了，但是随着发展却发现越来越离不开 SQL。到目前为止 NoSQL 阵营中的 DBMS 都会有实现类似 SQL 的功能。下面是“NoSQL”这个名词在不同时期的诠释，从这些释义的变化中可以看出 <code>NoSQL 功能的演变</code>：</p><p>1970：NoSQL &#x3D; We have no SQL</p><p>1980：NoSQL &#x3D; Know SQL</p><p>2000：NoSQL &#x3D; No SQL!</p><p>2005：NoSQL &#x3D; Not only SQL</p><p>2013：NoSQL &#x3D; No, SQL!</p><p>NoSQL 对 SQL 做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能，非关系型数据库的功能就足够使用了。这种情况下，使用<code>性能更高</code>、<code>成本更低</code>的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><h3 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h3><p>NoSQL 的分类很多，即便如此，在 DBMS 排名中，还是 SQL 阵营的比重更大，影响力前 5 的 DBMS 中有 4 个是关系型数据库，而排名前 20 的 DBMS 中也有 12 个是关系型数据库。所以说，掌握 SQL 是非常有必要的。整套课程将围绕 SQL 展开。</p><h2 id="5-关系型数据库设计规则"><a href="#5-关系型数据库设计规则" class="headerlink" title="5. 关系型数据库设计规则"></a>5. 关系型数据库设计规则</h2><ul><li><p>关系型数据库的典型数据结构就是<code>数据表</code>，这些数据表的组成都是结构化的（Structured）。</p></li><li><p>将数据放到表中，表再放到库中。</p></li><li><p>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</p></li><li><p>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中 “类”的设计。</p></li></ul><h3 id="5-1-表、记录、字段"><a href="#5-1-表、记录、字段" class="headerlink" title="5.1 表、记录、字段"></a>5.1 表、记录、字段</h3><ul><li><p>E-R（entity-relationship，实体-联系）模型中有三个主要概念是：<code>实体集</code>、<code>属性</code>、<code>联系集</code>。</p></li><li><p>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列（column），也称为一个字段（field）。</p></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914235450032-1634141235163.png" alt="image-20210914235450032"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">ORM思想 (Object Relational Mapping)体现：<br>数据库中的一个表  &lt;---&gt; Java或Python中的一个类<br>表中的一条数据  &lt;---&gt; 类中的一个对象（或实体）<br>表中的一个列  &lt;----&gt; 类中的一个字段、属性(field)<br></code></pre></td></tr></table></figure><h3 id="5-2-表的关联关系"><a href="#5-2-表的关联关系" class="headerlink" title="5.2 表的关联关系"></a>5.2 表的关联关系</h3><ul><li><p>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</p></li><li><p>四种：一对一关联、一对多关联、多对多关联、自我引用</p></li></ul><h4 id="5-2-1-一对一关联（one-to-one）"><a href="#5-2-1-一对一关联（one-to-one）" class="headerlink" title="5.2.1 一对一关联（one-to-one）"></a>5.2.1 一对一关联（one-to-one）</h4><ul><li>在实际的开发中应用不多，因为一对一可以创建成一张表。</li><li>举例：设计<code>学生表</code>：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、…<ul><li><p>拆为两个表：两个表的记录是一一对应关系。</p></li><li><p><code>基础信息表</code>（常用信息）：学号、姓名、手机号码、班级、系别</p></li><li><p><code>档案信息表</code>（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、…</p></li></ul></li><li>两种建表原则： <ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。 </li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914235534452.png" alt="image-20210914235534452"></p><h4 id="5-2-2-一对多关系（one-to-many）"><a href="#5-2-2-一对多关系（one-to-many）" class="headerlink" title="5.2.2 一对多关系（one-to-many）"></a>5.2.2 一对多关系（one-to-many）</h4><ul><li>常见实例场景：<code>客户表和订单表</code>，<code>分类表和商品表</code>，<code>部门表和员工表</code>。</li><li>举例：<ul><li><p>员工表：编号、姓名、…、所属部门</p></li><li><p>部门表：编号、名称、简介</p></li></ul></li><li>一对多建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键</li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210915001013524.png" alt="image-20210915001013524"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914235610597.png" alt="image-20210914235610597"></p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210915084623432.png" alt="image-20210915084623432"></p><h4 id="5-2-3-多对多（many-to-many）"><a href="#5-2-3-多对多（many-to-many）" class="headerlink" title="5.2.3 多对多（many-to-many）"></a>5.2.3 多对多（many-to-many）</h4><p>要表示多对多关系，必须创建第三个表，该表通常称为<code>联接表</code>，它将多对多关系划分为两个一对多关系。将这两个表的主键都插入到第三个表中。</p><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210915001048215.png" alt="image-20210915001048215"></p><ul><li><p><strong>举例1：学生-课程</strong></p><ul><li><p><code>学生信息表</code>：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别…）</p></li><li><p><code>课程信息表</code>：一行代表一个课程的信息（课程编号、授课老师、简介…）</p></li><li><p><code>选课信息表</code>：一个学生可以选多门课，一门课可以被多个学生选择</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">学号</span>     <span class="hljs-string">课程编号</span>  <br><span class="hljs-number">1</span>        <span class="hljs-number">1001</span><br><span class="hljs-number">2</span>        <span class="hljs-number">1001</span><br><span class="hljs-number">1</span>        <span class="hljs-number">1002</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>举例2：产品-订单</strong></p><p>“订单”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。</p><ul><li><code>产品表</code>：“产品”表中的每条记录表示一个产品。</li><li><code>订单表</code>：“订单”表中的每条记录表示一个订单。</li><li><code>订单明细表</code>：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中。一个订单可以与“产品”表中的多条记录对应，即包含多个产品。</li></ul></li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210914235637068.png" alt="image-20210914235637068"></p><ul><li><strong>举例3：用户-角色</strong></li><li>多对多关系建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。</li></ul><p><img src="D:/workspace/notebook/MySQLmd笔记/mysql基础篇笔记/images/image-20210915084707586.png" alt="image-20210915084707586"></p><h4 id="5-3-4-自我引用-Self-reference"><a href="#5-3-4-自我引用-Self-reference" class="headerlink" title="5.3.4 自我引用(Self reference)"></a>5.3.4 自我引用(Self reference)</h4><p><img src="/images/image-20210914235651997.png" alt="image-20210914235651997"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01句子</title>
    <link href="/2023/04/07/01%E5%8F%A5%E5%AD%90/"/>
    <url>/2023/04/07/01%E5%8F%A5%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h3 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h3><h4 id="仅为摘抄"><a href="#仅为摘抄" class="headerlink" title="仅为摘抄"></a>仅为摘抄</h4><p>01：愿你我皆良人捏</p>]]></content>
    
    
    
    <tags>
      
      <tag>句子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/05/%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/04/05/%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21网络编程</title>
    <link href="/2023/04/02/21%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/02/21%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>B&#x2F;S架构：</p><p>优点 1、不需要开发客户端、只需要页面+服务端 </p><p>​         2、用户不需要下载，打开浏览器就可以下载</p><p> 如果要更新一个功能，修改产品，直接在服务器上修改就行，用户不需要动</p><p>  缺点：如果应用很大就会体验差、不够精美</p><p>C&#x2F;S架构：一般需要下载的应用就是C&#x2F;S架构</p><p>   优点：1、因为事先已经下载好了所有的资源，画面可以做的很精美，所以用户的体验很好           </p><p>   缺点 1、C&#x2F;S要同时开发客户端和服务端，开发、安装、部署、维护都很麻烦</p><p>​               </p><h1 id="2、网络编程三要素"><a href="#2、网络编程三要素" class="headerlink" title="2、网络编程三要素"></a>2、网络编程三要素</h1><ol><li>IP：是设备在网络中的地址是唯一的标识</li><li>端口号：是应用程序在设备中唯一标识</li><li>协议：数据在网络中传输的规则，常见的协议有 UDP、TCP、HTTP、HTTPs、FTP</li></ol><h2 id="1、IP"><a href="#1、IP" class="headerlink" title="1、IP"></a>1、IP</h2><p>常见IP： IPv4 、 IPV6</p><p>IPV4 32位地址长度分成4组；最多有 2 的32 次方个地址</p><p>IPv6 128 位地址长度，分成8组；最多有 2 的128 次方的地址</p><p>2、目前怎么解决IP不够的问题？</p><p>现在就是用局域网IP来解决 IPV4 不够的问题</p><p>3、特殊IP</p><p>127.0.0.1回环地址，也就是本机地址，永远只会寻找当前所在的本机，</p><p>和本机的地址不一样，</p><p>4、InetAddress的使用</p><p>表示互联网协议IP地址：</p><h2 id="2、端口号"><a href="#2、端口号" class="headerlink" title="2、端口号"></a>2、端口号</h2><p>应用程序在设备中的唯一标识；</p><ol><li>由俩个字节表示的整数，取值范围 1<del>65535；其中0</del>1023之间的端口号用于一些知名的网络服务或者应用；我们自己使用 1024以上的端口号就可以</li><li>一个端口号只能对应一个应用程序本身</li></ol><h2 id="3、协议"><a href="#3、协议" class="headerlink" title="3、协议"></a>3、协议</h2><p>在计算机网络中，连接和通信的规则，网路通信协议</p><ol><li><p>OSI：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p></li><li><p>TCP&#x2F;IP 协议：</p></li><li><p>传输协议  UDP：面向无连接通信协议：速度快、流量限制、数据不安全、容易丢失数据</p></li><li><p>传输协议  TCP：面向连接的通信协议：速度慢、没有大小限制、数据安全</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取本机的IP</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInetAddress</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><br>        <span class="hljs-comment">//static InetAddress getByname(String host) 确定主机名称可以是主机名称，也可以是IP地址</span><br>        <span class="hljs-comment">//string getHostNae() 获取此IP地址的字符串</span><br>        <span class="hljs-comment">//String getHostAddress() 返回文本显示中IP地址字符串</span><br><br>        <span class="hljs-comment">//1、获取InetAddress的对线</span><br>        <span class="hljs-comment">//ip 的对象，这就是一台电脑的对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;LAPTOP-EO6PU2UU&quot;</span>);<br>        System.out.println(address);  <span class="hljs-comment">//这个方法</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> address.getHostName();<br>        System.out.println(name);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> address.getHostAddress();<br>        System.out.println(ip);     <span class="hljs-comment">//192.168.56.1        </span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建端口发送数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//发送数据</span><br>        <span class="hljs-comment">//1、创建DatagramSocket对象（快递公司）</span><br>        <span class="hljs-comment">//绑定端口，以后通过这个端口发送数据</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        空参：所有可用的端口中随机一个进行使用</span><br><span class="hljs-comment">        有参：指定端口进行绑定</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>        <span class="hljs-comment">//2、打包数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好威啊！！！！&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = str.getBytes();<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span>  <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length,address, ds.getLocalPort());<br>           <span class="hljs-comment">//发送数据</span><br>        ds.send(dp);<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收端接收数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//接收数据</span><br>        <span class="hljs-comment">//1、创建DatagramSocket对象(快递公司)</span><br>        <span class="hljs-comment">//在接收的时候一定要绑定端口，手动绑定端口，这里的端口一定要和发送的端口一样</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10086</span>);<br><br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br><br>        ds.receive(dp);<br><br><br>        <span class="hljs-comment">//解析数据包</span><br>        <span class="hljs-type">byte</span> [] data = dp.getData();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp.getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> dp.getPort();<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> dp.getAddress();<br><br>        System.out.println(<span class="hljs-string">&quot;接收到数据&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,len));<br>        System.out.println(<span class="hljs-string">&quot;该数据是从&quot;</span>+address+<span class="hljs-string">&quot;这台电脑中的&quot;</span>+port+<span class="hljs-string">&quot;端口发出的&quot;</span>);<br>        <span class="hljs-comment">//释放资源</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UDP协议下发送与接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        按照下面的要求：</span><br><span class="hljs-comment">        1、UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span><br><span class="hljs-comment">        2、UDP接收数据，因为接收端不知道发送端什么时候停止发送，会采用死循环的方式接数据</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//1、创建对象DatagramSocket的对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//2、打包数据</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请输入您要说的话&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;886&quot;</span>.equals(str))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">byte</span>[] bytes = str.getBytes();<br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span>  <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length,address,port);<br><br>            <span class="hljs-comment">//3、发送数据</span><br>            ds.send(dp);<br>        &#125;<br>        <span class="hljs-comment">//4、释放资源</span><br>        ds.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        按照下面的要求：</span><br><span class="hljs-comment">        1、UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span><br><span class="hljs-comment">        2、UDP接收数据，因为接收端不知道发送端什么时候停止发送，会采用死循环的方式接数据</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10086</span>);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes,bytes.length);<br>        <span class="hljs-comment">//接收数据</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            ds.receive(dp);<br>            <span class="hljs-comment">//解析数据包</span><br>            <span class="hljs-type">byte</span>[] data = dp.getData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp.getLength();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> dp.getAddress().getHostAddress();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> dp.getAddress().getHostName();<br><br>            <span class="hljs-comment">//打印数据包</span><br>            System.out.println(<span class="hljs-string">&quot;ip为&quot;</span>+ip +<span class="hljs-string">&quot;主机名为：&quot;</span>+name+<span class="hljs-string">&quot;发送的数据包为：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,len));<br>            <br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UDP-的三种通信方式；"><a href="#UDP-的三种通信方式；" class="headerlink" title="UDP:的三种通信方式；"></a>UDP:的三种通信方式；</h3><ol><li><p>单播：</p><p>以前的代码就是单播</p></li><li><p>组播：</p><p>组播地址：224.0.0.0~239.255.255.255</p><p>其中224.0.0.0~224.0.0.255为预留的组播地址</p></li><li><p>广播：</p><p>广播地址：255.255.255.255</p></li></ol><h3 id="TCP的通信协议："><a href="#TCP的通信协议：" class="headerlink" title="TCP的通信协议："></a>TCP的通信协议：</h3><p>TCP是一种可靠的网络协议，他在通信的俩端各建立一个Socket的对象，通信之前要保证连接已经建立。</p><p>通过IO流来进行网络通信</p><p>客户端：</p><ol><li>创建客户端的Socket对象（Socket）与指定服务端连接 Socket（String host，int port）</li><li>获取输出流，写数据：OutputStream  getOutputStream</li><li>释放资源  void  close();</li></ol><p> 服务器：</p><ol><li>创建服务器端的Socket对象（ServerSocket)  ： ServerSocket(int port)</li><li>监听客户端连接，返回一个Socket对象  :   Socket accept()</li><li>获取输入流，读数据，并把数据显示在控制台上: InputStream  getInputStream()</li><li>释放资源:  void close()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCp 协议，发送数据</span><br>        <span class="hljs-comment">//1  创建Socket对象</span><br>        <span class="hljs-comment">//细节：在创建对象的同时会连接服务端</span><br>        <span class="hljs-comment">//如果连接不上就会报错</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务端反馈的消息并打印</span><br>        <span class="hljs-comment">//服务端：接收数据并打印，再给客户端反馈消息</span><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//2 从连接通道中获取输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//写出数据</span><br>        os.write(<span class="hljs-string">&quot;123abc&quot;</span>.getBytes());<br>        socket.shutdownOutput();<br><br><br>        <span class="hljs-comment">//3、接收服务端回写的数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is);<br>        <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b= isr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>)b);<br>        &#125;<br>        <span class="hljs-comment">//释放资源</span><br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP 协议接收数据</span><br>        <span class="hljs-comment">//1、创建对象ServerSocket</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务器反馈的消息并打印</span><br>        <span class="hljs-comment">//服务器：接收数据并打印，在给客户端反馈消息</span><br>       <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//2、监听客户端连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br><br>        <span class="hljs-comment">//从连接通道中回去输入流读取数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is);<br>        <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b= isr.read())!=-<span class="hljs-number">1</span>)&#123;<br><br>            System.out.print((<span class="hljs-type">char</span>)b);<br>        &#125;<br><br>        <span class="hljs-comment">//4、会写数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是服务器的会写数据&quot;</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        os.write(str.getBytes());<br><br><br><br>        <span class="hljs-comment">//释放资源</span><br>        socket.close();<br>        ss.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="最终版："><a href="#最终版：" class="headerlink" title="最终版："></a>最终版：</h1><p>客户端上传文件：可以连续的上传，服务器不间断的一直接收，服务器下载到本地的文件设置了随机的命名，下载同一个文件名称也不重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCp 协议，发送数据</span><br>        <span class="hljs-comment">//1  创建Socket对象</span><br>        <span class="hljs-comment">//细节：在创建对象的同时会连接服务端</span><br>        <span class="hljs-comment">//如果连接不上就会报错</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务端反馈的消息并打印</span><br>        <span class="hljs-comment">//服务端：接收数据并打印，再给客户端反馈消息</span><br>        <span class="hljs-comment">//1、客户端上传文件到服务器，接收服务器的反馈</span><br>        <span class="hljs-comment">//2、服务器接收客户端上传的文件，上柴完毕后给出反馈</span><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//2 从连接通道中获取输出流</span><br>       <span class="hljs-comment">// OutputStream os = socket.getOutputStream();</span><br>        <span class="hljs-comment">//写出数据</span><br>        <span class="hljs-comment">//读取本地的文件，上传到服务器当中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\workspace\\素材\\测试文件02\\转换流.jpg&quot;</span>));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>        <span class="hljs-comment">//os.write(&quot;123abc&quot;.getBytes());</span><br><br><br>      <span class="hljs-comment">//  socket.shutdownOutput();</span><br><br>        <span class="hljs-comment">//3、接收服务端回写的数据</span><br><br>        <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span>((len= bis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br><br>        &#125;<br><br>        <span class="hljs-comment">//往服务器发送一个结束标记</span><br>       socket.shutdownOutput();<br><br>        <span class="hljs-comment">//接受服务器的回写数据</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br><br>        System.out.println(line);<br><br><br>        <span class="hljs-comment">//释放资源</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP 协议接收数据</span><br>        <span class="hljs-comment">//1、创建对象ServerSocket</span><br>        <span class="hljs-comment">//客户端：发送一条数据，接收服务器反馈的消息并打印</span><br>        <span class="hljs-comment">//服务器：接收数据并打印，在给客户端反馈消息</span><br>        <span class="hljs-comment">//客户端将本地文件上传到服务器，接收服务器的反馈</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕后给出反馈</span><br>       <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10086</span>);<br><br>       <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>           <span class="hljs-comment">//2、监听客户端连接</span><br>           <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br>           <span class="hljs-comment">//从连接通道中回去输入流读取数据</span><br>           <span class="hljs-comment">//读取数据并下载到本地</span><br>           BufferedInputStream bis= <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>           <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>           <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\workspace\\素材\\测试文件02\\&quot;</span>+name+<span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>           <span class="hljs-comment">// InputStream is = socket.getInputStream();</span><br>           <span class="hljs-comment">//InputStreamReader isr = new InputStreamReader(is);</span><br>           <span class="hljs-comment">//字节流只能一个字节一个字节的读出来，汉字就会乱码；需要进行强转成char</span><br>           <span class="hljs-type">int</span> len;<br>           <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>           <span class="hljs-keyword">while</span>((len= bis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>               bos.write(bytes,<span class="hljs-number">0</span>,len);<br>               <span class="hljs-comment">// System.out.print((char)b);</span><br>           &#125;<br>           <span class="hljs-comment">//4、会写数据</span><br><span class="hljs-comment">//        String str = &quot;这是服务器的会写数据&quot;;</span><br>           <span class="hljs-comment">//      OutputStream os = socket.getOutputStream();</span><br>           <span class="hljs-comment">//    os.write(str.getBytes());</span><br>           <span class="hljs-comment">//本地创建的IO流怎么关？</span><br>           <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>           bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>           bw.newLine();<br>           bw.flush();<br>           <span class="hljs-comment">//释放资源</span><br>           socket.close();<br><br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20git</title>
    <link href="/2023/04/02/20git/"/>
    <url>/2023/04/02/20git/</url>
    
    <content type="html"><![CDATA[<p>学习git之前，我们需要先明白一个概念，版本控制！</p><p>版本控制</p><p>什么是版本控制</p><p>版本控制(Revision control)是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历 史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><p>实现跨区域多人协同开发</p><p>追踪和记载一个或者多个文件的历史记录</p><p>组织和保护你的源代码和文档</p><p>统计工作量</p><p>并行开发、提高开发效率</p><p>跟踪记录整个软件的开发过程</p><p>减轻开发人员的负担，节省时间，同时降低人为错误</p><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软 件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全 性，以及软件的整合等问题。</p><p>常见的版本控制工具</p><p>主流的版本控制器有如下这些：</p><p><em><strong>*G*</strong></em><em><strong>*it*</strong></em></p><p><em><strong>*SVN*</strong></em> ( Subversion)</p><p><em><strong>*CVS*</strong></em> ( Concurrent Versions System)</p><p><em><strong>*VSS*</strong></em> ( Micorosoft Visual SourceSafe)</p><p><em><strong>*TFS*</strong></em> (Team Foundation Server)</p><p>Visual Studio Online</p><p>版本控制产品非常的多(Perforce、  Rational ClearCase、  RCS ( GNU Revision Control System)、  Serena Dimention、SVK、  BitKeeper、  Monotone、  Bazaar、  Mercurial、SourceGear Vault)，现在 影响力最大且使用最广泛的是Git与SVN</p><p>版本控制分类</p><p>****1****、本地版本控制</p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps19.jpg" alt="img"> </p><p>****2****、集中版本控制</p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps20.png" alt="img"> </p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看 不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器 上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：    SVN、CVS、VSS</p><p>****3****、分布式版本控制</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地 提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数 据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>Git与SVN最主要区别</p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑， 所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服 务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要 联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也  在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改   了。</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>聊聊****Git****历史</p><p><a href="af://n64"></a></p><p>同生活中的许多伟大事物一样，  Git 诞生于一个极富纷争大举创新的年代。</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps25.png" alt="img"><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps26.png" alt="img">Linux 内核开源项目有着为数众广的参与者。  绝大多数的 Linux 内核维护工作都花在了提交补丁和保存 归档的繁琐事务上(1991－2002年间)。  到 2002 年，整个项目组开始启用一个专有的分布式版本控制系 统 BitKeeper 来管理和维护代码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。  这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus       Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。  也就是后来的 Git！</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p><p>Linux和Git之父李纳斯·托沃兹(Linus Benedic Torvalds)  1969、芬兰</p><p>****Git****环境配置</p><p>软件下载</p><p>打开 [git官网]<a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>官网下载太慢，我们可以使用淘宝镜像下载：  <a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p>卸载： </p><ol><li>反安装</li><li>清理环境变量</li></ol><p>下载对应的版本即可安装！</p><p>安装：无脑下一步即可！</p><p>启动Git</p><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：</p><p><strong>Git Bash</strong> ：Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>CMD</strong> ：Windows风格的命令行</p><p><strong>GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><p>基本的Linux命令学习</p><p>1)、  cd : 改变目录。</p><p>2)、 cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3)、  pwd : 显示当前所在的目录路径。</p><p>4)、  ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。    5)、 touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。 6)、  rm: 删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7)、  mkdir: 新建一个目录,就是新建一个文件夹。</p><p>8)、 rm -r : 删除一个文件夹, rm -r src 删除src目录</p><p>9)、  mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写, 必须保证文件和目标文件夹在同一目录下。</p><p>10)、  reset 重新初始化终端&#x2F;清屏。</p><p>11)、  clear 清屏。</p><p>12)、  history 查看命令历史。</p><p>13)、  help 帮助。</p><p>14)、  exit 退出。</p><p>15)、  #表示注释</p><p>Git 配置</p><p>查看不同级别的配置文件：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230329235424485.png" alt="image-20230329235424485"></p><p> <img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230329235403108.png" alt="image-20230329235403108"></p><p><strong>Git</strong>相关的配置文件：</p><p>1)、  Git\etc\gitconﬁg ：  Git 安装目录下的 gitconﬁg  –system 系统级   2)、  C:\Users\Administrator\ .gitconﬁg  只适用于当前登录用户的配置 –global 全局 这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p><p>设置用户名与邮箱(用户标识，必要)</p><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都 会使用该信息。它被永远的嵌入到了你的提交中：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global  user.name <span class="hljs-string">&quot;kuangshen&quot;</span>  #名称git config --global user.email <span class="hljs-number">24736743</span><span class="hljs-meta">@qq</span>.com  #邮箱<br></code></pre></td></tr></table></figure><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所 做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行 该命令而不要–global选项。  总之–global为全局配置，不加为某个项目的特定配置。</p><p><strong>Git</strong>基本理论</p><p>工作区域</p><p>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列</p><p>表信息</p><p>Repository：仓库区(或本地仓库)，就是安全存放数据的位置，这里面有你提交到所有版本的数</p><p>据。其中HEAD指向最新放入仓库的版本</p><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据</p><p>交换</p><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps45.png" alt="img"> </p><p>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。 WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。    .git：存放Git管理信息的目录，初始化仓库的时候自动创建。</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps51.jpg" alt="img">  Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在</p><p>暂存区。</p><p>Local Repo：本地仓库，一个存放在本地的版本库；  HEAD会只是当前的开发分支(branch)。</p><p>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</p><p>工作流程</p><p>git的工作流程一般是这样的：</p><p>1、在工作目录中添加、修改文件；</p><p>2、将需要进行版本管理的文件放入暂存区域；</p><p>3、将暂存区域的文件提交到git仓库。</p><p>因此，  git管理的文件有三种状态：已修改(modiﬁed)  ,已暂存(staged)  ,已提交(committed)</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps52.jpg" alt="img"> </p><p><strong>Git</strong>项目搭建</p><p>创建工作目录与常用指令</p><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个 空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><h1 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h1><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br>$ git init<br></code></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h1 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h1><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//克隆一个项目和他的整个代码历史</span><br>$ git clone [url]<br></code></pre></td></tr></table></figure><p>2、去 gitee 或者 github 上克隆一个测试！</p><h1 id="GIT文件操作"><a href="#GIT文件操作" class="headerlink" title="GIT文件操作"></a><em>GIT</em>文件操作</h1><h1 id="文件4种状态"><a href="#文件4种状态" class="headerlink" title="文件4种状态"></a>文件4种状态</h1><ol><li><p><strong>Untracked</strong></p></li><li><p><strong>Unmodify</strong></p></li><li><p><strong>Modiﬁed</strong></p></li><li><p><strong>Staged</strong></p><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">//#查看所有文件状态</span><br>git status<br></code></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号(#)开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号(*)代表任意多个字符，问号(？)代表一个字符，方括号 ([abc])代表可选字符范围，大括号({string1,string2,…})代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号(!)，表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符(&#x2F;)，表示要忽略的文件在此目录下，而子目录中的文件不 忽略。</li><li>如果名称的最后面是一个路径分隔符(&#x2F;)，表示要忽略的是此目录下该名称的子目录，而非文件 (默认文件或目录都忽略)。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">*.txt <span class="hljs-comment">//#忽略所有 .txt结尾的文件</span><br>!lib.txt <span class="hljs-comment">//#但lib.txt除外</span><br>/temp  <span class="hljs-comment">//#仅忽略项目根目录下的TODO文件 ,不包括其它目录temp</span><br>build<span class="hljs-comment">///#忽略build/目录下的所有文件</span><br>doc<span class="hljs-comment">/*.txt//#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></code></pre></td></tr></table></figure><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态， 不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>查看文件状态</p><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">#查看所有文件状态</span><br>git status<br></code></pre></td></tr></table></figure><h1 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h1><p>1、注册登录码云，完善个人信息</p><p>2、设置本机绑定SSH公钥，实现免密码登录！</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 C:\Users\Administrator\.ssh 目录</span><br><span class="hljs-comment"># 生成公钥</span><br>ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>3、将公钥信息public key 添加到码云账户中即可！</p><p>4、使用码云创建一个自己的仓库！</p><h1 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a><em>IDEA中集成</em>Git</h1><p>1、新建项目，绑定git。</p><p>2、修改文件，使用IDEA操作git。</p><p>3、提交测试</p><h2 id="说明：-GIT分支"><a href="#说明：-GIT分支" class="headerlink" title="说明： GIT分支"></a>说明： <em>GIT</em>分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你 也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml11156\wps88.png" alt="img"> </p><p>git分支中常用指令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><p>如果多个分支并行执行，就会导致代码不冲突，也就是同时存在多个版本,</p><p>企业里面都是分模块开发的，如果一个文件在合并分支时，发生冲突了；解决的办法是我们可以修改冲突的文件！选择要保留的大妈，互相协商</p><p>web-api</p><p>web-admin</p><p>web-app</p><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提 交！</p><h3 id="注意：协同开发"><a href="#注意：协同开发" class="headerlink" title="注意：协同开发"></a>注意：协同开发</h3><p> master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建 的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上 来.</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19GUI编程</title>
    <link href="/2023/04/02/19GUI%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/02/19GUI%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>1、GUI学什么？（M V C的基础）</p><p>01、组件：窗口、单窗、面板、文本框、列表框、按钮、图片、交互、监听事件、鼠标、键盘事件、外挂、破解工具</p><h1 id="1、简介："><a href="#1、简介：" class="headerlink" title="1、简介："></a>1、简介：</h1><p>1、GUI的核心技术： Swing   AWT ，但是界面不美观。</p><p>2、需要jre环境，</p><p>为什么学GUI ？ </p><p>1、可以写出自己心中想要的小工具</p><p>2、工作的时候、可能需要维护Swing界面，</p><p>3、了解MVC架构、了解监听</p><h1 id="2、AWT"><a href="#2、AWT" class="headerlink" title="2、AWT"></a>2、AWT</h1><h2 id="01、AWT介绍："><a href="#01、AWT介绍：" class="headerlink" title="01、AWT介绍："></a>01、AWT介绍：</h2><p> 抽象的窗口工具，GUI就是图形用户界面编程</p><h2 id="02、AWT有非常多的元素："><a href="#02、AWT有非常多的元素：" class="headerlink" title="02、AWT有非常多的元素："></a>02、AWT有非常多的元素：</h2><p>窗口、按钮、文本框</p><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\GUI图形界面.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//frame</span><br>        <span class="hljs-type">Frame</span>  <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;我的第一个图像界面窗口&quot;</span>);<br>        <span class="hljs-comment">//现在这个窗口在内存里面</span><br>        <span class="hljs-comment">//需要设置可见性</span><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置大小</span><br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>);<br>        <span class="hljs-comment">//设置背景颜色</span><br>         frame.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">202</span>, <span class="hljs-number">185</span>, <span class="hljs-number">36</span>,<span class="hljs-number">100</span>));<br>        <span class="hljs-comment">//弹出的初始位置</span><br>        frame.setLocation(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//设置大小固定</span><br>        frame.setResizable(<span class="hljs-literal">false</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="03、面板"><a href="#03、面板" class="headerlink" title="03、面板"></a>03、面板</h2><h2 id="04、布局管理器"><a href="#04、布局管理器" class="headerlink" title="04、布局管理器"></a>04、布局管理器</h2><p>1、流式布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFlowLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>        <span class="hljs-comment">//组件-按钮</span><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;button1&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;button2&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;button3&quot;</span>);<br><br>        <span class="hljs-comment">//设置为流式布局</span><br>        frame.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.RIGHT));<br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br><br>        frame.add(button1);<br>        frame.add(button2);<br>        frame.add(button3);<br><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\GUI流式布局.jpg"></p><p>2、东西南北中布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBorderLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span>  <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;TestBorderLayout&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">east</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;East&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">West</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;West&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">South</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;South&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">North</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;North&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">Center</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Center&quot;</span>);<br><br><br>        frame.add(east,BorderLayout.EAST);<br>        frame.add(West,BorderLayout.WEST);<br>        frame.add(South,BorderLayout.SOUTH);<br>        frame.add(North,BorderLayout.NORTH);<br>        frame.add(Center,BorderLayout.CENTER);<br><br>        frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\东西南北中布局.jpg"></p><h1 id="3、Swing"><a href="#3、Swing" class="headerlink" title="3、Swing"></a>3、Swing</h1><h1 id="4、事件监听"><a href="#4、事件监听" class="headerlink" title="4、事件监听"></a>4、事件监听</h1><p>一个鼠标操作，点击鼠标弹出一个文本框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestActionEvent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>();<br>        button.setSize(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//addActionListener()需要一个ActionListener ，所以就写一个ActionListener</span><br>        <span class="hljs-type">MyActionListener</span> <span class="hljs-variable">myActionListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyActionListener</span>();<br><br>        button.addActionListener(myActionListener);<br>        frame.add(button,BorderLayout.CENTER);<br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        frame.pack();<br>        windowCose(frame);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowCose</span><span class="hljs-params">(Frame frame)</span>&#123;<br>        frame.addWindowFocusListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;aaaaa&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18IO流</title>
    <link href="/2023/04/02/18IO%E6%B5%81/"/>
    <url>/2023/04/02/18IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1、File的实例化与常用方法"><a href="#1、File的实例化与常用方法" class="headerlink" title="1、File的实例化与常用方法"></a>1、File的实例化与常用方法</h1><h2 id="01、File实例化"><a href="#01、File实例化" class="headerlink" title="01、File实例化"></a>01、File实例化</h2><ul><li>File类及本章下的各种流，都定义在java.io包下。</li><li>一个File对象代表硬盘或网络中可能存在的一个文件或者文件目录（俗称文件夹），与平台无关。（体会万事万物皆对象）</li><li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。</li><li>File对象可以作为参数传递给流的构造器。</li></ul><h2 id="02、相对路径VS绝对路径"><a href="#02、相对路径VS绝对路径" class="headerlink" title="02、相对路径VS绝对路径"></a>02、相对路径VS绝对路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绝对路径：从盘符开始的路径，这是一个完整的路径。</span><br><span class="hljs-comment">//相对路径：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</span><br>IDEA中，main中的文件的相对路径，是相对于<span class="hljs-string">&quot;当前工程&quot;</span><br>IDEA中，单元测试方法中的文件的相对路径，是相对于<span class="hljs-string">&quot;当前module&quot;</span><br></code></pre></td></tr></table></figure><h2 id="03、常用方法"><a href="#03、常用方法" class="headerlink" title="03、常用方法"></a>03、常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.file;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileObjectTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 文件路径名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pathname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\aaa.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname);<br><br>        <span class="hljs-comment">// 文件路径名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pathname2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\aaa\\bbb.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname2);<br><br>        <span class="hljs-comment">// 通过父路径和子路径字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\aaa&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bbb.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, child);<br><br>        <span class="hljs-comment">// 通过父级File对象和子路径字符串</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\aaa&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">childFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bbb.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentDir, childFile);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\atguigu\\javase\\HelloIO.java&quot;</span>); <span class="hljs-comment">//绝对路径</span><br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f1.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f1.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f1.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f1.getParent());<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/HelloIO.java&quot;</span>);<span class="hljs-comment">//绝对路径，从根路径开始</span><br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f2.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f2.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f2.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f2.getParent());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;HelloIO.java&quot;</span>);<span class="hljs-comment">//相对路径</span><br>        System.out.println(<span class="hljs-string">&quot;user.dir =&quot;</span> + System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f3.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f3.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f3.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f3.getParent());<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;HelloIO.java&quot;</span>);<span class="hljs-comment">//相对路径</span><br>        System.out.println(<span class="hljs-string">&quot;user.dir =&quot;</span> + System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的名称：&quot;</span> + f5.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的构造路径名：&quot;</span> + f5.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的绝对路径名：&quot;</span> + f5.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件/目录的父目录名：&quot;</span> + f5.getParent());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04、显示文件下目录"><a href="#04、显示文件下目录" class="headerlink" title="04、显示文件下目录"></a>04、显示文件下目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 显示文件夹下面的目录</span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Googledownload&quot;</span>);<br>        String [] fileArr = file.list();<br>        <span class="hljs-keyword">for</span> (String s :fileArr)&#123;<br>            System.out.println(s);<br>        &#125;<br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="D:\JavaEE\素材\显示目录.jpg"></p><h2 id="05、文件File重命名"><a href="#05、文件File重命名" class="headerlink" title="05、文件File重命名"></a>05、文件File重命名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要想此方法执行完放回true 要求：File1必须存在，File2 必须不存在，俩个文件不能冲突，File2所在的文件目录存在</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">File</span> <span class="hljs-variable">file5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\&quot;D:\\workspace\\Java\\Code\\File测试文件\\File1\\测试文件1.txt\&quot;&quot;</span>);<br>       <span class="hljs-type">File</span> <span class="hljs-variable">file6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\&quot;D:\\workspace\\Java\\Code\\File测试文件\\File1\\ceshiwenjian2.txt&quot;</span>);<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">renameSuccess</span> <span class="hljs-operator">=</span> file5.renameTo(file6);<br>       System.out.println(renameSuccess ? <span class="hljs-string">&quot;重命名成功&quot;</span>:<span class="hljs-string">&quot;修改失败&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="2、File的应用案例"><a href="#2、File的应用案例" class="headerlink" title="2、File的应用案例"></a>2、File的应用案例</h1><h2 id="01、案例：指定路径文件创建"><a href="#01、案例：指定路径文件创建" class="headerlink" title="01、案例：指定路径文件创建"></a>01、案例：指定路径文件创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\&quot;D:\\workspace\\Java\\Code\\File测试文件\\File1\\测试文件1.txt\&quot;&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!file7.exists())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccessed</span> <span class="hljs-operator">=</span> file7.createNewFile();<br>            <span class="hljs-keyword">if</span> (isSuccessed)&#123;<br>                System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;此文件已经存在&quot;</span>);<br>            System.out.println(file7.delete() ? <span class="hljs-string">&quot;文件已经删除&quot;</span>:<span class="hljs-string">&quot;文件删除失败&quot;</span>);<br>        &#125;    <br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="02、搜索jpg文件"><a href="#02、搜索jpg文件" class="headerlink" title="02、搜索jpg文件"></a>02、搜索jpg文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\workspace\\素材&quot;</span>);<br><br>       String[] listFils = dir.list();<br>       <span class="hljs-keyword">for</span> (String s:listFils)&#123;<br>           <span class="hljs-keyword">if</span>(s.endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>))&#123;<br>               System.out.println(s);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="03、遍历指定的目录、删除指定的目录"><a href="#03、遍历指定的目录、删除指定的目录" class="headerlink" title="03、遍历指定的目录、删除指定的目录"></a>03、遍历指定的目录、删除指定的目录</h2><h1 id="3、IO流概述分类"><a href="#3、IO流概述分类" class="headerlink" title="3、IO流概述分类"></a>3、IO流概述分类</h1><h2 id="01、IO流原理"><a href="#01、IO流原理" class="headerlink" title="01、IO流原理"></a>01、IO流原理</h2><p>Java程序中，对于数据的输入&#x2F;输出操作以“流(stream)” 的方式进行，可以看做是一种数据的流动。</p><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\IO流原理.png" alt="IO流"></p><ul><li>输入input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li>输出output：将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul><h2 id="02、IO流的分类"><a href="#02、IO流的分类" class="headerlink" title="02、IO流的分类"></a>02、IO流的分类</h2><ul><li><p>按数据的流向不同分为：输入流和输出流。</p></li><li><p>输入流 ：把数据从其他设备上读取到内存中的流。以InputStream、Reader结尾</p></li><li><p>输出流 ：把数据从内存 中写出到其他设备上的流。以OutputStream、Writer结尾</p></li><li><p>按操作数据单位的不同分为：字节流（8bit）和字符流（16bit）。</p></li><li><p>字节流 ：以字节为单位，读写数据的流。以InputStream、OutputStream结尾</p></li><li><p>字符流 ：以字符为单位，读写数据的流。以Reader、Writer结尾<br>根据IO流的角色不同分为：节点流和处理流。</p></li><li><p>节点流：直接从数据源或目的地读写数据</p></li><li><p>处理流：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p></li></ul><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\输入输出流.png"></p><h2 id="03、IO流继承体系"><a href="#03、IO流继承体系" class="headerlink" title="03、IO流继承体系"></a>03、IO流继承体系</h2><h1 id="4、FileReader-FileWriter的使用"><a href="#4、FileReader-FileWriter的使用" class="headerlink" title="4、FileReader\FileWriter的使用"></a>4、FileReader\FileWriter的使用</h1><h2 id="01、案例：读入文本文件的教程"><a href="#01、案例：读入文本文件的教程" class="headerlink" title="01、案例：读入文本文件的教程"></a>01、案例：读入文本文件的教程</h2><ul><li>FileReader<br>java.io.FileReader类用于读取字符文件，构造时使用系统默认的字符编码和默认字节缓冲区。</li><li>FileReader(File file)： 创建一个新的 FileReader ，给定要读取的File对象。<br>FileReader(String fileName)： 创建一个新的 FileReader ，给定要读取的文件的名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderWriterTest</span> &#123;<br>    <br>    <span class="hljs-comment">//实现方式1</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        <span class="hljs-comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>        <span class="hljs-comment">//3. 通过相关流的方法，读取文件中的数据</span><br><span class="hljs-comment">//        int data = fr.read(); //每调用一次读取一个字符</span><br><span class="hljs-comment">//        while (data != -1) &#123;</span><br><span class="hljs-comment">//            System.out.print((char) data);</span><br><span class="hljs-comment">//            data = fr.read();</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-type">int</span> data;<br>        <span class="hljs-keyword">while</span> ((data = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>) data);<br>        &#125;<br><br>        <span class="hljs-comment">//4. 关闭相关的流资源，避免出现内存泄漏</span><br>        fr.close();<br><br>    &#125;<br><br>    <span class="hljs-comment">//实现方式2：在方式1的基础上改进，使用try-catch-finally处理异常。保证流是可以关闭的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span><br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>            <span class="hljs-comment">//3. 通过相关流的方法，读取文件中的数据</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * read():每次从对接的文件中读取一个字符。并将此字符返回。</span><br><span class="hljs-comment">             * 如果返回值为-1,则表示文件到了末尾，可以不再读取。</span><br><span class="hljs-comment">             * */</span><br><span class="hljs-comment">//            int data = fr.read();</span><br><span class="hljs-comment">//            while(data != -1)&#123;</span><br><span class="hljs-comment">//                System.out.print((char)data);</span><br><span class="hljs-comment">//                data = fr.read();</span><br><span class="hljs-comment">//            &#125;</span><br><br>            <span class="hljs-type">int</span> data;<br>            <span class="hljs-keyword">while</span> ((data = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.println((<span class="hljs-type">char</span>) data);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4. 关闭相关的流资源，避免出现内存泄漏</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>)<br>                    fr.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//实现方式3：调用read(char[] cbuf),每次从文件中读取多个字符</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span><br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>            <span class="hljs-comment">//3. 通过相关流的方法，读取文件中的数据</span><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * read(char[] cbuf) : 每次将文件中的数据读入到cbuf数组中，并返回读入到数组中的</span><br><span class="hljs-comment">             * 字符的个数。</span><br><span class="hljs-comment">             * */</span><br>            <span class="hljs-type">int</span> len; <span class="hljs-comment">//记录每次读入的字符的个数</span><br>            <span class="hljs-keyword">while</span> ((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">//处理char[]数组即可</span><br>                <span class="hljs-comment">//错误：</span><br><span class="hljs-comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span><br><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><br><span class="hljs-comment">//                &#125;</span><br>                <span class="hljs-comment">//错误：</span><br><span class="hljs-comment">//                String str = new String(cbuf);</span><br><span class="hljs-comment">//                System.out.print(str);</span><br>                <span class="hljs-comment">//正确：</span><br><span class="hljs-comment">//                for(int i = 0;i &lt; len;i++)&#123;</span><br><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><br><span class="hljs-comment">//                &#125;</span><br>                <span class="hljs-comment">//正确：</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cbuf, <span class="hljs-number">0</span>, len);<br>                System.out.print(str);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4. 关闭相关的流资源，避免出现内存泄漏</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>)<br>                    fr.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FileWeriter"><a href="#FileWeriter" class="headerlink" title="FileWeriter:"></a>FileWeriter:</h3><ul><li><p>java.io.FileWriter类用于写出字符到文件，构造时使用系统默认的字符编码和默认字节缓冲区。</p></li><li><p>FileWriter(File file)： 创建一个新的 FileWriter，给定要读取的File对象。</p></li><li><p>FileWriter(String fileName)： 创建一个新的 FileWriter，给定要读取的文件的名称。<br>FileWriter(File file,boolean append)： 创建一个新的 FileWriter，指明是否在现有文件末尾追加内容。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWrite</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>));<br>        <span class="hljs-comment">// 写出数据</span><br>        fw.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.write(<span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">// 写出第2个字符</span><br>        fw.write(<span class="hljs-string">&#x27;C&#x27;</span>); <span class="hljs-comment">// 写出第3个字符</span><br>        fw.write(<span class="hljs-number">30000</span>); <span class="hljs-comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span><br><br>        <span class="hljs-comment">//关闭资源</span><br>        fw.close();<br>    &#125;<br><span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>));<br>        <span class="hljs-comment">// 字符串转换为字节数组</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;尚硅谷&quot;</span>.toCharArray();<br><br>        <span class="hljs-comment">// 写出字符数组</span><br>        fw.write(chars); <span class="hljs-comment">// 尚硅谷</span><br><br>        <span class="hljs-comment">// 写出从索引1开始，2个字符。</span><br>        fw.write(chars,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">// 硅谷</span><br><br>        <span class="hljs-comment">// 关闭资源</span><br>        fw.close();<br>    &#125;<br><span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);<br>        <span class="hljs-comment">// 字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;尚硅谷&quot;</span>;<br><br>        <span class="hljs-comment">// 写出字符数组</span><br>        fw.write(msg); <span class="hljs-comment">//尚硅谷</span><br><br>        <span class="hljs-comment">// 写出从索引1开始，2个字符。</span><br>        fw.write(msg,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">// 硅谷</span><br><br>        <span class="hljs-comment">// 关闭资源</span><br>        fw.close();<br>    &#125;    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建File的对象</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;personinfo.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 创建FileWriter的对象，将File对象作为参数传递到FileWriter的构造器中</span><br>            <span class="hljs-comment">//如果输出的文件已存在，则会对现有的文件进行覆盖</span><br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br><span class="hljs-comment">//            fw = new FileWriter(file,false);</span><br>            <span class="hljs-comment">//如果输出的文件已存在，则会在现有的文件末尾写入数据</span><br><span class="hljs-comment">//            fw = new FileWriter(file,true);</span><br><br>            <span class="hljs-comment">//3. 调用相关的方法，实现数据的写出操作</span><br>            <span class="hljs-comment">//write(String str) / write(char[] cbuf)</span><br>            fw.write(<span class="hljs-string">&quot;I love you,&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;you love him.&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;so sad&quot;</span>.toCharArray());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4. 关闭资源，避免内存泄漏</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>)<br>                    fw.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于flush（刷新）"><a href="#关于flush（刷新）" class="headerlink" title="关于flush（刷新）"></a>关于flush（刷新）</h3><ul><li>flush() ：刷新缓冲区，流对象可以继续使用。</li><li>close()：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>即便是flush()方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWriteFlush</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);<br>        <span class="hljs-comment">// 写出数据，通过flush</span><br>        fw.write(<span class="hljs-string">&#x27;刷&#x27;</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.flush();<br>        fw.write(<span class="hljs-string">&#x27;新&#x27;</span>); <span class="hljs-comment">// 继续写出第2个字符，写出成功</span><br>        fw.flush();<br><br>        <span class="hljs-comment">// 写出数据，通过close</span><br>        fw.write(<span class="hljs-string">&#x27;关&#x27;</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.close();<br>        fw.write(<span class="hljs-string">&#x27;闭&#x27;</span>); <span class="hljs-comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、read（）与read（char-cbuf）对比"><a href="#02、read（）与read（char-cbuf）对比" class="headerlink" title="02、read（）与read（char[] cbuf）对比"></a>02、read（）与read（char[] cbuf）对比</h2><h1 id="5、FileInputStream、FileOutputStream-的使用"><a href="#5、FileInputStream、FileOutputStream-的使用" class="headerlink" title="5、FileInputStream、FileOutputStream 的使用"></a>5、FileInputStream、FileOutputStream 的使用</h1><h2 id="01、案例：读入、写出图片、视频教程"><a href="#01、案例：读入、写出图片、视频教程" class="headerlink" title="01、案例：读入、写出图片、视频教程"></a>01、案例：读入、写出图片、视频教程</h2><ul><li>字节输入流：InputStream</li><li>java.io.InputStream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</li><li>public int read()： 从输入流读取一个字节。返回读取的字节值。虽然读取了一个字节，但是会自动提升为int类型。如果已经到达流末尾，没有数据可读，则返回-1。</li><li>public int read(byte[] b)： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。每次最多读取b.length个字节。返回实际读取的字节个数。如果已经到达流末尾，没有数据可读，则返回-1。</li><li>public int read(byte[] b,int off,int len)：从输入流中读取一些字节数，并将它们存储到字节数组 b中，从b[off]开始存储，每次最多读取len个字节 。返回实际读取的字节个数。如果已经到达流末尾，没有数据可读，则返回-1。<br>public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><ul><li>字节输出流：OutputStream</li><li>java.io.OutputStream抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</li><li>public void write(int b) ：将指定的字节输出流。虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。<br>public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li>public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。</li></ul><p>说明：close()方法，当完成流的操作时，必须调用此方法，释放系统资源。</p><p>读取操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FISRead</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>);<br>        <span class="hljs-comment">// 读取数据，返回一个字节</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        <span class="hljs-comment">// 读取到末尾,返回-1</span><br>        read = fis.read();<br>        System.out.println(read);<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        文件内容：abcde</span><br><span class="hljs-comment">        输出结果：</span><br><span class="hljs-comment">        a</span><br><span class="hljs-comment">        b</span><br><span class="hljs-comment">        c</span><br><span class="hljs-comment">        d</span><br><span class="hljs-comment">        e</span><br><span class="hljs-comment">        -1</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>);<br>        <span class="hljs-comment">// 定义变量，保存数据</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> ((b = fis.read())!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println((<span class="hljs-type">char</span>)b);<br>        &#125;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>); <span class="hljs-comment">// 文件中为abcde</span><br>        <span class="hljs-comment">// 定义变量，作为有效个数</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">// 定义字节数组，作为装字节数据的容器</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> (( len= fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 每次读取后,把数组变成字符串打印</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出结果：</span><br><span class="hljs-comment">        ab</span><br><span class="hljs-comment">        cd</span><br><span class="hljs-comment">        ed</span><br><span class="hljs-comment">        最后错误数据`d`，是由于最后一次读取时，只读取一个字节`e`，数组中，</span><br><span class="hljs-comment">        上次读取的数据没有被完全替换，所以要通过`len` ，获取有效的字节</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>); <span class="hljs-comment">// 文件中为abcde</span><br>        <span class="hljs-comment">// 定义变量，作为有效个数</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">// 定义字节数组，作为装字节数据的容器</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> (( len= fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b,<span class="hljs-number">0</span>,len));<span class="hljs-comment">//  len 每次读取的有效字节个数</span><br>        &#125;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出结果：</span><br><span class="hljs-comment">        ab</span><br><span class="hljs-comment">        cd</span><br><span class="hljs-comment">        e</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><ul><li><p>java.io.FileOutputStream类是文件输出流，用于将数据写出到文件。</p></li><li><p>public FileOutputStream(File file)：创建文件输出流，写出由指定的 File对象表示的文件。</p></li><li><p>public FileOutputStream(String name)： 创建文件输出流，指定的名称为写出文件。</p></li><li><p>public FileOutputStream(File file, boolean append)： 创建文件输出流，指明是否在现有文件末尾追加内容。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.fileio;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FOSWrite</span> &#123;<br>    <span class="hljs-comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br>        <span class="hljs-comment">// 写出数据</span><br>        fos.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 写出第1个字节</span><br>        fos.write(<span class="hljs-number">98</span>); <span class="hljs-comment">// 写出第2个字节</span><br>        fos.write(<span class="hljs-number">99</span>); <span class="hljs-comment">// 写出第3个字节</span><br>        <span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>      <span class="hljs-comment">/*  输出结果：abc*/</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br>        <span class="hljs-comment">// 字符串转换为字节数组</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br>        <span class="hljs-comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span><br>        fos.write(b,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>    <span class="hljs-comment">//这段程序如果多运行几次，每次都会在原来文件末尾追加abcde</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 字符串转换为字节数组</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br>        fos.write(b);<br>        <span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>    <br>    <span class="hljs-comment">//使用FileInputStream\FileOutputStream，实现对文件的复制</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 造文件-造流</span><br>            <span class="hljs-comment">//复制图片：成功</span><br><span class="hljs-comment">//            fis = new FileInputStream(new File(&quot;pony.jpg&quot;));</span><br><span class="hljs-comment">//            fos = new FileOutputStream(new File(&quot;pony_copy1.jpg&quot;));</span><br><br>            <span class="hljs-comment">//复制文本文件：成功</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>));<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello1.txt&quot;</span>));<br><br>            <span class="hljs-comment">//2. 复制操作（读、写）</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//每次读入到buffer中字节的个数</span><br>            <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                fos.write(buffer, <span class="hljs-number">0</span>, len);<br><span class="hljs-comment">//                String str = new String(buffer,0,len);</span><br><span class="hljs-comment">//                System.out.print(str);</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//3. 关闭资源</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>)<br>                    fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>)<br>                    fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、案例：图片加密"><a href="#02、案例：图片加密" class="headerlink" title="02、案例：图片加密"></a>02、案例：图片加密</h2><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\图片加密.png" alt="图片加密"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 8:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSecretTest</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 图片的加密</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony.jpg&quot;</span>);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony_secret.jpg&quot;</span>);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file1);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file2);<br><br>            <span class="hljs-comment">//方式1：每次读入一个字节，效率低</span><br><span class="hljs-comment">//            int data;</span><br><span class="hljs-comment">//            while((data = fis.read()) != -1)&#123;</span><br><span class="hljs-comment">//                fos.write(data ^ 5);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//方式2：每次读入一个字节数组，效率高</span><br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; len;i++)&#123;<br>                    buffer[i] = (<span class="hljs-type">byte</span>) (buffer[i] ^ <span class="hljs-number">5</span>);<br>                &#125;<br><br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br><br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;加密成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 图片的解密</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony_secret.jpg&quot;</span>);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;pony_unsecret.jpg&quot;</span>);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file1);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file2);<br><br>            <span class="hljs-comment">//方式1：每次读入一个字节，效率低</span><br><span class="hljs-comment">//            int data;</span><br><span class="hljs-comment">//            while((data = fis.read()) != -1)&#123;</span><br><span class="hljs-comment">//                fos.write(data ^ 5);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//方式2：每次读入一个字节数组，效率高</span><br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; len;i++)&#123;<br>                    buffer[i] = (<span class="hljs-type">byte</span>) (buffer[i] ^ <span class="hljs-number">5</span>);<br>                &#125;<br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;解密成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、缓冲流的使用、与文件效率对比"><a href="#6、缓冲流的使用、与文件效率对比" class="headerlink" title="6、缓冲流的使用、与文件效率对比"></a>6、缓冲流的使用、与文件效率对比</h1><h2 id="01、案例-缓冲流读入，写出数据"><a href="#01、案例-缓冲流读入，写出数据" class="headerlink" title="01、案例:缓冲流读入，写出数据"></a>01、案例:缓冲流读入，写出数据</h2><h2 id="02、缓冲流与文件流效率测试"><a href="#02、缓冲流与文件流效率测试" class="headerlink" title="02、缓冲流与文件流效率测试"></a>02、缓冲流与文件流效率测试</h2><h1 id="7、转换流的使用"><a href="#7、转换流的使用" class="headerlink" title="7、转换流的使用"></a>7、转换流的使用</h1><h2 id="01、编码与解码"><a href="#01、编码与解码" class="headerlink" title="01、编码与解码"></a>01、编码与解码</h2><p>引入情况1：</p><ul><li><p>使用FileReader 读取项目中的文本文件。由于IDEA设置中针对项目设置了UTF-8编码，当读取Windows系统中创建的文本文件时，如果Windows系统默认的是GBK编码，则读入内存中会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.transfer;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Problem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;E:\\File_GBK.txt&quot;</span>);<br>        <span class="hljs-type">int</span> data;<br>        <span class="hljs-keyword">while</span> ((data = fileReader.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>)data);<br>        &#125;<br>        fileReader.close();<br>    &#125;<br>&#125;<br><br>输出结果：<br>���<br><br></code></pre></td></tr></table></figure></li></ul><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\转换流.jpg"></p><h2 id="02、常见支付编码集"><a href="#02、常见支付编码集" class="headerlink" title="02、常见支付编码集"></a>02、常见支付编码集</h2><h2 id="03、案例：转换实现文本文件编码的修改"><a href="#03、案例：转换实现文本文件编码的修改" class="headerlink" title="03、案例：转换实现文本文件编码的修改"></a>03、案例：转换实现文本文件编码的修改</h2><h1 id="8、对象流的使用、序列化机制"><a href="#8、对象流的使用、序列化机制" class="headerlink" title="8、对象流的使用、序列化机制"></a>8、对象流的使用、序列化机制</h1><h2 id="01、序列化机制"><a href="#01、序列化机制" class="headerlink" title="01、序列化机制"></a>01、序列化机制</h2><ul><li>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现java.io.Serializable 接口。Serializable 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出</li><li>NotSerializableException 。</li><li>如果对象的某个属性也是引用数据类型，那么如果该属性也要序列化的话，也要实现Serializable 接口</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。</li><li>静态（static）变量的值不会序列化。因为静态变量的值不属于某个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.object;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteDataOfAnyType</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;巫师&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">energy</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">75.5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">relive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;game.dat&quot;</span>));<br>        oos.writeUTF(name);<br>        oos.writeInt(age);<br>        oos.writeChar(gender);<br>        oos.writeInt(energy);<br>        oos.writeDouble(price);<br>        oos.writeBoolean(relive);<br>        oos.close();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reload</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;game.dat&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ois.readUTF();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> ois.readInt();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> ois.readChar();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">energy</span> <span class="hljs-operator">=</span> ois.readInt();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> ois.readDouble();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">relive</span> <span class="hljs-operator">=</span> ois.readBoolean();<br><br>        System.out.println(name+<span class="hljs-string">&quot;,&quot;</span> + age + <span class="hljs-string">&quot;,&quot;</span> + gender + <span class="hljs-string">&quot;,&quot;</span> + energy + <span class="hljs-string">&quot;,&quot;</span> + price + <span class="hljs-string">&quot;,&quot;</span> + relive);<br><br>        ois.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="02、案例：对象的序列化、反序列化"><a href="#02、案例：对象的序列化、反序列化" class="headerlink" title="02、案例：对象的序列化、反序列化"></a>02、案例：对象的序列化、反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.object;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteObject</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Employee.setCompany(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;小谷姐姐&quot;</span>, <span class="hljs-string">&quot;宏福苑&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-comment">// 创建序列化流对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;employee.dat&quot;</span>));<br>        <span class="hljs-comment">// 写出对象</span><br>        oos.writeObject(e);<br>        <span class="hljs-comment">// 释放资源</span><br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;Serialized data is saved&quot;</span>); <span class="hljs-comment">// 姓名，地址被序列化，年龄没有被序列化。</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 创建反序列化流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;employee.dat&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        <span class="hljs-comment">// 读取一个对象</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (Employee) ois.readObject();<br>        <span class="hljs-comment">// 释放资源</span><br>        ois.close();<br>        fis.close();<br><br>        System.out.println(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.object;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteCollection</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ArrayList&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;宏福苑&quot;</span>, <span class="hljs-number">23</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;白庙&quot;</span>, <span class="hljs-number">24</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;平西府&quot;</span>, <span class="hljs-number">25</span>));<br>        <span class="hljs-comment">// 创建序列化流对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;employees.dat&quot;</span>));<br>        <span class="hljs-comment">// 写出对象</span><br>        oos.writeObject(list);<br>        <span class="hljs-comment">// 释放资源</span><br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 创建反序列化流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;employees.dat&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        <span class="hljs-comment">// 读取一个对象</span><br>        ArrayList&lt;Employee&gt; list = (ArrayList&lt;Employee&gt;) ois.readObject();<br>        <span class="hljs-comment">// 释放资源</span><br>        ois.close();<br>        fis.close();<br><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9、其他流的使用"><a href="#9、其他流的使用" class="headerlink" title="9、其他流的使用"></a>9、其他流的使用</h1><h2 id="01、标准输入输出流"><a href="#01、标准输入输出流" class="headerlink" title="01、标准输入输出流"></a>01、标准输入输出流</h2><h2 id="02、打印流"><a href="#02、打印流" class="headerlink" title="02、打印流"></a>02、打印流</h2><h2 id="03、Scanner的了解"><a href="#03、Scanner的了解" class="headerlink" title="03、Scanner的了解"></a>03、Scanner的了解</h2><h2 id="04、开元Jar包调用API"><a href="#04、开元Jar包调用API" class="headerlink" title="04、开元Jar包调用API"></a>04、开元Jar包调用API</h2><h1 id="10、章节练习"><a href="#10、章节练习" class="headerlink" title="10、章节练习"></a>10、章节练习</h1><ul><li><p>需求说明：</p></li><li><p>网上购物时某用户填写订单，订单内容为产品列表，保存在“save.bin”中。<br>运行时，如果不存在“save.bin”，则进行新订单录入，如果存在，则显示并计算客户所需付款。</p></li><li><p>分析：</p></li><li><p>编写Save()方法保存对象到“save.bin”<br>编写Load()方法获得对象，计算客户所需付款</p></li></ul><p><img src="D:\workspace\素材\产品列表.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17多线程</title>
    <link href="/2023/04/02/17%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/04/02/17%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、线程简介"><a href="#1、线程简介" class="headerlink" title="1、线程简介"></a>1、线程简介</h1><ol><li>任务：</li><li>进程</li><li>线程</li><li>多线程</li></ol><p>Process  和 Thread</p><p>程序：程序是指令和数据的有序集合，本身没有任何运行含义，是一个静态概念</p><p>进程：进程是执行程序的一次执行过程，是一个动态概念，是系统资源分配的单位</p><p>线程：通常一个进程中可以包含多个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU的调度和执行单位。</p><p>电脑的多线程是模拟出来的，真正的多线程是指有多个CPU，即多核，如服务器。如果是模拟出来的多线程。那么在一个CPU的情况下，在同一个时间点，CPU只能执行一个代码，因为切换的很快，所以就有同时执行的错觉。</p><h1 id="2、线程实现（重点）"><a href="#2、线程实现（重点）" class="headerlink" title="2、线程实现（重点）"></a>2、线程实现（重点）</h1><h2 id="创建进程："><a href="#创建进程：" class="headerlink" title="创建进程："></a>创建进程：</h2><ol><li>Thread class  继承Thread类（重点）</li><li>Runnable接口：实现Runnable接口（重要）</li><li>实现Callable接口（了解）</li></ol><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个线程方式:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//run方法和main方法交替出现，交替执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//run 方法线程 副线程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我在看代码&quot;</span>+i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//主线程 main</span><br>        <span class="hljs-comment">//创建一个线程对象</span><br>        <span class="hljs-type">ThreadTest</span> <span class="hljs-variable">testThread1</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest</span>();<br><br>        <span class="hljs-comment">//调用Thread方法开启</span><br>        testThread1.start();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我现在在学习多线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现网络图片下载"><a href="#实现网络图片下载" class="headerlink" title="实现网络图片下载:"></a>实现网络图片下载:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span>  String url;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadTest01</span><span class="hljs-params">(String url,String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.url=url;<br>        <span class="hljs-built_in">this</span>.name=name;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.downloader(url,name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载了文件名称为&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ThreadTest01 p1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片&quot;</span>);<br>        ThreadTest01 p2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片1&quot;</span>);<br>        ThreadTest01 p3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片2&quot;</span>);<br>        ThreadTest01 p4= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片3&quot;</span>);<br>        p1.start();<br>        p4.start();<br>        p3.start();<br>        p2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url),<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\网络图片下载.jpg"></p><p>需要添加一个jar包：</p><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\image-20230322000437246.png" alt="image-20230322000437246"></p><h3 id="Rennable接口："><a href="#Rennable接口：" class="headerlink" title="Rennable接口："></a>Rennable接口：</h3><p>建议使用Runnable 避免单继承的局限性，灵活方便，方便一个对象被多个进程使用</p><ol><li>定义Myrunnable接口；</li><li>实现run()接口，编写线程执行体</li><li>创建线程对象，调用start方法启动线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建进程方式二：实现runnable 接口，重写run方法，执行线程需要丢入runnable接口的=实现类，调用start方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableTest</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我现在在看代码&quot;</span>+i);<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//主线程 main</span><br>        <span class="hljs-comment">//创建一个Runnable接口的实现类对象</span><br>        RunnableTest runnableTest= <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableTest</span>();<br>        <span class="hljs-comment">//创建一个线程对象，代理Thread来实现类对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableTest);<span class="hljs-comment">//把Runnable进程对象的实现类对象放到Thread里面</span><br>        thread.start();<br>        <span class="hljs-comment">//调用Thread方法开启</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我现在在学习多线程&quot;</span>+i);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>了解：</p><p>实现Callable接口：</p><ol><li><p>实现callable接口，需要返回值类型</p></li><li><p>重写call方法，需要抛出异常</p></li><li><p>创建目标对象</p></li><li><p>创建执行服务 ExecutorService ser &#x3D; Executoers.newFixedThreadPool(1)</p></li><li><p>提交执行</p></li><li><p>获取结果</p></li><li><p>关闭服务</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习Callable 实现多线程下载图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span>  String url;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadTest01</span><span class="hljs-params">(String url,String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.url=url;<br>        <span class="hljs-built_in">this</span>.name=name;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.downloader(url,name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载了文件名称为&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ThreadTest01 p1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片&quot;</span>);<br>        ThreadTest01 p2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片1&quot;</span>);<br>        ThreadTest01 p3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;图片2&quot;</span>);<br>        ThreadTest01 p4= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadTest01</span>(<span class="hljs-string">&quot;https://img-home.csdnimg.cn/images/20230321094903.jpg&quot;</span>,<span class="hljs-string">&quot;CSDN图片3&quot;</span>);<br>        p1.start();<br>        p4.start();<br>        p3.start();<br>        p2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url),<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、Lambda表达式"><a href="#3、Lambda表达式" class="headerlink" title="3、Lambda表达式"></a>3、Lambda表达式</h1><ol><li><p>Lamda的作用:让代码变的很简洁</p></li><li><p>避免匿名内部类定义过多</p></li><li><p>实质上是属于函数式编程的概念</p><p>（prams）–&gt;expression</p><p>函数式接口：</p><ol><li><p>Function Interface （函数式接口）</p></li><li><p>函数式接口的定义：</p><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</p><p>public interface Runnable{</p><p>public abstract void run();</p><p>}</p></li><li><p>有一个函数式接口就可以用Iambda来实现简化</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Lambda表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest</span> &#123;<br>  <span class="hljs-comment">//静态内部类的用法：把实现类放到  类里面</span><br> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">like2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ilike</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>   System.out.println(<span class="hljs-string">&quot;I like lambda2&quot;</span>);<br>  &#125;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">Ilike</span> <span class="hljs-variable">like</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">like</span>();<br>   like.lambda();<br><br>     <span class="hljs-type">Ilike</span> <span class="hljs-variable">like2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">like2</span>();<br>     like2.lambda();<br><br><br><br>    <span class="hljs-comment">//局部内部类：</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">like3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ilike</span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;I like lambda33&quot;</span>);<br>   &#125;<br>  &#125;<br>  like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">like3</span>();<br>   like.lambda();<br><br><br>   <span class="hljs-comment">//匿名内部类</span><br>   like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ilike</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;i like lambda4&quot;</span>);<br>    &#125;<br>   &#125;;<br>   like.lambda();<br><br>   <span class="hljs-comment">//用lambda简化</span><br>  like = ()-&gt;&#123;<br>   System.out.println(<span class="hljs-string">&quot;i like lambda5&quot;</span>);<br>  &#125;;<br>  like.lambda();<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//定义一个函数接口</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Ilike</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">like</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ilike</span>&#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span><span class="hljs-params">()</span> &#123;<br>  System.out.println(<span class="hljs-string">&quot;I like Lambda&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4、线程停止问题："><a href="#4、线程停止问题：" class="headerlink" title="4、线程停止问题："></a>4、线程停止问题：</h2><p>setPriority(int  newPriority)更改线程的优先级</p><p>static void sleep（long mills）在指定的毫秒数内让当前正在执行的线程休眠</p><p>void join （） 等待该线程终止</p><p>static void yield（）暂停当前正在执行的线程对象，并执行其他的线程</p><p>void interrupt()  中断线程</p><p>boolean isAlive() 检测线程是否处于活动状态</p><h3 id="停止：flag-x3D-false"><a href="#停止：flag-x3D-false" class="headerlink" title="停止：flag&#x3D;false"></a>停止：flag&#x3D;false</h3><p>使用一个标志位进行终止变量，当flag&#x3D;false 则线程终止运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试停止线程</span><br><span class="hljs-comment">// 1.建议线程正常停止，----利用次数，不建议死循环</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   2.建议使用标志位，设置一个标志位</span><br><span class="hljs-comment">   3.不要使用stop 或者destroy等过时或者JDK不建议使用的方法</span><br><span class="hljs-comment">   */</span><br><span class="hljs-comment">// /*</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StopTest</span> &#123;<br>    <span class="hljs-comment">//设置一个标识位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;run.....Thread&quot;</span> + i++);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//设置一个公开的方法停止线程，转换标志位</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StopTest</span> <span class="hljs-variable">stopTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopTest</span>();<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>().start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;mian&quot;</span>+i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">900</span>) &#123;<br>                <span class="hljs-comment">//调用stop方法切换标识位</span><br>                stopTest.stop();<br>                System.out.println(<span class="hljs-string">&quot;线程该停止了&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Sleep线程睡眠："><a href="#Sleep线程睡眠：" class="headerlink" title="Sleep线程睡眠："></a>Sleep线程睡眠：</h3><ol><li>sleep 指定当前进程阻塞的毫秒数</li><li>Sleep 存在异常InterruptedException;</li><li>Sleep时间到达后线程进入就绪状态</li><li>Sleep可以模拟网络延时</li><li>每一个对象都有一个锁，Sleep不会释放锁。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//倒计时：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        tenDown();<br>    &#125;<br>    <span class="hljs-comment">//打印系统当前时间</span><br>    <span class="hljs-comment">//模拟网络延时：倒计时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tenDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(num--);<br>            <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//打印系统当前时间</span><br><br></code></pre></td></tr></table></figure><p>Sleep打印系统的当前时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//打印系统当前时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>          <span class="hljs-type">Date</span>  <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());  <span class="hljs-comment">//获取系统当前时间</span><br>              <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                  Thread.sleep(<span class="hljs-number">1000</span>);<br>                  System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<br>                  startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<br> &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Yield-线程礼让"><a href="#Yield-线程礼让" class="headerlink" title="Yield 线程礼让"></a>Yield 线程礼让</h3><ol><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让CPU从新调度，礼让不一定成功</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YieldTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyYield</span> <span class="hljs-variable">myYield</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyYield</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myYield,<span class="hljs-string">&quot;a&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myYield,<span class="hljs-string">&quot;b&quot;</span>).start();<br>    &#125;<br>    <br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyYield</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程开始执行&quot;</span>);<br>        Thread.<span class="hljs-keyword">yield</span>();<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程暂停执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需要插队的线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>        System.out.println(<span class="hljs-string">&quot;线程vip来捏&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nain</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">TestJoin</span> <span class="hljs-variable">testJoin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestJoin</span>();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testJoin);<br>    thread.start();<br>&#125;<br><span class="hljs-comment">//被插队的线程</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">200</span>)&#123;<br>       thread.join()<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>     Sysout.out.printl(<span class="hljs-string">&quot;main&quot;</span>+i)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Thread-State"><a href="#Thread-State" class="headerlink" title="Thread.State"></a>Thread.State</h3><p>观测线程状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-comment">//run方法和main方法交替出现，交替执行</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()-&gt;&#123;<br>         <span class="hljs-comment">//run 方法线程 副线程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;       <br>               System.out.println(<span class="hljs-string">&quot;我在看代码&quot;</span>+i);<br>    &#125;<br>     <br>        &#125;;<br>      <br>    <span class="hljs-comment">//观察线程状态：</span><br>    Thread.State state= thread.getState();<br>    System.out.println(state);<br>    <br>    <span class="hljs-comment">//观察启动后</span><br>    thread.start();<span class="hljs-comment">//启动线程</span><br>    state = thread.getState();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程优先级："><a href="#线程优先级：" class="headerlink" title="线程优先级："></a>线程优先级：</h3><ol><li><p>线程优先级通过数字来表示：范围 1–10； 实际结果看CPU实际情况，优先级没啥用</p><p>Thread.MIN_PRORITY &#x3D; 1;</p><p>Thread.MAX_PRIORITY&#x3D;10;</p><p>Thread.NORM_PRIORITY&#x3D;5;</p></li><li><p>使用一下方式获取或改变优先级；</p></li></ol><p>getPriority().setPriority(int xxx)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;----&gt;&quot;</span>+Thread.currentThread().getPriority());<br>        <span class="hljs-type">MyPriority</span> <span class="hljs-variable">myPriority</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPriority</span>();<br><br>        Thread t1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority);<br>        Thread t2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority);<br>        Thread t3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority);<br><br>        <span class="hljs-comment">//先设置优先级</span><br>        t1.start();<br>        t1.setPriority(<span class="hljs-number">5</span>);<br>        t2.setPriority(<span class="hljs-number">1</span>);<br>        t2.start();<br><br>        t3.start();<br>        t3.setPriority(Thread.MAX_PRIORITY);<br>    &#125;<br><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="daemon守护线程："><a href="#daemon守护线程：" class="headerlink" title="daemon守护线程："></a>daemon守护线程：</h3><p>虚拟机必须确保用户线程执行完毕，虚拟机不用等待守护线程执行完毕</p><p>线程分为用户线程和守护线程</p><p>守护线程包括：后台记录操作日志、监控内存、垃圾回收等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><h1 id="4、线程同步（重点）"><a href="#4、线程同步（重点）" class="headerlink" title="4、线程同步（重点）"></a>4、线程同步（重点）</h1><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ol><li><p>并发：多个进程操作同一个对象</p><p>比如：上万人同时登陆一个网站，多人同时使用一个系统</p></li><li><p>处理多线程问题时候，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候需要线程同步。</p></li><li><p>线程同步其实就是一种等待机制，等待前面的线程使用完毕，下一个线程在使用。</p></li><li><p>多个需要访问同一个对象线程进入这个对象的等待池。</p></li></ol><h3 id="2-线程锁机制："><a href="#2-线程锁机制：" class="headerlink" title="2.线程锁机制："></a>2.线程锁机制：</h3><ol><li>每个对象都有一个锁</li><li>每一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程的情况下，加锁，释放锁会导致比较多的上下文和调度延时，引起性能问题</li><li>若优先级高的线程等待优先级低的线程释放锁，会导致优先级倒置，引起性能问题</li></ol><h3 id="3-synchronized方法和-synchronized块"><a href="#3-synchronized方法和-synchronized块" class="headerlink" title="3.synchronized方法和 synchronized块"></a>3.synchronized方法和 synchronized块</h3><h4 id="同步方法："><a href="#同步方法：" class="headerlink" title="同步方法："></a>同步方法：</h4><p>public synchronized void method(int args){}</p><p>在方法</p><h4 id="同步块："><a href="#同步块：" class="headerlink" title="同步块："></a>同步块：</h4><p>   synchronized（Obj）{} </p><ol><li><p>obj可以是任何对象，但是推荐使用共享资源作为同步监视器       </p></li><li><p>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this</p><p>同步监视器的执行过程：</p><ol><li>第一个线程访问，锁定同步监视器，执行其中代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，解锁同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li></ol></li></ol><p>synchronized（Obj）{} </p><p>银行取钱问题：(不安全的取钱问题)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSafeBank</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">1000000</span>,<span class="hljs-string">&quot;10086&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人你&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">yougirl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人yougirl&quot;</span>);<br><br>       you.start();<br>       yougirl.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//账户</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Account</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span><span class="hljs-number">1000000</span>;  <span class="hljs-comment">//如果为100 就会不安全；</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10086&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money,String name)</span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Account  account; <span class="hljs-comment">//账户</span><br>    <span class="hljs-type">int</span> drawingMoney;<span class="hljs-comment">//取了多少钱</span><br>    <span class="hljs-type">int</span> nowMoney;<span class="hljs-comment">//现在手里有多少钱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span><span class="hljs-params">(Account account,<span class="hljs-type">int</span> drawingMoney,String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);  <span class="hljs-comment">//super 调用必须是构造函数里面的第一条语句</span><br>        <span class="hljs-built_in">this</span>.account = account;<br>        <span class="hljs-built_in">this</span>.drawingMoney=drawingMoney;<br><br>    &#125;<br>    <span class="hljs-comment">//取钱的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">// 判断账户里面的钱还有多少</span><br>        <span class="hljs-keyword">if</span> (account.money-drawingMoney&lt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;您的余额为&quot;</span>+account.money+<span class="hljs-string">&quot;余额不足，取不了&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//卡内的余额</span><br>        account.money = account.money - drawingMoney;<br>        <span class="hljs-comment">//你手里的钱</span><br>        nowMoney = nowMoney +drawingMoney;<br>        System.out.println(account.name+<span class="hljs-string">&quot;余额为&quot;</span>+account.money);<br>        System.out.println(Thread.currentThread().getName());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized (obj){}   同步块模式下的安全</p><p>银行取钱问题：(安全的取钱问题)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSafeBank</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&quot;10086&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人你&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">yougirl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人yougirl&quot;</span>);<br>       <span class="hljs-type">Drawing</span> <span class="hljs-variable">youchilds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;取钱人youchilds&quot;</span>);<br><br>       you.start();<br>       yougirl.start();<br>       youchilds.start();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//账户</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Account</span>&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span><span class="hljs-number">101</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10086&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money,String name)</span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Account account; <span class="hljs-comment">//账户</span><br>    <span class="hljs-type">int</span> drawingMoney;<span class="hljs-comment">//取了多少钱</span><br>    <span class="hljs-type">int</span> nowMoney;<span class="hljs-comment">//现在手里有多少钱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-type">int</span> drawingMoney, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);  <span class="hljs-comment">//super 调用必须是构造函数里面的第一条语句</span><br>        <span class="hljs-built_in">this</span>.account = account;<br>        <span class="hljs-built_in">this</span>.drawingMoney = drawingMoney;<br><br>    &#125;<br><br>    <span class="hljs-comment">//取钱的方法</span><br>    <span class="hljs-comment">//synchronized 默认锁的是this. 就是它本身 有时候要用同步块</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (account) &#123;<br>            <span class="hljs-comment">// 判断账户里面的钱还有多少</span><br>            <span class="hljs-keyword">if</span> (account.money - drawingMoney &lt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;您的余额为&quot;</span> + account.money + <span class="hljs-string">&quot;余额不足，取不了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//卡内的余额</span><br>            account.money = account.money - drawingMoney;<br>            <span class="hljs-comment">//你手里的钱</span><br>            nowMoney = nowMoney + drawingMoney;<br>            System.out.println(account.name + <span class="hljs-string">&quot;余额为&quot;</span> + account.money);<br>            System.out.println(Thread.currentThread().getName());<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、死锁"><a href="#4、死锁" class="headerlink" title="4、死锁"></a>4、死锁</h3><ol><li><p>多个线程互相拥有对方的资源，形成僵持</p><p>避免死锁的方法：</p><ol><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞是，对已获得的资源保持不变</li><li>不剥夺条件：进程已经获得的资源，在未使用完之前就不会被剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环资源关系</li></ol><p>破坏上面中的任意一个或者多个条件死锁就可以避免发生</p><h3 id="5、线程池："><a href="#5、线程池：" class="headerlink" title="5、线程池："></a>5、线程池：</h3><p>思路就是提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁的销毁、实现重复使用，类似于公共交通工具。</p><p>优点：</p><ol><li>提高响应速度</li><li>降低资源消耗</li><li>便于管理</li><li>corePoolSize  ：核心池的大小</li><li>maximumPoolSize  ：最大线程数</li><li>keepAliveTime: 线程没有任务时最多保持多长时间会停止</li></ol><p>void shutdown():关闭线程池</p></li></ol><h1 id="6、高级主题"><a href="#6、高级主题" class="headerlink" title="6、高级主题"></a>6、高级主题</h1>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16泛型</title>
    <link href="/2023/04/02/16%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/04/02/16%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15集合</title>
    <link href="/2023/04/02/15%E9%9B%86%E5%90%88/"/>
    <url>/2023/04/02/15%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="1、集合体系介绍"><a href="#1、集合体系介绍" class="headerlink" title="1、集合体系介绍"></a>1、集合体系介绍</h1><h2 id="01、数组弊端"><a href="#01、数组弊端" class="headerlink" title="01、数组弊端"></a>01、数组弊端</h2><p>数组在内存存储方面的特点：</p><ul><li>数组初始化以后，长度就确定了。</li><li>数组中的添加的元素是依次紧密排列的，有序的，可以重复的。</li><li>数组声明的类型，就决定了进行元素初始化时的类型。不是此类型的变量，就不能添加。</li><li>可以存储基本数据类型值，也可以存储引用数据类型的变量</li></ul><p>数组在存储数据方面的弊端：</p><ul><li><p>数组初始化以后，长度就不可变了，不便于扩展</p></li><li><p>数组中提供的属性和方法少，不便于进行添加、删除、插入、获取元素个数等操作，且效率不高。</p></li><li><p>数组存储数据的特点单一，只能存储有序的、可以重复的数据</p></li><li><p>Java 集合框架中的类可以用于存储多个对象，还可用于保存具有映射关系的关联数组。</p></li></ul><h2 id="02、Java集合框架"><a href="#02、Java集合框架" class="headerlink" title="02、Java集合框架"></a>02、Java集合框架</h2><ul><li><p>Collection接口：用于存储一个一个的数据，也称单列数据集合。</p></li><li><p>List子接口：用来存储有序的、可以重复的数据（主要用来替换数组，”动态”数组）</p></li><li><ul><li>实现类：ArrayList(主要实现类)、LinkedList、Vector</li><li>Set子接口：用来存储无序的、不可重复的数据（类似于高中讲的”集合”）</li></ul></li><li><p>实现类：HashSet(主要实现类)、LinkedHashSet、TreeSetMap接口：用于存储具有映射关系“key-value对”的集合，即一对一对的数据，也称双列数据集合。(类似于高中的函数、映射。(x1,y1),(x2,y2) —&gt; y &#x3D; f(x) )</p></li><li><p>HashMap(主要实现类)、LinkedHashMap、TreeMap、Hashtable、PropertiesJDK提供的集合API位于java.util包内</p></li></ul><h2 id="03、集合的使用场景："><a href="#03、集合的使用场景：" class="headerlink" title="03、集合的使用场景："></a>03、集合的使用场景：</h2><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\集合使用场景.png" alt="集合"></p><h1 id="2、Collection接口和常用方法"><a href="#2、Collection接口和常用方法" class="headerlink" title="2、Collection接口和常用方法"></a>2、Collection接口和常用方法</h1><h2 id="01、Collection接口及方法"><a href="#01、Collection接口及方法" class="headerlink" title="01、Collection接口及方法"></a>01、Collection接口及方法</h2><ul><li>JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set和List）去实现。</li><li>Collection 接口是 List和Set接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 集合。方法如下：</li></ul><h3 id="01-1添加"><a href="#01-1添加" class="headerlink" title="01.1添加"></a>01.1添加</h3><p>（1）add(E obj)：添加元素对象到当前集合中<br>（2）addAll(Collection other)：添加other集合中的所有元素对象到当前集合中，即this &#x3D; this ∪ other</p><p>注意：add和addAll的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.collection;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCollectionAdd</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//ArrayList是Collection的子接口List的实现类之一。</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        coll.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;石破天&quot;</span>);<br>        System.out.println(coll);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c1.add(<span class="hljs-number">1</span>);<br>        c1.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c1 = &quot;</span> + c1);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c2.add(<span class="hljs-number">1</span>);<br>        c2.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c2 = &quot;</span> + c2);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        other.add(<span class="hljs-number">1</span>);<br>        other.add(<span class="hljs-number">2</span>);<br>        other.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;other集合元素的个数：&quot;</span> + other.size());<span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;other = &quot;</span> + other);<br>        System.out.println();<br><br>        c1.addAll(other);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//5</span><br>        System.out.println(<span class="hljs-string">&quot;c1.addAll(other) = &quot;</span> + c1);<br><br>        c2.add(other);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;c2.add(other) = &quot;</span> + c2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\Colladd和colladdall的区别.png" alt="colladd和colladdall的区别"></p><h2 id="02、判断"><a href="#02、判断" class="headerlink" title="02、判断"></a>02、判断</h2><p>（1）int size()：获取当前集合中实际存储的元素个数<br>（2）boolean isEmpty()：判断当前集合是否为空集合<br>（3）boolean contains(Object obj)：判断当前集合中是否存在一个与obj对象equals返回true的元素<br>（4）boolean containsAll(Collection coll)：判断coll集合中的元素是否在当前集合中都存在。即coll集合是否是当前集合的“子集”<br>（5）boolean equals(Object obj)：判断当前集合与obj是否相等package com.atguigu.collection;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.collection;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCollectionContains</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        System.out.println(<span class="hljs-string">&quot;coll在添加元素之前，isEmpty = &quot;</span> + coll.isEmpty());<br>        coll.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;石破天&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;佛地魔&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;coll的元素个数&quot;</span> + coll.size());<br><br>        System.out.println(<span class="hljs-string">&quot;coll在添加元素之后，isEmpty = &quot;</span> + coll.isEmpty());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        coll.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;石破天&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;佛地魔&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;coll = &quot;</span> + coll);<br>        System.out.println(<span class="hljs-string">&quot;coll是否包含“小李广” = &quot;</span> + coll.contains(<span class="hljs-string">&quot;小李广&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;coll是否包含“宋红康” = &quot;</span> + coll.contains(<span class="hljs-string">&quot;宋红康&quot;</span>));<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        other.add(<span class="hljs-string">&quot;小李广&quot;</span>);<br>        other.add(<span class="hljs-string">&quot;扫地僧&quot;</span>);<br>        other.add(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;other = &quot;</span> + other);<br><br>        System.out.println(<span class="hljs-string">&quot;coll.containsAll(other) = &quot;</span> + coll.containsAll(other));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c1.add(<span class="hljs-number">1</span>);<br>        c1.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c1 = &quot;</span> + c1);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c2.add(<span class="hljs-number">1</span>);<br>        c2.add(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-string">&quot;c2 = &quot;</span> + c2);<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        other.add(<span class="hljs-number">1</span>);<br>        other.add(<span class="hljs-number">2</span>);<br>        other.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;other集合元素的个数：&quot;</span> + other.size());<span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;other = &quot;</span> + other);<br>        System.out.println();<br><br>        c1.addAll(other);<br>        System.out.println(<span class="hljs-string">&quot;c1集合元素的个数：&quot;</span> + c1.size());<span class="hljs-comment">//5</span><br>        System.out.println(<span class="hljs-string">&quot;c1.addAll(other) = &quot;</span> + c1);<br>        System.out.println(<span class="hljs-string">&quot;c1.contains(other) = &quot;</span> + c1.contains(other));<br>        System.out.println(<span class="hljs-string">&quot;c1.containsAll(other) = &quot;</span> + c1.containsAll(other));<br>        System.out.println();<br><br>        c2.add(other);<br>        System.out.println(<span class="hljs-string">&quot;c2集合元素的个数：&quot;</span> + c2.size());<br>        System.out.println(<span class="hljs-string">&quot;c2.add(other) = &quot;</span> + c2);<br>        System.out.println(<span class="hljs-string">&quot;c2.contains(other) = &quot;</span> + c2.contains(other));<br>        System.out.println(<span class="hljs-string">&quot;c2.containsAll(other) = &quot;</span> + c2.containsAll(other));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="03、删除："><a href="#03、删除：" class="headerlink" title="03、删除："></a>03、删除：</h2><p>clear  在集合里面一个一个删除不浪费内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test02</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll02.add(<span class="hljs-string">&#x27;2&#x27;</span>);<br>       coll02.add(<span class="hljs-string">&quot;汉字&quot;</span>);<br>       coll02.add(<span class="hljs-number">1234</span>);<br>       System.out.println(coll02); <span class="hljs-comment">//[2,汉字，1234]</span><br>       coll02.clear();<br>       System.out.println(coll02);  <span class="hljs-comment">// []</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>remove:  在集合里面删除指定的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">coll03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">Person02</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;萧代&quot;</span>);<br>        coll03.add(<span class="hljs-number">123456</span>);<br>        coll03.add(<span class="hljs-string">&quot;ABC&quot;</span>);<br>        coll03.add(p1);<br>        System.out.println(coll03);<br>        coll03.remove(p1);<br>        System.out.println(coll03);<br>    &#125;<br></code></pre></td></tr></table></figure><p>remove  all：  比较当前集合和 coll 集合 ，从当前的集合中删除所有与 coll集合中相同的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test04</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       <span class="hljs-type">Person02</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;萧代&quot;</span>);<br>       coll04.add(<span class="hljs-number">123</span>);<br>       coll04.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       coll04.add(<span class="hljs-number">123456</span>);<br>       coll04.add(<span class="hljs-string">&quot;ABC&quot;</span>);<br>       coll04.add(p1);<br>       System.out.println(coll04); <span class="hljs-comment">//[123, 谁, 123456, ABC, Person02&#123;age=12, name=&#x27;萧代&#x27;&#125;]</span><br><br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll.add(<span class="hljs-string">&#x27;a&#x27;</span>);<br>       coll.add(<span class="hljs-number">123</span>);  <span class="hljs-comment">//没有报错是因为装箱了</span><br>       coll.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       System.out.println(coll); <span class="hljs-comment">// [a, 123, 谁]</span><br>       <span class="hljs-comment">//remove all 比较当前集合和 coll 集合 ，从当前的集合中删除所有与 coll集合中相同的元素</span><br>       coll04.removeAll(coll);<br>       System.out.println(coll04);  <span class="hljs-comment">//[123456, ABC, Person02&#123;age=12, name=&#x27;萧代&#x27;&#125;]</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>retain all :  比较俩个集合,保留他们的交集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-comment">//retain all</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test05</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       <span class="hljs-type">Person02</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;萧代&quot;</span>);<br>       coll04.add(<span class="hljs-number">123</span>);<br>       coll04.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       coll04.add(<span class="hljs-number">123456</span>);<br>       coll04.add(<span class="hljs-string">&quot;ABC&quot;</span>);<br>       coll04.add(p1);<br>       System.out.println(coll04);  <span class="hljs-comment">//[123, 谁, 123456, ABC, Person02&#123;age=12, name=&#x27;萧代&#x27;&#125;]</span><br><br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll.add(<span class="hljs-string">&#x27;a&#x27;</span>);<br>       coll.add(<span class="hljs-number">123</span>);  <span class="hljs-comment">//没有报错是因为装箱了</span><br>       coll.add(<span class="hljs-string">&quot;谁&quot;</span>);<br>       System.out.println(coll);  <span class="hljs-comment">//[a, 123, 谁]</span><br>       <span class="hljs-comment">//remove all 比较当前集合和 coll 集合 ，从当前的集合中保留所有与 coll集合中相同的元素</span><br>       coll04.retainAll(coll);<br>       System.out.println(coll04);  <span class="hljs-comment">//[123, 谁]</span><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="04、集合-—-gt-数组"><a href="#04、集合-—-gt-数组" class="headerlink" title="04、集合 —&gt; 数组"></a>04、集合 —&gt; 数组</h2><h3 id="02、迭代器—-遍历集合元素"><a href="#02、迭代器—-遍历集合元素" class="headerlink" title="02、迭代器—-遍历集合元素"></a>02、迭代器—-遍历集合元素</h3><p>iterator :返回迭代器对象，用于集合遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test6</span><span class="hljs-params">()</span>&#123;<br>       String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-string">&quot;DD&quot;</span>&#125;;<br>      <span class="hljs-type">Collection</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span>  Arrays.asList(arr);<br>       System.out.println(list);<br><br>       <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>);<br>       System.out.println(list1);<br><br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口java.util.Iterator。Iterator接口也是Java集合中的一员，但它与Collection、Map接口有所不同。</p></li><li><p>Collection接口与Map接口主要用于存储元素<br>Iterator，被称为迭代器接口，本身并不提供存储对象的能力，主要用于遍历Collection中的元素</p></li><li><p>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</p></li><li><p>public Iterator iterator(): 获取集合对应的迭代器，用来遍历集合中的元素的。<br>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</p></li></ul><h1 id="3、迭代器的使用、增强for的使用"><a href="#3、迭代器的使用、增强for的使用" class="headerlink" title="3、迭代器的使用、增强for的使用"></a>3、迭代器的使用、增强for的使用</h1><h2 id="01、通过迭代器来遍历集合"><a href="#01、通过迭代器来遍历集合" class="headerlink" title="01、通过迭代器来遍历集合"></a>01、通过迭代器来遍历集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Collection</span> <span class="hljs-variable">coll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       coll.add(<span class="hljs-string">&#x27;a&#x27;</span>);<br>       coll.add(<span class="hljs-number">123</span>);  <span class="hljs-comment">//没有报错是因为装箱了</span><br>       coll.add(<span class="hljs-string">&quot;谁&quot;</span>);<br><br><br>       System.out.println(coll);<span class="hljs-comment">//</span><br>       <span class="hljs-comment">//获取迭代器对象</span><br>       <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> coll.iterator();<br>       <br>       <span class="hljs-comment">//方式1</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ;i&lt; coll.size();i++)&#123;<br>           System.out.println(iterator.next());<br>       &#125;<br>       <span class="hljs-comment">//方式2</span><br>       <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>           System.out.println(iterator.next());<br>       &#125;<br></code></pre></td></tr></table></figure><h1 id="4、List的常用方法、主要实现类对比"><a href="#4、List的常用方法、主要实现类对比" class="headerlink" title="4、List的常用方法、主要实现类对比"></a>4、List的常用方法、主要实现类对比</h1><h2 id="4-1、List接口的特点："><a href="#4-1、List接口的特点：" class="headerlink" title="4.1、List接口的特点："></a>4.1、List接口的特点：</h2><ul><li><p>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</p></li><li><p>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</p></li></ul><h2 id="4-2-List接口的方法"><a href="#4-2-List接口的方法" class="headerlink" title="4.2 List接口的方法"></a>4.2 List接口的方法</h2><ul><li>插入元素<br>void add(int index, Object ele):在index位置插入ele元素<br> boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li><li>获取元素<br>Object get(int index):获取指定index位置的元素<br>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>     list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>     list.add(<span class="hljs-number">123</span>);<br>     list.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>     list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br>     System.out.println(list); <span class="hljs-comment">//[AA, 123, BB, Person02&#123;age=12, name=&#x27;Tom&#x27;&#125;]</span><br>     <span class="hljs-comment">//添加</span><br>     list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;CC&quot;</span>);<br>     System.out.println(list); <span class="hljs-comment">//[AA, 123, CC, BB, Person02&#123;age=12, name=&#x27;Tom&#x27;&#125;]</span><br>     <span class="hljs-comment">//删除</span><br>     list.remove(<span class="hljs-number">1</span>);<br>     System.out.println(list); <span class="hljs-comment">//[AA, CC, BB, Person02&#123;age=12, name=&#x27;Tom&#x27;&#125;]</span><br> &#125;<br></code></pre></td></tr></table></figure><p>增、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">// 往 尾部添加 指定元素</span><br>        list.add(<span class="hljs-string">&quot;图图&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小美&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;高兴&quot;</span>);<br><br>        System.out.println(list);<br>        <span class="hljs-comment">// add(int index,String s) 往指定位置添加</span><br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;快乐&quot;</span>);<br><br>        System.out.println(list); <br><span class="hljs-comment">//==================================</span><br>       <br></code></pre></td></tr></table></figure><p>删、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span><br>        <span class="hljs-comment">// 删除索引位置为2的元素</span><br>        System.out.println(<span class="hljs-string">&quot;删除索引位置为2的元素&quot;</span>);<br>         list.remove(<span class="hljs-number">2</span>);<br>        System.out.println(list.remove(<span class="hljs-number">2</span>));<br><br>        System.out.println(list);<br></code></pre></td></tr></table></figure><p>改、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String set(int index,String s)</span><br>       <span class="hljs-comment">// 在指定位置 进行 元素替代（改）</span><br>       <span class="hljs-comment">// 修改指定位置元素</span><br>       list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;三毛&quot;</span>);<br>       System.out.println(list);<br></code></pre></td></tr></table></figure><p>查、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String get(int index)  获取指定位置元素</span><br>        <span class="hljs-comment">// 跟size() 方法一起用  来 遍历的</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>            System.out.println(list.get(i));<br>        &#125;<br></code></pre></td></tr></table></figure><p>插、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">add(<span class="hljs-type">int</span> index,Object ele)<br>addAll(<span class="hljs-type">int</span> index,Collection eles)<br>    <br></code></pre></td></tr></table></figure><p>长度、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">size()<br></code></pre></td></tr></table></figure><p>遍历、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//iterator();</span><br> <span class="hljs-meta">@Test</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br>        System.out.println(list);<br>        <span class="hljs-comment">//遍历方式1：使用迭代器</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>        <span class="hljs-comment">//增强 for 循环 遍历</span><br>        <span class="hljs-keyword">for</span> (Object obj:list)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-comment">//一般的for循环遍历：</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt;list.size();i++)&#123;<br>            System.out.println(list.get(i));<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>注意：在JavaSE中List名称的类型有两个，一个是java.util.List集合接口，一个是java.awt.List图形界面的组件，别导错包了。</p><h2 id="4-3、list-主要实现类及其特点"><a href="#4-3、list-主要实现类及其特点" class="headerlink" title="4.3、list 主要实现类及其特点"></a>4.3、list 主要实现类及其特点</h2><h3 id="4-3-1List接口主要实现类：ArrayList"><a href="#4-3-1List接口主要实现类：ArrayList" class="headerlink" title="4.3.1List接口主要实现类：ArrayList"></a>4.3.1List接口主要实现类：ArrayList</h3><p>ArrayList 是 List 接口的主要实现类，在添加、查找数据时，效率较高，在插入、删除数据时效率较低。</p><ul><li><p>本质上，ArrayList是对象引用的一个”变长”数组</p></li><li><p>Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合</p></li></ul><h3 id="4-3-2List的实现类之二：LinkedList"><a href="#4-3-2List的实现类之二：LinkedList" class="headerlink" title="4.3.2List的实现类之二：LinkedList"></a>4.3.2List的实现类之二：LinkedList</h3><p>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。这是由底层采用链表（双向链表）结构存储数据决定的。在插入、删除数据时效率较高、在添加、查找数据时效率较低。</p><p>特有方法：</p><ul><li>void addFirst(Object obj)</li><li>void addLast(Object obj)</li><li>Object getFirst()</li><li>Object getLast()</li><li>Object removeFirst()</li><li>Object removeLast()</li></ul><h3 id="4-3-3、List的实现类之三Vector"><a href="#4-3-3、List的实现类之三Vector" class="headerlink" title="4.3.3、List的实现类之三Vector"></a>4.3.3、List的实现类之三Vector</h3><p>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。效率低，尽量避免使用。</p><h1 id="5、List案例题目"><a href="#5、List案例题目" class="headerlink" title="5、List案例题目"></a>5、List案例题目</h1><p>①：定义学生类，属性为姓名、年龄、提供必要的 getter、setter 方法，构造器。toString(), equals()方法</p><p>②：使用ArrayList集合，保存到录入的对个学生对象。</p><p>③：循环录入的方式，1：继续录入 0：结束录入</p><p>④：录入结束后，用 foreach 遍历集合</p><p>问题：从键盘录入学生的信息，保存到集合List中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        System.out.println(<span class="hljs-string">&quot;请录入学生信息&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;1:继续录入，0：结束录入&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-keyword">if</span> (selection == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.print(<span class="hljs-string">&quot;请输入学生的姓名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>            System.out.print(<span class="hljs-string">&quot;请输入学生的年龄&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,age);<br><br>            list.add(s);<br><br>        &#125;<br>        <span class="hljs-comment">//遍历学生信息</span><br><br>        System.out.println(<span class="hljs-string">&quot;遍历学生的信息&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object s :list)&#123;<br>            System.out.println(s.toString());<br>        &#125;<br><span class="hljs-comment">//        System.out.println(list);</span><br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\录入学生信息.jpg" alt="学生信息"></p><h3 id="例题：统计集合中指定元素出现的次数"><a href="#例题：统计集合中指定元素出现的次数" class="headerlink" title="例题：统计集合中指定元素出现的次数"></a>例题：统计集合中指定元素出现的次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求1：随机生成26个字符，存放到ArrayList中</span><br><br><span class="hljs-comment">//需求2：遍历ArrayList查找指定元素出现的次数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//需求1：随机生成26个字符，存放到ArrayList中</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span> ;i&lt;<span class="hljs-number">27</span>;i++)&#123;<br><br>            list.add( (<span class="hljs-type">char</span>)(Math.random()*(<span class="hljs-number">122</span>-<span class="hljs-number">97</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">97</span>)+<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        System.out.println(list);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">aCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;b&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;c&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">xCount</span> <span class="hljs-operator">=</span> listTest(list,<span class="hljs-string">&quot;x&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>+aCount);<br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>+bCount);<br>        System.out.println(<span class="hljs-string">&quot;c&quot;</span>+cCount);<br>        System.out.println(<span class="hljs-string">&quot;x&quot;</span>+xCount);<br><br>    &#125;<br><br>    <span class="hljs-comment">//需求2：遍历ArrayList查找指定元素出现的次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">listTest</span><span class="hljs-params">(Collection list, String s)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Object obj:list)&#123;<br>            <span class="hljs-keyword">if</span> (s.equals(obj))&#123;<br>                count ++;<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="6、Set存储特点、HashSet-、LinkedHash、LinkedHashSet的使用"><a href="#6、Set存储特点、HashSet-、LinkedHash、LinkedHashSet的使用" class="headerlink" title="6、Set存储特点、HashSet 、LinkedHash、LinkedHashSet的使用"></a>6、Set存储特点、HashSet 、LinkedHash、LinkedHashSet的使用</h1><ul><li>Set接口是Collection的子接口，Set接口相较于Collection接口没有提供额外的方法</li><li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</li><li>Set集合支持的遍历方式和Collection集合一样：foreach和Iterator。</li><li>Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。</li></ul><h2 id="6-1-Set主要实现类：HashSet"><a href="#6-1-Set主要实现类：HashSet" class="headerlink" title="6.1 Set主要实现类：HashSet"></a>6.1 Set主要实现类：HashSet</h2><p>HashSet:主要实现类：底层是使用HashMa，即使用数组+单向列表+红黑树结构进行存储。</p><p>LinkedHashSet 是HashSet的子类，在现有的数组+单向列表+红黑树结构的基础上有添加了一组双向链表，用于记录添加元素的先后顺序。即我们也可以按照元素的顺序来实现遍历。</p><ul><li><p>HashSet 是 Set 接口的主要实现类，大多数时候使用 Set 集合时都使用这个实现类。</p></li><li><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存储、查找、删除性能。</p></li><li><p>HashSet 具有以下特点：</p></li><li><p>不能保证元素的排列顺序</p></li><li><p>HashSet 不是线程安全的</p></li><li><p>集合元素可以是 null</p></li><li><p>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法得到的哈希值相等，并且两个对象的 equals()方法返回值为true。</p></li><li><p>对于存放在Set容器中的对象，对应的类一定要重写hashCode()和equals(Object obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</p></li><li><p>HashSet集合中元素的无序性，不等同于随机性。这里的无序性与元素的添加位置有关。具体来说：我们在添加每一个元素到数组中时，具体的存储位置是由元素的hashCode()调用后返回的hash值决定的。导致在数组中每个元素不是依次紧密存放的，表现出一定的无序性。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();  <span class="hljs-comment">//LinkedHashSet 是HashSet的子类添加了一组双向链表，可以按照元素的顺序来实现遍历。</span><br>       set.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>       set.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>       set.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>       set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person02</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br><br>       <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br>       <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>           System.out.println(iterator.next());<br>       &#125;<br></code></pre></td></tr></table></figure><h1 id="7、HashSet的案例、TreeSet的自然排序，定期排序"><a href="#7、HashSet的案例、TreeSet的自然排序，定期排序" class="headerlink" title="7、HashSet的案例、TreeSet的自然排序，定期排序"></a>7、HashSet的案例、TreeSet的自然排序，定期排序</h1><h3 id="案例：排序"><a href="#案例：排序" class="headerlink" title="案例：排序"></a>案例：排序</h3><p>案例：比较年龄从小到大排序，如果年龄相同，就继续比较姓名，从小到大排序</p><p>案例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>①、参数List中只存放Integer的对象<br><span class="hljs-regexp">//</span>②、在list内取出重复的数字，尽量简单<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//①、参数List中只存放Integer的对象</span><br><span class="hljs-comment">//②、在list内取出重复的数字，尽量简单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-number">22</span>);<br>        list.add(<span class="hljs-number">22</span>);<br>        list.add(<span class="hljs-number">33</span>);<br>        list.add(<span class="hljs-number">33</span>);<br>        list.add(<span class="hljs-number">44</span>);<br>        list.add(<span class="hljs-number">66</span>);<br>        list.add(<span class="hljs-number">44</span>);<br>        list.add(<span class="hljs-number">55</span>);<br>        list.add(<span class="hljs-number">55</span>);<br><br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">newlist</span> <span class="hljs-operator">=</span> duplicateList(list);<br>        System.out.println(newlist);<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  List <span class="hljs-title function_">duplicateList</span><span class="hljs-params">(List list)</span>&#123;<br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-keyword">for</span> (Object obj:list)&#123;<br>            set.add(obj);<br>        &#125;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">for</span> (Object obj :set)&#123;<br>            list1.add(obj);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> list1;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>案例：编写一个程序要求打印10个 1-20的随机数要求随机数不能够重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编写一个程序要求打印10个 1-20的随机数要求随机数不能够重复</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exert02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>        <span class="hljs-keyword">while</span> (set.size()&lt;<span class="hljs-number">10</span>)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random()*(<span class="hljs-number">20</span>-<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>) ;<br>            set.add(random);<br>        &#125;<br><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.hasNext());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8、Map的实现类说明、HashMap的数据存储的特点"><a href="#8、Map的实现类说明、HashMap的数据存储的特点" class="headerlink" title="8、Map的实现类说明、HashMap的数据存储的特点"></a>8、Map的实现类说明、HashMap的数据存储的特点</h1><p>现实生活与开发中，我们常会看到这样的一类集合：用户ID与账户信息、学生姓名与考试成绩、IP地址与主机名等，这种一 一对应的关系，就称作映射。Java提供了专门的集合框架用来存储这种映射关系的对象，即java.util.Map接口。</p><ul><li><p>Map与Collection并列存在。用于保存具有映射关系的数据：key-value</p></li><li><p>Collection集合称为单列集合，元素是孤立存在的（理解为单身）。<br>Map集合称为双列集合，元素是成对存在的(理解为夫妻)。<br>Map 中的 key 和 value 都可以是任何引用类型的数据。但常用String类作为Map的“键”。</p></li><li><p>Map接口的常用实现类：HashMap、LinkedHashMap、TreeMap和&#96;&#96;Properties。其中，HashMap是 Map 接口使用频率最高&#96;的实现类。</p></li></ul><h1 id="9、Map中常用方法演示"><a href="#9、Map中常用方法演示" class="headerlink" title="9、Map中常用方法演示"></a>9、Map中常用方法演示</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加、修改操作：</span><br>Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key,Object value)</span>：将指定key-value添加到(或修改)当前map对象中<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map m)</span>:将m中的所有key-value对存放到当前map中<br><span class="hljs-comment">//删除操作：</span><br>Object <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span>：移除指定key的key-value对，并返回value<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>：清空当前map中的所有数据<br><span class="hljs-comment">//元素查询的操作：</span><br>Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span>：获取指定key对应的value<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsKey</span><span class="hljs-params">(Object key)</span>：是否包含指定的key<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsValue</span><span class="hljs-params">(Object value)</span>：是否包含指定的value<br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>：返回map中key-value对的个数<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>：判断当前map是否为空<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>：判断当前map和参数对象obj是否相等<br><span class="hljs-comment">//元视图操作的方法：</span><br>Set <span class="hljs-title function_">keySet</span><span class="hljs-params">()</span>：返回所有key构成的Set集合<br>Collection <span class="hljs-title function_">values</span><span class="hljs-params">()</span>：返回所有value构成的Collection集合<br>Set <span class="hljs-title function_">entrySet</span><span class="hljs-params">()</span>：返回所有key-value对构成的Set集合<br></code></pre></td></tr></table></figure><p>演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.map;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMapMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建 map对象</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-comment">//添加元素到集合</span><br>        map.put(<span class="hljs-string">&quot;黄晓明&quot;</span>, <span class="hljs-string">&quot;杨颖&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;李晨&quot;</span>, <span class="hljs-string">&quot;李小璐&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;李晨&quot;</span>, <span class="hljs-string">&quot;范冰冰&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<br>        System.out.println(map);<br><br>        <span class="hljs-comment">//删除指定的key-value</span><br>        System.out.println(map.remove(<span class="hljs-string">&quot;黄晓明&quot;</span>));<br>        System.out.println(map);<br><br>        <span class="hljs-comment">//查询指定key对应的value</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;邓超&quot;</span>));<br>        System.out.println(map.get(<span class="hljs-string">&quot;黄晓明&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-1Map-的主要实现类：HashMap"><a href="#9-1Map-的主要实现类：HashMap" class="headerlink" title="9.1Map 的主要实现类：HashMap"></a>9.1Map 的主要实现类：HashMap</h2><p> HashMap概述<br>HashMap是 Map 接口使用频率最高的实现类。<br>HashMap是线程不安全的。允许添加 null 键和 null 值。<br>存储数据采用的哈希表结构，底层使用一维数组+单向链表+红黑树进行key-value数据的存储。与HashSet一样，元素的存取顺序不能保证一致。<br>HashMap 判断两个key相等的标准是：两个 key 的hashCode值相等，通过 equals() 方法返回 true。<br>HashMap 判断两个value相等的标准是：两个 value 通过 equals() 方法返回 true。</p><p>添加你喜欢的歌手以及你喜欢他唱过的歌曲</p><p>例如：<img src="D:\JavaEE\素材\HashMap.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 9:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingerTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个HashMap用于保存歌手和其歌曲集</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">singers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//声明一组key,value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">singer1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;周杰伦&quot;</span>;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">songs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        songs1.add(<span class="hljs-string">&quot;双节棍&quot;</span>);<br>        songs1.add(<span class="hljs-string">&quot;本草纲目&quot;</span>);<br>        songs1.add(<span class="hljs-string">&quot;夜曲&quot;</span>);<br>        songs1.add(<span class="hljs-string">&quot;稻香&quot;</span>);<br>        <span class="hljs-comment">//添加到map中</span><br>        singers.put(singer1,songs1);<br>        <span class="hljs-comment">//声明一组key,value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">singer2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;陈奕迅&quot;</span>;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">songs2</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-string">&quot;浮夸&quot;</span>, <span class="hljs-string">&quot;十年&quot;</span>, <span class="hljs-string">&quot;红玫瑰&quot;</span>, <span class="hljs-string">&quot;好久不见&quot;</span>, <span class="hljs-string">&quot;孤勇者&quot;</span>);<br>        <span class="hljs-comment">//添加到map中</span><br>        singers.put(singer2,songs2);<br><br>        <span class="hljs-comment">//遍历map</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> singers.entrySet();<br>        <span class="hljs-keyword">for</span>(Object obj : entrySet)&#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry)obj;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">singer</span> <span class="hljs-operator">=</span> (String) entry.getKey();<br>            <span class="hljs-type">List</span> <span class="hljs-variable">songs</span> <span class="hljs-operator">=</span> (List) entry.getValue();<br><br>            System.out.println(<span class="hljs-string">&quot;歌手：&quot;</span> + singer);<br>            System.out.println(<span class="hljs-string">&quot;歌曲有：&quot;</span> + songs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10、Map案例"><a href="#10、Map案例" class="headerlink" title="10、Map案例"></a>10、Map案例</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>二级联动</p><p>将省份和城市的名称保存在集合中，当用户选择省份以后，二级联动，显示对应省份的地级市供用户选择。</p><p><img src="D:\JavaEE\素材\省份联动.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康  Email:shkstart@126.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021年5月7日上午12:26:59</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CityMap</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Map</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-keyword">static</span> &#123;<br>model.put(<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;北京&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;上海&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;天津&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;天津&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;重庆&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;重庆&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;黑龙江&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;哈尔滨&quot;</span>,<span class="hljs-string">&quot;齐齐哈尔&quot;</span>,<span class="hljs-string">&quot;牡丹江&quot;</span>,<span class="hljs-string">&quot;大庆&quot;</span>,<span class="hljs-string">&quot;伊春&quot;</span>,<span class="hljs-string">&quot;双鸭山&quot;</span>,<span class="hljs-string">&quot;绥化&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;吉林&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;长春&quot;</span>,<span class="hljs-string">&quot;延边&quot;</span>,<span class="hljs-string">&quot;吉林&quot;</span>,<span class="hljs-string">&quot;白山&quot;</span>,<span class="hljs-string">&quot;白城&quot;</span>,<span class="hljs-string">&quot;四平&quot;</span>,<span class="hljs-string">&quot;松原&quot;</span>&#125;);<br>model.put(<span class="hljs-string">&quot;河北&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;石家庄&quot;</span>,<span class="hljs-string">&quot;张家口&quot;</span>,<span class="hljs-string">&quot;邯郸&quot;</span>,<span class="hljs-string">&quot;邢台&quot;</span>,<span class="hljs-string">&quot;唐山&quot;</span>,<span class="hljs-string">&quot;保定&quot;</span>,<span class="hljs-string">&quot;秦皇岛&quot;</span>&#125;);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProvinceTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Set</span> <span class="hljs-variable">keySet</span> <span class="hljs-operator">=</span> CityMap.model.keySet();<br><span class="hljs-keyword">for</span>(Object s : keySet) &#123;<br>System.out.print(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;请选择你所在的省份：&quot;</span>);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">province</span> <span class="hljs-operator">=</span> scan.next();<br><br>String[] citys = (String[])CityMap.model.get(province);<br><span class="hljs-keyword">for</span>(String city : citys) &#123;<br>System.out.print(city + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;请选择你所在的城市：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> scan.next();<br>System.out.println(<span class="hljs-string">&quot;信息登记完毕&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11、TreeMap与Hashtable的子类"><a href="#11、TreeMap与Hashtable的子类" class="headerlink" title="11、TreeMap与Hashtable的子类"></a>11、TreeMap与Hashtable的子类</h1><h1 id="propertise的使用"><a href="#propertise的使用" class="headerlink" title="propertise的使用"></a>propertise的使用</h1><ul><li>TreeMap存储 key-value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 key-value 对处于有序状态。</li><li>TreeSet底层使用红黑树结构存储数据</li><li>TreeMap 的 Key 的排序：</li><li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li>定制排序：创建 TreeMap 时，构造器传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</li><li>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 1:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTreeMap</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 自然排序举例</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>();<br><br>        map.put(<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-number">45</span>);<br>        map.put(<span class="hljs-string">&quot;MM&quot;</span>,<span class="hljs-number">78</span>);<br>        map.put(<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-number">56</span>);<br>        map.put(<span class="hljs-string">&quot;GG&quot;</span>,<span class="hljs-number">89</span>);<br>        map.put(<span class="hljs-string">&quot;JJ&quot;</span>,<span class="hljs-number">99</span>);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-keyword">for</span>(Object entry : entrySet)&#123;<br>            System.out.println(entry);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 定制排序</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//按照User的姓名的从小到大的顺序排列</span><br><br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> User &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> User)&#123;<br>                    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> (User)o1;<br>                    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> (User)o2;<br><br>                    <span class="hljs-keyword">return</span> u1.name.compareTo(u2.name);<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入的类型不匹配&quot;</span>);<br>            &#125;<br>        &#125;);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>),<span class="hljs-number">67</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Rose&quot;</span>,<span class="hljs-number">23</span>),<span class="hljs-string">&quot;87&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">2</span>),<span class="hljs-number">88</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Eric&quot;</span>,<span class="hljs-number">18</span>),<span class="hljs-number">45</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Tommy&quot;</span>,<span class="hljs-number">44</span>),<span class="hljs-number">77</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-number">23</span>),<span class="hljs-number">88</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Maria&quot;</span>,<span class="hljs-number">18</span>),<span class="hljs-number">34</span>);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-keyword">for</span>(Object entry : entrySet)&#123;<br>            System.out.println(entry);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    举例：按照age从小到大的顺序排列，如果age相同，则按照name从大到小的顺序排列</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == o)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> User)&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)o;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.age - user.age;<br>            <span class="hljs-keyword">if</span>(value != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-built_in">this</span>.name.compareTo(user.name);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入的类型不匹配&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="12、Collection工具类的使用"><a href="#12、Collection工具类的使用" class="headerlink" title="12、Collection工具类的使用"></a>12、Collection工具类的使用</h1><ul><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法（均为static方法）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//排序操作：</span><br><br>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，<span class="hljs-type">int</span>， <span class="hljs-type">int</span>)：将指定 list 集合中的 i 处元素和 j 处元素进行交换<br><span class="hljs-comment">//查找</span><br><br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最小元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最小元素<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key,Comparator c)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">frequency</span><span class="hljs-params">(Collection c，Object o)</span>：返回指定集合中指定元素的出现次数<br><span class="hljs-comment">//复制、替换</span><br>    <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(List dest,List src)</span>：将src中的内容复制到dest中<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(List list，Object oldVal，Object newVal)</span>：使用新值替换 List 对象的所有旧值<br>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。<br><span class="hljs-comment">//添加</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection c,T… elements)</span>将所有指定元素添加到指定 collection 中。<br><span class="hljs-comment">//同步</span><br><br>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：<br></code></pre></td></tr></table></figure><h2 id="1、区分-collection-和-collections"><a href="#1、区分-collection-和-collections" class="headerlink" title="1、区分 collection 和  collections?"></a>1、区分 collection 和  collections?</h2><p>Collection 集合框架中的用于存储一个一个元素的接口，又分为List和Set等的子接口。</p><p>Collections 用于操作集合框架的一个工具类，包括Set 、List 、 Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//排序操作：</span><br><br>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，<span class="hljs-type">int</span>， <span class="hljs-type">int</span>)：将指定 list 集合中的 i 处元素和 j <br>    <br><span class="hljs-comment">//查找</span><br><br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">max</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection)</span>：根据元素的自然顺序，返回给定集合中的最小元素<br>Object <span class="hljs-title function_">min</span><span class="hljs-params">(Collection，Comparator)</span>：根据 Comparator 指定的顺序，返回给定集合中的最小元素<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(List list,T key,Comparator c)</span>在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。<br><span class="hljs-type">int</span> <span class="hljs-title function_">frequency</span><span class="hljs-params">(Collection c，Object o)</span>：返回指定集合中指定元素的出现次数<br>    <br><span class="hljs-comment">//复制、替换</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(List dest,List src)</span>：将src中的内容复制到dest中<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(List list，Object oldVal，Object newVal)</span>：使用新值替换 List 对象的所有旧值<br>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。<br>    <br><span class="hljs-comment">//添加</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection c,T… elements)</span>将所有指定元素添加到指定 collection 中。<br>    <br><span class="hljs-comment">//同步</span><br>    <br>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14常用类</title>
    <link href="/2023/04/02/14%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2023/04/02/14%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="1、包装类WrapperType-java："><a href="#1、包装类WrapperType-java：" class="headerlink" title="1、包装类WrapperType.java："></a>1、包装类WrapperType.java：</h1><h2 id="01、针对八种基本数据类型相应的引用类型—包装类"><a href="#01、针对八种基本数据类型相应的引用类型—包装类" class="headerlink" title="01、针对八种基本数据类型相应的引用类型—包装类"></a>01、针对八种基本数据类型相应的引用类型—包装类</h2><h2 id="02、有类类的特点，就可以调用类中的方法"><a href="#02、有类类的特点，就可以调用类中的方法" class="headerlink" title="02、有类类的特点，就可以调用类中的方法"></a>02、有类类的特点，就可以调用类中的方法</h2><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Char</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><p>02、包装类和基本数据类型的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本数据类型-------&gt;包装类型   jdk5.0之后的</span><br><span class="hljs-comment">//基本数据类型---&gt;包装类型 （装箱）   反之就是拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>Interger integer2= m;  <span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">Interger</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">99</span>);  <span class="hljs-comment">//底层使用的是这个</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span>n;<br>System.out.println(n+<span class="hljs-number">100</span>);<br>System.out.println(n*<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">10</span>)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手动装箱  int --&gt; Integer</span><br><span class="hljs-type">int</span> n1= <span class="hljs-number">100</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer(n1);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(n1);<br><span class="hljs-comment">//手动拆箱  Integer ---&gt; int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br><br></code></pre></td></tr></table></figure><h2 id="3、包装类和String相互转换"><a href="#3、包装类和String相互转换" class="headerlink" title="3、包装类和String相互转换"></a>3、包装类和String相互转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1： Integer --&gt; String </span><br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i+<span class="hljs-string">&quot;&quot;</span>;<br>       <span class="hljs-comment">//方式二：</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> i.toString();  <span class="hljs-comment">//经常用的</span><br>       <span class="hljs-comment">//方式3</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br>       <br>       <span class="hljs-comment">//Strign ---&gt;转换为 包装类</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span>  Integer.parseInt(str4);  <span class="hljs-comment">//自动装箱</span><br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4);<span class="hljs-comment">//构造器</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-comment">// Integer 和 Character 有些常用的方法:</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                System.out.println(&quot;Integer.MIN_VALUE&quot;);  //返回最小值</span><br><span class="hljs-comment">                System.out.println(&quot;Integer.MAX_VALUE&quot;);   //返回最大值</span><br><span class="hljs-comment">                </span><br><span class="hljs-comment">                System.out.println(&quot;Charcter.isDigit(&#x27;a&#x27;));   //判断是不是数字</span><br><span class="hljs-comment">                System.out.println(&quot;Character.isLetter(&#x27;a&#x27;));   //判断是不是字母</span><br><span class="hljs-comment">                System.out.println(&quot;Character.isUpperCase(‘a’)); //判断是不是大写</span><br><span class="hljs-comment">                System.out.println(&quot;Character.isLowerCase(&#x27;a&#x27;));   //判断是不是小写</span><br><span class="hljs-comment">                 </span><br><span class="hljs-comment">                System.out.println(&quot;Character.isWhitespace(&#x27;a&#x27;));   //判断是不是空格</span><br><span class="hljs-comment">                System.out.println(&quot;Character.toLowerCase(&#x27;A&#x27;));   //转成小写</span><br><span class="hljs-comment">                System.out.println(&quot;Character.toUpperCase(&#x27;a&#x27;));     //转成大写</span><br><span class="hljs-comment">         */</span><br></code></pre></td></tr></table></figure><h1 id="2、String"><a href="#2、String" class="headerlink" title="2、String(*)"></a>2、String(*)</h1><p>效率上：</p><p>StringBuffer  &gt;  StringBuilder   &gt;  String</p><p>01、String用来保存字符串，</p><p>02、字符串是用双引号括起来; </p><p>03、字符串的字符内容存储在一个字符数组中的 value[] ；</p><p>04、String常用的构造器;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(String original);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[])a<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[],a,<span class="hljs-type">int</span>,startlndex,<span class="hljs-type">int</span> count)<br></code></pre></td></tr></table></figure><p>String的特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1、String 声明为final 的不可被继承</span><br><span class="hljs-comment">    2、String 实现了Serializable 接口：表示字符串是支持序列化的</span><br><span class="hljs-comment">    3、String 实现了comparable 接口，表示String 可以比较大小</span><br><span class="hljs-comment">    4、String 内部定义了 finally char[] value 用于存储字符串数据</span><br><span class="hljs-comment">    5、String 代表了不可变的字符序列；  简称：不可变性</span><br><span class="hljs-comment">     */</span><br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;  <span class="hljs-comment">//字面量   ；  </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;   <span class="hljs-comment">//s1 和 s2指向的是同一地址值</span><br>    s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <br>    System.out.println(s1); <span class="hljs-comment">//hello</span><br>    System.out.println(s2);   <span class="hljs-comment">//abc</span><br>    System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    s3 += <span class="hljs-string">&quot;def&quot;</span>;  <span class="hljs-comment">//不是在abc 后面拼接的而是 新造的</span><br>    System.out.println(s3); <span class="hljs-comment">//abcdef</span><br>    System.out.println(<span class="hljs-string">&quot;=====================&quot;</span>);<br>        <br>    <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    s4.replace(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>);<br>    System.out.println(s4);<br>    System.out.println(s1);<br></code></pre></td></tr></table></figure><h2 id="01、问题：String内存解析"><a href="#01、问题：String内存解析" class="headerlink" title="01、问题：String内存解析"></a>01、问题：String内存解析</h2><p>String  s1 &#x3D;”abc”  和 String  s2 &#x3D; new String(“abc”)的区别？</p><p>s1 和 s2 所指向的 地址值不一样； s1 直接指向常量区的 abc ;  s2先指向堆空间中new出来的对象，再从堆空间中指向 常量区</p><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\String内存解析.jpg" alt="String内存解析"></p><h2 id="02、String不同拼接操作对比："><a href="#02、String不同拼接操作对比：" class="headerlink" title="02、String不同拼接操作对比："></a>02、String不同拼接操作对比：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaEE&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>  <span class="hljs-comment">//相当于new 一个对象</span><br>    <br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaEE123&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;java&quot;</span>+s2;<br>System.out.println(s1==s4);  <span class="hljs-comment">//false</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、常量 + 常量 结果任然存储在字符串常量池中。这儿的猖=常量可能是字面量，也可能是final修饰的常量。</span><br><span class="hljs-comment">2、常量 + 变量 或者 变量 +变量 都会通过 new的方式 创建一个新的字符串，返回堆空间中，这个字符串对象的地址</span><br><span class="hljs-comment">3、调用字符串的intern():返回的是字符串常量池中的地址</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>基本数据类型传的是基本的数据，引用数据类型传的是地址值</p><h2 id="03、String传参"><a href="#03、String传参" class="headerlink" title="03、String传参:"></a>03、String传参:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(oriqinal:<span class="hljs-string">&quot;good&quot;</span>);<br>String <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span>&#123;<br>    <span class="hljs-type">char</span> [] = &#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span>&#123;<br>        str = <span class="hljs-string">&quot;test ok&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;b&quot;</span>;     <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringTest</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTest</span>();<br>    System.out.println(ex.str);    <span class="hljs-comment">//good</span><br>    System.out.println(ex.ch);     <span class="hljs-comment">//best</span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04、String常用方法"><a href="#04、String常用方法" class="headerlink" title="04、String常用方法"></a>04、String常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br>       System.out.println(s1.length());   <span class="hljs-comment">//返回字符串长度</span><br>       System.out.println(s1.charAt(<span class="hljs-number">0</span>));   <span class="hljs-comment">//返回某个索引的值</span><br>       System.out.println(s1.isEmpty());  <span class="hljs-comment">//判断是否是空字符串</span><br>       System.out.println(s1);<br><br>       String s2= s1.toLowerCase();    <span class="hljs-comment">//将String中的所有字符串转换为小写</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s2.toUpperCase();  <span class="hljs-comment">//将字符串的所有的字符串转换为大写</span><br>       System.out.println(s1);<br>       System.out.println(s2);<br>       <br>       <span class="hljs-comment">//boolean equals(Object obj) 比较字符串的内容是否相同</span><br>       <span class="hljs-comment">//boolean  aqualsIngnoreCase(string  anotherString)  //比较字符串的内容是否相同 ，但是忽略大小写</span><br>     <span class="hljs-comment">//  String concat(String str) 将指定的字符串连接到此字符串的结尾。等价于用 ‘+’；</span><br>       <span class="hljs-comment">// int compareTo(String anotherString):比较俩个字符串的大小</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span>  String(original:<span class="hljs-string">&quot;abe&quot;</span>);<br>    System.out.println(s5.compareTo(s6)); <span class="hljs-comment">// s5 大就为正数  s6大就为 负数 </span><br>      <span class="hljs-comment">// String substring(int beginIndex):  返回一个新的字符串，从beginIndex到最后</span><br>      <span class="hljs-comment">// String substring(int beginIndex，int endIndex):  返回一个新的字符串，从beginIndex到 endIndex结束 不包含最后的endIndex      </span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> boolean endWith(String suffix) 测试字符串是否以指定的后缀结束</span><br><span class="hljs-comment"> boolean startWith(String prefix) 测试字符串是否以指定的前缀开始</span><br><span class="hljs-comment"> boolean startWith(String prefix,int toffset) </span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>*** String  和 StringBuffer 以及 StringBuilder的使用场景***</p><p>1、开发中需要频繁的针对于字符串进行增删改查的操作，建议使用StringBuffer 或StringBuilder替换String 因为使用String效率低</p><p>2、如果开发中，不涉及线程安全问题建议使用StringBuilder替换StringBuffer</p><h1 id="3、StringBuffer（-）"><a href="#3、StringBuffer（-）" class="headerlink" title="3、StringBuffer（*）"></a>3、StringBuffer（*）</h1><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">增（1）StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串追加长度的方式拼接</span><br><span class="hljs-comment">删（2）StringBuffer delete(int start, int end)：删除[start,end)之间字符</span><br><span class="hljs-comment">（3）StringBuffer deleteCharAt(int index)：删除[index]位置字符</span><br><span class="hljs-comment">（4）StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str</span><br><span class="hljs-comment">（5）void setCharAt(int index, char c)：替换[index]位置字符</span><br><span class="hljs-comment">查（6）char charAt(int index)：查找指定index位置上的字符</span><br><span class="hljs-comment">插（7）StringBuffer insert(int index, xx)：在[index]位置插入xx</span><br><span class="hljs-comment">长度（8）int length()：返回存储的字符数据的长度</span><br><span class="hljs-comment">（9）StringBuffer reverse()：反转</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>其他API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">（1）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标</span><br><span class="hljs-comment">（2）int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标</span><br><span class="hljs-comment">（3）int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标</span><br><span class="hljs-comment">（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标</span><br><span class="hljs-comment">（5）String substring(int start)：截取当前字符序列[start,最后]</span><br><span class="hljs-comment">（6）String substring(int start, int end)：截取当前字符序列[start,end)</span><br><span class="hljs-comment">（7）String toString()：返回此序列中数据的字符串表示形式</span><br><span class="hljs-comment">（8）void setLength(int newLength) ：设置当前字符序列长度为newLength</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    s.append(<span class="hljs-string">&quot;hello&quot;</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-string">&#x27;a&#x27;</span>).append(<span class="hljs-number">12</span>).append(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>    System.out.println(s);<br>    System.out.println(s.length());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;java&quot;</span>);<br>    s.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;chailinyan&quot;</span>);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.delete(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    s.deleteCharAt(<span class="hljs-number">4</span>);<br>    System.out.println(s);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.reverse();<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.setCharAt(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.setLength(<span class="hljs-number">30</span>);<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、StringBuilder（-）"><a href="#4、StringBuilder（-）" class="headerlink" title="4、StringBuilder（*）"></a>4、StringBuilder（*）</h1><h1 id="5、Math"><a href="#5、Math" class="headerlink" title="5、Math"></a>5、Math</h1><h1 id="6、Data、Calender、LocalDate"><a href="#6、Data、Calender、LocalDate" class="headerlink" title="6、Data、Calender、LocalDate"></a>6、Data、Calender、LocalDate</h1><h2 id="1、时间戳"><a href="#1、时间戳" class="headerlink" title="1、时间戳"></a>1、时间戳</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">System类提供的public static long <span class="hljs-built_in">currentTimeMillis</span>()：用来返回当前时间与<span class="hljs-number">1970</span>年<span class="hljs-number">1</span>月<span class="hljs-number">1</span>日<span class="hljs-number">0</span>时<span class="hljs-number">0</span>分<span class="hljs-number">0</span>秒之间以毫秒为单位的时间差。<br><br>此方法适于计算时间差。<br>计算世界时间的主要标准有：<br><br><span class="hljs-function"><span class="hljs-title">UTC</span><span class="hljs-params">(Coordinated Universal Time)</span></span><br><span class="hljs-function"><span class="hljs-title">GMT</span><span class="hljs-params">(Greenwich Mean Time)</span></span><br><span class="hljs-function"><span class="hljs-title">CST</span><span class="hljs-params">(Central Standard Time)</span></span><br></code></pre></td></tr></table></figure><h2 id="2、Data"><a href="#2、Data" class="headerlink" title="2、Data"></a>2、Data</h2><p> java.utiil.Data</p><p>表示特定的瞬间，精确到毫秒。</p><p>构造器：</p><ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。</li><li>Date(long 毫秒数)：把该毫秒值换算成日期时间对象</li></ul><p>常用方法</p><ul><li>getTime(): 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li><li>toString(): 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</li><li>其它很多方法都过时了。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    System.out.println(d);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(time);<span class="hljs-comment">//1559806982971</span><br>    <span class="hljs-comment">//当前系统时间距离1970-1-1 0:0:0 0毫秒的时间差，毫秒为单位</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d.getTime();<br>    System.out.println(time);<span class="hljs-comment">//1559807047979</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-number">1559807047979L</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>    System.out.println(d);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> Long.MAX_VALUE;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>    System.out.println(d);<br>&#125;<br></code></pre></td></tr></table></figure><p>java.text.SimpleDateFormat</p><p>java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</p><ul><li>可以进行格式化：日期 –&gt; 文本</li><li>可以进行解析：文本 –&gt; 日期</li></ul><p>构造器：</p><ul><li>SimpleDateFormat() ：默认的模式和语言环境创建对象</li><li>public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象</li></ul><p>格式化：</p><ul><li>public String format(Date date)：方法格式化时间对象date</li></ul><p>解析：</p><ul><li>public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。</li></ul><h2 id="3、calendar"><a href="#3、calendar" class="headerlink" title="3、calendar"></a>3、calendar</h2><p>calendar 可以用来输出当前天是 一个月的哪一天，是一年中的哪一天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前天为 2023/3/14</span><br><span class="hljs-meta">@Test</span><br>      <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>          System.out.println(calendar.get(Calendar.DAY_OF_MONTH));  <span class="hljs-comment">//14</span><br>          System.out.println(calendar.get(Calendar.DAY_OF_YEAR));  <span class="hljs-comment">//73</span><br><br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="4、练习："><a href="#4、练习：" class="headerlink" title="4、练习："></a>4、练习：</h2><p>如何将一个java.util.Date的实例转换为java.sql.date的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>     <span class="hljs-comment">//如何将一个java.util.Date的实例转换为java.sql.date的实例</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>   Date date7=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   java.sql.<span class="hljs-type">Date</span> <span class="hljs-variable">date8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(date7.getTime());<br>         System.out.println(date8); <span class="hljs-comment">//2023-03-14</span><br><br>     &#125;<br></code></pre></td></tr></table></figure><p>举例：</p><p>把 java.unit.Date 转换为java.sql.Date ;并输出结果；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tet9</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">Date</span> <span class="hljs-variable">date9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(date9);  <span class="hljs-comment">//Tue Mar 14 19:19:37 CST 2023</span><br>       <span class="hljs-type">Date</span>  <span class="hljs-variable">date10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(date9.getTime());<br>        System.out.println(date10);  <span class="hljs-comment">//2023-03-14</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="5、LocalDate、LocalTime、LocalDateTime"><a href="#5、LocalDate、LocalTime、LocalDateTime" class="headerlink" title="5、LocalDate、LocalTime、LocalDateTime"></a>5、LocalDate、LocalTime、LocalDateTime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前的时间 </span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br>          <span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br>          <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <br>          System.out.println(localTime);  <span class="hljs-comment">//19:32:29.765</span><br>          System.out.println(localDate);  <span class="hljs-comment">//2023-03-14</span><br>          System.out.println(localDateTime);  <span class="hljs-comment">//2023-03-14T19:32:29.765</span><br>      &#125;<br></code></pre></td></tr></table></figure><h1 id="7、System类"><a href="#7、System类" class="headerlink" title="7、System类"></a>7、System类</h1><h1 id="8、Arrays类"><a href="#8、Arrays类" class="headerlink" title="8、Arrays类"></a>8、Arrays类</h1><h1 id="9、BigInteger-BigDecimal（了解）"><a href="#9、BigInteger-BigDecimal（了解）" class="headerlink" title="9、BigInteger BigDecimal（了解）"></a>9、BigInteger BigDecimal（了解）</h1><h1 id="10、比较器-对象排序"><a href="#10、比较器-对象排序" class="headerlink" title="10、比较器(对象排序)"></a>10、比较器(对象排序)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本数据类型的数据（除boolean类型外）需要比较大小的话，之间使用比较运算符即可，但是引用数据类型是不能直接使用比较运算符来比较大小的?</span><br><br><span class="hljs-comment">//引用数据类型，通过比较他们的属性来比</span><br></code></pre></td></tr></table></figure><h2 id="01、Comparable"><a href="#01、Comparable" class="headerlink" title="01、Comparable"></a>01、Comparable</h2><p>Comparable 的典型实现：(默认都是从小到大排列的)</p><ul><li><p>String：按照字符串中首位字符的Unicode值进行比较</p></li><li><p>Character：按照首位字符的Unicode值来进行比较</p></li><li><p>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较<br>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p></li><li><p>Date、Time等：后面的日期时间比前面的日期时间大</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>      String[] arr= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;小王&quot;</span>,<span class="hljs-string">&quot;小戴&quot;</span>&#125;;<br>      Arrays.sort(arr);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>          System.out.println(arr[i]);  <span class="hljs-comment">//abc、def 、小戴、小王</span><br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object obj)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、Comparator"><a href="#02、Comparator" class="headerlink" title="02、Comparator"></a>02、Comparator</h2><ul><li>思考</li><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码（例如：一些第三方的类，你只有.class文件，没有源文件）</li><li>如果一个类，实现了Comparable接口，也指定了两个对象的比较大小的规则，但是此时此刻我不想按照它预定义的方法比较大小，但是我又不能随意修改，因为会影响其他地方的使用，怎么办？</li><li>JDK在设计类库之初，也考虑到这种情况，所以又增加了一个java.util.Comparator接口。强行对多个对象进行整体排序的比较。</li><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Student[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">5</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-number">23</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;熊大&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">22</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">75</span>, <span class="hljs-number">25</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">24</span>);<br>        arr[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;熊二&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">18</span>);<br><br><br>        System.out.println(<span class="hljs-string">&quot;所有学生：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;按照成绩排序&quot;</span>);<br>        <span class="hljs-type">StudentScoreComparator</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentScoreComparator</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sc.compare(arr[j], arr[j + <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13异常</title>
    <link href="/2023/04/02/13%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/04/02/13%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、什么是异常"><a href="#1、什么是异常" class="headerlink" title="1、什么是异常"></a>1、什么是异常</h1><p>非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，</p><p>意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</p><p>异常指程序运行中出现的不期而至的各种状况,如:文件找不到、网络连接失败、非法参数等。</p><p>异常发生在程序运行期间,它影响了正常的程序执行流程。</p><p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error ；如果你用</p><p>System.out.println(11&#x2F;0) ，那么你是因为你用0做了除数，会抛出java.lang.ArithmeticException 的异常</p><p><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p><p><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</p><p><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的</p><h1 id="2、异常的体系结构"><a href="#2、异常的体系结构" class="headerlink" title="2、异常的体系结构"></a>2、异常的体系结构</h1><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\异常.jpg" alt="异常"></p><h2 id="1、Error"><a href="#1、Error" class="headerlink" title="1、Error:"></a>1、Error:</h2><p>Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</p><p>比如说：</p><p> Java虚拟机运行错误（ Virtual MachineError ），当JVM不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError 。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</p><p>还有发生在虚拟机试图执行应用时，如类定义错误（ NoClassDefFoundError ）、链接错误（ LinkageError ）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。</p><p>对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在Java中，错误通常是使用 Error 的子类描述。</p><h2 id="2、Exception"><a href="#2、Exception" class="headerlink" title="2、Exception"></a>2、Exception</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在 Exception 分支中有一个重要的子类 RuntimeException （运行时异常），该类型的异常自动为你所编写的程序定义 </span><br><span class="hljs-comment">ArrayIndexOutOfBoundsException （数组下标越界）、</span><br><span class="hljs-comment">NullPointerException （空指针异常）、</span><br><span class="hljs-comment">ArithmeticException （算术异常）、 </span><br><span class="hljs-comment">MissingResourceException （丢失资源）、</span><br><span class="hljs-comment">ClassNotFoundException （找不到类）等异常，</span><br><span class="hljs-comment">这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</span><br><span class="hljs-comment">这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；而RuntimeException 之外的异常我们统称为非运行时异常，类型上属于 Exception 类及其子类，从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException 、 SQLException 等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。</span><br><span class="hljs-comment">=========================Error  和  Exception ====================</span><br><span class="hljs-comment">注意： Error 和 Exception 的区别： Error 通常是灾难性的致命的错误，是程序无法控制和</span><br><span class="hljs-comment">处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程； Exception 通常情况下是可</span><br><span class="hljs-comment">以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="3、Java异常处理"><a href="#3、Java异常处理" class="headerlink" title="3、Java异常处理"></a>3、Java异常处理</h1><p>1、抛出异常</p><p>设置了 try catch 遇到异常了，会主动捕获异常，程序还是会继续运行，没有使用 try catch 程序就会停止</p><p>使用try catch 后就可以在小范围里面解决掉就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>().test(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>      &#125;     <br>      <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-comment">//假设这个方法中，处理不了这个异常，方法上抛出异常</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span> <span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>          <span class="hljs-keyword">if</span> (b==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//throw  throws</span><br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<span class="hljs-comment">//主动抛出异常，一般在方法中使用</span><br>          &#125;<br>          System.out.println(a/b);<br>      &#125;<br>  <span class="hljs-comment">//Ctrl + Alt + T  选中 按住快捷键 选择 try catch</span><br>      <span class="hljs-comment">// 如果明显的知道会出现异常</span><br></code></pre></td></tr></table></figure><p>2、捕获异常</p><p>异常处理的5个关键字：try ,catch ,finally ,throw ,throws</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a= <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-comment">//Ctrl + Alt + T  选中 按住快捷键 选择 try catch</span><br>       <span class="hljs-comment">// 如果明显的知道会出现异常</span><br>       <span class="hljs-keyword">try</span>&#123;  <span class="hljs-comment">//try用来监控代码块</span><br>       &#125;<span class="hljs-keyword">catch</span>(Error e)&#123;  <span class="hljs-comment">//try里面的代码出现错误了，就执行catch (想要捕获的异常的类型)，捕获异常</span><br>           System.out.println(<span class="hljs-string">&quot;程序出现异常，变量b不能为0&quot;</span>);  <span class="hljs-comment">//try 和catch 一般都是一起出现.</span><br>       &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>           System.out.println(<span class="hljs-string">&quot;Exceptiion&quot;</span>);<br>       &#125;<span class="hljs-keyword">catch</span>(Throwable t)&#123;<br>           System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>       &#125;<span class="hljs-keyword">finally</span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);  <span class="hljs-comment">//finally是用来处理一些善后的事情</span><br>       &#125;<br>       System.out.println(a/b);<br></code></pre></td></tr></table></figure><h1 id="4、自定义异常"><a href="#4、自定义异常" class="headerlink" title="4、自定义异常"></a>4、自定义异常</h1><p>用户还可以自定义异常。(一般情况下不需要自定义)</p><p>用户自定义异常类，只需继承 Exception 类即可。</p><p>在程序中使用自定义异常类，大体可分为以下几个步骤:</p><p>1.创建自定义异常类。</p><p>2.在方法中通过 throw 关键字抛出异常对象。</p><p>3.如果在当前抛出异常的方法中处理异常，可以使用 try-catch 语句捕获并处理；否则在方法的</p><p>4.声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</p><p>5.在出现异常方法的调用者中捕获并处理异常</p><p>【举例】：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> detail;<br>   MyException(<span class="hljs-type">int</span> a)&#123;<br>      detail = a;<br>&#125;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException [&quot;</span>+ detail + <span class="hljs-string">&quot;]&quot;</span>;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMyException</span>&#123;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException&#123;<br>       System.out.println(<span class="hljs-string">&quot;Called compute(&quot;</span> + a + <span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">10</span>)&#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(a);<br>   &#125;<br>       System.out.println(<span class="hljs-string">&quot;Normal exit!&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>  <span class="hljs-keyword">try</span>&#123;<br>      compute(<span class="hljs-number">1</span>);<br>      compute(<span class="hljs-number">20</span>);<br>       &#125;<span class="hljs-keyword">catch</span>(MyException e)&#123;<br>           System.out.println(<span class="hljs-string">&quot;抛出的异常 &quot;</span> + e);<br>     &#125;<br>   &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>【结果】：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Called <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span><br>Normal exit!<br>Called <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span><br>Caught MyException [<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><p><strong>实际中的经验总结：</strong></p><p>1、处理运行异常时，采用逻辑去合理的规避同时辅助 try-cash 处理</p><p>2、在多重 catch 块后面，可以加一个 catch（Exception）来处理可能会被遗漏的异常</p><p>3、对于不确定的代码，也可以加上 try catch ,处理潜在的异常</p><p>4、尽量去处理异常，切记只是简单地调用 printStackTrace()</p><p>5、如何处理异常，要根据不同的业务需求和异常类型去决定</p><p>6、尽量添加finally 语句块去释放占用的资源</p><h1 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h1>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12面向对象</title>
    <link href="/2023/04/02/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2023/04/02/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="1、初识面向对象："><a href="#1、初识面向对象：" class="headerlink" title="1、初识面向对象："></a>1、初识面向对象：</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><h4 id="01、-什么是面向对象"><a href="#01、-什么是面向对象" class="headerlink" title="01、  什么是面向对象"></a>0<strong>1</strong>、  <strong>什么是面向对象</strong></h4><p> Java的编程语言是面向对象的，采用这种语言进行编程称为面向对象编程(Object-OrientedProgramming, OOP)。</p><p><strong>面向对象编程的本质就是</strong>：<strong>以类的方式组织代码</strong>，<strong>以对象的组织</strong> ( <strong>封装</strong> ) <strong>数据</strong>。</p><p><strong>抽象</strong> <strong>(abstract)</strong></p><p>忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用关注细节。</p><p>例如:要设计一个学生成绩管理系统，那么对于学生，只关心他的班级、学号、成绩等，而不用去关心他的身高、体重这些信息。 抽象是什么?就是将多个物体共同点归纳出来，就是抽出像的部分！</p><h4 id="01、封装-Encapsulation"><a href="#01、封装-Encapsulation" class="headerlink" title="01、封装 (Encapsulation)"></a>01、<strong>封装</strong> <strong>(Encapsulation)</strong></h4><p>封装是面向对象的特征之一，是对象和类概念的主要特性。封装是把过程和数据包围起来，对数据的访问只能通过指定的方式。</p><p>封装保证了模块具有较好的独立性，使得程序维护修改较为容易。对应用程序的修改仅限于类的内部，因而可以将应用程序修改带来的影响减少到最低限度。</p><h4 id="02、继承-inheritance"><a href="#02、继承-inheritance" class="headerlink" title="02、继承 (inheritance)"></a>02、<strong>继承</strong> <strong>(inheritance)</strong></h4><p>继承是一种联结类的层次模型，并且允许和支持类的重用，它提供了一种明确表述共性的方法。</p><p>新类继承了原始类后,新类就继承了原始类的特性，新类称为原始类的派生类(子类)，而原始类称为新类的基类(父类)。</p><p>派生类(子类)可以从它的基类(父类)那里继承方法和实例变量，并且派生类(子类)中可以修改或增加新的方法使之更适合特殊的需要继承性很好的解决了软件的可重用性问题。比如说，所有的Windows应用程序都有一个窗口，它们可以看作都是从一个窗口类派生出来的。但是有的应用程序用于文字处理，有的应用程序用于绘图，这是由于派生出了不同的子类，各个子类添加了不同的特性。</p><h4 id="03、多态-polymorphism"><a href="#03、多态-polymorphism" class="headerlink" title="03、多态 (polymorphism)"></a>03、<strong>多态</strong> <strong>(polymorphism)</strong></h4><p>多态性是指允许不同类的对象对同一消息作出响应。</p><p>多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p><h1 id="2、方法的回顾和加深："><a href="#2、方法的回顾和加深：" class="headerlink" title="2、方法的回顾和加深："></a>2、方法的回顾和加深：</h1><h1 id="3、对象的创建："><a href="#3、对象的创建：" class="headerlink" title="3、对象的创建："></a>3、对象的创建：</h1><h2 id="01、使用-new-关键字创建对象"><a href="#01、使用-new-关键字创建对象" class="headerlink" title="01、使用 new  关键字创建对象"></a>01、<strong>使用</strong> <strong>new</strong>  <strong>关键字创建对象</strong></h2><p>使用new关键字创建的时候，除了分配内存空间之外，还会给 创建好的对象 进行默认的初始化 以 及对类中构造器的调用。</p><p>创建一个类 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//属性： 字段</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;在学习&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用上面的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo02;<br><span class="hljs-comment">//一个项目只存在一个main方法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//类：抽象的实例化</span><br>        <span class="hljs-comment">// 类实例化后会返回一个自己的对象</span><br>        <span class="hljs-comment">//student对象就是一个student类的具体实例</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xlaodal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        xiaoming.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>        xlaodal.age = <span class="hljs-number">3</span>;<br>        <br>        System.out.println(xiaoming.name);<br>        System.out.println(xlaodal.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="02、构造器："><a href="#02、构造器：" class="headerlink" title="02、构造器："></a>02、构造器：</h2><p>构造器：</p><p>1、和类名想相同</p><p>2、没有返回值</p><p>作用：</p><p>1、new 本质在调用构造器</p><p>2、初始化对象的值 </p><p>注意：定义了有参构造后，如果想使用无参构造，显示的定义一个无参的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age ;<br>    <br>    <span class="hljs-comment">//一个类即使什么都不写，都会默认生成一个构造器</span><br>    <span class="hljs-comment">// 构造器的作用：</span><br>    <span class="hljs-comment">//1、使用 new 关键字，本质是在调用构造器</span><br>    <span class="hljs-comment">//2、构造器用来初始化值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;xlaodal&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//有参构造，一旦定义了有参构造，午餐就必须显示定义</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name= name;<br>    &#125;<br>    <span class="hljs-comment">// alt + F12 +Fn  快捷间可以用来生成构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、面向对象三大特性："><a href="#4、面向对象三大特性：" class="headerlink" title="4、面向对象三大特性："></a>4、面向对象三大特性：</h1><h2 id="1、封装：（高内聚，低耦合）"><a href="#1、封装：（高内聚，低耦合）" class="headerlink" title="1、封装：（高内聚，低耦合）"></a>1、封装：（高内聚，低耦合）</h2><p>制造厂家为了方便我们使用电视，把复杂的内部细节全部封装起来，只给我们暴露简单的接口，比如：电源开关。需要让用户知道的暴露出来，不需要让用户了解的全部隐藏起来。这就是封装。白话：该露的露，该藏的藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#**专业：我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用。</span><br></code></pre></td></tr></table></figure><p>2、<strong>封装（数据的隐藏）</strong></p><p>在定义一个对象的特性的时候，有必要决定这些特性的可见性，即哪些特性对外部是可见的，哪些特性用于表示内部状态。</p><p>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</p><p>属性私有： get&#x2F;set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo04;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-comment">//属性私有</span><br>    <span class="hljs-keyword">private</span> String name;  <span class="hljs-comment">// 名字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;   <span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// get set 就是提供一些可以操作这些属性的方法</span><br>    <span class="hljs-comment">//学习 public 的get set方法</span><br><br>    <span class="hljs-comment">//get获得这个数据</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;;<br>    <span class="hljs-comment">//srt 给这个数据设置值：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name )</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>    &#125;<br>        <span class="hljs-comment">//alt + F12 可以自动生成的 get set 方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>            <span class="hljs-built_in">this</span>.sex = sex;<br>        &#125;        <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//睡觉</span><br>&#125;<br></code></pre></td></tr></table></figure><p>良好的封装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1.提高程序的安全性，保护数据；</span><br><span class="hljs-comment">#2、隐藏代码的实现细节</span><br><span class="hljs-comment">#3、同一接口</span><br><span class="hljs-comment">#4、系统的可维护性增加</span><br></code></pre></td></tr></table></figure><p><strong>3、方法重载：</strong></p><p>类中有多个方法,有着相同的方法名,但是方法的参数各不相同,这种情况被称为方法的重载。方法的重载可以提供方法调用的灵活性。</p><p>思考：HelloWorld中的System.out.println()方法，为什么可以把不同类型的参数传给这个方法?</p><p>【演示：查看println方法的重载】</p><p>例如:</p><ol><li>方法名必须相同</li><li>参数列表必须不同(参数的类型、个数、顺序的不同</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str,<span class="hljs-type">double</span> d)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Strig str,<span class="hljs-type">double</span> d)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">double</span> d,Strig str)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h2><p>java中只有单继承，而没有多继承：  （一个儿子只能有一个爸爸，但是一个爸爸可以有多个儿子）</p><p><strong>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</strong></p><p><strong>为什么需要继承？继承的作用？</strong></p><p>第一好处：继承的本质在于抽象。类是对对象的抽象，继承是对某一批类的抽象。</p><p>第二好处：为了提高代码的复用性。</p><p>extands的意思是“扩展”。子类是父类的扩展。</p><p>【注】JAVA中类只有单继承，没有多继承！ 接口可以多继承！</p><p>1、继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。</p><p>2、继承关系的俩个类，一个为子类(派生类),一个为父类(基类)。子类继承父类,使用关键字extends来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、子类和父类之间-从意义上讲应该具有”is-a”的关系"><a href="#3、子类和父类之间-从意义上讲应该具有”is-a”的关系" class="headerlink" title="3、子类和父类之间,从意义上讲应该具有”is a”的关系."></a>3、子类和父类之间,从意义上讲应该具有”is a”的关系.</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">student is a person<br>dog is a animal<br></code></pre></td></tr></table></figure><h5 id="4、类和类之间的继承是单继承"><a href="#4、类和类之间的继承是单继承" class="headerlink" title="4、类和类之间的继承是单继承"></a>4、类和类之间的继承是单继承</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个子类只能&quot;直接&quot;继承一个父类,就像是一个人只能有一个亲生父亲</span><br><span class="hljs-comment">//一个父类可以被多子类继承,就像一个父亲可以有多个孩子</span><br><span class="hljs-comment">//注:java中接口和接口之间,有可以继承,并且是多继承。</span><br></code></pre></td></tr></table></figure><h5 id="5、父类中的属性和方法可以被子类继承"><a href="#5、父类中的属性和方法可以被子类继承" class="headerlink" title="5、父类中的属性和方法可以被子类继承"></a>5、父类中的属性和方法可以被子类继承</h5><h5 id="6、supper关键字："><a href="#6、supper关键字：" class="headerlink" title="6、supper关键字："></a>6、supper关键字：</h5><p>在子类中可以使用this来表示访问或调用子类中的属性或方法,使用super就表示访问或调用父类中的属性和方法。</p><p>【访问父类中的属性】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zs&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lisi&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tes</span><span class="hljs-params">(String name)</span>t&#123;<br>System.out.println(name);<br>System.out.println(<span class="hljs-built_in">this</span>.name);<br>System.out.println(<span class="hljs-built_in">super</span>.name);  <span class="hljs-comment">//访问父类，</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【调用父类中的方法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Person&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Student&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>print();<br><span class="hljs-built_in">this</span>.print();<br><span class="hljs-built_in">super</span>.print();  <span class="hljs-comment">// 调用父类，默认调用父类的无参</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【super使用的注意的地方】</p><ol><li><p>用super调用父类构造方法，必须是构造方法中的第一个语句。</p></li><li><p>super只能出现在子类的方法或者构造方法中。</p></li><li><p>super 和 this 不能够同时调用构造方法。（因为this也是在构造方法的第一个语句）</p><p>【super 和 this 的区别】</p><ol><li><p>代表的事物不一样:</p><p>this：代表所属方法的调用者对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>：代表父类对象的引用空间。<br></code></pre></td></tr></table></figure><ol start="2"><li>使用前提不一致：</li></ol><p>this：在非继承的条件下也可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>：只能在继承的条件下才能使用。<br></code></pre></td></tr></table></figure><ol start="3"><li>调用构造方法：</li></ol><p>this：调用本类的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>：调用的父类的构造方法<br></code></pre></td></tr></table></figure><h5 id="7、方法的重写："><a href="#7、方法的重写：" class="headerlink" title="7、方法的重写："></a>7、方法的重写：</h5><p>重写：子类重写父类的方法；方法体不同；</p><ol><li><p>方法重写只存在于子类和父类(包括直接父类和间接父类)之间。在同一个类中方法只能被重载，不能被重写.</p></li><li><p>静态方法不能重写</p></li><li><p>父类的静态方法不能被子类重写为非静态方法 &#x2F;&#x2F;编译出错</p></li><li><p>父类的非静态方法不能被子类重写为静态方法；&#x2F;&#x2F;编译出错</p></li><li><p>子类可以定义与父类的静态方法同名的静态方法(但是这个不是覆盖)</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">A类继承B类 A和B中都一个相同的静态方法test<br><span class="hljs-type">B</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.test();<span class="hljs-comment">//调用到的是B类中的静态方法test</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.test();<span class="hljs-comment">//调用到的是A类中的静态方法test</span><br><span class="hljs-comment">//可以看出静态方法的调用只和变量声明的类型相关</span><br><span class="hljs-comment">//这个和非静态方法的重写之后的效果完全不同</span><br></code></pre></td></tr></table></figure><p>私有方法不能被子类重写，子类继承父类后,是不能直接访问父类中的私有方法的,那么就更谈不上重写了。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//编译通过,但这不是重写,只是俩个类中分别有自己的私有方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><p>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. 重写的语法</span><br><span class="hljs-comment">1. 方法名必须相同</span><br><span class="hljs-comment">2. 参数列表必须相同</span><br><span class="hljs-comment">3. 访问控制修饰符可以被扩大,但是不能被缩小： public protected default private</span><br><span class="hljs-comment">4. 抛出异常类型的范围可以被缩小,但是不能被扩大ClassNotFoundException ---&gt; Exception</span><br><span class="hljs-comment">5. 返回类型可以相同,也可以不同,如果不同的话,子类重写后的方法返回类型必须是父类方法返回类型的子类型</span><br><span class="hljs-comment">例如：父类方法的返回类型是Person,子类重写后的返回类可以是Person也可以是Person的</span><br><span class="hljs-comment">子类型</span><br><span class="hljs-comment">注：一般情况下,重写的方法会和父类中的方法的声明完全保持一致,只有方法的实现不同。(也就是大括</span><br><span class="hljs-comment">号中代码不一样)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="7、为什么要重写？"><a href="#7、为什么要重写？" class="headerlink" title="7、为什么要重写？"></a>7、为什么要重写？</h5><p>子类继承父类,继承了父类中的方法,但是父类中的方法并不一定能满足子类中的功能需要,所以子类中需要把方法进行重写。</p><h2 id="3、多态："><a href="#3、多态：" class="headerlink" title="3、多态："></a>3、多态：</h2><p>定义：即同一个方法可以根据发送对象的不同而采用不同的行为方式；</p><p>一个对象的实际类型是确定的，但是可以指向对象的引用的类型有很多</p><p>1、多态存在的条件</p><p>​     01、有继承关系</p><p>​ 02、子类重写父类</p><p>​    03、父类引用指向子类对象</p><p>注意：多态是方法的多态，属性没有多态性</p><p>1、相同类域的不同对象,调用相同的方法,执行结果是不同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如: new Student(); new Person();等 </span><br></code></pre></td></tr></table></figure><p>2、 可以指向对象的引用的类型有很多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个对象的实现类型虽然是确定的,但是这个对象所属的类型可能有很多种。</span><br></code></pre></td></tr></table></figure><p>例如: Student继承了Person类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javav">Student s1 = new Student();<br>Person s2 = new Student();<br>Object s3 = new Student();<br></code></pre></td></tr></table></figure><p>因为Person和Object都是Student的父类型</p><p>注:一个对象的实际类型是确定,但是可以指向这个对象的引用的类型,却是可以是这对象实际类型的任意</p><p>父类型。</p><p>1、一个父类引用可以指向它的任何一个子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnyClass</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><p>2、多态中的方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、调用到的run方法,是Student从Person继承过来的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">main:<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>p.run();<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//重写run方法</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//调用到的run方法,是Student中重写的run方法</span><br>main:<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>p.run();<br></code></pre></td></tr></table></figure><p>子类继承父类,调用a方法，如果a方法在子类中没有重写,那么就是调用的是子类继承父类的a方法,</p><p>如果重写了,那么调用的就是重写之后的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>&#125;<br>&#125;<br>main:<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">//调用到继承的run方法</span><br>p.run();<br><span class="hljs-comment">//编译报错,因为编译器检查变量p的类型是Person,但是在Person类中并没有发现test方法,所以编</span><br>译报错.<br>p.test();<br></code></pre></td></tr></table></figure><p>注:一个变量x,调用一个方法test,编译器是否能让其编译通过,主要是看声明变量x的类型中有没有定义</p><p>test方法,如果有则编译通过,如果没有则编译报错.而不是看x所指向的对象中有没有test方法.</p><p>编译看左边，运行不一定看右边。</p><h2 id="4、instanceof和类型转"><a href="#4、instanceof和类型转" class="headerlink" title="4、instanceof和类型转"></a>4、instanceof和类型转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      // System.out.println( X instanceof Y);   //检测X Y 有没有继承关系，有继承关系编译通过，没有继承关系编译不通过</span><br><span class="hljs-comment">        //X 指向的类型是 Y 的子类型也会通过；  </span><br><span class="hljs-comment">        Object object = new Student();</span><br><span class="hljs-comment">        System.out.println(object instanceof Student);         //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Person);      //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Object);       //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Teacher);     //false</span><br><span class="hljs-comment">        System.out.println(object instanceof String);   //false</span><br><span class="hljs-comment">        System.out.println(&quot;===========&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Person person = new Student();</span><br><span class="hljs-comment">        System.out.println(object instanceof Student);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Person);    //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Object);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Teacher);    //false</span><br><span class="hljs-comment">        System.out.println(object instanceof String);   //编译报错</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        System.out.println(&quot;===============&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       Student student = new Student();</span><br><span class="hljs-comment">        System.out.println(object instanceof Student);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Person);     //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Object);      //true</span><br><span class="hljs-comment">        System.out.println(object instanceof Teacher);   //编译报错</span><br><span class="hljs-comment">        System.out.println(object instanceof String);   //编译报错</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="5、子类和父类的转换："><a href="#5、子类和父类的转换：" class="headerlink" title="5、子类和父类的转换："></a>5、子类和父类的转换：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类型之间的转换： 父  &gt; 子</span><br>  <span class="hljs-comment">//高   ------&gt;  子</span><br>  Person obj= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>  <span class="hljs-comment">//student 将这个对象转换为Student类型，就可以使用Student类型的方法了！</span><br>  <span class="hljs-comment">//将父类强制转换为子类</span><br>  <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span>(Student) obj;<br>  student.go();<br>       <span class="hljs-comment">//将上面的 合并为一句</span><br>  <span class="hljs-comment">//((Student) obj).go();  </span><br>       ((Student) obj).go();<br>       System.out.prientln(<span class="hljs-string">&quot;==========================&quot;</span>)<br>       <br>       <span class="hljs-comment">//子类转换为父类，可能会丢失自己的一些方法 ，高转低可以，低转高就会丢失一些方法</span><br>      <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> student; <span class="hljs-comment">//本质：student占用1.5个内存，Person占用1.0个内存，子类多的0.5个内存是封装的自己的独有的方法，</span><br>                                  <span class="hljs-comment">// person内存不够大，装不下go方法，所以调用不了；</span><br>      <span class="hljs-comment">//子类转换为父类会丢失，向上转换</span><br>      <span class="hljs-comment">//父类转换为子类，向下转换，强制黄转换</span><br>      <span class="hljs-comment">//方便方法的调用，减少重复大代码， </span><br>       <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//  person.go();</span><br></code></pre></td></tr></table></figure><h2 id="6、静态导入包："><a href="#6、静态导入包：" class="headerlink" title="6、静态导入包："></a>6、静态导入包：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态导入包</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.PI;<br><span class="hljs-keyword">import</span>  <span class="hljs-keyword">static</span> java.lang.Math.random;<br><span class="hljs-comment">//静态导入之后就可以直接使用了</span><br>System.out.println(random());<br>        System.out.println(PI);<br></code></pre></td></tr></table></figure><h1 id="5、抽象类和接口"><a href="#5、抽象类和接口" class="headerlink" title="5、抽象类和接口"></a>5、抽象类和接口</h1><p>节省代码，提高开发效率：</p><p>游戏中的任务模型或者其他的都有一些基本的共同之处，抽象出来，以后遇到就调用就可以；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo08;<br>   <span class="hljs-comment">//abstract 抽象类：类：extends : 单继承~ （接口可以多继承）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-comment">//约束：--有人帮我们实现</span><br>    <span class="hljs-comment">//抽象方法，只有方法的名字，没有方法的实现</span><br>    <span class="hljs-comment">//抽象类的所有方法，继承他的所哟子类都必须实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSoething</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//1、抽象类的特点：抽象类不能 new 出来，只能靠子类来实现约束 </span><br>    <span class="hljs-comment">//抽象类中可以写普通方法~</span><br>       <span class="hljs-comment">// 抽象方法必须在抽象类中~</span><br>       <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、内部类及OOP实战"><a href="#6、内部类及OOP实战" class="headerlink" title="6、内部类及OOP实战"></a>6、内部类及OOP实战</h1><p>内部类就是在一个类的内部在定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</p><p>内部类不是在一个java源文件中编写俩个平行的俩个类,而是在一个类的内部再定义另外一个类。 我们可以把外边的类称为外部类,在其内部编写的类称为内部类。</p><p>内部类分为四种：</p><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><p><strong>2</strong> <strong>、成员内部类（实例内部类、非静态内部类)</strong></p><h1 id="7、接口的定义个实现"><a href="#7、接口的定义个实现" class="headerlink" title="7、接口的定义个实现"></a>7、接口的定义个实现</h1><p><strong>面向接口编程</strong>     <strong>接口的本质是契约</strong></p><p>1、普通类：只有具体的实现</p><p>2、抽象类：具体实现和规范（抽象方法）都有！</p><p>3、接口：只有规范，自己无法写方法，可以实现约束和实现分离</p><h2 id="3、如何写一个接口："><a href="#3、如何写一个接口：" class="headerlink" title="3、如何写一个接口："></a>3、如何写一个接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.demo09;<br><br>   <span class="hljs-comment">// 如何能锻炼抽象的思维？</span><br>  <span class="hljs-comment">//通过写一写接口来实现架构，</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  1、java的接口：是一个约束</span><br><span class="hljs-comment">  2、接口用来定义一些方法来用不同的人来实现   public static final</span><br><span class="hljs-comment">  3、接口不能被实例化，因为接口中没有</span><br><span class="hljs-comment">  4、接口可以实现多个接口  implements</span><br><span class="hljs-comment">  5、做项目基本上都是，写各种各样的接口</span><br><span class="hljs-comment">   */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-comment">//  public void run()&#123;&#125;  //接口里面的所有定义都是抽象的 public abstract</span><br>    <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//属性默认的都是常量</span><br>  <span class="hljs-type">int</span> age= <span class="hljs-number">99</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String run)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String name)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4、内部类和外部类："><a href="#4、内部类和外部类：" class="headerlink" title="4、内部类和外部类："></a>4、内部类和外部类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Oop.Outer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一个外部类的方法&quot;</span>);<br>    &#125;<br><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;这是一个内部类的方法&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取外部类的私有属性</span><br>    <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11排序算法</title>
    <link href="/2023/04/02/11%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/02/11%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h1><p>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p><p>原理如下：</p><ol><li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p></li><li><p>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Array;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array0PaiXu</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">23</span>,<span class="hljs-number">56</span>,<span class="hljs-number">97</span>,<span class="hljs-number">12</span>&#125;;<br><br>        <span class="hljs-type">int</span>[] sort = sort(a);<br><br>        System.out.println(Arrays.toString(sort));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span> [] array)&#123;    <span class="hljs-comment">//写的一排序方法</span><br>        <span class="hljs-comment">//临时变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//外层循环；判断要走多少次：</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;array.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-comment">//内层循环比较俩个数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;array.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                <span class="hljs-keyword">if</span> (array[j]&gt;array[j+<span class="hljs-number">1</span>])&#123;<br>                    temp = array[j];      <span class="hljs-comment">//实现来个数交换</span><br>                    array[j]=array[j+<span class="hljs-number">1</span>];<br>                    array[j+<span class="hljs-number">1</span>]=temp;<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、选择排序："><a href="#2、选择排序：" class="headerlink" title="2、选择排序："></a>2、选择排序：</h1><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSort</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span> arr[]) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">// 认为目前的数就是最小的, 记录最小数的下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;<span class="hljs-comment">// 修改最小值的下标</span><br>minIndex = j;<br>&#125;<br>&#125;<span class="hljs-comment">// 当退出for就找到这次的最小值,就需要交换位置了</span><br><span class="hljs-keyword">if</span> (i != minIndex) &#123;<span class="hljs-comment">//交换当前值和找到的最小值的位置</span><br>temp = arr[i];<br>arr[i] = arr[minIndex];<br>arr[minIndex] = temp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">SelectSort</span> <span class="hljs-variable">selectSort</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectSort</span>();<br><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span>[] sort = selectSort.sort(array);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : sort) &#123;<br>System.out.print(num + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10数组</title>
    <link href="/2023/04/02/10%E6%95%B0%E7%BB%84/"/>
    <url>/2023/04/02/10%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1、数组概述"><a href="#1、数组概述" class="headerlink" title="1、数组概述"></a>1、数组概述</h2><p>数组：相同类型的数据的有序集合； [1,2,3,4,5,6]</p><h3 id="1、创建数组"><a href="#1、创建数组" class="headerlink" title="1、创建数组"></a>1、创建数组</h3><p>1、必须声明数组变量，才能在程序中使用数组，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar;  <span class="hljs-comment">//推荐使用</span><br>dataType arrayRefVar[];<br></code></pre></td></tr></table></figure><p>2、java使用 new 操作符来创建数组；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dtaType[] arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize]<br></code></pre></td></tr></table></figure><p>3、数组元素是通过索引访问的，数组索引从 0 开始</p><p>4、获取数组的长度； </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrays.length<br></code></pre></td></tr></table></figure><h2 id="2、数组的声明"><a href="#2、数组的声明" class="headerlink" title="2、数组的声明"></a>2、数组的声明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//变量的类型  变量的名字  =  变量的值</span><br>        <span class="hljs-comment">//数组类型</span><br>        <span class="hljs-type">int</span>[] nums; <span class="hljs-comment">// 定义  1、声明数组</span><br><br>        nums=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];  <span class="hljs-comment">//表述这里面可以存放 10 个int类型的数字  2、创建数组，分配空间</span><br>        nums[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> ;           <span class="hljs-comment">//3、给数组赋值，</span><br>        nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> ;<br>        nums[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span> ;<br>        nums[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span> ;<br>        nums[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span> ;<br>        nums[<span class="hljs-number">5</span>] = <span class="hljs-number">6</span> ;<br>        nums[<span class="hljs-number">6</span>] = <span class="hljs-number">7</span> ;<br>        System.out.println(nums[<span class="hljs-number">9</span>]);  <span class="hljs-comment">//没有赋值的就按照 数组的类型来 输出结果</span><br>        <span class="hljs-comment">//计算所有元素的和</span><br>        <span class="hljs-type">int</span> sum= <span class="hljs-number">0</span> ;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//获取数组长度</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            sum = sum +nums[i];<br>        &#125;<br>        System.out.println(sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(nums[<span class="hljs-number">10</span>]);  <span class="hljs-comment">//数组越界，产生报错</span><br><br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\数组越界报错.jpg" alt="数组越界"></p><p>数组总结：</p><p>1、数组是相同数据类型（数据类型可以为任意类型）的有序集合</p><p>2、数组也是对象。数组元素相当于对象的成员变量;</p><p>3、数组长度确定的，不可变的。如果越界就会报  ArrayLindexOutofBounds</p><h2 id="3、数组的使用"><a href="#3、数组的使用" class="headerlink" title="3、数组的使用"></a>3、数组的使用</h2><h3 id="1、数组翻转："><a href="#1、数组翻转：" class="headerlink" title="1、数组翻转："></a>1、数组翻转：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//==========翻转数组==============</span><br><span class="hljs-keyword">package</span> com.kuangstudy.Array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> [] arrays = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;           <br>         <span class="hljs-comment">// printArray(arrays);</span><br>        <span class="hljs-type">int</span>[] reverse = reverse(arrays);<br>        printArray(reverse);<br>              <span class="hljs-comment">//反转数组：</span><br>    &#125;<br>          <span class="hljs-comment">//反转数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] reverse(<span class="hljs-type">int</span>[] arrays)&#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arrays.length];<br>        <span class="hljs-comment">//反转的操作；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> result.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arrays.length;i++)&#123;<br>            result[i] = arrays[arrays.length-<span class="hljs-number">1</span>-i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>       <span class="hljs-comment">//打印数组元素</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> [] arrays)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt; arrays.length;i++)&#123;<br>            System.out.println(arrays[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="01、数组排序："><a href="#01、数组排序：" class="headerlink" title="01、数组排序："></a>01、数组排序：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">323</span>,<span class="hljs-number">23</span>,<span class="hljs-number">543</span>,<span class="hljs-number">12</span>,<span class="hljs-number">59</span>&#125;;<br>System.out.println(Arrays.toString(a));<br>Arrays.sort(a);<br>System.out.println(Arrays.toString(a));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="02、二分法查找："><a href="#02、二分法查找：" class="headerlink" title="02、二分法查找："></a>02、二分法查找：</h3><p>在数组中查找指定元素并返回其下标</p><p>注意：使用二分搜索法来搜索指定的数组，以获得指定的值。必须在进行此调用之前对数组进行排序(通</p><p>过sort方法等)。如果没有对数组进行排序，则结果是不确定的。</p><p>如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">323</span>,<span class="hljs-number">23</span>,<span class="hljs-number">543</span>,<span class="hljs-number">12</span>,<span class="hljs-number">59</span>&#125;;<br>Arrays.sort(a); <span class="hljs-comment">//使用二分法查找，必须先对数组进行排序</span><br>System.out.println(<span class="hljs-string">&quot;该元素的索引：&quot;</span>+Arrays.binarySearch(a, <span class="hljs-number">12</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="03、元素填充："><a href="#03、元素填充：" class="headerlink" title="03、元素填充："></a>03、元素填充：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">323</span>,<span class="hljs-number">23</span>,<span class="hljs-number">543</span>,<span class="hljs-number">12</span>,<span class="hljs-number">59</span>&#125;;<br>Arrays.sort(a); <span class="hljs-comment">//使用二分法查找，必须先对数组进行排序</span><br>Arrays.fill(a, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//将2到4索引的元素替换为100</span><br>System.out.println(Arrays.toString(a));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="04、打印数组："><a href="#04、打印数组：" class="headerlink" title="04、打印数组："></a>04、打印数组：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>System.out.println(a); <span class="hljs-comment">//[I@1b6d3586</span><br>System.out.println(Arrays.toString(a)); <span class="hljs-comment">//[1, 2] 使用工具类打印数组</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="05、数组转换List集合"><a href="#05、数组转换List集合" class="headerlink" title="05、数组转换List集合"></a>05、数组转换List集合</h3><p>返回一个受指定的数组支持的固定大小的列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>&#125;;<br>List&lt;<span class="hljs-type">int</span>[]&gt; list = Arrays.asList(a);  <span class="hljs-comment">//调用 arrays 类工具</span><br></code></pre></td></tr></table></figure><h2 id="4、多维数组"><a href="#4、多维数组" class="headerlink" title="4、多维数组"></a>4、多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] array  = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;&#125;;  <span class="hljs-comment">//静态化定义的二维数组</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ;i&lt;array.length;i++) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array[i].length; j++) &#123;<br>              System.out.println(array[i][j]);<span class="hljs-comment">//遍历二维数组</span><br><br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="5、Arrays类"><a href="#5、Arrays类" class="headerlink" title="5、Arrays类"></a>5、Arrays类</h2><p>数组的工具类java.util.Arrays</p><p>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了一个工具类Arrays供我们使用,从</p><p>而可以对数据对象进行一些基本的操作。</p><p>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不用”使用对</p><p>象来调用(注意:是”不用” 而不是 “不能”)</p><p>java.util.Arrays 类能方便地操作数组. 使用之前需要导包！</p><p><strong>具有以下常用功能</strong></p><p>1、给数组赋值：通过 fifill 方法。</p><p>2、对数组排序：通过 sort 方法,按升序。</p><p>3、比较数组：通过 equals 方法比较数组中元素值是否相等。</p><p>4、查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</p><p>具体说明请查看下表：</p><h2 id="6、稀疏数组"><a href="#6、稀疏数组" class="headerlink" title="6、稀疏数组"></a>6、稀疏数组</h2><p>定义:当数组中大部分的数据为0 ，这时候就采用稀疏数组来存储数据：</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组，稀疏数组的处理方法是：</p><ul><li>记录数组一共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.westos.sparsearr;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SparseArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个二维数组 11*11</span><br>        <span class="hljs-comment">//0表示没有棋子，1表示黑棋，2表示蓝棋</span><br>        <span class="hljs-type">int</span>[][] chessArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        chessArr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        chessArr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//输出原始的二维数组</span><br>        System.out.println(<span class="hljs-string">&quot;原始的二维数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArr[i].length; j++) &#123;<br>                System.out.print(chessArr[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//将二维数组转换为稀疏数组</span><br>        <span class="hljs-comment">//1.先遍历二维数组得到非零数据的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//2.创建对应的系数数组</span><br>        <span class="hljs-type">int</span>[][] sparseArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        <span class="hljs-comment">//给系数数组赋值</span><br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br>        <span class="hljs-comment">//遍历二维数组将非零的值存放到稀疏数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArr[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparseArr[count][<span class="hljs-number">0</span>] = i;<br>                    sparseArr[count][<span class="hljs-number">1</span>] = j;<br>                    sparseArr[count][<span class="hljs-number">2</span>] = chessArr[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//输出稀疏数组</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;稀疏数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sparseArr.length; i++) &#123;<br>            System.out.println(sparseArr[i][<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\t&quot;</span>+sparseArr[i][<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\t&quot;</span>+sparseArr[i][<span class="hljs-number">2</span>]);<br>        &#125;<br><br>        <span class="hljs-comment">//将稀疏数组恢复成二维数组</span><br>        <span class="hljs-comment">//1.先读取稀疏数组的第一行，根据第一行创建二维数组</span><br>        <span class="hljs-type">int</span>[][] chessArr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-comment">//2.读取稀疏数组后几行赋值给二维数组</span><br>        <span class="hljs-comment">//注意这里是从第二行开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sparseArr.length; i++) &#123;<br>            chessArr2[sparseArr[i][<span class="hljs-number">0</span>]][sparseArr[i][<span class="hljs-number">1</span>]] = sparseArr[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;恢复后的二维数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArr2) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> data : row) &#123;<br>                System.out.print(data+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\稀疏数组结果.png" alt="稀疏数组"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09方法</title>
    <link href="/2023/04/02/09%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/02/09%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、方法定义和使用"><a href="#1、方法定义和使用" class="headerlink" title="1、方法定义和使用"></a>1、方法定义和使用</h1><h3 id="1、方法的定义："><a href="#1、方法的定义：" class="headerlink" title="1、方法的定义："></a>1、方法的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">格式： 修饰符 返回类型 方法名(参数列表)异常抛出类型&#123;...&#125; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2、修饰符："><a href="#2、修饰符：" class="headerlink" title="2、修饰符："></a>2、修饰符：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>、<span class="hljs-keyword">static</span>、<span class="hljs-keyword">abstract</span>、<span class="hljs-keyword">final</span>等等都是修饰符，一个方法可以有多个修饰符。例如程序入口<br>main方法，就使用了<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>这个俩个修饰符<br>注:如果一个方法或者属性有多个修饰符,这多个修饰符是没有先后顺序的<br></code></pre></td></tr></table></figure><h3 id="3、返回类型："><a href="#3、返回类型：" class="headerlink" title="3、返回类型："></a>3、返回类型：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">方法执行完如果有要返回的数据,那么就要声明返回数据的类型,如果没有返回的数据,那么返回类型就必<br>须写<span class="hljs-keyword">void</span>.<br>只有构造方法(构造器)不写任何返回类型也不写<span class="hljs-keyword">void</span><br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(msg);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、非静态方法："><a href="#4、非静态方法：" class="headerlink" title="4、非静态方法："></a>4、非静态方法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javav">没有使用static修饰符修饰的方法,就是非静态方法.<br>调用这种方法的时候,是&quot;一定&quot;要使用对象的。因为非静态方法是属于对象的。(非静态属性也是一样的)<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br>main:<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s.say();<br></code></pre></td></tr></table></figure><h3 id="5、静态方法："><a href="#5、静态方法：" class="headerlink" title="5、静态方法："></a>5、静态方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">static</span>修饰符修饰的方法,就是静态方法.<br>调用这种方法的时候,<span class="hljs-string">&quot;可以&quot;</span>使用对象调用,也<span class="hljs-string">&quot;可以&quot;</span>使用类来调用,但是推荐使用类进行调用,因为静态<br>方法是属于类的。(静态属性也是一样的)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br>main:<br>Student.say();<br></code></pre></td></tr></table></figure><h3 id="6、类中方法之间的调用："><a href="#6、类中方法之间的调用：" class="headerlink" title="6、类中方法之间的调用："></a>6、类中方法之间的调用：</h3><p>假设同一个类中有俩个方法,a方法和b方法，a和b都是非静态方法，相互之间可以直接调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>b();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>a和b都是静态方法,相互之间可以直接调用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>b();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>a静态方法,b是非静态方法，a方法中不能直接调用b方法,但是b方法中可以直接调用a方法. 静态方法不能</p><p>调用非静态方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//b();报错</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>a();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;       <br>        <span class="hljs-comment">//System.out.println();   //对象、类、方法</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        java 方法是语句的集合，方法用来执行一个功能：</span><br><span class="hljs-comment">        1、方法是解决一类问题的语句集合：</span><br><span class="hljs-comment">        2、方法包装在类或者对象中</span><br><span class="hljs-comment">        3、方法在程序中被创建，在其他地方被引用</span><br><span class="hljs-comment">        设计方法的原则：</span><br><span class="hljs-comment">        方法的本意是功能块，就是实现某个功能的语句块的集合，设计方法的时候，最好保持方法的原子性</span><br><span class="hljs-comment">        ===========就是一个方法只用来实现一个功能，编译后期的拓展======= </span><br><span class="hljs-comment">         */</span>        <br>        <span class="hljs-comment">//加法：</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   <span class="hljs-comment">//add(1,2) 按回车  手写就会报错</span><br>        System.out.println(sum);            <br>        &#125;      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span>  a+b ;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span>&#123;<br>    <br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>        System.out.println(max);<br>        &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> number1, <span class="hljs-type">int</span> number2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;他们相等&quot;</span>;<br>         <span class="hljs-keyword">if</span> (number1&gt;number2)&#123;<br>             result = number1;<br>         &#125;<br><br>         <span class="hljs-keyword">if</span> (number1&lt;number2)&#123;<br>             result = number2;<br>             <br>         &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number1==number2)&#123;<br>             result = Integer.parseInt(C);<br>        &#125;<br>         <span class="hljs-keyword">return</span>  result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、方法重载"><a href="#2、方法重载" class="headerlink" title="2、方法重载"></a>2、方法重载</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    方法的重载：</span><br><span class="hljs-comment">    重载;就是在一个类中有相同的函数名称，但是形参不同的函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    规则：</span><br><span class="hljs-comment">    1、方法名称必须相同：</span><br><span class="hljs-comment">    2、函数列表必须不同</span><br><span class="hljs-comment">    3、方法的返回类型可以相同也可以不同</span><br><span class="hljs-comment">    4、仅仅返回的类型不同不足以成为方法的重载</span><br><span class="hljs-comment">    实现理论：</span><br><span class="hljs-comment">    方法的名称相同时，编译器会根据调用的方法的个数、参数类型、等去逐个匹配，以选择对应的方法，如果匹配失败，</span><br><span class="hljs-comment">    编译器报错</span><br><span class="hljs-comment">    ===============注意： 形参和参的类型要一致不然就会报错===================</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>);<br>        System.out.println(max);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> number1, <span class="hljs-type">double</span> number2)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span> (number1&gt;number2)&#123;<br>            result = number1;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (number1&lt;number2)&#123;<br>            result = number2;<br><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number1==number2)&#123;<br>            result = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>  result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> number1, <span class="hljs-type">int</span> number2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;     <br>        <span class="hljs-keyword">if</span> (number1&gt;number2)&#123;<br>            result = number1;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (number1&lt;number2)&#123;<br>            result = number2;<br><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number1==number2)&#123;<br>            result = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>  result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、命令行传参"><a href="#3、命令行传参" class="headerlink" title="3、命令行传参"></a>3、命令行传参</h1><p>调用方法进行传参时,分为值传递和引用传递两种。</p><p>如果参数的类型是基本数据类型,那么就是值传递。</p><p>如果参数的类型是引用数据类型,那么就是引用传递。</p><p>值传递是实参把自己变量本身存的简单数值赋值给形参.</p><p>引用传递是实参把自己变量本身存的对象内存地址值赋值给形参.</p><p>所以值传递和引用传递本质上是一回事,只不过传递的东西的意义不同而已</p><h3 id="1、值传递："><a href="#1、值传递：" class="headerlink" title="1、值传递："></a>1、值传递：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeNum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>   a = <span class="hljs-number">10</span>;<br>  &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;before: a = &quot;</span>+a); <span class="hljs-comment">//1</span><br>changeNum(a);<br>System.out.println(<span class="hljs-string">&quot;after: a = &quot;</span>+a); <span class="hljs-comment">//1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、引用传递："><a href="#2、引用传递：" class="headerlink" title="2、引用传递："></a>2、引用传递：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeName</span><span class="hljs-params">(Student s)</span>&#123;<br>s.name = <span class="hljs-string">&quot;tom&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>System.out.println(<span class="hljs-string">&quot;before: name = &quot;</span>+s.name); <span class="hljs-comment">//null</span><br>changeName(s);<br>System.out.println(<span class="hljs-string">&quot;after: name = &quot;</span>+s.name); <span class="hljs-comment">//tom</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>String name;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、可变参数"><a href="#4、可变参数" class="headerlink" title="4、可变参数"></a>4、可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Function04</span> <span class="hljs-variable">function04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function04</span>();<br>        function04.test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>        &#125;<br>    <span class="hljs-comment">//可变参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> x ,<span class="hljs-type">int</span> ...i )</span>&#123;<br>        System.out.println(i[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">//排序：</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">(<span class="hljs-type">double</span>...number)</span>&#123;<br>        <span class="hljs-keyword">if</span> (number.length==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;No argument passed&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> number[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//排序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span> ;i&lt; number.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (number[i]&gt;result)&#123;<br>                result = number[i];<br><br>            &#125;<br>            &#125;<br>        System.out.println(<span class="hljs-string">&quot;the max vlaue is &quot;</span>+ result);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="5、方法的调用（重要）"><a href="#5、方法的调用（重要）" class="headerlink" title="5、方法的调用（重要）"></a>5、方法的调用（重要）</h1><h3 id="1、递归"><a href="#1、递归" class="headerlink" title="1、递归"></a>1、递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function05</span> &#123;<br>    <span class="hljs-comment">//========递归算法============</span><br>    <span class="hljs-comment">//递归就是自己调用自己；递归可以用很少的代码解决很复杂的问题  常常把一个大型的问题层层转化为一个一个小的问题</span><br><br>    <span class="hljs-comment">//=========1、递归头，什么时候不调用自身的方法。如果没有头，将陷入死循环==========</span><br>    <span class="hljs-comment">//=========2、递归体：什么时候需要调用自身方法================</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(f(<span class="hljs-number">5</span>));<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);  <span class="hljs-comment">//int 是整数型，默认是正整数</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08流程控制</title>
    <link href="/2023/04/02/08%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/04/02/08%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1、用户交互Scanner："><a href="#1、用户交互Scanner：" class="headerlink" title="1、用户交互Scanner："></a>1、用户交互Scanner：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个扫描器对象，用于接收键盘数据：</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner01</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;使用next方式接收&quot;</span>);<br><br>        <span class="hljs-comment">//判断用户有没有输入字符串</span><br>        <span class="hljs-keyword">if</span> (scanner01.hasNext())&#123;      <span class="hljs-comment">//如果用户还有输入的话就用scanner接收</span><br><br>            <span class="hljs-comment">//用scanner接收</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner01.next();<br>            System.out.println(<span class="hljs-string">&quot;输出的内容为：&quot;</span> +str);<br><br>        &#125;<br>        <span class="hljs-comment">//凡是属于IO流的类 如果不关闭就会一直占用资源，使用完了之后就要关掉</span><br>        scanner01.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Scanner 对象：</span><br><span class="hljs-comment">next()： 1、一定要读取到有效的字符后才可以结束输入：</span><br><span class="hljs-comment">         2、对输入有效字符之前遇到的空白， next()方法会自动将其去掉；</span><br><span class="hljs-comment">         3、只有输入有效字符后才能将其后面输入的空白作为分隔符或者结束符；</span><br><span class="hljs-comment">         4、next()不能得到带有空格的字符串；</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//new Scanner(System.in);   //</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;使用nextLine方式接收(请输入数据)&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否还有输入；</span><br>        <span class="hljs-keyword">if</span>(scanner.hasNextLine())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>            System.out.println(<span class="hljs-string">&quot;输出的内容为&quot;</span>+ str);<br>        &#125;<br>        scanner.close();<br>    &#125;<br>&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *     nextLine(): 1、以 Enter作为结束符；也就是说nextLine()方法返回的是输入回车之前的所有字符</span><br><span class="hljs-comment">     *                  2、可以获得所有的空白</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//从键盘接收数据：</span><br>        <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>;<br>        System.out.println(<span class="hljs-string">&quot;请输入整数&quot;</span>);<br><br>        <span class="hljs-comment">//整数</span><br>        <span class="hljs-keyword">if</span> (scanner.hasNextInt())&#123;<br>            i = scanner.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;整数数据为&quot;</span>+i);<br><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是一个整数数据！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//小数</span><br><br>        System.out.println(<span class="hljs-string">&quot;请输入小数&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (scanner.hasNextFloat())&#123;<br>            f = scanner.nextFloat();<br>            System.out.println(<span class="hljs-string">&quot;小数数据为&quot;</span>+f);<br><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是一个小数数据！&quot;</span>);<br>        &#125;<br><br>       scanner.close();<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Scanner;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//我们可以输入读个数字，求其总和与平均数，没输入一个数字就用回车确认，通过输入非数字来结束输入并输出执行结果；</span><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-comment">//平均数 通过循环判断是否还有输入，并且在里面对每一次进行求和和统计</span><br><br>        <span class="hljs-keyword">while</span>(scanner.hasNextDouble())&#123;<br>           <span class="hljs-type">double</span> <span class="hljs-variable">x</span>  <span class="hljs-operator">=</span>  scanner.nextDouble();<br><br>          <span class="hljs-comment">// m++; //m+1</span><br>            m  = m +<span class="hljs-number">1</span>;<br><br>            sum = sum + x ;<br>            System.out.println(<span class="hljs-string">&quot;你输入了第&quot;</span> + m +<span class="hljs-string">&quot;个数字&quot;</span>+<span class="hljs-string">&quot;当前总和结果为&quot;</span>+sum);<br><br>        &#125;<br>        System.out.println(m + <span class="hljs-string">&quot;个数的和为&quot;</span>+sum);<br>        System.out.println(m+<span class="hljs-string">&quot;个数的平均值是&quot;</span>+(sum/m));<br><br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\Scanner结果.png" alt="Scanner结果"></p><h1 id="2、顺序结构："><a href="#2、顺序结构：" class="headerlink" title="2、顺序结构："></a>2、顺序结构：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序结构就是一步一步执行；  顺序结构是任何一个算法都是离不开的结构</span><br><span class="hljs-comment">从上到下一步一步执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShunXu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello3&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello4&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello5&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3、选择结构：if、Switch"><a href="#3、选择结构：if、Switch" class="headerlink" title="3、选择结构：if、Switch"></a>3、选择结构：if、Switch</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br> <span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Change</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">        System.out.println(&quot;请输入一个内容：&quot;);</span><br><span class="hljs-comment">        String s = scanner.nextLine();</span><br><span class="hljs-comment">        //equals :判断字符串是否相等</span><br><span class="hljs-comment">        if(s.equals(&quot;Hello&quot;))&#123;</span><br><span class="hljs-comment">            System.out.println(s);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;End&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        scanner.close();</span><br><span class="hljs-comment"> */</span><br>        <br><span class="hljs-comment">// ==========if else=============</span><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩&quot;</span>);<br>        <span class="hljs-type">int</span>    score= scanner01.nextInt();<br><br>        <span class="hljs-keyword">if</span> (score&gt;=<span class="hljs-number">60</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>        &#125;<br><br><br>        scanner01.close();<br>        <br><span class="hljs-comment">//=================if多选择语句======================</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                   System.out.println(<span class="hljs-string">&quot;请输入成绩&quot;</span>);<br>                     <span class="hljs-type">int</span>    score= scanner02.nextInt();<br><br>                     <span class="hljs-keyword">if</span> (score==<span class="hljs-number">100</span>) &#123;<br>                         System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>                     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&lt;<span class="hljs-number">100</span>&amp;&amp;score&gt;=<span class="hljs-number">90</span>)&#123;<br>                         System.out.println(<span class="hljs-string">&quot;优秀1&quot;</span>);<br>                      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&lt;<span class="hljs-number">90</span>&amp;&amp;score&gt;=<span class="hljs-number">80</span>)&#123;<br>                          System.out.println(<span class="hljs-string">&quot;优秀2&quot;</span>);<br>                     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">80</span>&amp;&amp;score&gt;=<span class="hljs-number">70</span>)&#123;<br>                         System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br><br>                     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&lt;<span class="hljs-number">70</span>&amp;&amp;score&gt;=<span class="hljs-number">60</span>) &#123;<br>                         System.out.println(<span class="hljs-string">&quot;中等&quot;</span>);<br>                     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>&lt;=score&amp;&amp;score&lt;<span class="hljs-number">60</span>) &#123;<br>                         System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><br>                     &#125;<span class="hljs-keyword">else</span> &#123;<br>                         System.out.println(<span class="hljs-string">&quot;成绩不合法&quot;</span>);<br>                     &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//=================Switch===================</span><br><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Switch01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//习惯： 没写一个case都要写一个break</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;C&#x27;</span>;<br>        <span class="hljs-keyword">switch</span>(grade)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;中等&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;再接再厉&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;挂科&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;未知等级&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="4、循环结构："><a href="#4、循环结构：" class="headerlink" title="4、循环结构："></a>4、循环结构：</h1><h2 id="while"><a href="#while" class="headerlink" title="while;"></a>while;</h2><p>do while; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">While01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//输出 1~100</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>            i++;<br>            System.out.println(i);<br><br>        &#125;<br><br>        <span class="hljs-comment">//死循环  while（true）&#123;</span><br>        <span class="hljs-comment">//============  1+2+3+.....+100</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(i2 &lt;<span class="hljs-number">100</span>)&#123;<br>            i2++;<br>            sum = sum + i2;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1加到100的和为&quot;</span>+sum);<br><br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//==============do while===============================</span><br><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhile01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">do</span>&#123;<br>            i2++;<br>            sum = sum + i2;<br>        &#125; <span class="hljs-keyword">while</span>(i2 &lt;<span class="hljs-number">100</span>);<br>            System.out.println(<span class="hljs-string">&quot;1加到100的和为&quot;</span>+sum);<br>        &#125;<br><br>    &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   dowhile 和 while 的区别</span><br><span class="hljs-comment">   do while 先执行后判断 能保证程序能最少执行一次（主要差别）</span><br><span class="hljs-comment">   while 先判断后执行</span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><h2 id="For"><a href="#For" class="headerlink" title="For:"></a>For:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//============== for ===========</span><br>        <span class="hljs-comment">//for 循环是一种高效的常用的循环语句</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        for 循环语句的注意：</span><br><span class="hljs-comment">        1、可以声明一种类型，但是可以初始化一个或多个循环控制变量，也可以是空语句</span><br><span class="hljs-comment">        2、检测布尔表达式的值，如果为 true循环体被执行，如果为false循环终止，开始执行循环体后面的语句</span><br><span class="hljs-comment">        3、执行一次循环后，更新一次循环控制变量（迭代因子控制循环变量的增减）</span><br><span class="hljs-comment">        4、再次执行布尔表达式，循环执行上面的表达式</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br><br>            System.out.println(i);<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;for循环结束&quot;</span>);<br><span class="hljs-comment">//=====================练习1===========================</span><br> <span class="hljs-comment">//练习题：1 :从 1到 100的所有的 奇数 和 偶数 的和</span><br>          <span class="hljs-comment">//for 循环里面嵌套 if</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">100</span>;j++)&#123;<br>           <span class="hljs-keyword">if</span> (j%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)&#123;<br>               sum1 = sum1 + j;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               sum2 = sum2 +j;<br>           &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1 到 100 所有的奇数和为&quot;</span>+ sum1);<br>        System.out.println(<span class="hljs-string">&quot;1 到 100 所有的偶数和为&quot;</span>+ sum2);<br><span class="hljs-comment">//======================练习2====================</span><br>   <span class="hljs-comment">// 练习题：用while 或 for循环输出1 ~ 1000 中能被5 整除的数， 并且每行输出3个</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">1000</span>; s++)&#123;<br>            <span class="hljs-keyword">if</span> (s%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(s+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s%(<span class="hljs-number">5</span>*<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(s);<br>                System.out.println();  <span class="hljs-comment">//或者   System.out.print(&quot;\n&quot;);</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//println 输出完就会换行</span><br>        <span class="hljs-comment">//print   输出完不会换行</span><br></code></pre></td></tr></table></figure><h2 id="for：打印九九乘法表"><a href="#for：打印九九乘法表" class="headerlink" title="for：打印九九乘法表"></a>for：打印九九乘法表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">For02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;=<span class="hljs-number">9</span>; j++) &#123;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=j; i++) &#123;<br><br>                System.out.print(j+<span class="hljs-string">&quot;x&quot;</span>+ i +<span class="hljs-string">&quot;=&quot;</span>+(j*i)+<span class="hljs-string">&quot;\t&quot;</span>);<br><br>            &#125;<br>            System.out.println();<br>        &#125;<br>        &#125;<br>    &#125;<br>1x1=<span class="hljs-number">1</span><br>2x1=<span class="hljs-number">2</span>2x2=<span class="hljs-number">4</span><br>3x1=<span class="hljs-number">3</span>3x2=<span class="hljs-number">6</span>3x3=<span class="hljs-number">9</span><br>4x1=<span class="hljs-number">4</span>4x2=<span class="hljs-number">8</span>4x3=<span class="hljs-number">12</span>4x4=<span class="hljs-number">16</span><br>5x1=<span class="hljs-number">5</span>5x2=<span class="hljs-number">10</span>5x3=<span class="hljs-number">15</span>5x4=<span class="hljs-number">20</span>5x5=<span class="hljs-number">25</span><br>6x1=<span class="hljs-number">6</span>6x2=<span class="hljs-number">12</span>6x3=<span class="hljs-number">18</span>6x4=<span class="hljs-number">24</span>6x5=<span class="hljs-number">30</span>6x6=<span class="hljs-number">36</span><br>7x1=<span class="hljs-number">7</span>7x2=<span class="hljs-number">14</span>7x3=<span class="hljs-number">21</span>7x4=<span class="hljs-number">28</span>7x5=<span class="hljs-number">35</span>7x6=<span class="hljs-number">42</span>7x7=<span class="hljs-number">49</span><br>8x1=<span class="hljs-number">8</span>8x2=<span class="hljs-number">16</span>8x3=<span class="hljs-number">24</span>8x4=<span class="hljs-number">32</span>8x5=<span class="hljs-number">40</span>8x6=<span class="hljs-number">48</span>8x7=<span class="hljs-number">56</span>8x8=<span class="hljs-number">64</span><br>9x1=<span class="hljs-number">9</span>9x2=<span class="hljs-number">18</span>9x3=<span class="hljs-number">27</span>9x4=<span class="hljs-number">36</span>9x5=<span class="hljs-number">45</span>9x6=<span class="hljs-number">54</span>9x7=<span class="hljs-number">63</span>9x8=<span class="hljs-number">72</span>9x9=<span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><h2 id="增强for循环："><a href="#增强for循环：" class="headerlink" title="增强for循环："></a>增强for循环：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">For03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//增强for循环：</span><br>        <span class="hljs-type">int</span> [] numbers = &#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        <span class="hljs-comment">//依次取出数组中的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>            System.out.println(numbers[i]);<br>        &#125;<br>        <span class="hljs-comment">//遍历数组中的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : numbers)&#123;<br>            System.out.println(x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、break-amp-continue"><a href="#5、break-amp-continue" class="headerlink" title="5、break&amp;continue"></a>5、break&amp;continue</h1><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Break01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>            i++;<br>            System.out.println(i);<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">30</span>)&#123;<br>                <span class="hljs-keyword">break</span>;   <span class="hljs-comment">//跳出当前的循环；但是不会终止程序</span><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>);        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(j&lt;<span class="hljs-number">100</span>)&#123;<br>            j++;<br>            <span class="hljs-keyword">if</span> (j%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.println();<br>                <span class="hljs-keyword">continue</span>;        <span class="hljs-comment">//continue 用于终止某次循环，跳出循环体中尚未执行完的语句，接着执行下一次循环</span><br><br>            &#125;<br>            System.out.print(j);<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="6、练习："><a href="#6、练习：" class="headerlink" title="6、练习："></a>6、练习：</h1><h2 id="1、打印三角形："><a href="#1、打印三角形：" class="headerlink" title="1、打印三角形："></a>1、打印三角形：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Structure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//打印三角形：</span><br>        <span class="hljs-comment">//1、打印5 行三角形：</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;j&gt;=i;j--)&#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);   <span class="hljs-comment">//先打印 5行 空白的  每行 4、3、2、1、0 个空白</span><br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);   <span class="hljs-comment">//在打印 5 行 *  每行1、2、3、4、5 个*</span><br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;j&lt;i;j++)&#123;       <span class="hljs-comment">//打印 5 行 * 每行 0、1、2、3、4 个*</span><br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br><br>        &#125;<br>    &#125;<br>&#125;<br>     *<br>    ***<br>   *****<br>  *******<br> *********<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07Java基础</title>
    <link href="/2023/04/02/07Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/02/07Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>《阿里巴巴开发手册》</p><h1 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h1><p>单行&#x2F;&#x2F;</p><p>多行&#x2F;**&#x2F;</p><p>文档&#x2F;***</p><p>​        *&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//单行注释</span><br>        <span class="hljs-comment">//输出一个Helloworld</span><br>        System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//多行注释</span><br><span class="hljs-comment">/* 这是一个多行注释 */</span><br><br><br><span class="hljs-comment">//javaDoc 文档注释</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> helloworld</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/***</span><br></code></pre></td></tr></table></figure><h1 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">keyworlds</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;狂神说Java&quot;</span>;<br>        String $早上 = <span class="hljs-string">&quot;吃饭那个&quot;</span>;<br>        System.out.println(teacher);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//所有的标识符必须用字母，美元符，或者下划线开始</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * *</span><br><span class="hljs-comment"> * 所有的标识符必须用字母，美元符，或者下划线开始</span><br><span class="hljs-comment"> * 首字母后面可以任意组合</span><br><span class="hljs-comment"> * 关键字和变量名不能用作变量名和方法名</span><br><span class="hljs-comment"> * 标识符是大小写敏感的</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="3、类型转换"><a href="#3、类型转换" class="headerlink" title="3、类型转换"></a>3、类型转换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class Datestyle &#123;<br>    public static void main(String[] args) &#123;<br>        String a = <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>          //整数<br>        int num  =  10;<br>        byte num2 = 20;<br>        short num3 = 20;<br>        long num4 = 20l;<br>        <br>        //小数<br>        <span class="hljs-built_in">float</span> num5 = 20.1f;<br>        double num6 = 30.2;<br>        <br>        //字符<br>        char name = <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <br>        //字符串<br>        String namea = <span class="hljs-string">&quot;定义一个字符串&quot;</span>;//String 后面不能用关键字<br>        <br>        //布尔值<br>        boolean flag = <span class="hljs-literal">true</span>;<br>        System.out.println(a);<br>        System.out.println(num);<br>        <br>         //==========================<br>        //浮点数拓展？  银行业务怎么表示？钱<br>        //BigDecimal  ---用这个<br>        //float<br>        //double<br>        //最好完全避免使用浮点数进行比较<br>        System.out.println(a);<br>        System.out.println(num);<br><br>        <span class="hljs-built_in">float</span> f = 0.1f;<br>        double d = 1.0/10;//0.1<br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>        System.out.println(f==d);<br>        System.out.println(f);<br>        System.out.println(d);<br><br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>        <span class="hljs-built_in">float</span> d1 = 232323232323f;<br>        <span class="hljs-built_in">float</span> d2 = d1 + 1;<br>        System.out.println(d1==d2);<br>        <br>        <br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        char c1 = <span class="hljs-string">&#x27;我&#x27;</span>;<br>        char c2 = <span class="hljs-string">&#x27;爱&#x27;</span>;<br>        char c3 = <span class="hljs-string">&#x27;睡&#x27;</span>;<br>        char c4 = <span class="hljs-string">&#x27;觉&#x27;</span>;<br>        char c5 = <span class="hljs-string">&#x27;你&#x27;</span>;<br>        System.out.println(c1);<br>        System.out.println((int)c1);   //数据类型  强制转换 可以把字符转换为数字<br><br>        System.out.println(c2);<br>        System.out.println((int)c2);<br><br>        System.out.println(c3);<br>        System.out.println((int)c3);<br><br>        System.out.println(c4);<br>        System.out.println((int)c4);<br><br>        System.out.println(c5);<br>        System.out.println((int)c5);<br>        //======所有的的字符本质上就是数字======   <span class="hljs-number">2</span>个字节 <span class="hljs-number">0</span>-<span class="hljs-number">65536</span><br>        //U000  UFFFF<br>        char c6 = &#x27;\u0061&#x27;;<br>        System.out.println(c6);<br><br>  #      //======转义字符=====<br>  #      // \t 制表符<br>  #      // \n 换行<br>  #     //....<br>        System.out.println(&quot;Hello \t World&quot;);<br>        System.out.println(&quot;Hello\nWorld&quot;);<br><br>        System.out.println(&quot;=============&quot;);<br><br>        //对象里面   存储的内存位置不一样<br><br>        String sa = new String(&quot;HelloWorld&quot;);<br>        String sb = new String(&quot;HelloWorld&quot;);<br>        System.out.println(sa==sb);<br><br>        String sc =&quot;hello world&quot;;<br>        String sd = &quot;hello world&quot;;<br>        System.out.println(sc==sd);<br><br>        //布尔值扩展：<br>        boolean flag2 = true;<br>        if(flag2==true)&#123;&#125;   //新手程序员这样写<br>        if (flag2)&#123;&#125;      //这里是默认的  flag2 = true<br>        //这俩行代码一样    less is move<br><br><br>    &#125;<br>&#125;<br><br><br><br><br>#/**<br> #* //所有的变量必须先定义才能使用<br> #* java 是强类型的语言，区别与弱类型的语言<br> #* 运行的更慢了也更安全<br> #*<br> #*基本数据类型：<br> #* <span class="hljs-number">1</span>、整数型：byte占<span class="hljs-number">1</span>个字节 -<span class="hljs-number">128</span>-<span class="hljs-number">127</span>   short占<span class="hljs-number">2</span>个字节 -<span class="hljs-number">32768</span>-<span class="hljs-number">32767</span> int占<span class="hljs-number">4</span>个字节 long占<span class="hljs-number">8</span>个字节<br># * <span class="hljs-number">2</span>、浮点型：  （小数） float占<span class="hljs-number">4</span>个字节，double占<span class="hljs-number">8</span>个字节<br> #* <span class="hljs-number">3</span>、字符型： String  char占<span class="hljs-number">2</span>个字节<br> #* <span class="hljs-number">4</span>、boolean:占<span class="hljs-number">1</span>位只有flase和true俩个<br> #*<br> #* 引用数据类型：Reference Type<br> #* <span class="hljs-number">1</span>、类<br> #* <span class="hljs-number">2</span>、接口<br> #* <span class="hljs-number">3</span>、数组<br> #*/<br></code></pre></td></tr></table></figure><h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><p>&#x2F;&#x2F;强制类型转换：变量名    高—-&gt;低</p><p>&#x2F;&#x2F;自动类型转换：低—–&gt;高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StyleChange</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>  <span class="hljs-number">128</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;   <span class="hljs-comment">//类型转换   内存会溢出</span><br><br>        <span class="hljs-comment">//强制转换 ：</span><br>        <span class="hljs-comment">//强制类型转换：变量名    高----&gt;低</span><br>        <span class="hljs-comment">//自动类型转换：低-----&gt;高</span><br>        System.out.println(i);<br>        System.out.println(b);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 注意点：</span><br><span class="hljs-comment">         * 1、不能对布尔值进行转换</span><br><span class="hljs-comment">         * 2、不能把对象类型转换为不相干的类型</span><br><span class="hljs-comment">         * 3、在把大容量转换为小容量的时候强制转换</span><br><span class="hljs-comment">         * 4、在转换的时候可能会产生内存溢出的问题，或者精度的问题</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>        System.out.println((<span class="hljs-type">int</span>) <span class="hljs-number">23.7</span>); <span class="hljs-comment">// 23 转化成小数后产生精度问题</span><br>        System.out.println((<span class="hljs-type">int</span>)-<span class="hljs-number">45.89f</span>);  <span class="hljs-comment">// -45</span><br><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c+<span class="hljs-number">1</span>;<br>        System.out.println(d);<br><br>        System.out.println((<span class="hljs-type">char</span>) d);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StyleChange</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>  <span class="hljs-number">128</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;   <span class="hljs-comment">//类型转换   内存会溢出</span><br><br>        <span class="hljs-comment">//强制转换 ：</span><br>        <span class="hljs-comment">//强制类型转换：变量名    高----&gt;低</span><br>        <span class="hljs-comment">//自动类型转换：低-----&gt;高</span><br>        System.out.println(i);<br>        System.out.println(b);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 注意点：</span><br><span class="hljs-comment">         * 1、不能对布尔值进行转换</span><br><span class="hljs-comment">         * 2、不能把对象类型转换为不相干的类型</span><br><span class="hljs-comment">         * 3、在把大容量转换为小容量的时候强制转换</span><br><span class="hljs-comment">         * 4、在转换的时候可能会产生内存溢出的问题，或者精度的问题</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>        System.out.println((<span class="hljs-type">int</span>) <span class="hljs-number">23.7</span>); <span class="hljs-comment">// 23 转化成小数后产生精度问题</span><br>        System.out.println((<span class="hljs-type">int</span>)-<span class="hljs-number">45.89f</span>);  <span class="hljs-comment">// -45</span><br><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c+<span class="hljs-number">1</span>;<br>        System.out.println(d);<br>        System.out.println((<span class="hljs-type">char</span>) d);<br><br>        <span class="hljs-comment">//操作比较大的数的时候，注意溢出的问题</span><br>        <span class="hljs-comment">//JDK新特性，数字之可以用下划线分割</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">10_0000_0000</span>;<br>        System.out.println(money);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> money * year;   <span class="hljs-comment">//-14744836480,计算的时候会溢出</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total2</span> <span class="hljs-operator">=</span> money*year;  <span class="hljs-comment">//默认是int 转换之前已经存在问题，就不能进行转换了</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total3</span> <span class="hljs-operator">=</span> money*((<span class="hljs-type">long</span>)year);  <span class="hljs-comment">//先把一个数抓换为long</span><br><br>        System.out.println(total);<br>        System.out.println(total2);<br>        System.out.println(total3);<br>        <span class="hljs-comment">//最好 都写大L</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、-变量、常量"><a href="#4、-变量、常量" class="headerlink" title="4、 变量、常量"></a>4、 变量、常量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Function</span> &#123;<br><br>    <span class="hljs-comment">//类变量 static : ==类变量是从属于类的，会随着类消失而消失</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span><span class="hljs-number">2500</span> ;<br>        <span class="hljs-comment">//属性：变量</span><br>       <span class="hljs-comment">//实例变量：从属于对象:如果不进行初始化，这个类型的默认值就会为 0  0.0</span><br>        <span class="hljs-comment">//布尔值：默认是false</span><br>       <span class="hljs-comment">// 除了基本类型，其余的默认值都是null</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>        <span class="hljs-comment">//mian 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 局部变量必须声明和初始化值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(i);<br><br>        <span class="hljs-comment">//变量类型</span><br>        <span class="hljs-type">Function</span> <span class="hljs-variable">function</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br>        System.out.println(function.age);<br>        System.out.println(function.name);<br><br>        <span class="hljs-comment">//类变量 static</span><br>        System.out.println(salary);<br><br>        <span class="hljs-comment">//类变量 static</span><br><br>    &#125;<br>        <span class="hljs-comment">//其他方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        System.out.println(i);<br>    &#125;<br><span class="hljs-comment">//    ===============================================================</span><br>    <span class="hljs-comment">//常量：  就是写一次就不会再变化的量 就是一些固定值</span><br>    <span class="hljs-comment">//修饰符： 不存在先后顺序</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span><span class="hljs-number">3.14</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI2</span> <span class="hljs-operator">=</span><span class="hljs-number">3.14</span>;   <span class="hljs-comment">//static  和 final 的位置换了也不影响值</span><br><br>    <span class="hljs-comment">//变量的命名规范：</span><br>    <span class="hljs-comment">//所有的变量、方法、类名：见名知意</span><br>    <span class="hljs-comment">//类成员变量： 首字母小写和驼峰原则  monthSalary</span><br>    <span class="hljs-comment">//局部变量：首字母小写和驼峰原则</span><br>    <span class="hljs-comment">//常量：大写字母和下划线 MAX_VALUE</span><br>    <span class="hljs-comment">//类名：首字母大写和驼峰原则  GoodMan</span><br>    <span class="hljs-comment">//方法名：首字母小写和驼峰原则</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Operator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//二元运算符：</span><br>        <span class="hljs-comment">//复制当前行到下一行  ctrl+D</span><br>        <span class="hljs-type">int</span> a= <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b= <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> c= <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> d= <span class="hljs-number">40</span>;<br>        System.out.println(a+b);<br>        System.out.println(a-b);<br>        System.out.println(a*b);<br>        System.out.println(a/(<span class="hljs-type">double</span>)b);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">223232323</span>;<br>        <span class="hljs-type">int</span>  <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">byte</span>  <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        System.out.println(e + f + g + h); <span class="hljs-comment">//long</span><br>        System.out.println(f + g + h); <span class="hljs-comment">//int</span><br>        System.out.println((<span class="hljs-type">double</span>)g + h); <span class="hljs-comment">//int  如果里面有double 结果就一定会有小数</span><br><br>        <span class="hljs-comment">//关系运算符放回的结构： 正确，错误 布尔值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br>        System.out.println(j&gt;k);<br>        System.out.println(j&lt;k);<br>        System.out.println(j!=k);<br><br>        <span class="hljs-comment">//取余  模运算  %</span><br>        <span class="hljs-type">int</span> m= <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> n= <span class="hljs-number">7</span>;<br>        System.out.println(n % m);<br><br>        <span class="hljs-comment">// ++  --</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> a1++;<br>        <span class="hljs-comment">// a ++     a = a + 1;  执行完之后 a自增;   先给b赋值再自增</span><br>        System.out.println(a1);<br><br>        <span class="hljs-comment">//a= a+1;</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> ++a1; <span class="hljs-comment">//  ++a                 执行之前 a自增      自增再给b赋值</span><br>        System.out.println(a1);<br>        System.out.println(b1);<br>        System.out.println(c1);<br><br>        <span class="hljs-comment">//幂运算： 2^3  2^4   很多运算会使用一些工具类来使用</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">pow</span> <span class="hljs-operator">=</span> Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        System.out.println(pow);<br><br><br>        <span class="hljs-comment">//逻辑运算符： 与（&amp;&amp;） 或 (||) 非(!)</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        System.out.println(<span class="hljs-string">&quot;a &amp;&amp; b&quot;</span>);      <span class="hljs-comment">//逻辑与运算  全真为真</span><br>        System.out.println(<span class="hljs-string">&quot;a||b&quot;</span>);        <span class="hljs-comment">//有假为假</span><br>        System.out.println(<span class="hljs-string">&quot;a!b&quot;</span>);         <span class="hljs-comment">//取反</span><br><br>        <span class="hljs-comment">//短路运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span>(c2&lt;<span class="hljs-number">4</span>)&amp;&amp;(c2++&lt;<span class="hljs-number">4</span>);   <span class="hljs-comment">// 前面的发生错误了，后面就不会在执行了</span><br>        System.out.println(d2);<br>        System.out.println(c2);<br><br>        <span class="hljs-comment">//位运算符：  &lt;&lt;  &gt;&gt;   ==========公司要求题=========</span><br>        <span class="hljs-comment">//  &lt;&lt;  *2   底层算法中使用的很多，  左移相当于 左边的 0 变成 1</span><br>        <span class="hljs-comment">//  &gt;&gt;  /2</span><br>        <span class="hljs-comment">// 位运算效率极高</span><br><br>        <span class="hljs-comment">/* 0000 0000     1</span><br><span class="hljs-comment">           0000 0001     2</span><br><span class="hljs-comment">           0000 0010     3</span><br><span class="hljs-comment">           0000 0011     4</span><br><span class="hljs-comment">           0000 0100     5</span><br><span class="hljs-comment">           0000 0101     6</span><br><span class="hljs-comment">           0000 0110     7</span><br><span class="hljs-comment">           0000 0111     8</span><br><span class="hljs-comment">           0000 1000     9</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//字符串链接符：  + , String   在连接运算过程中，连接符+ 左右只要有一边是 String类型的最后结果就会转换为String类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>             a3+=b3;  a3 = a3+b3;<br>             a3-=b3;  a3 = a3-b3;<br><br>             <span class="hljs-comment">//==========公司要求==========：</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span> + a3 + b3);    <span class="hljs-comment">//字符串在前面，就会直接进行拼接</span><br>        System.out.println(a3 + b3 + <span class="hljs-string">&quot;&quot;</span>);   <span class="hljs-comment">//字符串在后面 前面的 a3+b3 还会进行运算</span><br><br><br>        <span class="hljs-comment">//三元运算符 ?   X ? Y : Z</span><br>        <span class="hljs-comment">//如果X==true，则结果为 y 否则结果为z   ；三元运算符是一个整体会提升精度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        String type=  score &lt;<span class="hljs-number">60</span>?  <span class="hljs-string">&quot;不及格&quot;</span>:<span class="hljs-string">&quot;及格&quot;</span>;<br>        System.out.println(type);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        运算符的优先级：</span><br><span class="hljs-comment">          算数运算符：  + - * /  %  ++  --</span><br><span class="hljs-comment">          赋值运算符：  =</span><br><span class="hljs-comment">          关系运算符： &gt;  &lt;  &gt;=   &lt;=  !=   instanceof</span><br><span class="hljs-comment">          逻辑运算符： &amp;&amp;  ||  ！  与或非</span><br><span class="hljs-comment">          位运算符： &amp;  |  ~  &gt;&gt; &lt;&lt;  &gt;&gt;&gt;  (了解！)</span><br><span class="hljs-comment">          条件运算符：  ?</span><br><span class="hljs-comment">          扩展赋值运算符： += -=  *=   /=</span><br><span class="hljs-comment">         */</span><br>        <br>        <span class="hljs-comment">//位运算</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 位运算符： &amp;  |  ~  &gt;&gt; &lt;&lt;  &gt;&gt;&gt;  (了解！)</span><br><span class="hljs-comment">         * A = 0011  1100</span><br><span class="hljs-comment">         * B = 0000 1101</span><br><span class="hljs-comment">         *   A&amp;B  0000 1100   AB上下对齐来看 俩个都是 1 才为1   有一个为0 就是0 ；</span><br><span class="hljs-comment">         *   A|B  0011  1101   都是 0就为0  有一个1就为1</span><br><span class="hljs-comment">         *   A^B  0011 0001   相同为 0 不相同为 1</span><br><span class="hljs-comment">         *   ~B   1111 0010    取反</span><br><span class="hljs-comment">         * ==============================</span><br><span class="hljs-comment">         *  2*8 怎么运算最快？   2*2*2*2*2</span><br><span class="hljs-comment">         * &lt;&lt;  左移</span><br><span class="hljs-comment">         *  &gt;&gt;  右移</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、包装机制、Java-Doc"><a href="#6、包装机制、Java-Doc" class="headerlink" title="6、包装机制、Java Doc"></a>6、包装机制、Java Doc</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuangstudy.base;<br><span class="hljs-keyword">import</span> com.kuangstudy.base.Function;<br><span class="hljs-keyword">package</span> com.kuangstudy.base.*;  <span class="hljs-comment">//*号表示下面的所有都导入进来</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackageText</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    为了更好的组织类：JAva 提供了 包机制，用于命名类名和命名空间：</span><br><span class="hljs-comment">    包语句的语法格式为：</span><br><span class="hljs-comment">    package pkg[.pkg2 [.pkg3...]];</span><br><span class="hljs-comment">    一般利用公司域名倒置作为包名； com.kuangstudy.blog      top.xlaodal.www</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//导数据包：</span><br>    <span class="hljs-comment">//import package[.package1];</span><br>&#125;<br><br><span class="hljs-comment">//======================JavaDoc================</span><br><span class="hljs-keyword">package</span> com.kuangstudy.base;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xlaodal</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span>  指明需要用的JDK版本 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Doc</span> &#123;<br>   <br>    String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name    //参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>        //返回值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception   //抛出异常情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># javadoc  -encoding  UTF-8 -charset  UTF-8 Doc.java   //DOS命令用来生成文档</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05Hello World</title>
    <link href="/2023/04/02/05Hello-World/"/>
    <url>/2023/04/02/05Hello-World/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p><p>1、新建一个文件夹</p><p>2、建立一个Java文件</p><ul><li>.txt    </li><li>Hello.java</li></ul><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\HelloWorld.jpg" alt="HelleWorld"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.print(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>javac  Hello.java    :编译Hello.java</p><p>java   Hello             :折行Hello.java</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04Java特性和优势</title>
    <link href="/2023/04/02/04Java%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/"/>
    <url>/2023/04/02/04Java%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>1、<strong>三高</strong>：高可用、高性能、高并发</p><p>2、简单</p><p>3、面向对象</p><p>4、write once run anymore</p><p>5、高性能</p><p>6、分布式</p><p>7、动态性 （反射机制）</p><p>8、多线程</p><p>9、安全性</p><p>10、健壮性（异常特性）</p><p> JavaSE：标准版（桌面程序、控制台）最基本的</p><p>JavaEE:  企业级开发</p><p>JDK、JRE、JVM</p><p>JDK包含JRE    ，JVM就相当于处理器，类似于虚拟机</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03基本DOS命令</title>
    <link href="/2023/04/02/03%E5%9F%BA%E6%9C%ACDOS%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/04/02/03%E5%9F%BA%E6%9C%ACDOS%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>1、打开cmd的方式：win + R</p><p>2、在任意的文件下面按住 shift+鼠标右键 选择在此处打开窗口</p><p>3、在资源管理器的文件路径里面  输入 cmd 按回车打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#盘符切换: 英文模式下</span><br><span class="hljs-comment">#查看当前目录下的所有文件 ：dir</span><br><span class="hljs-comment">#切换目录: cd   change directory</span><br><span class="hljs-comment">#cd ..    返回上一级</span><br><span class="hljs-comment">#cd + 文件名称  表示进入当前文件夹下的一个文件</span><br><span class="hljs-comment">#清除屏幕 ： cls </span><br><span class="hljs-comment">#退出终端：exit</span><br><span class="hljs-comment">#查看电脑ip:  ipconfig  Linux 是ifconfig</span><br><span class="hljs-comment">#打开计算器： calc</span><br><span class="hljs-comment">#打开画图工具： mspaint</span><br><span class="hljs-comment">#打开记事本：notepad</span><br><span class="hljs-comment">#ping:</span><br>ping www.baidu.com<br><span class="hljs-comment">#tracert 逐跳ping </span><br><span class="hljs-comment">#创建/删除文件夹： md/rd +文件夹名</span><br><span class="hljs-comment">#创建/删除文件：cd&gt;/del +文件名</span><br><span class="hljs-comment">#查看java版本：java -version</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02windows常用命令</title>
    <link href="/2023/04/02/02windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/04/02/02windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>Alt+F4  关闭窗口</strong></p><p>常用的快捷键：Ctrl + C   V    Z    X     S</p><p>shift + delete ：永久删除文件</p><p>win + R  ：打开命令行</p><p>win +  E  ：  打开我的电脑</p><p><strong>Ctrl + Alt  + delete</strong> : 打开任务管理器</p><p>在任务管理器里面删除进程后  点击文件 新建任务输入 explorer可以恢复进程</p><p><img src="D:\workspace\Hexo\xlaodal\xlaodal.github.io\mgblog\source\images\win常用快捷键01.jpg" alt="恢复进程"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
