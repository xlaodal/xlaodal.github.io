<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/11/01%E7%9F%AD%E6%96%87/"/>
    <url>/2023/12/11/01%E7%9F%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#我的四季             --张洁</span><br></code></pre></td></tr></table></figure><p>生命如四季。</p><p>春天，我在这片土地上，用我细瘦的胳膊，紧扶着我锈钝的犁。深埋在泥土里的树根、石块，磕绊着我的犁头，消耗着我成倍的体力。我汗流浃背，四肢颤抖，恨不得立刻躺倒在那片刚刚开垦的泥土之上。可我懂得我没有权利逃避，在给予我生命的同时所给予我的责任。我无须问为什么，也无须想有没有结果。我不应白白地耗费时间。去无尽地感慨生命的艰辛，也不应该自艾自怜命运怎么不济，偏偏给了我这样一块不毛之地。我要做的是咬紧牙关，闷着脑袋，拼却全身的力气，压到我的犁头上去。我绝不企望有谁来代替，因为在这世界上，每人都有一块必得由他自己来耕种的土地。</p><p>我怀着希望播种，那希望绝不比任何一个智者的希望卑微。</p><p>每天，我望着掩盖着我的种子的那片土地，想象着它将发芽、生长、开花、结果。如一个孕育着生命的母亲，期待着自己将要出生的婴儿。我知道，人要是能够期待，就能够奋力以赴。</p><p>夏日，我曾因干旱，站在地头上，焦灼地盼过南来的风，吹来载着雨滴的云朵。那是怎样地望眼欲穿、望眼欲穿呐！盼着、盼着，有风吹过来了，但那阵风强了一点，把那片载着雨滴的云吹了过去，吹到另一片土地上。我恨过，恨我不能一下子跳到天上，死死地揪住那片云，求它给我一滴雨。那是什么样的痴心妄想！我终于明白，这妄想如同想要拔着自己的头发离开大地。于是，我不再妄想，我只能在我赖以生存的这块土地上，寻找泉水。</p><p>没有充分地准备，便急促地上路了。历过的艰辛自不必说它。要说的是找到了水源，才发现没有带上盛它的容器。仅仅是因为过于简单和过于发热的头脑，发生过多少次完全可以避免的惨痛的过失——真的，那并非不能，让人真正痛心的是在这里：并非不能。我顿足，我懊悔，我哭泣，恨不得把自己撕成碎片。有什么用呢？再重新开始吧，这样浅显的经验却需要比别人付出加倍的代价来记取。不应该怨天尤人，会有一个时辰，留给我检点自己！</p><p>我眼睁睁地看过，在无情的冰雹下，我那刚刚灌浆、远远没有长成的谷穗，在细弱的稻杆上摇摇摆摆地挣扎，却无力挣脱生养它，却又牢牢地锁住它的大地，永远没有尝受过成熟是什么一种滋味，便夭折了。</p><p>我曾张开我的双臂，愿将我全身的皮肉，碾成一张大幕，为我的青苗遮挡狂风、暴雨、冰雹……善良过份，就会变成糊涂和愚昧。厄运只能将弱者淘汰，即使为它挡过这次灾难，它也会在另一次灾难里沉没。而强者会留下，继续走完自己的路。</p><p>秋天，我和别人一样收获。望着我那干瘪的谷粒，心里有一种又酸又苦的欢乐。但我并不因我的谷粒比别人干瘪便灰心或丧气。我把它们捧在手里，紧紧地贴近心窝，仿佛那是新诞生的一个自我。</p><p>富有而善良的邻人，感叹我收获的微少，我却疯人一样地大笑。在这笑声里，我知道我已成熟。我已有了一种特别的量具，它不量谷物只量感受。我的邻人不知和谷物同时收获的还有人生。我已经爱过，恨过，笑过，哭过，体味过，彻悟过……细细想来，便知晴日多于阴雨，收获多于劳作。只要我认真地活过，无愧地付出过。人们将无权耻笑我是入不敷出的傻瓜，也不必用他的尺度来衡量我值得或是不值得。</p><p>到了冬日，那生命的黄昏，难道就没有什么事情好做？只是隔着窗子，看飘落的雪花，落漠的田野。或是数点那光秃的树枝上的寒鸦？不，我还可以在炉子里加上几块木柴，使屋子更加温暖；我将冷静地检点自己：我为什么失败，我做错过什么，我欠过别人什么……但愿只是别人欠我，那最后的日子，便会心安得多！</p><p>再没有可能纠正已经成为往事的过错。一个生命不可能再有一次四季。未来的四季将属于另一个新的生命。</p><p>但我还是有事情好做，我将把这一切记录下来。人们无聊的时候，不妨读来解闷，怀恨我的人，也可以幸灾乐祸地骂声：活该！聪明的人也许会说这是多余；刻薄的人也许会敷演出一把利剑，将我一条条地切割。但我相信，多数人将会理解。他们将会公正地判断我曾做过的一切。</p><p>在生命的黄昏里，哀叹和寂寞的，将不会是我！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/11/01%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/11/01%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1.github有时候没办法推送了，可能是代理设置的问题，在设置-网络和Internet-代理-关闭代理就可以</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#2.如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：</span><br>error: remote origin already exists.表示远程仓库已存在。<br>因此你要进行以下操作：<br><span class="hljs-comment">#1、先输入git remote rm origin 删除关联的origin的远程库</span><br><span class="hljs-comment">#2、关联自己的仓库 git remote add origin https://gitee.com/xxxxxx.git</span><br><span class="hljs-comment">#3、最后git push origin master，这样就推送到自己的仓库了。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>39Maven高级</title>
    <link href="/2023/12/10/day39-Maven%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/12/10/day39-Maven%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h1><p>Web开发讲解完毕之后，我们再来学习Maven高级。其实在前面的课程当中，我们已经学习了Maven。</p><p>我们讲到 <strong>Maven 是一款构建和管理 Java 项目的工具</strong>。经过前面 10 多天 web 开发的学习，相信大家对于 Maven 这款工具的基本使用应该没什么问题了。我们掌握了 Maven 工具的基本使用之后，其实对于一些简单的项目的构建及管理基本上就没什么问题了。</p><p>但是如果我们需要开发一些中大型的项目，此时仅凭我们前面所学习的 Maven 的基础知识就比较难以应对了。所以我们接下来还需要学习 Maven 提供的一些高级的功能，这些功能在构建和管理 Java 项目的时候用的也是非常多的。</p><p>Maven高级内容包括:</p><ul><li>分模块设计与开发</li><li>继承与聚合</li><li>私服</li></ul><h2 id="1-分模块设计与开发"><a href="#1-分模块设计与开发" class="headerlink" title="1. 分模块设计与开发"></a>1. 分模块设计与开发</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>所谓分模块设计，顾名思义指的就是我们在设计一个 Java 项目的时候，将一个 Java 项目拆分成多个模块进行开发。</p><p><strong>1). 未分模块设计的问题</strong></p><img src="assets/image-20230113090241470.png" alt="image-20230113090241470" style="zoom:67%;" /> <p>如果项目不分模块，也就意味着所有的业务代码是不是都写在这一个 Java 项目当中。随着这个项目的业务扩张，项目当中的业务功能可能会越来越多。</p><p>假如我们开发的是一个大型的电商项目，里面可能就包括了商品模块的功能、搜索模块的功能、购物车模块、订单模块、用户中心等等。这些所有的业务代码我们都在一个 Java 项目当中编写。</p><p>此时大家可以试想一下，假如我们开发的是一个大型的电商网站，这个项目组至少几十号甚至几百号开发人员，这些开发人员全部操作这一个 Java 项目。此时大家就会发现我们项目管理和维护起来将会非常的困难。而且大家再来看，假如在我们的项目当中，我们自己定义了一些通用的工具类以及通用的组件，而公司还有其他的项目组，其他项目组也想使用我们所封装的这些组件和工具类，其实是非常不方便的。因为 Java 项目当中包含了当前项目的所有业务代码，所以就造成了这里面所封装的一些组件会难以复用。</p><p><strong>总结起来，主要两点问题：不方便项目的维护和管理、项目中的通用组件难以复用。</strong></p><p><strong>2). 分模块设计</strong></p><p>分模块设计我们在进行项目设计阶段，就可以将一个大的项目拆分成若干个模块，每一个模块都是独立的。</p><p><img src="/assets/image-20230113094045299.png" alt="image-20230113094045299"> </p><p>比如我们可以将商品的相关功能放在商品模块当中，搜索的相关业务功能我都封装在搜索模块当中，还有像购物车模块、订单模块。而为了组件的复用，我们也可以将项目当中的实体类、工具类以及我们定义的通用的组件都单独的抽取到一个模块当中。</p><p>如果当前这个模块，比如订单模块需要用到这些实体类以及工具类或者这些通用组件，此时直接在订单模块当中引入工具类的坐标就可以了。这样我们就将一个项目拆分成了若干个模块儿，这就是分模块儿设计。</p><p>分模块儿设计之后，大家再来看。我们在进行项目管理的时候，我就可以几个人一组，几个人来负责订单模块儿，另外几个人来负责购物车模块儿，这样更加便于项目的管理以及项目的后期维护。</p><p>而且分模块设计之后，如果我们需要用到另外一个模块的功能，我们直接依赖模块就可以了。比如商品模块、搜索模块、购物车订单模块都需要依赖于通用组件当中封装的一些工具类，我只需要引入通用组件的坐标就可以了。</p><p><strong>分模块设计就是将项目按照功能&#x2F;结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p><h3 id="1-2-实践"><a href="#1-2-实践" class="headerlink" title="1.2 实践"></a>1.2 实践</h3><h4 id="1-2-1-分析"><a href="#1-2-1-分析" class="headerlink" title="1.2.1 分析"></a>1.2.1 分析</h4><p>好，我们明白了什么是分模块设计以及分模块设计的优势之后，接下来我们就来看一下我们之前所开发的案例工程。</p><p>我们可以看到在这个项目当中，除了我们所开发的部门管理以及员工管理、登录认证等相关业务功能以外，我们是不是也定义了一些实体类，也就是pojo包下存放的一些类，像分页结果的封装类PageBean、 统一响应结果Result，我们还定义了一些通用的工具类，像Jwts、阿里云OSS操作的工具类等等。</p><p>如果在当前公司的其他项目组当中，也想使用我们所封装的这些公共的组件，该怎么办？大家可以思考一下。</p><ul><li><p>方案一：直接依赖我们当前项目 tlias-web-management ，但是存在两大缺点：</p><ul><li>这个项目当中包含所有的业务功能代码，而想共享的资源，仅仅是pojo下的实体类，以及 utils 下的工具类。如果全部都依赖进来，项目在启动时将会把所有的类都加载进来，会<strong>影响性能</strong>。</li><li>如果直接把这个项目都依赖进来了，那也就意味着我们所有的业务代码都对外公开了，这个是非常<strong>不安全</strong>的。</li></ul></li><li><p>方案二：分模块设计</p><ul><li>将pojo包下的实体类，抽取到一个maven模块中 tlias-pojo</li><li>将utils包下的工具类，抽取到一个maven模块中 tlias-utils</li><li>其他的业务代码，放在tlias-web-management这个模块中，在该模块中需要用到实体类pojo、工具类utils，直接引入对应的依赖即可。</li></ul><p><img src="/assets/image-20230113095609518.png" alt="image-20230113095609518"></p></li></ul><p>​</p><blockquote><p>​<strong>注意：分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</strong></p><p>​PS：当前我们是为了演示分模块开发，所以是基于我们前面开发的案例项目进行拆分的，实际中都是分模块设计，然后再开发的。</p></blockquote><h4 id="1-2-2-实现"><a href="#1-2-2-实现" class="headerlink" title="1.2.2 实现"></a>1.2.2 实现</h4><p>思路我们分析完毕，接下来，我们就根据我们分析的思路，按照如下模块进行拆分：</p><p><strong>1. 创建maven模块 tlias-pojo，存放实体类</strong></p><p>A. 创建一个正常的Maven模块，模块名tlias-pojo</p><p><img src="assets/image-20230113100500382.png" alt="image-20230113100500382" style="zoom: 60%;" /> <img src="assets/image-20230113100756843.png" alt="image-20230113100756843" style="zoom: 60%;" /> </p><p>B. 然后在tlias-pojo中创建一个包 com.itheima.pojo (和原来案例项目中的pojo包名一致)</p><p><img src="/assets/image-20230113101203524.png" alt="image-20230113101203524"> </p><p>C. 将原来案例项目 tlias-web-management 中的pojo包下的实体类，复制到tlias-pojo模块中</p><p><img src="/assets/image-20230113101216305.png" alt="image-20230113101216305"> </p><p>D. 在 tlias-pojo 模块的pom.xml文件中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>E. 删除原有案例项目tlias-web-management的pojo包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-pojo的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-pojo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2. 创建Maven模块 tlias-utils，存放相关工具类</strong></p><p>A. 创建一个正常的Maven模块，模块名tlias-utils</p><p><img src="assets/image-20230113100500382.png" alt="image-20230113100500382" style="zoom: 60%;" />  <img src="assets/image-20230113101816151.png" alt="image-20230113101816151" style="zoom:67%;" /> </p><p>B. 然后在 tlias-utils 中创建一个包 com.itheima.utils (和原来案例项目中的utils包名一致)</p><p><img src="/assets/image-20230113102102376.png" alt="image-20230113102102376"> </p><p>C. 将原来案例项目 tlias-web-management 中的utils包下的实体类，复制到tlias-utils模块中</p><p><img src="/assets/image-20230113102113451.png" alt="image-20230113102113451"> </p><p>D. 在 tlias-utils 模块的pom.xml文件中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--阿里云OSS--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--WEB开发--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>E. 删除原有案例项目tlias-web-management的utils包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-utils的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>到此呢，就已经完成了模块的拆分，拆分出了 tlias-pojo、tlias-utils、tlias-web-management ，如果其他项目中需要用到 pojo，或者 utils工具类，就可以直接引入依赖。</strong> </p><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><blockquote><p>1). 什么是分模块设计：将项目按照功能拆分成若干个子模块</p></blockquote><blockquote><p>2). 为什么要分模块设计：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享</p></blockquote><blockquote><p>3). 注意事项：分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</p></blockquote><h2 id="2-继承与聚合"><a href="#2-继承与聚合" class="headerlink" title="2. 继承与聚合"></a>2. 继承与聚合</h2><p>在案例项目分模块开发之后啊，我们会看到tlias-pojo、tlias-utils、tlias-web-management中都引入了一个依赖 lombok 的依赖。我们在三个模块中分别配置了一次。</p><img src="assets/image-20230113103714055.png" alt="image-20230113103714055" style="zoom:80%;" /> <p>如果是做一个大型的项目，这三个模块当中重复的依赖可能会很多很多。如果每一个 Maven 模块里面，我们都来单独的配置一次，功能虽然能实现，但是配置是比较<strong>繁琐</strong>的。</p><p>而接下来我们要讲解的 Maven 的继承用来解决这问题的。</p><h3 id="2-1-继承"><a href="#2-1-继承" class="headerlink" title="2.1 继承"></a>2.1 继承</h3><p>我们可以再创建一个父工程 tlias-parent ，然后让上述的三个模块 tlias-pojo、tlias-utils、tlias-web-management 都来继承这个父工程 。 然后再将各个模块中都共有的依赖，都提取到父工程 tlias-parent中进行配置，只要子工程继承了父工程，依赖它也会继承下来，这样就无需在各个子工程中进行配置了。</p><p><img src="/assets/image-20230113111557714.png" alt="image-20230113111557714"> </p><ul><li><p>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p></li><li><p>作用：简化依赖配置、统一管理依赖</p></li><li><p>实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>这是我们在这里先介绍一下什么是继承以及继承的作用，以及在 maven 当中如何来实现这层继承关系。接下来我们就来创建这样一个 parent 父工程，我们就可以将各个子工程当中共有的这部分依赖统一的定义在父工程 parent 当中，从而来简化子工程的依赖配置。接下来我们来看一下具体的操作步骤。</p><p>我们在这里先介绍一下什么是继承以及继承的作用，以及在 maven 当中如何来实现这层继承关系。接下来我们就来创建这样一个 parent 父工程，我们就可以将各个子工程当中共有的这部分依赖，统一的定义在父工程 parent 当中，从而来简化子工程的依赖配置。</p><h4 id="2-1-1-继承关系"><a href="#2-1-1-继承关系" class="headerlink" title="2.1.1 继承关系"></a>2.1.1 继承关系</h4><h5 id="2-1-1-1-思路分析"><a href="#2-1-1-1-思路分析" class="headerlink" title="2.1.1.1 思路分析"></a>2.1.1.1 思路分析</h5><p>我们当前的项目 tlias-web-management，还稍微有一点特殊，因为是一个springboot项目，而所有的springboot项目都有一个统一的父工程，就是spring-boot-starter-parent。 与java语言类似，Maven不支持多继承，一个maven项目只能继承一个父工程，如果继承了spring-boot-starter-parent，就没法继承我们自己定义的父工程 tlias-parent了。</p><p>那我们怎么来解决这个问题呢？</p><p>那此时，大家可以想一下，Java虽然不支持多继承，但是可以支持多重继承，比如：A 继承 B， B 继承C。 那在Maven中也是支持多重继承的，所以呢，我们就可以让 我们自己创建的三个模块，都继承tlias-parent，而tlias-parent 再继承 spring-boot-starter-parent，就可以了。 具体结构如下：</p><p><img src="/assets/image-20230113113004727.png" alt="image-20230113113004727"> </p><h5 id="2-1-1-2-实现"><a href="#2-1-1-2-实现" class="headerlink" title="2.1.1.2 实现"></a>2.1.1.2 实现</h5><p>1). 创建maven模块 tlias-parent ，该工程为父工程，设置打包方式pom(默认jar)。</p><p>​<img src="assets/image-20230113112712232.png" alt="image-20230113112712232" style="zoom:67%;" /> <img src="assets/image-20230113112810295.png" alt="image-20230113112810295" style="zoom:67%;" /> </p><p>工程结构如下：</p><p><img src="/assets/image-20230113120517216.png" alt="image-20230113120517216"> </p><p>父工程tlias-parent的pom.xml文件配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Maven打包方式：</p><ul><li>jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li><li>war：普通web程序打包，需要部署在外部的tomcat服务器中运行</li><li>pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li></ul></blockquote><p>2). 在子工程的pom.xml文件中，配置继承关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../tlias-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里是以 tlias-utils 为例，指定了其父工程。其他的模块，都是相同的配置方式。</p><blockquote><p>注意：</p><ul><li>在子工程中，配置了继承关系之后，坐标中的groupId是可以省略的，因为会自动继承父工程的 。</li><li>relativePath指定父工程的pom文件的相对位置（如果不指定，将从本地仓库&#x2F;远程仓库查找该工程）。<ul><li>..&#x2F; 代表的上一级目录</li></ul></li></ul></blockquote><p>3). 在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，我们已经将各个子工程中共有的依赖（lombok），都定义在了父工程中，子工程中的这一项依赖，就可以直接删除了。删除之后，我们会看到父工程中配置的依赖 lombok，子工程直接继承下来了。</p><p><img src="/assets/image-20230113120408661.png" alt="image-20230113120408661"> </p><blockquote><p><strong>工程结构说明：</strong></p><ul><li><p>我们当前的项目结构为：</p><p><img src="/assets/image-20230113120636912.png" alt="image-20230113120636912"> </p><p>因为我们是项目开发完毕之后，给大家基于现有项目拆分的各个模块，tlias-web-management已经存在了，然后再创建各个模块与父工程，所以父工程与模块之间是平级的。</p></li><li><p>而实际项目中，可能还会见到下面的工程结构：</p><p><img src="/assets/image-20230113120728680.png" alt="image-20230113120728680"> </p><p>而在真实的企业开发中，都是先设计好模块之后，再开始创建模块，开发项目。 那此时呢，一般都会先创建父工程 tlias-parent，然后将创建的各个子模块，都放在父工程parent下面。 这样层级结构会更加清晰一些。 </p><p>​</p><p><strong>PS：上面两种工程结构，都是可以正常使用的，没有一点问题。 只不过，第二种结构，看起来，父子工程结构更加清晰、更加直观。</strong></p></li></ul></blockquote><h4 id="2-1-2-版本锁定"><a href="#2-1-2-版本锁定" class="headerlink" title="2.1.2 版本锁定"></a>2.1.2 版本锁定</h4><h5 id="2-1-2-1-场景"><a href="#2-1-2-1-场景" class="headerlink" title="2.1.2.1 场景"></a>2.1.2.1 场景</h5><p>如果项目中各个模块中都公共的这部分依赖，我们可以直接定义在父工程中，从而简化子工程的配置。 然而在项目开发中，还有一部分依赖，并不是各个模块都共有的，可能只是其中的一小部分模块中使用到了这个依赖。</p><p>比如：在tlias-web-management、tlias-web-system、tlias-web-report这三个子工程中，都使用到了jwt的依赖。 但是 tlias-pojo、tlias-utils中并不需要这个依赖，那此时，这个依赖，我们不会直接配置在父工程 tlias-parent中，而是哪个模块需要，就在哪个模块中配置。</p><p>而由于是一个项目中的多个模块，那多个模块中，我们要使用的同一个依赖的版本要一致，这样便于项目依赖的统一管理。比如：这个jwt依赖，我们都使用的是 0.9.1 这个版本。</p><p><img src="/assets/image-20230113122213954.png" alt="image-20230113122213954"> </p><p>那假如说，我们项目要升级，要使用到jwt最新版本 0.9.2 中的一个新功能，那此时需要将依赖的版本升级到0.9.2，那此时该怎么做呢 ？</p><p>第一步：去找当前项目中所有的模块的pom.xml配置文件，看哪些模块用到了jwt的依赖。</p><p>第二步：找到这个依赖之后，将其版本version，更换为 0.9.2。</p><p><strong>问题：如果项目拆分的模块比较多，每一次更换版本，我们都得找到这个项目中的每一个模块，一个一个的更改。 很容易就会出现，遗漏掉一个模块，忘记更换版本的情况。</strong></p><p>那我们又该如何来解决这个问题，如何来统一管理各个依赖的版本呢？ </p><p>答案：Maven的版本锁定功能。</p><h5 id="2-1-2-2-介绍"><a href="#2-1-2-2-介绍" class="headerlink" title="2.1.2.2 介绍"></a>2.1.2.2 介绍</h5><p>在maven中，可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本。</p><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--统一管理依赖版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><p>在父工程中所配置的 <code>&lt;dependencyManagement&gt;</code> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <code>&lt;dependencies&gt;</code> 是不同的。</p></li><li><p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p></li></ul></blockquote><h5 id="2-1-2-3-实现"><a href="#2-1-2-3-实现" class="headerlink" title="2.1.2.3 实现"></a>2.1.2.3 实现</h5><p>接下来，我们就可以将tlias-utils模块中单独配置的依赖，将其版本统一交给 tlias-parent 进行统一管理。</p><p>具体步骤如下：</p><p>1). tlias-parent 中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--统一管理依赖版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--阿里云OSS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2). tlias-utils中的pom.xml配置</p><p>如果依赖的版本已经在父工程进行了统一管理，所以在子工程中就无需再配置依赖的版本了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--阿里云OSS--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--WEB开发--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>我们之所以，在springboot项目中很多时候，引入依赖坐标，都不需要指定依赖的版本 <code>&lt;version&gt;</code> ，是因为在父工程 spring-boot-starter-parent中已经通过 <code>&lt;dependencyManagement&gt;</code>对依赖的版本进行了统一的管理维护。</p></blockquote><h5 id="2-1-2-4-属性配置"><a href="#2-1-2-4-属性配置" class="headerlink" title="2.1.2.4 属性配置"></a>2.1.2.4 属性配置</h5><p>我们也可以通过自定义属性及属性引用的形式，在父工程中将依赖的版本号进行集中管理维护。 具体语法为：</p><p>1). 自定义属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2). 引用属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们就可以在父工程中，将所有的版本号，都集中管理维护起来。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jjwt.version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">jjwt.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aliyun.oss.version</span>&gt;</span>3.15.1<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun.oss.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jaxb.version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">jaxb.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation.version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">activation.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jaxb.runtime.version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">jaxb.runtime.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--统一管理依赖版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jjwt.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--阿里云OSS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jaxb.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;activation.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jaxb.runtime.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>版本集中管理之后，我们要想修改依赖的版本，就只需要在父工程中自定义属性的位置，修改对应的属性值即可。</p><blockquote><p><strong>面试题：<code>&lt;dependencyManagement&gt;</code> 与 <code>&lt;dependencies&gt;</code> 的区别是什么?</strong></p><ul><li><code>&lt;dependencies&gt;</code> 是直接依赖，在父工程配置了依赖，子工程会直接继承下来。 </li><li><code>&lt;dependencyManagement&gt;</code> 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</li></ul></blockquote><h3 id="2-2-聚合"><a href="#2-2-聚合" class="headerlink" title="2.2 聚合"></a>2.2 聚合</h3><p>分模块设计与开发之后啊，我们的项目被拆分为多个模块，而模块之间的关系，可能错综复杂。 那就比如我们当前的案例项目，结构如下（相对还是比较简单的）：</p><img src="assets/image-20230113142520463.png" alt="image-20230113142520463" style="zoom:67%;" /> <p>此时，tlias-web-management 模块的父工程是 tlias-parent，该模块又依赖了tlias-pojo、tlias-utils模块。 那此时，我们要想将 tlias-web-management 模块打包，是比较繁琐的。因为在进行项目打包时，maven会从本地仓库中来查找tlias-parent父工程，以及它所依赖的模块tlias-pojo、tlias-utils，而本地仓库目前是没有这几个依赖的。</p><p>所以，我们再打包tlias-web-management 模块前，需要将 tlias-parent、tlias-pojo、tlias-utils分别执行install生命周期安装到maven的本地仓库，然后再针对于 tlias-web-management 模块执行package进行打包操作。</p><p>那此时，大家试想一下，如果开发一个大型项目，拆分的模块很多，模块之间的依赖关系错综复杂，那此时要进行项目的打包、安装操作，是非常繁琐的。 而我们接下来，要讲解的maven的聚合就是来解决这个问题的，通过maven的聚合就可以轻松实现项目的一键构建（清理、编译、测试、打包、安装等）。</p><h4 id="2-2-1-介绍"><a href="#2-2-1-介绍" class="headerlink" title="2.2.1 介绍"></a>2.2.1 介绍</h4><img src="assets/image-20230113151533948.png" alt="image-20230113151533948" style="zoom:80%;" /> <ul><li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li><li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li><li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li></ul><h4 id="2-2-2-实现"><a href="#2-2-2-实现" class="headerlink" title="2.2.2 实现"></a>2.2.2 实现</h4><p>在maven中，我们可以在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--聚合其他模块--&gt;<br>&lt;modules&gt;<br>    &lt;<span class="hljs-keyword">module</span>&gt;../tlias-pojo&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;<span class="hljs-keyword">module</span>&gt;../tlias-utils&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;<span class="hljs-keyword">module</span>&gt;../tlias-web-management&lt;/<span class="hljs-keyword">module</span>&gt;<br>&lt;/modules&gt;<br></code></pre></td></tr></table></figure><p>那此时，我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要在聚合工程上，统一进行操作就可以了。</p><p><strong>测试：</strong>执行在聚合工程 tlias-parent 中执行 package 打包指令</p><p><img src="/assets/image-20230113153347978.png" alt="image-20230113153347978"> </p><p>那 tlias-parent 中所聚合的其他模块全部都会执行 package 指令，这就是通过聚合实现项目的一键构建（一键清理clean、一键编译compile、一键测试test、一键打包package、一键安装install等）。</p><h3 id="2-3-继承与聚合对比"><a href="#2-3-继承与聚合对比" class="headerlink" title="2.3 继承与聚合对比"></a>2.3 继承与聚合对比</h3><ul><li><p><strong>作用</strong></p><ul><li><p>聚合用于快速构建项目</p></li><li><p>继承用于简化依赖配置、统一管理依赖</p></li></ul></li><li><p><strong>相同点：</strong></p><ul><li><p>聚合与继承的pom.xml文件打包方式均为pom，通常将两种关系制作到同一个pom文件中</p></li><li><p>聚合与继承均属于设计型模块，并无实际的模块内容</p></li></ul></li><li><p><strong>不同点：</strong></p><ul><li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</p></li><li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p></li></ul></li></ul><h2 id="3-私服"><a href="#3-私服" class="headerlink" title="3. 私服"></a>3. 私服</h2><p>前面我们在讲解多模块开发的时候，我们讲到我们所拆分的模块是可以在同一个公司各个项目组之间进行资源共享的。这个模块的资源共享，就需要通过我们接下来所讲解的 Maven 的私服来实现。</p><p>首先我们先介绍一下什么是私服，以及它的作用是什么。再来介绍一下我们如何将每位模块打包上传到私服，以及从私服当中来下载。</p><h3 id="3-1-场景"><a href="#3-1-场景" class="headerlink" title="3.1 场景"></a>3.1 场景</h3><p>在介绍什么是私服之前，我们先来分析一下同一个公司，两个项目组之间如何基于私服进行资源的共享。</p><p>假设现在有两个团队，A 和 B。 A 开发了一个模块 tlias-utils，模块开发完毕之后，将模块打成jar包，并安装到了A的本地仓库。</p><img src="assets/image-20230113155325805.png" alt="image-20230113155325805" style="zoom:80%;" /> <p>那此时，该公司的B团队开发项目时，要想使用 tlias-utils 中提供的工具类，该怎么办呢？ 对于maven项目来说，是不是在pom.xml文件中引入 tlias-utils的坐标就可以了呢？</p><img src="assets/image-20230113155657972.png" alt="image-20230113155657972" style="zoom:80%;" />  <p>大家可以思考一下，当B团队在maven项目的pom.xml配置文件中引入了依赖的坐标之后，maven是如何查找这个依赖的？ 查找顺序为：</p><p>1). 本地仓库：本地仓库中是没有这个依赖jar包的。</p><p>2). 远程中央仓库：由于该模块时自己公司开发的，远程仓库中也没有这个依赖。</p><p>因为目前tlias-utils这个依赖，还在A的本地仓库中的。 B电脑上的maven项目，是不可能找得到A电脑上maven本地仓库的jar包的。  那此时，大家可能会有一个想法：因为A和B都会连接中央仓库，我们可以将A本地仓库的jar包，直接上传到中央仓库，然后B从中央仓库中下载tlias-utils这个依赖。</p><img src="assets/image-20230113160351850.png" alt="image-20230113160351850" style="zoom:67%;" /> <p>这个想法很美好，但是现实很残酷。这个方案是行不通的，因为中央仓库全球只有一个，不是什么人都可以往中央仓库中来上传jar包的，我们是没有权限操作的。</p><p>那此时，maven的私服就出场了，私服其实就是架设在公司局域网内部的一台服务器，就是一种特殊的远程仓库。</p><p>有了私服之后，各个团队就可以直接来连接私服了。 A 连接上私服之后，他就可以把jar包直接上传到私服当中。我公司自己内部搭建的服务器，我是不是有权限操作呀，把jar包上传到私服之后，我让 B 团队的所有开发人员也连接同一台私服。连接上这一台私服之后，他就会根据坐标的信息，直接从私服当中将对应的jar包下载到自己的本地仓库，这样就可以使用到依赖当中所提供的一些工具类了。这样我们就可以通过私服来完成资源的共享。</p><img src="assets/image-20230113160713806.png" alt="image-20230113160713806" style="zoom:80%;" /> <p>而如果我们在项目中需要使用其他第三方提供的依赖，如果本地仓库没有，也会自动连接私服下载，如果私服没有，私服此时会自动连接中央仓库，去中央仓库中下载依赖，然后将下载的依赖存储在私服仓库及本地仓库中。</p><h3 id="3-2-介绍"><a href="#3-2-介绍" class="headerlink" title="3.2 介绍"></a>3.2 介绍</h3><ul><li><strong>私服：</strong>是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</li><li><strong>依赖查找顺序：</strong><ul><li>本地仓库</li><li>私服仓库</li><li>中央仓库</li></ul></li><li><strong>注意事项：</strong>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可（无需我们自己搭建，会使用即可）。</li></ul><p><img src="/assets/image-20230113161116701.png" alt="image-20230113161116701"> </p><h3 id="3-3-资源上传与下载"><a href="#3-3-资源上传与下载" class="headerlink" title="3.3 资源上传与下载"></a>3.3 资源上传与下载</h3><h4 id="3-3-1-步骤分析"><a href="#3-3-1-步骤分析" class="headerlink" title="3.3.1 步骤分析"></a>3.3.1 步骤分析</h4><img src="assets/image-20230113163307239.png" alt="image-20230113163307239" style="zoom:80%;" /> <p>资源上传与下载，我们需要做三步配置，执行一条指令。</p><p>第一步配置：在maven的配置文件中配置访问私服的用户名、密码。</p><p>第二步配置：在maven的配置文件中配置连接私服的地址(url地址)。</p><p>第三步配置：在项目的pom.xml文件中配置上传资源的位置(url地址)。</p><p>配置好了上述三步之后，要上传资源到私服仓库，就执行执行maven生命周期：deploy。</p><blockquote><p>私服仓库说明：</p><ul><li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li><li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li><li>Central：存储的是从中央仓库下载下来的依赖。</li></ul></blockquote><blockquote><p>项目版本说明：</p><ul><li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li><li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li></ul></blockquote><h4 id="3-3-2-具体操作"><a href="#3-3-2-具体操作" class="headerlink" title="3.3.2 具体操作"></a>3.3.2 具体操作</h4><p>为了模拟企业开发，这里我准备好了一台服务器（192.168.150.101），私服已经搭建好了，我们可以访问私服测试：<a href="http://192.168.150.101:8081/">http://192.168.150.101:8081</a></p><img src="assets/image-20230113164217830.png" alt="image-20230113164217830" style="zoom:80%;" /> <p>私服准备好了之后，我们要做如下几步配置：</p><p><strong>1.设置私服的访问用户名&#x2F;密码（在自己maven安装目录下的conf&#x2F;settings.xml中的servers中配置）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.设置私服依赖下载的仓库组地址（在自己maven安装目录下的conf&#x2F;settings.xml中的mirrors、profiles中配置）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>allow-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.IDEA的maven工程的pom文件中配置上传（发布）地址(直接在tlias-parent中配置发布地址)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- release版本的发布地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- snapshot版本的发布地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置完成之后，我们就可以在tlias-parent中执行<strong>deploy</strong>生命周期，将项目发布到私服仓库中。 </p><p><img src="/assets/image-20230113164850129.png" alt="image-20230113164850129"></p><p>通过日志，我们可以看到，这几个模块打的jar包确实已经上传到了私服仓库中（由于当前我们的项目是SNAPSHOT版本，所以jar包是上传到了snapshot仓库中）。</p><p>那接下来，我们再来打开私服来看一下：</p><p><img src="/assets/image-20230113215053410.png" alt="image-20230113215053410"> </p><p>我们看到，我们项目中的这几个模块，在私服中都有了。 那接下来，当其他项目组的开发人员在项目中，就可以直接通过依赖的坐标，就可以完成引入对应的依赖，此时本地仓库没有，就会自动从私服仓库中下载。</p><blockquote><p>备注说明：</p><ul><li><p>课上演示的时候，为了模拟真实的线上环境，老师使用了一台服务器192.168.150.101，并在服务器上安装了maven的私服。 而这台服务器大家并不能直接访问。</p></li><li><p>同学们如果要测试使用私服进行资源的上传和下载。可以参照如下步骤，启动给大家准备的本地私服操作：</p><ul><li><p>解压： 资料中提供的压缩包  apache-maven-nexus.zip</p></li><li><p>进入目录： apache-maven-nexus\nexus-3.39.0-01\bin</p></li><li><p>启动服务：双击 start.bat </p></li><li><p>访问服务：localhost:8081</p></li><li><p>私服配置说明：将上述配置私服信息的 192.168.150.101 改为 localhost</p></li></ul></li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>38SpingBoot原理</title>
    <link href="/2023/12/10/day38-SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/"/>
    <url>/2023/12/10/day38-SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="SpingBoot原理"><a href="#SpingBoot原理" class="headerlink" title="SpingBoot原理"></a>SpingBoot原理</h1><p>在前面十多天的课程当中，我们学习的都是web开发的技术使用，都是面向应用层面的，我们学会了怎么样去用。而我们今天所要学习的是web后端开发的最后一个篇章springboot原理篇，主要偏向于底层原理。</p><p>我们今天的课程安排包括这么三个部分：</p><ol><li>配置优先级：Springboot项目当中属性配置的常见方式以及配置的优先级</li><li>Bean的管理</li><li>剖析Springboot的底层原理</li></ol><h2 id="1-配置优先级"><a href="#1-配置优先级" class="headerlink" title="1. 配置优先级"></a>1. 配置优先级</h2><p>在我们前面的课程当中，我们已经讲解了SpringBoot项目当中支持的三类配置文件：</p><ul><li>application.properties</li><li>application.yml</li><li>application.yaml</li></ul><p>在SpringBoot项目当中，我们要想配置一个属性，可以通过这三种方式当中的任意一种来配置都可以，那么如果项目中同时存在这三种配置文件，且都配置了同一个属性，如：Tomcat端口号，到底哪一份配置文件生效呢？</p><ul><li>application.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8081</span><br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>   <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br></code></pre></td></tr></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>   <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br></code></pre></td></tr></table></figure><p>我们启动SpringBoot程序，测试下三个配置文件中哪个Tomcat端口号生效：</p><ul><li>properties、yaml、yml三种配置文件同时存在</li></ul><p><img src="/assets/image-20230113144757856.png" alt="image-20230113144757856"></p><blockquote><p>properties、yaml、yml三种配置文件，优先级最高的是properties</p></blockquote><ul><li>yaml、yml两种配置文件同时存在</li></ul><p><img src="/assets/image-20230113145158771.png" alt="image-20230113145158771"></p><blockquote><p>配置文件优先级排名（从高到低）：</p><ol><li>properties配置文件</li><li>yml配置文件</li><li>yaml配置文件</li></ol></blockquote><p>注意事项：虽然springboot支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置。（yml是主流）</p><p>在SpringBoot项目当中除了以上3种配置文件外，SpringBoot为了增强程序的扩展性，除了支持配置文件的配置方式以外，还支持另外两种常见的配置方式：</p><ol><li><p>Java系统属性配置 （格式： -Dkey&#x3D;value）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Dserver.port=9000<br></code></pre></td></tr></table></figure></li><li><p>命令行参数 （格式：–key&#x3D;value）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--server.port=10010<br></code></pre></td></tr></table></figure></li></ol><p>那在idea当中运行程序时，如何来指定Java系统属性和命令行参数呢？</p><ul><li>编辑启动程序的配置信息</li></ul><p><img src="/assets/image-20230113162746634.png" alt="image-20230113162746634"></p><p><img src="/assets/image-20230113162639630.png" alt="image-20230113162639630"></p><p>重启服务，同时配置Tomcat端口(三种配置文件、系统属性、命令行参数)，测试哪个Tomcat端口号生效：</p><p><img src="/assets/image-20230113165006550.png" alt="image-20230113165006550"></p><p>删除命令行参数配置，重启SpringBoot服务：</p><p><img src="/assets/image-20230113170841253.png" alt="image-20230113170841253"></p><blockquote><p>优先级： 命令行参数 &gt;  系统属性参数 &gt; properties参数 &gt; yml参数 &gt; yaml参数</p></blockquote><p>思考：如果项目已经打包上线了，这个时候我们又如何来设置Java系统属性和命令行参数呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Dserver.port=9000 -jar XXXXX.jar --server.port=10010<br></code></pre></td></tr></table></figure><p>下面我们来演示下打包程序运行时指定Java系统属性和命令行参数：</p><ol><li>执行maven打包指令package，把项目打成jar文件</li><li>使用命令：java -jar 方式运行jar文件程序</li></ol><p>项目打包：</p><p><img src="/assets/image-20230113172313655.png" alt="image-20230113172313655"></p><p><img src="/assets/image-20230113172854016.png" alt="image-20230113172854016"></p><p>运行jar程序：</p><ul><li>同时设置Java系统属性和命令行参数</li></ul><p><img src="/assets/image-20230113172659269.png" alt="image-20230113172659269"></p><ul><li>仅设置Java系统属性</li></ul><p><img src="/assets/image-20230113173228232.png" alt="image-20230113173228232"></p><blockquote><p>注意事项：</p><ul><li>Springboot项目进行打包时，需要引入插件 spring-boot-maven-plugin (基于官网骨架创建项目，会自动添加该插件)</li></ul></blockquote><p>在SpringBoot项目当中，常见的属性配置方式有5种， 3种配置文件，加上2种外部属性的配置(Java系统属性、命令行参数)。通过以上的测试，我们也得出了优先级(从低到高)：</p><ul><li>application.yaml（忽略）</li><li>application.yml</li><li>application.properties</li><li>java系统属性（-Dxxx&#x3D;xxx）</li><li>命令行参数（–xxx&#x3D;xxx）</li></ul><h2 id="2-Bean管理"><a href="#2-Bean管理" class="headerlink" title="2. Bean管理"></a>2. Bean管理</h2><p>在前面的课程当中，我们已经讲过了我们可以通过Spring当中提供的注解@Component以及它的三个衍生注解（@Controller、@Service、@Repository）来声明IOC容器中的bean对象，同时我们也学习了如何为应用程序注入运行时所需要依赖的bean对象，也就是依赖注入DI。</p><p>我们今天主要学习IOC容器中Bean的其他使用细节，主要学习以下三方面：</p><ol><li>如何从IOC容器中手动的获取到bean对象</li><li>bean的作用域配置</li><li>管理第三方的bean对象</li></ol><p>接下来我们先来学习第一方面，从IOC容器中获取bean对象。</p><h3 id="2-1-获取Bean"><a href="#2-1-获取Bean" class="headerlink" title="2.1 获取Bean"></a>2.1 获取Bean</h3><p>默认情况下，SpringBoot项目在启动的时候会自动的创建IOC容器(也称为Spring容器)，并且在启动的过程当中会自动的将bean对象都创建好，存放在IOC容器当中。应用程序在运行时需要依赖什么bean对象，就直接进行依赖注入就可以了。</p><p>而在Spring容器中提供了一些方法，可以主动从IOC容器中获取到bean对象，下面介绍3种常用方式：</p><ol><li><p>根据name获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span><br></code></pre></td></tr></table></figure></li><li><p>根据类型获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span><br></code></pre></td></tr></table></figure></li><li><p>根据name获取bean（带类型转换）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, Class&lt;T&gt; requiredType)</span><br></code></pre></td></tr></table></figure></li></ol><p>思考：要从IOC容器当中来获取到bean对象，需要先拿到IOC容器对象，怎么样才能拿到IOC容器呢？</p><ul><li>想获取到IOC容器，直接将IOC容器对象注入进来就可以了</li></ul><p>控制器：DeptController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeptController</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DeptController constructor ....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Dept&gt; deptList = deptService.list();<br>        <span class="hljs-keyword">return</span> Result.success(deptList);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>  &#123;<br>        deptService.delete(id);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>        deptService.save(dept);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务实现类：DeptServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Dept&gt; deptList = deptMapper.list();<br>        <span class="hljs-keyword">return</span> deptList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        deptMapper.delete(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        dept.setCreateTime(LocalDateTime.now());<br>        dept.setUpdateTime(LocalDateTime.now());<br>        deptMapper.save(dept);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">//查询全部部门数据</span><br>    <span class="hljs-meta">@Select(&quot;select * from dept&quot;)</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//删除部门</span><br>    <span class="hljs-meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-comment">//新增部门</span><br>    <span class="hljs-meta">@Insert(&quot;insert into dept(name, create_time, update_time) values (#&#123;name&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Dept dept)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2ApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext; <span class="hljs-comment">//IOC容器对象</span><br><br>    <span class="hljs-comment">//获取bean对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBean</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//根据bean的名称获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> (DeptController) applicationContext.getBean(<span class="hljs-string">&quot;deptController&quot;</span>);<br>        System.out.println(bean1);<br><br>        <span class="hljs-comment">//根据bean的类型获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> applicationContext.getBean(DeptController.class);<br>        System.out.println(bean2);<br><br>        <span class="hljs-comment">//根据bean的名称 及 类型获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean3</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;deptController&quot;</span>, DeptController.class);<br>        System.out.println(bean3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行后控制台日志：</p><p><img src="/assets/image-20230113211619818.png" alt="image-20230113211619818"></p><blockquote><p>问题：输出的bean对象地址值是一样的，说明IOC容器当中的bean对象有几个？</p><p>答案：只有一个。        （默认情况下，IOC中的bean对象是单例）</p><p>那么能不能将bean对象设置为非单例的(每次获取的bean都是一个新对象)？</p><p>可以，在下一个知识点(bean作用域)中讲解。</p></blockquote><p>注意事项：</p><ul><li>上述所说的 【Spring项目启动时，会把其中的bean都创建好】还会受到作用域及延迟初始化影响，这里主要针对于默认的单例非延迟加载的bean而言。</li></ul><h3 id="2-2-Bean作用域"><a href="#2-2-Bean作用域" class="headerlink" title="2.2 Bean作用域"></a>2.2 Bean作用域</h3><p>在前面我们提到的IOC容器当中，默认bean对象是单例模式(只有一个实例对象)。那么如何设置bean对象为非单例呢？需要设置bean的作用域。</p><p>在Spring中支持五种作用域，后三种在web环境才生效：</p><table><thead><tr><th><strong>作用域</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>singleton</td><td>容器内同名称的bean只有一个实例（单例）（默认）</td></tr><tr><td>prototype</td><td>每次使用该bean时会创建新的实例（非单例）</td></tr><tr><td>request</td><td>每个请求范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>session</td><td>每个会话范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>application</td><td>每个应用范围内会创建新的实例（web环境中，了解）</td></tr></tbody></table><p>知道了bean的5种作用域了，我们要怎么去设置一个bean的作用域呢？</p><ul><li>可以借助Spring中的@Scope注解来进行配置作用域</li></ul><p><img src="/assets/image-20230113214244144.png" alt="image-20230113214244144"></p><p><strong>1). 测试一</strong></p><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认bean的作用域为：singleton (单例)</span><br><span class="hljs-meta">@Lazy</span> <span class="hljs-comment">//延迟加载（第一次使用bean对象时，才会创建bean对象并交给ioc容器管理）</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeptController</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DeptController constructor ....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2ApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext; <span class="hljs-comment">//IOC容器对象</span><br><br>    <span class="hljs-comment">//bean的作用域</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScope</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">DeptController</span> <span class="hljs-variable">deptController</span> <span class="hljs-operator">=</span> applicationContext.getBean(DeptController.class);<br>            System.out.println(deptController);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，运行测试方法，查看控制台打印的日志：</p><p><img src="/assets/image-20230114001348839.png" alt="image-20230114001348839"></p><blockquote><p>注意事项：</p><ul><li><p>IOC容器中的bean默认使用的作用域：singleton (单例)</p></li><li><p>默认singleton的bean，在容器启动时被创建，可以使用@Lazy注解来延迟初始化(延迟到第一次使用时)</p></li></ul></blockquote><p><strong>2). 测试二</strong></p><p>修改控制器DeptController代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span> <span class="hljs-comment">//bean作用域为非单例</span><br><span class="hljs-meta">@Lazy</span> <span class="hljs-comment">//延迟加载</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeptController</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DeptController constructor ....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，再次执行测试方法，查看控制吧打印的日志：</p><p><img src="/assets/image-20230114001736151.png" alt="image-20230114001736151"></p><blockquote><p>注意事项：</p><ul><li>prototype的bean，每一次使用该bean的时候都会创建一个新的实例</li><li>实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性</li></ul></blockquote><h3 id="2-3-第三方Bean"><a href="#2-3-第三方Bean" class="headerlink" title="2.3 第三方Bean"></a>2.3 第三方Bean</h3><p>学习完bean的获取、bean的作用域之后，接下来我们再来学习第三方bean的配置。</p><p>之前我们所配置的bean，像controller、service，dao三层体系下编写的类，这些类都是我们在项目当中自己定义的类(自定义类)。当我们要声明这些bean，也非常简单，我们只需要在类上加上@Component以及它的这三个衍生注解（@Controller、@Service、@Repository），就可以来声明这个bean对象了。<br>但是在我们项目开发当中，还有一种情况就是这个类它不是我们自己编写的，而是我们引入的第三方依赖当中提供的。</p><p>在pom.xml文件中，引入dom4j：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Dom4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>dom4j就是第三方组织提供的。 dom4j中的SAXReader类就是第三方编写的。</p></blockquote><p>当我们需要使用到SAXReader对象时，直接进行依赖注入是不是就可以了呢？</p><ul><li>按照我们之前的做法，需要在SAXReader类上添加一个注解@Component（将当前类交给IOC容器管理）</li></ul><p><img src="/assets/image-20230114003903285.png" alt="image-20230114003903285"></p><blockquote><p>结论：第三方提供的类是只读的。无法在第三方类上添加@Component注解或衍生注解。</p></blockquote><p>那么我们应该怎样使用并定义第三方的bean呢？</p><ul><li>如果要管理的bean对象来自于第三方（不是自定义的），是无法用@Component 及衍生注解声明bean的，就需要用到**@Bean**注解。</li></ul><p><strong>解决方案1：在启动类上添加@Bean标识的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br><br>    <span class="hljs-comment">//声明第三方bean</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">emp</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">emp</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2ApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SAXReader saxReader;<br><br>    <span class="hljs-comment">//第三方bean的管理</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testThirdBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(<span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;1.xml&quot;</span>));<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rootElement.element(<span class="hljs-string">&quot;name&quot;</span>).getText();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> rootElement.element(<span class="hljs-string">&quot;age&quot;</span>).getText();<br><br>        System.out.println(name + <span class="hljs-string">&quot; : &quot;</span> + age);<br>    &#125;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，执行测试方法后，控制台输出日志：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Tom : 18<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：以上在启动类中声明第三方Bean的作法，不建议使用（项目中要保证启动类的纯粹性）</strong></p></blockquote><p><strong>解决方案2：在配置类中定义@Bean标识的方法</strong></p><ul><li>如果需要定义第三方Bean时， 通常会单独定义一个配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类  (在配置类当中对第三方bean进行集中的配置管理)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br><br>    <span class="hljs-comment">//声明第三方bean</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span><br>          <span class="hljs-comment">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">reader</span><span class="hljs-params">(DeptService deptService)</span>&#123;<br>        System.out.println(deptService);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>注释掉SpringBoot启动类中创建第三方bean对象的代码，重启服务，执行测试方法，查看控制台日志：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Tom : 18<br></code></pre></td></tr></table></figure><p>在方法上加上一个@Bean注解，Spring 容器在启动的时候，它会自动的调用这个方法，并将方法的返回值声明为Spring容器当中的Bean对象。</p><blockquote><p>注意事项 ：</p><ul><li><p>通过@Bean注解的name或value属性可以声明bean的名称，如果不指定，默认bean的名称就是方法名。</p></li><li><p>如果第三方bean需要依赖其它bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配。</p></li></ul></blockquote><p>关于Bean大家只需要保持一个原则：</p><ul><li>如果是在项目当中我们自己定义的类，想将这些类交给IOC容器管理，我们直接使用@Component以及它的衍生注解来声明就可以。</li><li>如果这个类它不是我们自己定义的，而是引入的第三方依赖当中提供的类，而且我们还想将这个类交给IOC容器管理。此时我们就需要在配置类中定义一个方法，在方法上加上一个@Bean注解，通过这种方式来声明第三方的bean对象。</li></ul><h2 id="3-SpringBoot原理"><a href="#3-SpringBoot原理" class="headerlink" title="3. SpringBoot原理"></a>3. SpringBoot原理</h2><p>经过前面10多天课程的学习，大家也会发现基于SpringBoot进行web程序的开发是非常简单、非常高效的。</p><p>SpringBoot使我们能够集中精力地去关注业务功能的开发，而不用过多地关注框架本身的配置使用。而我们前面所讲解的都是面向应用层面的技术，接下来我们开始学习SpringBoot的原理，这部分内容偏向于底层的原理分析。</p><p>在剖析SpringBoot的原理之前，我们先来快速回顾一下我们前面所讲解的Spring家族的框架。</p><p><img src="/assets/image-20230114171304644.png" alt="image-20230114171304644"></p><p>Spring是目前世界上最流行的Java框架，它可以帮助我们更加快速、更加容易的来构建Java项目。而在Spring家族当中提供了很多优秀的框架，而所有的框架都是基于一个基础框架的SpringFramework(也就是Spring框架)。而前面我们也提到，如果我们直接基于Spring框架进行项目的开发，会比较繁琐。</p><p>这个繁琐主要体现在两个地方：</p><ol><li>在pom.xml中依赖配置比较繁琐，在项目开发时，需要自己去找到对应的依赖，还需要找到依赖它所配套的依赖以及对应版本，否则就会出现版本冲突问题。</li><li>在使用Spring框架进行项目开发时，需要在Spring的配置文件中做大量的配置，这就造成Spring框架入门难度较大，学习成本较高。</li></ol><p><img src="/assets/image-20230114170610438.png" alt="image-20230114170610438"></p><blockquote><p>基于Spring存在的问题，官方在Spring框架4.0版本之后，又推出了一个全新的框架：SpringBoot。</p><p>通过 SpringBoot来简化Spring框架的开发(是简化不是替代)。我们直接基于SpringBoot来构建Java项目，会让我们的项目开发更加简单，更加快捷。</p></blockquote><p>SpringBoot框架之所以使用起来更简单更快捷，是因为SpringBoot框架底层提供了两个非常重要的功能：一个是起步依赖，一个是自动配置。</p><p><img src="/assets/image-20230114172442018.png" alt="image-20230114172442018"></p><blockquote><p>通过SpringBoot所提供的起步依赖，就可以大大的简化pom文件当中依赖的配置，从而解决了Spring框架当中依赖配置繁琐的问题。</p><p>通过自动配置的功能就可以大大的简化框架在使用时bean的声明以及bean的配置。我们只需要引入程序开发时所需要的起步依赖，项目开发时所用到常见的配置都已经有了，我们直接使用就可以了。</p></blockquote><p>简单回顾之后，接下来我们来学习下SpringBoot的原理。其实学习SpringBoot的原理就是来解析SpringBoot当中的起步依赖与自动配置的原理。我们首先来学习SpringBoot当中起步依赖的原理。</p><h3 id="3-1-起步依赖"><a href="#3-1-起步依赖" class="headerlink" title="3.1 起步依赖"></a>3.1 起步依赖</h3><p>假如我们没有使用SpringBoot，用的是Spring框架进行web程序的开发，此时我们就需要引入web程序开发所需要的一些依赖。</p><p><img src="/assets/image-20230114173645101.png" alt="image-20230114173645101"></p><blockquote><p>spring-webmvc依赖：这是Spring框架进行web程序开发所需要的依赖</p><p>servlet-api依赖：Servlet基础依赖</p><p>jackson-databind依赖：JSON处理工具包</p><p>如果要使用AOP，还需要引入aop依赖、aspect依赖</p><p>项目中所引入的这些依赖，还需要保证版本匹配，否则就可能会出现版本冲突问题。</p></blockquote><p>如果我们使用了SpringBoot，就不需要像上面这么繁琐的引入依赖了。我们只需要引入一个依赖就可以了，那就是web开发的起步依赖：springboot-starter-web。</p><p><img src="/assets/image-20230114174805852.png" alt="image-20230114174805852"></p><p>为什么我们只需要引入一个web开发的起步依赖，web开发所需要的所有的依赖都有了呢？</p><ul><li>因为Maven的依赖传递。</li></ul><blockquote><ul><li><p>在SpringBoot给我们提供的这些起步依赖当中，已提供了当前程序开发所需要的所有的常见依赖(官网地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters)%E3%80%82">https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters)。</a></p></li><li><p>比如：springboot-starter-web，这是web开发的起步依赖，在web开发的起步依赖当中，就集成了web开发中常见的依赖：json、web、webmvc、tomcat等。我们只需要引入这一个起步依赖，其他的依赖都会自动的通过Maven的依赖传递进来。</p></li></ul></blockquote><p><strong>结论：起步依赖的原理就是Maven的依赖传递。</strong></p><h3 id="3-2-自动配置"><a href="#3-2-自动配置" class="headerlink" title="3.2 自动配置"></a>3.2 自动配置</h3><p>我们讲解了SpringBoot当中起步依赖的原理，就是Maven的依赖传递。接下来我们解析下自动配置的原理，我们要分析自动配置的原理，首先要知道什么是自动配置。</p><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><p>SpringBoot的自动配置就是当Spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p><blockquote><p>比如：我们要进行事务管理、要进行AOP程序的开发，此时就不需要我们再去手动的声明这些bean对象了，我们直接使用就可以从而大大的简化程序的开发，省去了繁琐的配置操作。</p></blockquote><p>下面我们打开idea，一起来看下自动配置的效果：</p><ul><li>运行SpringBoot启动类</li></ul><p><img src="/assets/image-20230114205745221.png" alt="image-20230114205745221"></p><p><img src="/assets/image-20230114213945851.png" alt="image-20230114213945851"></p><p><img src="/assets/image-20230114212750007.png" alt="image-20230114212750007"></p><p>大家会看到有两个CommonConfig，在第一个CommonConfig类中定义了一个bean对象，bean对象的名字叫reader。</p><p>在第二个CommonConfig中它的bean名字叫commonConfig，为什么还会有这样一个bean对象呢？原因是在CommonConfig配置类上添加了一个注解@Configuration，而@Configuration底层就是@Component</p><p><img src="/assets/image-20230114220159619.png" alt="image-20230114220159619"></p><blockquote><p>所以配置类最终也是SpringIOC容器当中的一个bean对象</p></blockquote><p>在IOC容器中除了我们自己定义的bean以外，还有很多配置类，这些配置类都是SpringBoot在启动的时候加载进来的配置类。这些配置类加载进来之后，它也会生成很多的bean对象。</p><p><img src="/assets/image-20230114221341811.png" alt="image-20230114221341811"></p><blockquote><p>比如：配置类GsonAutoConfiguration里面有一个bean，bean的名字叫gson，它的类型是Gson。 </p><p>com.google.gson.Gson是谷歌包中提供的用来处理JSON格式数据的。</p></blockquote><p>当我们想要使用这些配置类中生成的bean对象时，可以使用@Autowired就自动注入了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Gson gson;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> gson.toJson(Result.success());<br>        System.out.println(json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加断点，使用debug模式运行测试类程序：</p><p><img src="/assets/image-20230114222245520.png" alt="image-20230114222245520"></p><p>问题：在当前项目中我们并没有声明谷歌提供的Gson这么一个bean对象，然后我们却可以通过@Autowired从Spring容器中注入bean对象，那么这个bean对象怎么来的？</p><p>答案：SpringBoot项目在启动时通过自动配置完成了bean对象的创建。</p><p>体验了SpringBoot的自动配置了，下面我们就来分析自动配置的原理。其实分析自动配置原理就是来解析在SpringBoot项目中，在引入依赖之后是如何将依赖jar包当中所定义的配置类以及bean加载到SpringIOC容器中的。</p><h4 id="3-2-2-常见方案"><a href="#3-2-2-常见方案" class="headerlink" title="3.2.2 常见方案"></a>3.2.2 常见方案</h4><h5 id="3-2-2-1-概述"><a href="#3-2-2-1-概述" class="headerlink" title="3.2.2.1 概述"></a>3.2.2.1 概述</h5><p>我们知道了什么是自动配置之后，接下来我们就要来剖析自动配置的原理。解析自动配置的原理就是分析在 SpringBoot项目当中，我们引入对应的依赖之后，是如何将依赖jar包当中所提供的bean以及配置类直接加载到当前项目的SpringIOC容器当中的。</p><p>接下来，我们就直接通过代码来分析自动配置原理。</p><blockquote><p>准备工作：在Idea中导入”资料\03. 自动配置原理”下的itheima-utils工程</p></blockquote><p>1、在SpringBoot项目 spring-boot-web-config2 工程中，通过坐标引入itheima-utils依赖</p><p><img src="/assets/image-20230114224107653.png" alt="image-20230114224107653"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenParser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TokenParser ... parse ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在测试类中，添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTokenParse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(applicationContext.getBean(TokenParser.class));<br>    &#125;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3、执行测试方法</p><p><img src="/assets/image-20230114225018255.png" alt="image-20230114225018255"></p><blockquote><p>异常信息描述： 没有com.example.TokenParse类型的bean</p><p>说明：在Spring容器中没有找到com.example.TokenParse类型的bean对象</p></blockquote><p>思考：引入进来的第三方依赖当中的bean以及配置类为什么没有生效？</p><ul><li>原因在我们之前讲解IOC的时候有提到过，在类上添加@Component注解来声明bean对象时，还需要保证@Component注解能被Spring的组件扫描到。</li><li>SpringBoot项目中的@SpringBootApplication注解，具有包扫描的作用，但是它只会扫描启动类所在的当前包以及子包。 </li><li>当前包：com.itheima， 第三方依赖中提供的包：com.example（扫描不到）</li></ul><p>那么如何解决以上问题的呢？</p><ul><li>方案1：@ComponentScan 组件扫描</li><li>方案2：@Import 导入（使用@Import导入的类会被Spring加载到IOC容器中）</li></ul><h5 id="3-2-2-2-方案一"><a href="#3-2-2-2-方案一" class="headerlink" title="3.2.2.2 方案一"></a>3.2.2.2 方案一</h5><p>@ComponentScan组件扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.itheima&quot;,&quot;com.example&quot;&#125;)</span> <span class="hljs-comment">//指定要扫描的包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重新执行测试方法，控制台日志输出：</p><p><img src="/assets/image-20230114231121016.png" alt="image-20230114231121016"></p><blockquote><p>大家可以想象一下，如果采用以上这种方式来完成自动配置，那我们进行项目开发时，当需要引入大量的第三方的依赖，就需要在启动类上配置N多要扫描的包，这种方式会很繁琐。而且这种大面积的扫描性能也比较低。</p><p>缺点：</p><ol><li>使用繁琐</li><li>性能低</li></ol><p><strong>结论：SpringBoot中并没有采用以上这种方案。</strong></p></blockquote><h5 id="3-2-2-3-方案二"><a href="#3-2-2-3-方案二" class="headerlink" title="3.2.2.3 方案二"></a>3.2.2.3 方案二</h5><p>@Import导入</p><ul><li>导入形式主要有以下几种：<ol><li>导入普通类</li><li>导入配置类</li><li>导入ImportSelector接口实现类</li></ol></li></ul><p>1). 使用@Import导入普通类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(TokenParser.class)</span> <span class="hljs-comment">//导入的类会被Spring加载到IOC容器中</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>重新执行测试方法，控制台日志输出：</p><p><img src="/assets/image-20230114231709392.png" alt="image-20230114231709392"></p></blockquote><p>2). 使用@Import导入配置类：</p><ul><li>配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HeaderGenerator <span class="hljs-title function_">headerGenerator</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderGenerator</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(HeaderConfig.class)</span> <span class="hljs-comment">//导入配置类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderParser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(applicationContext.getBean(HeaderParser.class));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderGenerator</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(applicationContext.getBean(HeaderGenerator.class));<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行测试方法：</p><p><img src="/assets/image-20230114233252259.png" alt="image-20230114233252259"></p></blockquote><p>3). 使用@Import导入ImportSelector接口实现类：</p><ul><li>ImportSelector接口实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-comment">//返回值字符串数组（数组中封装了全限定名称的类）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.example.HeaderConfig&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(MyImportSelector.class)</span> <span class="hljs-comment">//导入ImportSelector接口实现类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行测试方法：</p><p><img src="/assets/image-20230114234222946.png" alt="image-20230114234222946"></p></blockquote><p>我们使用@Import注解通过这三种方式都可以导入第三方依赖中所提供的bean或者是配置类。</p><p>思考：如果基于以上方式完成自动配置，当要引入一个第三方依赖时，是不是还要知道第三方依赖中有哪些配置类和哪些Bean对象？</p><ul><li>答案：是的。 （对程序员来讲，很不友好，而且比较繁琐）</li></ul><p>思考：当我们要使用第三方依赖，依赖中到底有哪些bean和配置类，谁最清楚？</p><ul><li>答案：第三方依赖自身最清楚。</li></ul><blockquote><p><strong>结论：我们不用自己指定要导入哪些bean对象和配置类了，让第三方依赖它自己来指定。</strong></p></blockquote><p>怎么让第三方依赖自己指定bean对象和配置类？</p><ul><li>比较常见的方案就是第三方依赖给我们提供一个注解，这个注解一般都以@EnableXxxx开头的注解，注解中封装的就是@Import注解</li></ul><p>4). 使用第三方依赖提供的 @EnableXxxxx注解</p><ul><li>第三方依赖中提供的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Import(MyImportSelector.class)</span><span class="hljs-comment">//指定要导入哪些bean对象或配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableHeaderConfig &#123; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在使用时只需在启动类上加上@EnableXxxxx注解即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableHeaderConfig</span>  <span class="hljs-comment">//使用第三方依赖提供的Enable开头的注解</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行测试方法：</p><p><img src="/assets/image-20230114233252259.png" alt="image-20230114233252259"></p></blockquote><p>以上四种方式都可以完成导入操作，但是第4种方式会更方便更优雅，而这种方式也是SpringBoot当中所采用的方式。</p><h4 id="3-2-3-原理分析"><a href="#3-2-3-原理分析" class="headerlink" title="3.2.3 原理分析"></a>3.2.3 原理分析</h4><h5 id="3-2-3-1-源码跟踪"><a href="#3-2-3-1-源码跟踪" class="headerlink" title="3.2.3.1 源码跟踪"></a>3.2.3.1 源码跟踪</h5><p>前面我们讲解了在项目当中引入第三方依赖之后，如何加载第三方依赖中定义好的bean对象以及配置类，从而完成自动配置操作。那下面我们通过源码跟踪的形式来剖析下SpringBoot底层到底是如何完成自动配置的。</p><blockquote><p>源码跟踪技巧：</p><p>在跟踪框架源码的时候，一定要抓住关键点，找到核心流程。一定不要从头到尾一行代码去看，一个方法的去研究，一定要找到关键流程，抓住关键点，先在宏观上对整个流程或者整个原理有一个认识，有精力再去研究其中的细节。</p></blockquote><p>要搞清楚SpringBoot的自动配置原理，要从SpringBoot启动类上使用的核心注解@SpringBootApplication开始分析：</p><p><img src="/assets/image-20230115001439110.png" alt="image-20230115001439110"></p><p>在@SpringBootApplication注解中包含了：</p><ul><li>元注解（不再解释）</li><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>我们先来看第一个注解：@SpringBootConfiguration</p><p><img src="/assets/image-20230115001950076.png" alt="image-20230115001950076"></p><blockquote><p>@SpringBootConfiguration注解上使用了@Configuration，表明SpringBoot启动类就是一个配置类。</p><p>@Indexed注解，是用来加速应用启动的（不用关心）。</p></blockquote><p>接下来再先看@ComponentScan注解：</p><p><img src="/assets/image-20230115002450993.png" alt="image-20230115002450993"></p><blockquote><p>@ComponentScan注解是用来进行组件扫描的，扫描启动类所在的包及其子包下所有被@Component及其衍生注解声明的类。</p><p>SpringBoot启动类，之所以具备扫描包功能，就是因为包含了@ComponentScan注解。</p></blockquote><p>最后我们来看看@EnableAutoConfiguration注解（自动配置核心注解）：</p><p><img src="/assets/image-20230115002743115.png" alt="image-20230115002743115"></p><blockquote><p>使用@Import注解，导入了实现ImportSelector接口的实现类。</p><p>AutoConfigurationImportSelector类是ImportSelector接口的实现类。</p><p><img src="/assets/image-20230115003242549.png" alt="image-20230115003242549"></p></blockquote><p>AutoConfigurationImportSelector类中重写了ImportSelector接口的selectImports()方法：</p><p><img src="/assets/image-20230115003348288.png" alt="image-20230115003348288"></p><blockquote><p>selectImports()方法底层调用getAutoConfigurationEntry()方法，获取可自动配置的配置类信息集合</p></blockquote><p><img src="/assets/image-20230115003704385.png" alt="image-20230115003704385"></p><blockquote><p>getAutoConfigurationEntry()方法通过调用getCandidateConfigurations(annotationMetadata, attributes)方法获取在配置文件中配置的所有自动配置类的集合</p></blockquote><p><img src="/assets/image-20230115003903302.png" alt="image-20230115003903302"></p><blockquote><p>getCandidateConfigurations方法的功能：</p><p>获取所有基于META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件、META-INF&#x2F;spring.factories文件中配置类的集合</p></blockquote><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件和META-INF&#x2F;spring.factories文件这两个文件在哪里呢？</p><ul><li>通常在引入的起步依赖中，都有包含以上两个文件</li></ul><p><img src="/assets/image-20230129090835964.png" alt="image-20230129090835964"> </p><p><img src="/assets/image-20230115064329460.png" alt="image-20230115064329460"></p><p>在前面在给大家演示自动配置的时候，我们直接在测试类当中注入了一个叫gson的bean对象，进行JSON格式转换。虽然我们没有配置bean对象，但是我们是可以直接注入使用的。原因就是因为在自动配置类当中做了自动配置。到底是在哪个自动配置类当中做的自动配置呢？我们通过搜索来查询一下。</p><p>在META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports配置文件中指定了第三方依赖Gson的配置类：GsonAutoConfiguration</p><p><img src="/assets/image-20230115005159530.png" alt="image-20230115005159530"></p><p>第三方依赖中提供的GsonAutoConfiguration类：</p><p><img src="/assets/image-20230115005418900.png" alt="image-20230115005418900"></p><blockquote><p>在GsonAutoConfiguration类上，添加了注解@AutoConfiguration，通过查看源码，可以明确：GsonAutoConfiguration类是一个配置。</p><p><img src="/assets/image-20230115065247287.png" alt="image-20230115065247287"></p></blockquote><p>看到这里，大家就应该明白为什么可以完成自动配置了，原理就是在配置类中定义一个@Bean标识的方法，而Spring会自动调用配置类中使用@Bean标识的方法，并把方法的返回值注册到IOC容器中。</p><p><strong>自动配置源码小结</strong></p><p>自动配置原理源码入口就是@SpringBootApplication注解，在这个注解中封装了3个注解，分别是：</p><ul><li>@SpringBootConfiguration<ul><li>声明当前类是一个配置类</li></ul></li><li>@ComponentScan<ul><li>进行组件扫描（SpringBoot中默认扫描的是启动类所在的当前包及其子包）</li></ul></li><li>@EnableAutoConfiguration<ul><li>封装了@Import注解（Import注解中指定了一个ImportSelector接口的实现类）<ul><li>在实现类重写的selectImports()方法，读取当前项目下所有依赖jar包中META-INF&#x2F;spring.factories、META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports两个文件里面定义的配置类（配置类中定义了@Bean注解标识的方法）。</li></ul></li></ul></li></ul><p>当SpringBoot程序启动时，就会加载配置文件当中所定义的配置类，并将这些配置类信息(类的全限定名)封装到String类型的数组中，最终通过@Import注解将这些配置类全部加载到Spring的IOC容器中，交给IOC容器管理。</p><blockquote><p>最后呢给大家抛出一个问题：在META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件中定义的配置类非常多，而且每个配置类中又可以定义很多的bean，那这些bean都会注册到Spring的IOC容器中吗？</p><p>答案：并不是。 在声明bean对象时，上面有加一个以@Conditional开头的注解，这种注解的作用就是按照条件进行装配，只有满足条件之后，才会将bean注册到Spring的IOC容器中（下面会详细来讲解）</p></blockquote><h5 id="3-2-3-2-Conditional"><a href="#3-2-3-2-Conditional" class="headerlink" title="3.2.3.2 @Conditional"></a>3.2.3.2 @Conditional</h5><p>我们在跟踪SpringBoot自动配置的源码的时候，在自动配置类声明bean的时候，除了在方法上加了一个@Bean注解以外，还会经常用到一个注解，就是以Conditional开头的这一类的注解。以Conditional开头的这些注解都是条件装配的注解。下面我们就来介绍下条件装配注解。</p><p>@Conditional注解：</p><ul><li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring的IOC容器中。</li><li>位置：方法、类</li><li>@Conditional本身是一个父注解，派生出大量的子注解：<ul><li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册bean到IOC容器。</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean(类型或名称)，才注册bean到IOC容器。</li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器。</li></ul></li></ul><p>下面我们通过代码来演示下Conditional注解的使用：</p><ul><li>@ConditionalOnClass注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnClass(name=&quot;io.jsonwebtoken.Jwts&quot;)</span><span class="hljs-comment">//环境中存在指定的这个类，才会将该bean加入IOC容器</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>pom.xml</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--JWT令牌--&gt;<br>&lt;dependency&gt;<br>     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>     &lt;artifactId&gt;jjwt&lt;/artifactId&gt;<br>     &lt;version&gt;<span class="hljs-number">0.9</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderParser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(applicationContext.getBean(HeaderParser.class));<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="/assets/image-20230115203748022.png" alt="image-20230115203748022"></p><p>因为io.jsonwebtoken.Jwts字节码文件在启动SpringBoot程序时已存在，所以创建HeaderParser对象并注册到IOC容器中。</p></blockquote><ul><li>@ConditionalOnMissingBean注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//不存在该类型的bean，才会将该bean加入IOC容器</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="/assets/image-20230115211029855.png" alt="image-20230115211029855"></p><p>SpringBoot在调用@Bean标识的headerParser()前，IOC容器中是没有HeaderParser类型的bean，所以HeaderParser对象正常创建，并注册到IOC容器中。</p></blockquote><p>再次修改@ConditionalOnMissingBean注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(name=&quot;deptController2&quot;)</span><span class="hljs-comment">//不存在指定名称的bean，才会将该bean加入IOC容器</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="/assets/image-20230115211351681.png" alt="image-20230115211351681"></p><p>因为在SpringBoot环境中不存在名字叫deptController2的bean对象，所以创建HeaderParser对象并注册到IOC容器中。</p></blockquote><p>再次修改@ConditionalOnMissingBean注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(HeaderConfig.class)</span><span class="hljs-comment">//不存在指定类型的bean，才会将bean加入IOC容器</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderParser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(applicationContext.getBean(HeaderParser.class));<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="/assets/image-20230115211957191.png" alt="image-20230115211957191"></p><p>因为HeaderConfig类中添加@Configuration注解，而@Configuration注解中包含了@Component，所以SpringBoot启动时会创建HeaderConfig类对象，并注册到IOC容器中。</p><p>当IOC容器中有HeaderConfig类型的bean存在时，不会把创建HeaderParser对象注册到IOC容器中。而IOC容器中没有HeaderParser类型的对象时，通过getBean(HeaderParser.class)方法获取bean对象时，引发异常：NoSuchBeanDefinitionException</p></blockquote><ul><li>@ConditionalOnProperty注解（这个注解和配置文件当中配置的属性有关系）</li></ul><p>先在application.yml配置文件中添加如下的键值对：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">itheima</span><br></code></pre></td></tr></table></figure><p>在声明bean的时候就可以指定一个条件@ConditionalOnProperty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnProperty(name =&quot;name&quot;,havingValue = &quot;itheima&quot;)</span><span class="hljs-comment">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HeaderGenerator <span class="hljs-title function_">headerGenerator</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderGenerator</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="/assets/image-20230115220235511.png" alt="image-20230115220235511"></p></blockquote><p>修改@ConditionalOnProperty注解：  havingValue的值修改为”itheima2”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnProperty(name =&quot;name&quot;,havingValue = &quot;itheima2&quot;)</span><span class="hljs-comment">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>再次执行testHeaderParser()测试方法：</p><p><img src="/assets/image-20230115211957191.png" alt="image-20230115211957191"></p><p>因为application.yml配置文件中，不存在： name:  itheima2，所以HeaderParser对象在IOC容器中不存在</p></blockquote><p>我们再回头看看之前讲解SpringBoot源码时提到的一个配置类：GsonAutoConfiguration</p><p><img src="/assets/image-20230115222128740.png" alt="image-20230115222128740"></p><p>最后再给大家梳理一下自动配置原理：</p><p><img src="/assets/image-20230115222302753.png" alt="image-20230115222302753"></p><blockquote><p>自动配置的核心就在@SpringBootApplication注解上，SpringBootApplication这个注解底层包含了3个注解，分别是：</p><ul><li><p>@SpringBootConfiguration</p></li><li><p>@ComponentScan</p></li><li><p>@EnableAutoConfiguration</p></li></ul><p>@EnableAutoConfiguration这个注解才是自动配置的核心。</p><ul><li>它封装了一个@Import注解，Import注解里面指定了一个ImportSelector接口的实现类。</li><li>在这个实现类中，重写了ImportSelector接口中的selectImports()方法。</li><li>而selectImports()方法中会去读取两份配置文件，并将配置文件中定义的配置类做为selectImports()方法的返回值返回，返回值代表的就是需要将哪些类交给Spring的IOC容器进行管理。</li><li>那么所有自动配置类的中声明的bean都会加载到Spring的IOC容器中吗? 其实并不会，因为这些配置类中在声明bean时，通常都会添加@Conditional开头的注解，这个注解就是进行条件装配。而Spring会根据Conditional注解有选择性的进行bean的创建。</li><li>@Enable 开头的注解底层，它就封装了一个注解 import 注解，它里面指定了一个类，是 ImportSelector 接口的实现类。在实现类当中，我们需要去实现 ImportSelector  接口当中的一个方法 selectImports 这个方法。这个方法的返回值代表的就是我需要将哪些类交给 spring 的 IOC容器进行管理。</li><li>此时它会去读取两份配置文件，一份儿是 spring.factories，另外一份儿是 autoConfiguration.imports。而在  autoConfiguration.imports 这份儿文件当中，它就会去配置大量的自动配置的类。</li><li>而前面我们也提到过这些所有的自动配置类当中，所有的 bean都会加载到 spring 的 IOC 容器当中吗？其实并不会，因为这些配置类当中，在声明 bean 的时候，通常会加上这么一类@Conditional 开头的注解。这个注解就是进行条件装配。所以SpringBoot非常的智能，它会根据 @Conditional 注解来进行条件装配。只有条件成立，它才会声明这个bean，才会将这个 bean 交给 IOC 容器管理。</li></ul></blockquote><h4 id="3-2-4-案例"><a href="#3-2-4-案例" class="headerlink" title="3.2.4 案例"></a>3.2.4 案例</h4><h5 id="3-2-4-1-自定义starter分析"><a href="#3-2-4-1-自定义starter分析" class="headerlink" title="3.2.4.1 自定义starter分析"></a>3.2.4.1 自定义starter分析</h5><p>前面我们解析了SpringBoot中自动配置的原理，下面我们就通过一个自定义starter案例来加深大家对于自动配置原理的理解。首先介绍一下自定义starter的业务场景，再来分析一下具体的操作步骤。</p><p>所谓starter指的就是SpringBoot当中的起步依赖。在SpringBoot当中已经给我们提供了很多的起步依赖了，我们为什么还需要自定义 starter 起步依赖？这是因为在实际的项目开发当中，我们可能会用到很多第三方的技术，并不是所有的第三方的技术官方都给我们提供了与SpringBoot整合的starter起步依赖，但是这些技术又非常的通用，在很多项目组当中都在使用。</p><p>业务场景：</p><ul><li>我们前面案例当中所使用的阿里云OSS对象存储服务，现在阿里云的官方是没有给我们提供对应的起步依赖的，这个时候使用起来就会比较繁琐，我们需要引入对应的依赖。我们还需要在配置文件当中进行配置，还需要基于官方SDK示例来改造对应的工具类，我们在项目当中才可以进行使用。</li><li>大家想在我们当前项目当中使用了阿里云OSS，我们需要进行这么多步的操作。在别的项目组当中要想使用阿里云OSS，是不是也需要进行这么多步的操作，所以这个时候我们就可以自定义一些公共组件，在这些公共组件当中，我就可以提前把需要配置的bean都提前配置好。将来在项目当中，我要想使用这个技术，我直接将组件对应的坐标直接引入进来，就已经自动配置好了，就可以直接使用了。我们也可以把公共组件提供给别的项目组进行使用，这样就可以大大的简化我们的开发。</li></ul><p>在SpringBoot项目中，一般都会将这些公共组件封装为SpringBoot当中的starter，也就是我们所说的起步依赖。</p><p><img src="/assets/image-20230115224939131.png" alt="image-20230115224939131"></p><blockquote><p>SpringBoot官方starter命名： spring-boot-starter-xxxx</p><p>第三组织提供的starter命名：  xxxx-spring-boot-starter</p></blockquote><p><img src="/assets/image-20230115225703863.png" alt="image-20230115225703863"></p><blockquote><p>Mybatis提供了配置类，并且也提供了springboot会自动读取的配置文件。当SpringBoot项目启动时，会读取到spring.factories配置文件中的配置类并加载配置类，生成相关bean对象注册到IOC容器中。</p><p>结果：我们可以直接在SpringBoot程序中使用Mybatis自动配置的bean对象。</p></blockquote><p>在自定义一个起步依赖starter的时候，按照规范需要定义两个模块：</p><ol><li>starter模块（进行依赖管理[把程序开发所需要的依赖都定义在starter起步依赖中]）</li><li>autoconfigure模块（自动配置）</li></ol><blockquote><p>将来在项目当中进行相关功能开发时，只需要引入一个起步依赖就可以了，因为它会将autoconfigure自动配置的依赖给传递下来。</p></blockquote><p>上面我们简单介绍了自定义starter的场景，以及自定义starter时涉及到的模块之后，接下来我们就来完成一个自定义starter的案例。</p><p>需求：自定义aliyun-oss-spring-boot-starter，完成阿里云OSS操作工具类AliyunOSSUtils的自动配置。</p><p>目标：引入起步依赖引入之后，要想使用阿里云OSS，注入AliyunOSSUtils直接使用即可。</p><p>之前阿里云OSS的使用：</p><ul><li>配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#配置阿里云OSS参数</span><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">https://oss-cn-shanghai.aliyuncs.com</span><br>    <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI5t9MZK8iq5T2Av5GLDxX</span><br>    <span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc</span><br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">web-framework01</span><br></code></pre></td></tr></table></figure><ul><li>AliOSSProperties类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSProperties</span> &#123;<br>    <span class="hljs-comment">//区域</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-comment">//身份ID</span><br>    <span class="hljs-keyword">private</span> String accessKeyId ;<br>    <span class="hljs-comment">//身份密钥</span><br>    <span class="hljs-keyword">private</span> String accessKeySecret ;<br>    <span class="hljs-comment">//存储空间</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>AliOSSUtils工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//当前类对象由Spring创建和管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSProperties aliOSSProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> multipartFile.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(aliOSSProperties.getEndpoint(),<br>                aliOSSProperties.getAccessKeyId(), aliOSSProperties.getAccessKeySecret());<br>        ossClient.putObject(aliOSSProperties.getBucketName(), fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span>aliOSSProperties.getEndpoint().split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + aliOSSProperties.getBucketName() + <span class="hljs-string">&quot;.&quot;</span> + aliOSSProperties.getEndpoint().split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br><br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们在项目当中要使用阿里云OSS，就可以注入AliOSSUtils工具类来进行文件上传。但这种方式其实是比较繁琐的。</p><p>大家再思考，现在我们使用阿里云OSS，需要做这么几步，将来大家在开发其他的项目的时候，你使用阿里云OSS，这几步你要不要做？当团队中其他小伙伴也在使用阿里云OSS的时候，步骤 不也是一样的。</p><p>所以这个时候我们就可以制作一个公共组件(自定义starter)。starter定义好之后，将来要使用阿里云OSS进行文件上传，只需要将起步依赖引入进来之后，就可以直接注入AliOSSUtils使用了。</p><p>需求明确了，接下来我们再来分析一下具体的实现步骤：</p><ul><li>第1步：创建自定义starter模块（进行依赖管理）<ul><li>把阿里云OSS所有的依赖统一管理起来</li></ul></li><li>第2步：创建autoconfigure模块<ul><li>在starter中引入autoconfigure （我们使用时只需要引入starter起步依赖即可）</li></ul></li><li>第3步：在autoconfigure中完成自动配置<ol><li>定义一个自动配置类，在自动配置类中将所要配置的bean都提前配置好</li><li>定义配置文件，把自动配置类的全类名定义在配置文件中</li></ol></li></ul><p>我们分析完自定义阿里云OSS自动配置的操作步骤了，下面我们就按照分析的步骤来实现自定义starter。</p><h5 id="3-2-4-2-自定义starter实现"><a href="#3-2-4-2-自定义starter实现" class="headerlink" title="3.2.4.2 自定义starter实现"></a>3.2.4.2 自定义starter实现</h5><p>自定义starter的步骤我们刚才已经分析了，接下来我们就按照分析的步骤来完成自定义starter的开发。</p><p>首先我们先来创建两个Maven模块：</p><p>1). aliyun-oss-spring-boot-starter模块</p><p><img src="/assets/image-20230115234739988.png" alt="image-20230115234739988"></p><p><img src="/assets/image-20230115234823134.png" alt="image-20230115234823134"></p><p>创建完starter模块后，删除多余的文件，最终保留内容如下：</p><p><img src="/assets/image-20230115235429353.png" alt="image-20230115235429353"></p><p>删除pom.xml文件中多余的内容后：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2). aliyun-oss-spring-boot-autoconfigure模块</p><p><img src="/assets/image-20230116000302319.png" alt="image-20230116000302319"></p><p><img src="/assets/image-20230115235921014.png" alt="image-20230115235921014"></p><p>创建完starter模块后，删除多余的文件，最终保留内容如下：</p><p><img src="/assets/image-20230116000542905.png" alt="image-20230116000542905"></p><p>删除pom.xml文件中多余的内容后：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>按照我们之前的分析，是需要在starter模块中来引入autoconfigure这个模块的。打开starter模块中的pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入autoconfigure模块--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>前两步已经完成了，接下来是最关键的就是第三步：</p><p>在autoconfigure模块当中来完成自动配置操作。</p><blockquote><p> 我们将之前案例中所使用的阿里云OSS部分的代码直接拷贝到autoconfigure模块下，然后进行改造就行了。</p></blockquote><p><img src="/assets/image-20230116001622679.png" alt="image-20230116001622679"></p><p>拷贝过来后，还缺失一些相关的依赖，需要把相关依赖也拷贝过来：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入web起步依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--阿里云OSS--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在大家思考下，在类上添加的@Component注解还有用吗？</p><p><img src="/assets/image-20230116002417105.png" alt="image-20230116002417105"></p><p><img src="/assets/image-20230116002442736.png" alt="image-20230116002442736"></p><p>答案：没用了。  在SpringBoot项目中，并不会去扫描com.aliyun.oss这个包，不扫描这个包那类上的注解也就失去了作用。</p><blockquote><p>@Component注解不需要使用了，可以从类上删除了。</p><p>删除后报红色错误，暂时不理会，后面再来处理。</p><p><img src="/assets/image-20230116002747681.png" alt="image-20230116002747681"></p><p>删除AliOSSUtils类中的@Component注解、@Autowired注解</p><p><img src="/assets/image-20230116003046768.png" alt="image-20230116003046768"></p></blockquote><p>下面我们就要定义一个自动配置类了，在自动配置类当中来声明AliOSSUtils的bean对象。</p><p><img src="/assets/image-20230116003513900.png" alt="image-20230116003513900"></p><p> AliOSSAutoConfiguration类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//当前类为Spring配置类</span><br><span class="hljs-meta">@EnableConfigurationProperties(AliOSSProperties.class)</span><span class="hljs-comment">//导入AliOSSProperties类，并交给SpringIOC管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSAutoConfiguration</span> &#123;<br><br><br>    <span class="hljs-comment">//创建AliOSSUtils对象，并交给SpringIOC容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AliOSSUtils <span class="hljs-title function_">aliOSSUtils</span><span class="hljs-params">(AliOSSProperties aliOSSProperties)</span>&#123;<br>        <span class="hljs-type">AliOSSUtils</span> <span class="hljs-variable">aliOSSUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AliOSSUtils</span>();<br>        aliOSSUtils.setAliOSSProperties(aliOSSProperties);<br>        <span class="hljs-keyword">return</span> aliOSSUtils;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AliOSSProperties类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*阿里云OSS相关配置*/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSProperties</span> &#123;<br>    <span class="hljs-comment">//区域</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-comment">//身份ID</span><br>    <span class="hljs-keyword">private</span> String accessKeyId ;<br>    <span class="hljs-comment">//身份密钥</span><br>    <span class="hljs-keyword">private</span> String accessKeySecret ;<br>    <span class="hljs-comment">//存储空间</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br>&#125;<br></code></pre></td></tr></table></figure><p>AliOSSUtils类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> AliOSSProperties aliOSSProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> multipartFile.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(aliOSSProperties.getEndpoint(),<br>                aliOSSProperties.getAccessKeyId(), aliOSSProperties.getAccessKeySecret());<br>        ossClient.putObject(aliOSSProperties.getBucketName(), fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span>aliOSSProperties.getEndpoint().split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + aliOSSProperties.getBucketName() + <span class="hljs-string">&quot;.&quot;</span> + aliOSSProperties.getEndpoint().split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br><br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在aliyun-oss-spring-boot-autoconfigure模块中的resources下，新建自动配置文件：</p><ul><li><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.aliyun.oss.AliOSSAutoConfiguration<br></code></pre></td></tr></table></figure></li></ul><p><img src="/assets/image-20230116004957697.png" alt="image-20230116004957697"></p><h5 id="3-2-4-3-自定义starter测试"><a href="#3-2-4-3-自定义starter测试" class="headerlink" title="3.2.4.3 自定义starter测试"></a>3.2.4.3 自定义starter测试</h5><p>阿里云OSS的starter我们刚才已经定义好了，接下来我们就来做一个测试。</p><blockquote><p>今天的课程资料当中，提供了一个自定义starter的测试工程。我们直接打开文件夹，里面有一个测试工程。测试工程就是springboot-autoconfiguration-test，我们只需要将测试工程直接导入到Idea当中即可。</p></blockquote><p><img src="/assets/image-20230116005530815.png" alt="image-20230116005530815"></p><p>测试前准备：</p><ol><li><p>在test工程中引入阿里云starter依赖</p><ul><li>通过依赖传递，会把autoconfigure依赖也引入了</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入阿里云OSS起步依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在test工程中的application.yml文件中，配置阿里云OSS配置参数信息（从以前的工程中拷贝即可）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#配置阿里云OSS参数</span><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">https://oss-cn-shanghai.aliyuncs.com</span><br>    <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI5t9MZK8iq5T2Av5GLDxX</span><br>    <span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc</span><br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">web-framework01</span><br></code></pre></td></tr></table></figure></li><li><p>在test工程中的UploadController类编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSUtils aliOSSUtils;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile image)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//上传文件到阿里云 OSS</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> aliOSSUtils.upload(image);<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>编写完代码后，我们启动当前的SpringBoot测试工程：</p><ul><li>随着SpringBoot项目启动，自动配置会把AliOSSUtils的bean对象装配到IOC容器中</li></ul><p><img src="/assets/image-20230116011039611.png" alt="image-20230116011039611"></p><p>用postman工具进行文件上传：</p><p><img src="/assets/image-20230116010731914.png" alt="image-20230116010731914"></p><p>通过断点可以看到自动注入AliOSSUtils的bean对象：</p><p><img src="/assets/image-20230116011501201.png" alt="image-20230116011501201"></p><h2 id="4-Web后端开发总结"><a href="#4-Web后端开发总结" class="headerlink" title="4. Web后端开发总结"></a>4. Web后端开发总结</h2><p>到此基于SpringBoot进行web后端开发的相关知识我们已经学习完毕了。下面我们一起针对这段web课程做一个总结。</p><p>我们来回顾一下关于web后端开发，我们都学习了哪些内容，以及每一块知识，具体是属于哪个框架的。</p><p>web后端开发现在基本上都是基于标准的三层架构进行开发的，在三层架构当中，Controller控制器层负责接收请求响应数据，Service业务层负责具体的业务逻辑处理，而Dao数据访问层也叫持久层，就是用来处理数据访问操作的，来完成数据库当中数据的增删改查操作。</p><p><img src="/assets/image-20230114180044897.png" alt="image-20230114180044897"></p><blockquote><p>在三层架构当中，前端发起请求首先会到达Controller(不进行逻辑处理)，然后Controller会直接调用Service 进行逻辑处理， Service再调用Dao完成数据访问操作。</p></blockquote><p>如果我们在执行具体的业务处理之前，需要去做一些通用的业务处理，比如：我们要进行统一的登录校验，我们要进行统一的字符编码等这些操作时，我们就可以借助于Javaweb当中三大组件之一的过滤器Filter或者是Spring当中提供的拦截器Interceptor来实现。</p><p><img src="/assets/image-20230114191737227.png" alt="image-20230114191737227"></p><p>而为了实现三层架构层与层之间的解耦，我们学习了Spring框架当中的第一大核心：IOC控制反转与DI依赖注入。</p><blockquote><p>所谓控制反转，指的是将对象创建的控制权由应用程序自身交给外部容器，这个容器就是我们常说的IOC容器或Spring容器。</p><p>而DI依赖注入指的是容器为程序提供运行时所需要的资源。</p></blockquote><p>除了IOC与DI我们还讲到了AOP面向切面编程，还有Spring中的事务管理、全局异常处理器，以及传递会话技术Cookie、Session以及新的会话跟踪解决方案JWT令牌，阿里云OSS对象存储服务，以及通过Mybatis持久层架构操作数据库等技术。</p><p><img src="/assets/image-20230114192921673.png" alt="image-20230114192921673"></p><p>我们在学习这些web后端开发技术的时候，我们都是基于主流的SpringBoot进行整合使用的。而SpringBoot又是用来简化开发，提高开发效率的。像过滤器、拦截器、IOC、DI、AOP、事务管理等这些技术到底是哪个框架提供的核心功能？</p><p><img src="/assets/image-20230114193609782.png" alt="image-20230114193609782"></p><blockquote><p>Filter过滤器、Cookie、 Session这些都是传统的JavaWeb提供的技术。</p><p>JWT令牌、阿里云OSS对象存储服务，是现在企业项目中常见的一些解决方案。</p><p>IOC控制反转、DI依赖注入、AOP面向切面编程、事务管理、全局异常处理、拦截器等，这些技术都是 Spring Framework框架当中提供的核心功能。</p><p>Mybatis就是一个持久层的框架，是用来操作数据库的。</p></blockquote><p>在Spring框架的生态中，对web程序开发提供了很好的支持，如：全局异常处理器、拦截器这些都是Spring框架中web开发模块所提供的功能，而Spring框架的web开发模块，我们也称为：SpringMVC</p><p><img src="/assets/image-20230114195143418.png" alt="image-20230114195143418"></p><blockquote><p>SpringMVC不是一个单独的框架，它是Spring框架的一部分，是Spring框架中的web开发模块，是用来简化原始的Servlet程序开发的。</p></blockquote><p>外界俗称的SSM，就是由：SpringMVC、Spring Framework、Mybatis三块组成。</p><p>基于传统的SSM框架进行整合开发项目会比较繁琐，而且效率也比较低，所以在现在的企业项目开发当中，基本上都是直接基于SpringBoot整合SSM进行项目开发的。</p><p>到此我们web后端开发的内容就已经全部讲解结束了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>37事务&amp;AOP</title>
    <link href="/2023/12/10/day37-SpringBootWeb%20AOP/"/>
    <url>/2023/12/10/day37-SpringBootWeb%20AOP/</url>
    
    <content type="html"><![CDATA[<h1 id="事务-amp-AOP"><a href="#事务-amp-AOP" class="headerlink" title="事务&amp;AOP"></a>事务&amp;AOP</h1><h2 id="1-事务管理"><a href="#1-事务管理" class="headerlink" title="1. 事务管理"></a>1. 事务管理</h2><h3 id="1-1-事务回顾"><a href="#1-1-事务回顾" class="headerlink" title="1.1 事务回顾"></a>1.1 事务回顾</h3><p>在数据库阶段我们已学习过事务了，我们讲到：</p><p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体，一起向数据库提交或者是撤销操作请求。所以这组操作要么同时成功，要么同时失败。</p><p>怎么样来控制这组操作，让这组操作同时成功或同时失败呢？此时就要涉及到事务的具体操作了。</p><p>事务的操作主要有三步：</p><ol><li>开启事务（一组操作开始前，开启事务）：start transaction &#x2F; begin ;</li><li>提交事务（这组操作全部成功后，提交事务）：commit ;</li><li>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</li></ol><h3 id="1-2-Spring事务管理"><a href="#1-2-Spring事务管理" class="headerlink" title="1.2 Spring事务管理"></a>1.2 Spring事务管理</h3><h4 id="1-2-1-案例"><a href="#1-2-1-案例" class="headerlink" title="1.2.1 案例"></a>1.2.1 案例</h4><p>简单的回顾了事务的概念以及事务的基本操作之后，接下来我们看一个事务管理案例：解散部门 （解散部门就是删除部门）</p><p>需求：当部门解散了不仅需要把部门信息删除了，还需要把该部门下的员工数据也删除了。</p><p>步骤：</p><ul><li>根据ID删除部门数据</li><li>根据部门ID删除该部门下的员工</li></ul><p>代码实现：</p><ol><li>DeptServiceImpl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br><br>    <span class="hljs-comment">//根据部门id，删除部门信息及部门下的所有员工</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>DeptMapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id   部门id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>EmpMapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-comment">//根据部门id删除部门下所有员工</span><br>    <span class="hljs-meta">@Delete(&quot;delete from emp where dept_id=#&#123;deptId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteByDeptId</span><span class="hljs-params">(Integer deptId)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，使用postman测试部门删除：</p><p><img src="/assets/image-20230107140057729.png" alt="image-20230107140057729"></p><p>代码正常情况下，dept表和Em表中的数据已删除</p><p><img src="/assets/image-20230107140130199.png" alt="image-20230107140130199"></p><p><img src="/assets/image-20230107140221425.png" alt="image-20230107140221425"></p><p>修改DeptServiceImpl类中代码，添加可能出现异常的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br><br>    <span class="hljs-comment">//根据部门id，删除部门信息及部门下的所有员工</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，使用postman测试部门删除：</p><p><img src="/assets/image-20230107140618199.png" alt="image-20230107140618199"></p><p><img src="/assets/image-20230107140706301.png" alt="image-20230107140706301"></p><p>查看数据库表：</p><ul><li>删除了2号部门</li></ul><p><img src="/assets/image-20230107140726701.png" alt="image-20230107140726701"></p><ul><li>2号部门下的员工数据没有删除</li></ul><p><img src="/assets/image-20230107140221425.png" alt="image-20230107140221425"></p><p><strong>以上程序出现的问题：即使程序运行抛出了异常，部门依然删除了，但是部门下的员工却没有删除，造成了数据的不一致。</strong></p><h4 id="1-2-2-原因分析"><a href="#1-2-2-原因分析" class="headerlink" title="1.2.2 原因分析"></a>1.2.2 原因分析</h4><p>原因：</p><ul><li>先执行根据id删除部门的操作，这步执行完毕，数据库表 dept 中的数据就已经删除了。</li><li>执行 1&#x2F;0 操作，抛出异常</li><li>抛出异常之前，下面所有的代码都不会执行了，根据部门ID删除该部门下的员工，这个操作也不会执行 。</li></ul><p>此时就出现问题了，部门删除了，部门下的员工还在，业务操作前后数据不一致。</p><p>而要想保证操作前后，数据的一致性，就需要让解散部门中涉及到的两个业务操作，要么全部成功，要么全部失败 。 那我们如何，让这两个操作要么全部成功，要么全部失败呢 ？</p><p>那就可以通过事务来实现，因为一个事务中的多个业务操作，要么全部成功，要么全部失败。</p><p>此时，我们就需要在delete删除业务功能中添加事务。</p><p><img src="/assets/image-20230107141652636.png" alt="image-20230107141652636"></p><p>在方法运行之前，开启事务，如果方法成功执行，就提交事务，如果方法执行的过程当中出现异常了，就回滚事务。</p><p>思考：开发中所有的业务操作，一旦我们要进行控制事务，是不是都是这样的套路？</p><p>答案：是的。</p><p>所以在spring框架当中就已经把事务控制的代码都已经封装好了，并不需要我们手动实现。我们使用了spring框架，我们只需要通过一个简单的注解@Transactional就搞定了。</p><h4 id="1-2-3-Transactional注解"><a href="#1-2-3-Transactional注解" class="headerlink" title="1.2.3 Transactional注解"></a>1.2.3 Transactional注解</h4><blockquote><p>@Transactional作用：就是在当前这个方法执行开始之前来开启事务，方法执行完毕之后提交事务。如果在这个方法执行的过程当中出现了异常，就会进行事务的回滚操作。</p><p>@Transactional注解：我们一般会在业务层当中来控制事务，因为在业务层当中，一个业务功能可能会包含多个数据访问的操作。在业务层来控制事务，我们就可以将多个数据访问操作控制在一个事务范围内。</p></blockquote><p>@Transactional注解书写位置：</p><ul><li>方法<ul><li>当前方法交给spring进行事务管理</li></ul></li><li>类<ul><li>当前类中所有的方法都交由spring进行事务管理</li></ul></li><li>接口<ul><li>接口下所有的实现类当中所有的方法都交给spring 进行事务管理</li></ul></li></ul><p>接下来，我们就可以在业务方法delete上加上 @Transactional 来控制事务 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span>  <span class="hljs-comment">//当前方法添加了事务管理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在业务功能上添加@Transactional注解进行事务管理后，我们重启SpringBoot服务，使用postman测试：</p><p><img src="/assets/image-20230107143339917.png" alt="image-20230107143339917"></p><p>添加Spring事务管理后，由于服务端程序引发了异常，所以事务进行回滚。</p><p><img src="/assets/image-20230107144312892.png" alt="image-20230107144312892"></p><p><img src="/assets/image-20230107143720961.png" alt="image-20230107143720961"></p><p>说明：可以在application.yml配置文件中开启事务管理日志，这样就可以在控制看到和事务相关的日志信息了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#spring事务管理日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h3 id="1-3-事务进阶"><a href="#1-3-事务进阶" class="headerlink" title="1.3 事务进阶"></a>1.3 事务进阶</h3><p>前面我们通过spring事务管理注解@Transactional已经控制了业务层方法的事务。接下来我们要来详细的介绍一下@Transactional事务管理注解的使用细节。我们这里主要介绍@Transactional注解当中的两个常见的属性：</p><ol><li>异常回滚的属性：rollbackFor </li><li>事务传播行为：propagation</li></ol><p>我们先来学习下rollbackFor属性。</p><h4 id="1-3-1-rollbackFor"><a href="#1-3-1-rollbackFor" class="headerlink" title="1.3.1 rollbackFor"></a>1.3.1 rollbackFor</h4><p>我们在之前编写的业务方法上添加了@Transactional注解，来实现事务管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>&#125;<br></code></pre></td></tr></table></figure><p>以上业务功能delete()方法在运行时，会引发除0的算数运算异常(运行时异常)，出现异常之后，由于我们在方法上加了@Transactional注解进行事务管理，所以发生异常会执行rollback回滚操作，从而保证事务操作前后数据是一致的。</p><p>下面我们在做一个测试，我们修改业务功能代码，在模拟异常的位置上直接抛出Exception异常（编译时异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;出现异常了~~~&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：在service中向上抛出一个Exception编译时异常之后，由于是controller调用service，所以在controller中要有异常处理代码，此时我们选择在controller中继续把异常向上抛。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-comment">//日志记录</span><br>     log.info(<span class="hljs-string">&quot;根据id删除部门&quot;</span>);<br>     <span class="hljs-comment">//调用service层功能</span><br>     deptService.delete(id);<br>     <span class="hljs-comment">//响应</span><br>     <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>重新启动服务后测试：</p><p>抛出异常之后事务会不会回滚</p><blockquote><p>现有表中数据：</p><p><img src="/assets/image-20230107140726701.png" alt="image-20230107140726701"></p></blockquote><p>使用postman测试，删除5号部门</p><p><img src="/assets/image-20230108142359592.png" alt="image-20230108142359592"></p><p>发生了Exception异常，但事务依然提交了</p><p><img src="/assets/image-20230108142555310.png" alt="image-20230108142555310"></p><blockquote><p>dept表中数据：</p><p><img src="/assets/image-20230108142707351.png" alt="image-20230108142707351"></p></blockquote><p>通过以上测试可以得出一个结论：默认情况下，只有出现RuntimeException(运行时异常)才会回滚事务。</p><p>假如我们想让所有的异常都回滚，需要来配置@Transactional注解当中的rollbackFor属性，通过rollbackFor这个属性可以指定出现何种异常类型回滚事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor=Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> id/<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们重新启动服务，测试删除部门的操作：</p><p><img src="/assets/image-20230108184912155.png" alt="image-20230108184912155"></p><p>控制台日志：执行了删除3号部门的操作， 因为异常又进行了事务回滚</p><p><img src="/assets/image-20230108185432083.png" alt="image-20230108185432083"></p><p>数据表：3号部门没有删除</p><p><img src="/assets/image-20230107143720961.png" alt="image-20230107143720961"></p><blockquote><p>结论：</p><ul><li>在Spring的事务管理中，默认只有运行时异常 RuntimeException才会回滚。</li><li>如果还需要回滚指定类型的异常，可以通过rollbackFor属性来指定。</li></ul></blockquote><h4 id="1-3-3-propagation"><a href="#1-3-3-propagation" class="headerlink" title="1.3.3 propagation"></a>1.3.3 propagation</h4><h5 id="1-3-3-1-介绍"><a href="#1-3-3-1-介绍" class="headerlink" title="1.3.3.1 介绍"></a>1.3.3.1 介绍</h5><p>我们接着继续学习@Transactional注解当中的第二个属性propagation，这个属性是用来配置事务的传播行为的。</p><p>什么是事务的传播行为呢？</p><ul><li>就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</li></ul><p>例如：两个事务方法，一个A方法，一个B方法。在这两个方法上都添加了@Transactional注解，就代表这两个方法都具有事务，而在A方法当中又去调用了B方法。</p><p><img src="/assets/image-20230112152543953.png" alt="image-20230112152543953"> </p><p>所谓事务的传播行为，指的就是在A方法运行的时候，首先会开启一个事务，在A方法当中又调用了B方法， B方法自身也具有事务，那么B方法在运行的时候，到底是加入到A方法的事务当中来，还是B方法在运行的时候新建一个事务？这个就涉及到了事务的传播行为。</p><p>我们要想控制事务的传播行为，在@Transactional注解的后面指定一个属性propagation，通过 propagation 属性来指定传播行为。接下来我们就来介绍一下常见的事务传播行为。</p><table><thead><tr><th><strong>属性值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr><tr><td>…</td><td></td></tr></tbody></table><blockquote><p>对于这些事务传播行为，我们只需要关注以下两个就可以了：</p><ol><li>REQUIRED（默认值）</li><li>REQUIRES_NEW</li></ol></blockquote><h5 id="1-3-3-2-案例"><a href="#1-3-3-2-案例" class="headerlink" title="1.3.3.2 案例"></a>1.3.3.2 案例</h5><p>接下来我们就通过一个案例来演示下事务传播行为propagation属性的使用。</p><p><strong>需求：</strong>解散部门时需要记录操作日志</p><p>​由于解散部门是一个非常重要而且非常危险的操作，所以在业务当中要求每一次执行解散部门的操作都需要留下痕迹，就是要记录操作日志。而且还要求无论是执行成功了还是执行失败了，都需要留下痕迹。</p><p><strong>步骤：</strong></p><ol><li>执行解散部门的业务：先删除部门，再删除部门下的员工（前面已实现）</li><li>记录解散部门的日志，到日志表（未实现）</li></ol><p><strong>准备工作：</strong></p><ol><li>创建数据库表 dept_log 日志表：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept_log(<br>   id int auto_increment comment &#x27;主键ID&#x27; primary key,<br>    create_time datetime null comment &#x27;操作时间&#x27;,<br>    description varchar(300) null comment &#x27;操作描述&#x27;<br>)comment &#x27;部门操作日志表&#x27;;<br></code></pre></td></tr></table></figure><ol start="2"><li>引入资料中提供的实体类：DeptLog</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLog</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> String description;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>引入资料中提供的Mapper接口：DeptLogMapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptLogMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into dept_log(create_time,description) values(#&#123;createTime&#125;,#&#123;description&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog log)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>引入资料中提供的业务接口：DeptLogService</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>引入资料中提供的业务实现类：DeptLogServiceImpl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogMapper deptLogMapper;<br><br>    <span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//事务传播行为：有事务就加入、没有事务就新建事务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span> &#123;<br>        deptLogMapper.insert(deptLog);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>代码实现:</strong></p><p>业务实现类：DeptServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-comment">//@Transactional //当前业务实现类中的所有的方法，都添加了spring事务管理机制</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogService deptLogService;<br><br><br>    <span class="hljs-comment">//根据部门id，删除部门信息及部门下的所有员工</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Log</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//根据部门id删除部门信息</span><br>            deptMapper.deleteById(id);<br>            <span class="hljs-comment">//模拟：异常</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;出现异常了~~~&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//删除部门下的所有员工信息</span><br>            empMapper.deleteByDeptId(id);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//不论是否有异常，最终都要执行的代码：记录日志</span><br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作，此时解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>            <span class="hljs-comment">//调用其他业务类中的方法</span><br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试:</strong></p><p>重新启动SpringBoot服务，测试删除3号部门后会发生什么？</p><ul><li>执行了删除3号部门操作</li><li>执行了插入部门日志操作</li><li>程序发生Exception异常</li><li>执行事务回滚（删除、插入操作因为在一个事务范围内，两个操作都会被回滚）</li></ul><p><img src="/assets/image-20230109154025262.png" alt="image-20230109154025262"></p><p>然后在dept_log表中没有记录日志数据</p><p><img src="/assets/image-20230109154344393.png" alt="image-20230109154344393"> </p><p><strong>原因分析:</strong></p><p>接下来我们就需要来分析一下具体是什么原因导致的日志没有成功的记录。</p><ul><li><p>在执行delete操作时开启了一个事务</p></li><li><p>当执行insert操作时，insert设置的事务传播行是默认值REQUIRED，表示有事务就加入，没有则新建事务</p></li><li><p>此时：delete和insert操作使用了同一个事务，同一个事务中的多个操作，要么同时成功，要么同时失败，所以当异常发生时进行事务回滚，就会回滚delete和insert操作</p></li></ul><p><img src="/assets/image-20230109162420479.png" alt="image-20230109162420479"></p><p><strong>解决方案：</strong></p><p>在DeptLogServiceImpl类中insert方法上，添加@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)</p><blockquote><p>Propagation.REQUIRES_NEW  ：不论是否有事务，都创建新事务  ，运行在一个独立的事务中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogMapper deptLogMapper;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><span class="hljs-comment">//事务传播行为：不论是否有事务，都新建事务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span> &#123;<br>        deptLogMapper.insert(deptLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，再次测试删除3号部门：</p><p><img src="/assets/image-20230109170002879.png" alt="image-20230109170002879"></p><p>那此时，DeptServiceImpl中的delete方法运行时，会开启一个事务。 当调用  deptLogService.insert(deptLog)  时，也会创建一个新的事务，那此时，当insert方法运行完毕之后，事务就已经提交了。 即使外部的事务出现异常，内部已经提交的事务，也不会回滚了，因为是两个独立的事务。</p><p>到此事务传播行为已演示完成，事务的传播行为我们只需要掌握两个：REQUIRED、REQUIRES_NEW。</p><blockquote><ul><li><p>REQUIRED ：大部分情况下都是用该传播行为即可。</p></li><li><p>REQUIRES_NEW ：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。</p></li></ul></blockquote><h2 id="2-AOP基础"><a href="#2-AOP基础" class="headerlink" title="2. AOP基础"></a>2. AOP基础</h2><p>学习完spring的事务管理之后，接下来我们进入到AOP的学习。 AOP也是spring框架的第二大核心，我们先来学习AOP的基础。</p><p>在AOP基础这个阶段，我们首先介绍一下什么是AOP，再通过一个快速入门程序，让大家快速体验AOP程序的开发。最后再介绍AOP当中所涉及到的一些核心的概念。</p><h3 id="2-1-AOP概述"><a href="#2-1-AOP概述" class="headerlink" title="2.1 AOP概述"></a>2.1 AOP概述</h3><p>什么是AOP？</p><ul><li>AOP英文全称：Aspect Oriented Programming（面向切面编程、面向方面编程），其实说白了，面向切面编程就是面向特定方法编程。</li></ul><p>那什么又是面向方法编程呢，为什么又需要面向方法编程呢？来我们举个例子做一个说明：</p><p>比如，我们这里有一个项目，项目中开发了很多的业务功能。</p><p><img src="/assets/image-20230112154547523.png" alt="image-20230112154547523"> </p><p>然而有一些业务功能执行效率比较低，执行耗时较长，我们需要针对于这些业务方法进行优化。 那首先第一步就需要定位出执行耗时比较长的业务方法，再针对于业务方法再来进行优化。</p><p>此时我们就需要统计当前这个项目当中每一个业务方法的执行耗时。那么统计每一个业务方法的执行耗时该怎么实现？</p><p>可能多数人首先想到的就是在每一个业务方法运行之前，记录这个方法运行的开始时间。在这个方法运行完毕之后，再来记录这个方法运行的结束时间。拿结束时间减去开始时间，不就是这个方法的执行耗时吗？</p><img src="assets/image-20230112154605206.png" alt="image-20230112154605206" style="zoom:80%;" /> <p>以上分析的实现方式是可以解决需求问题的。但是对于一个项目来讲，里面会包含很多的业务模块，每个业务模块又包含很多增删改查的方法，如果我们要在每一个模块下的业务方法中，添加记录开始时间、结束时间、计算执行耗时的代码，就会让程序员的工作变得非常繁琐。</p><img src="assets/image-20230112154627546.png" alt="image-20230112154627546" style="zoom:80%;" /> <p>而AOP面向方法编程，就可以做到在不改动这些原始方法的基础上，针对特定的方法进行功能的增强。</p><blockquote><p>AOP的作用：在程序运行期间在不修改源代码的基础上对已有方法进行增强（无侵入性: 解耦）</p></blockquote><p>我们要想完成统计各个业务方法执行耗时的需求，我们只需要定义一个模板方法，将记录方法执行耗时这一部分公共的逻辑代码，定义在模板方法当中，在这个方法开始运行之前，来记录这个方法运行的开始时间，在方法结束运行的时候，再来记录方法运行的结束时间，中间就来运行原始的业务方法。</p><img src="assets/image-20230112154530101.png" alt="image-20230112154530101" style="zoom:80%;" /> <p>而中间运行的原始业务方法，可能是其中的一个业务方法，比如：我们只想通过 部门管理的 list 方法的执行耗时，那就只有这一个方法是原始业务方法。  而如果，我们是先想统计所有部门管理的业务方法执行耗时，那此时，所有的部门管理的业务方法都是 原始业务方法。 <strong>那面向这样的指定的一个或多个方法进行编程，我们就称之为 面向切面编程。</strong></p><p>那此时，当我们再调用部门管理的 list 业务方法时啊，并不会直接执行 list 方法的逻辑，而是会执行我们所定义的 模板方法 ， 然后再模板方法中：</p><ul><li>记录方法运行开始时间</li><li>运行原始的业务方法（那此时原始的业务方法，就是 list 方法）</li><li>记录方法运行结束时间，计算方法执行耗时</li></ul><img src="assets/image-20230112155813944.png" alt="image-20230112155813944" style="zoom:80%;" /> <p>不论，我们运行的是那个业务方法，最后其实运行的就是我们定义的模板方法，而在模板方法中，就完成了原始方法执行耗时的统计操作 。(那这样呢，我们就通过一个模板方法就完成了指定的一个或多个业务方法执行耗时的统计)</p><p>而大家会发现，这个流程，我们是不是似曾相识啊？ </p><p>对了，就是和我们之前所学习的动态代理技术是非常类似的。 我们所说的模板方法，其实就是代理对象中所定义的方法，那代理对象中的方法以及根据对应的业务需要， 完成了对应的业务功能，当运行原始业务方法时，就会运行代理对象中的方法，从而实现统计业务方法执行耗时的操作。</p><p>其实，AOP面向切面编程和OOP面向对象编程一样，它们都仅仅是一种编程思想，而动态代理技术是这种思想最主流的实现方式。而Spring的AOP是Spring框架的高级技术，旨在管理bean对象的过程中底层使用动态代理机制，对特定的方法进行编程(功能增强)。</p><blockquote><p>AOP的优势：</p><ol><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ol></blockquote><h3 id="2-2-AOP快速入门"><a href="#2-2-AOP快速入门" class="headerlink" title="2.2 AOP快速入门"></a>2.2 AOP快速入门</h3><p>在了解了什么是AOP后，我们下面通过一个快速入门程序，体验下AOP的开发，并掌握Spring中AOP的开发步骤。</p><p><strong>需求：</strong>统计各个业务层方法执行耗时。</p><p><strong>实现步骤：</strong></p><ol><li>导入依赖：在pom.xml中导入AOP的依赖</li><li>编写AOP程序：针对于特定方法根据业务需要进行编程</li></ol><blockquote><p>为演示方便，可以自建新项目或导入提供的<code>springboot-aop-quickstart</code>项目工程</p></blockquote><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>AOP程序：TimeAspect</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//当前类为切面类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeAspect</span> &#123;<br><br>    <span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span> <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordTime</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//记录方法执行开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//执行原始方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pjp.proceed();<br><br>        <span class="hljs-comment">//记录方法执行结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//计算方法执行耗时</span><br>        log.info(pjp.getSignature()+<span class="hljs-string">&quot;执行耗时: &#123;&#125;毫秒&quot;</span>,end-begin);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务测试程序：</p><ul><li>查询3号部门信息</li></ul><p><img src="/assets/image-20230110143404792.png" alt="image-20230110143404792"></p><p><img src="/assets/image-20230110143611669.png" alt="image-20230110143611669"></p><blockquote><p>我们可以再测试下：查询所有部门信息（同样执行AOP程序）</p><p><img src="/assets/image-20230110143815479.png" alt="image-20230110143815479"></p></blockquote><p>我们通过AOP入门程序完成了业务方法执行耗时的统计，那其实AOP的功能远不止于此，常见的应用场景如下：</p><ul><li>记录系统的操作日志</li><li>权限控制</li><li>事务管理：我们前面所讲解的Spring事务管理，底层其实也是通过AOP来实现的，只要添加@Transactional注解之后，AOP程序自动会在原始方法运行前先来开启事务，在原始方法运行完毕之后提交或回滚事务</li></ul><p>这些都是AOP应用的典型场景。</p><p>通过入门程序，我们也应该感受到了AOP面向切面编程的一些优势：</p><ul><li><p>代码无侵入：没有修改原始的业务方法，就已经对原始的业务方法进行了功能的增强或者是功能的改变</p></li><li><p>减少了重复代码</p></li><li><p>提高开发效率</p></li><li><p>维护方便</p></li></ul><h3 id="2-3-AOP核心概念"><a href="#2-3-AOP核心概念" class="headerlink" title="2.3 AOP核心概念"></a>2.3 AOP核心概念</h3><p>通过SpringAOP的快速入门，感受了一下AOP面向切面编程的开发方式。下面我们再来学习AOP当中涉及到的一些核心概念。</p><p><strong>1. 连接点：JoinPoint</strong>，可以被AOP控制的方法（暗含方法执行时的相关信息）</p><p>​连接点指的是可以被aop控制的方法。例如：入门程序当中所有的业务方法都是可以被aop控制的方法。</p><p>​<img src="/assets/image-20230112160708474.png" alt="image-20230112160708474"> </p><p>​在SpringAOP提供的JoinPoint当中，封装了连接点方法在执行时的相关信息。（后面会有具体的讲解）</p><p><strong>2. 通知：Advice</strong>，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</p><p>​在入门程序中是需要统计各个业务方法的执行耗时的，此时我们就需要在这些业务方法运行开始之前，先记录这个方法运行的开始时间，在每一个业务方法运行结束的时候，再来记录这个方法运行的结束时间。</p><p>​但是在AOP面向切面编程当中，我们只需要将这部分重复的代码逻辑抽取出来单独定义。抽取出来的这一部分重复的逻辑，也就是共性的功能。</p><p>​<img src="assets/image-20230112160852883.png" alt="image-20230112160852883" style="zoom:80%;" /> </p><p>​</p><p><strong>3. 切入点：PointCut</strong>，匹配连接点的条件，通知仅会在切入点方法执行时被应用</p><p>​在通知当中，我们所定义的共性功能到底要应用在哪些方法上？此时就涉及到了切入点pointcut概念。切入点指的是匹配连接点的条件。通知仅会在切入点方法运行时才会被应用。</p><p>​在aop的开发当中，我们通常会通过一个切入点表达式来描述切入点(后面会有详解)。</p><p>​<img src="assets/image-20230112161131937.png" alt="image-20230112161131937" style="zoom:80%;" /> </p><p>​假如：切入点表达式改为DeptServiceImpl.list()，此时就代表仅仅只有list这一个方法是切入点。只有list()方法在运行的时候才会应用通知。</p><p>​</p><p><strong>4. 切面：Aspect</strong>，描述通知与切入点的对应关系（通知+切入点）</p><p>​当通知和切入点结合在一起，就形成了一个切面。通过切面就能够描述当前aop程序需要针对于哪个原始方法，在什么时候执行什么样的操作。</p><p>​<img src="assets/image-20230112161335186.png" alt="image-20230112161335186" style="zoom:80%;" /> </p><p>​切面所在的类，我们一般称为<strong>切面类</strong>（被@Aspect注解标识的类）</p><p>​</p><p><strong>5. 目标对象：Target</strong>，通知所应用的对象</p><p>​目标对象指的就是通知所应用的对象，我们就称之为目标对象。</p><p>​<img src="/assets/image-20230112161657667.png" alt="image-20230112161657667"> </p><p>AOP的核心概念我们介绍完毕之后，接下来我们再来分析一下我们所定义的通知是如何与目标对象结合在一起，对目标对象当中的方法进行功能增强的。</p><img src="assets/image-20230112161821401.png" alt="image-20230112161821401" style="zoom:80%;" /> <p>Spring的AOP底层是基于动态代理技术来实现的，也就是说在程序运行的时候，会自动的基于动态代理技术为目标对象生成一个对应的代理对象。在代理对象当中就会对目标对象当中的原始方法进行功能的增强。</p><h2 id="3-AOP进阶"><a href="#3-AOP进阶" class="headerlink" title="3. AOP进阶"></a>3. AOP进阶</h2><p>AOP的基础知识学习完之后，下面我们对AOP当中的各个细节进行详细的学习。主要分为4个部分：</p><ol><li>通知类型</li><li>通知顺序</li><li>切入点表达式</li><li>连接点</li></ol><p>我们先来学习第一部分通知类型。</p><h3 id="3-1-通知类型"><a href="#3-1-通知类型" class="headerlink" title="3.1 通知类型"></a>3.1 通知类型</h3><p>在入门程序当中，我们已经使用了一种功能最为强大的通知类型：Around环绕通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordTime</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">//记录方法执行开始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">//执行原始方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    <span class="hljs-comment">//记录方法执行结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">//计算方法执行耗时</span><br>    log.info(pjp.getSignature()+<span class="hljs-string">&quot;执行耗时: &#123;&#125;毫秒&quot;</span>,end-begin);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>只要我们在通知方法上加上了@Around注解，就代表当前通知是一个环绕通知。</p></blockquote><p>Spring中AOP的通知类型：</p><ul><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</li></ul><p>下面我们通过代码演示，来加深对于不同通知类型的理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect1</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>        <br>        <span class="hljs-comment">//原始方法如果执行时有异常，环绕通知中的后置代码不会在执行了</span><br>        <br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知（程序在出现异常的情况下，执行的后置通知）</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务，进行测试：</p><p><strong>1. 没有异常情况下：</strong></p><ul><li>使用postman测试查询所有部门数据</li></ul><p><img src="/assets/image-20230110165514461.png" alt="image-20230110165514461"></p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="/assets/image-20230110165806934.png" alt="image-20230110165806934"></p><blockquote><p>程序没有发生异常的情况下，@AfterThrowing标识的通知方法不会执行。</p></blockquote><p><strong>2. 出现异常情况下：</strong></p><p>修改DeptServiceImpl业务实现类中的代码： 添加异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br><br>        List&lt;Dept&gt; deptList = deptMapper.list();<br><br>        <span class="hljs-comment">//模拟异常</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">return</span> deptList;<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务，测试发生异常情况下通知的执行：</p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="/assets/image-20230110171006874.png" alt="image-20230110171006874"></p><blockquote><p>程序发生异常的情况下：</p><ul><li><p>@AfterReturning标识的通知方法不会执行，@AfterThrowing标识的通知方法执行了</p></li><li><p>@Around环绕通知中原始方法调用时有异常，通知中的环绕后的代码逻辑也不会在执行了 （因为原始方法调用已经出异常了）</p></li></ul></blockquote><p>在使用通知时的注意事项：</p><ul><li>@Around环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值，否则原始方法执行完毕，是获取不到返回值的。</li></ul><p>五种常见的通知类型，我们已经测试完毕了，此时我们再来看一下刚才所编写的代码，有什么问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前置通知</span><br><span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br><br><span class="hljs-comment">//环绕通知</span><br><span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>  <br><span class="hljs-comment">//后置通知</span><br><span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br><br><span class="hljs-comment">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span><br><span class="hljs-meta">@AfterReturning(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br><br><span class="hljs-comment">//异常通知（程序在出现异常的情况下，执行的后置通知）</span><br><span class="hljs-meta">@AfterThrowing(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br></code></pre></td></tr></table></figure><p>我们发现啊，每一个注解里面都指定了切入点表达式，而且这些切入点表达式都一模一样。此时我们的代码当中就存在了大量的重复性的切入点表达式，假如此时切入点表达式需要变动，就需要将所有的切入点表达式一个一个的来改动，就变得非常繁琐了。</p><p>怎么来解决这个切入点表达式重复的问题？ 答案就是：<strong>抽取</strong></p><p>Spring提供了@PointCut注解，该注解的作用是将公共的切入点表达式抽取出来，需要用到时引用该切入点表达式即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect1</span> &#123;<br><br>    <span class="hljs-comment">//切入点方法（公共的切入点表达式）</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//前置通知（引用切入点）</span><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>        <span class="hljs-comment">//原始方法在执行时：发生异常</span><br>        <span class="hljs-comment">//后续代码不在执行</span><br><br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span><br>    <span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知（程序在出现异常的情况下，执行的后置通知）</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：当切入点方法使用private修饰时，仅能在当前切面类中引用该表达式， 当外部其他切面类中也要引用当前类中的切入点表达式，就需要把private改为public，而在引用的时候，具体的语法为：</p><p>全类名.方法名()，具体形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect2</span> &#123;<br>    <span class="hljs-comment">//引用MyAspect1切面类中的切入点表达式</span><br>    <span class="hljs-meta">@Before(&quot;com.itheima.aspect.MyAspect1.pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect2 -&gt; before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-通知顺序"><a href="#3-2-通知顺序" class="headerlink" title="3.2 通知顺序"></a>3.2 通知顺序</h3><p>讲解完了Spring中AOP所支持的5种通知类型之后，接下来我们再来研究通知的执行顺序。</p><p>当在项目开发当中，我们定义了多个切面类，而多个切面类中多个切入点都匹配到了同一个目标方法。此时当目标方法在运行的时候，这多个切面类当中的这些通知方法都会运行。</p><p>此时我们就有一个疑问，这多个通知方法到底哪个先运行，哪个后运行？ 下面我们通过程序来验证（这里呢，我们就定义两种类型的通知进行测试，一种是前置通知@Before，一种是后置通知@After）</p><p>定义多个切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect2</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect2 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect2 -&gt; after ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect3</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect3 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect3 -&gt;  after ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect4</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect4 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect4 -&gt; after ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务，测试通知的执行顺序：</p><blockquote><p>备注：</p><ol><li><p>把DeptServiceImpl实现类中模拟异常的代码删除或注释掉。</p></li><li><p>注释掉其他切面类(把@Aspect注释即可)，仅保留MyAspect2、MyAspect3、MyAspect4 ，这样就可以清晰看到执行的结果，而不被其他切面类干扰。</p></li></ol></blockquote><ul><li>使用postman测试查询所有部门数据</li></ul><p><img src="/assets/image-20230110165514461.png" alt="image-20230110165514461"></p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="/assets/image-20230110211208549.png" alt="image-20230110211208549"></p><p>通过以上程序运行可以看出在不同切面类中，默认按照切面类的类名字母排序：</p><ul><li>目标方法前的通知方法：字母排名靠前的先执行</li><li>目标方法后的通知方法：字母排名靠前的后执行</li></ul><p>如果我们想控制通知的执行顺序有两种方式：</p><ol><li>修改切面类的类名（这种方式非常繁琐、而且不便管理）</li><li>使用Spring提供的@Order注解</li></ol><p>使用@Order注解，控制通知的执行顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(2)</span>  <span class="hljs-comment">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect2</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect2 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知 </span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect2 -&gt; after ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(3)</span>  <span class="hljs-comment">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect3</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect3 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect3 -&gt;  after ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span> <span class="hljs-comment">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect4</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect4 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect4 -&gt; after ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务，测试通知执行顺序：</p><p><img src="/assets/image-20230110212523787.png" alt="image-20230110212523787"></p><blockquote><p>通知的执行顺序大家主要知道两点即可：</p><ol><li>不同的切面类当中，默认情况下通知的执行顺序是与切面类的类名字母排序是有关系的</li><li>可以在切面类上面加上@Order注解，来控制不同的切面类通知的执行顺序</li></ol></blockquote><h3 id="3-3-切入点表达式"><a href="#3-3-切入点表达式" class="headerlink" title="3.3 切入点表达式"></a>3.3 切入点表达式</h3><p>从AOP的入门程序到现在，我们一直都在使用切入点表达式来描述切入点。下面我们就来详细的介绍一下切入点表达式的具体写法。</p><p>切入点表达式：</p><ul><li><p>描述切入点方法的一种表达式</p></li><li><p>作用：主要用来决定项目中的哪些方法需要加入通知</p></li><li><p>常见形式：</p><ol><li>execution(……)：根据方法的签名来匹配</li></ol><p><img src="/assets/image-20230110214150215.png" alt="image-20230110214150215"></p><ol start="2"><li>@annotation(……) ：根据注解匹配</li></ol><p><img src="/assets/image-20230110214242083.png" alt="image-20230110214242083"></p></li></ul><p>首先我们先学习第一种最为常见的execution切入点表达式。</p><h4 id="3-3-1-execution"><a href="#3-3-1-execution" class="headerlink" title="3.3.1 execution"></a>3.3.1 execution</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">execution</span>(访问修饰符?  返回值  包名.类名.?方法名(方法参数) <span class="hljs-keyword">throws</span> 异常?)<br></code></pre></td></tr></table></figure><p>其中带<code>?</code>的表示可以省略的部分</p><ul><li><p>访问修饰符：可省略（比如: public、protected）</p></li><li><p>包名.类名： 可省略</p></li><li><p>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</p></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))&quot;)</span><br></code></pre></td></tr></table></figure><p>可以使用通配符描述切入点</p><ul><li><p><code>*</code> ：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</p></li><li><p><code>..</code> ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p></li></ul><p>切入点表达式的语法规则：</p><ol><li>方法的访问修饰符可以省略</li><li>返回值可以使用<code>*</code>号代替（任意返回值类型）</li><li>包名可以使用<code>*</code>号代替，代表任意包（一层包使用一个<code>*</code>）</li><li>使用<code>..</code>配置包名，标识此包以及此包下的所有子包</li><li>类名可以使用<code>*</code>号代替，标识任意类</li><li>方法名可以使用<code>*</code>号代替，表示任意方法</li><li>可以使用 <code>*</code>  配置参数，一个任意类型的参数</li><li>可以使用<code>..</code> 配置参数，任意个任意类型的参数</li></ol><p><strong>切入点表达式示例</strong></p><ul><li><p>省略方法的修饰符号 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">void</span> com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))<br></code></pre></td></tr></table></figure></li><li><p>使用<code>*</code>代替返回值类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))<br></code></pre></td></tr></table></figure></li><li><p>使用<code>*</code>代替包名（一层包使用一个<code>*</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima.*.*.DeptServiceImpl.delete(java.lang.Integer))<br></code></pre></td></tr></table></figure></li><li><p>使用<code>..</code>省略包名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com..DeptServiceImpl.delete(java.lang.Integer))    <br></code></pre></td></tr></table></figure></li><li><p>使用<code>*</code>代替类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com..*.delete(java.lang.Integer))   <br></code></pre></td></tr></table></figure></li><li><p>使用<code>*</code>代替方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com..*.*(java.lang.Integer))   <br></code></pre></td></tr></table></figure></li><li><p>使用 <code>*</code> 代替参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima.service.impl.DeptServiceImpl.delete(*))<br></code></pre></td></tr></table></figure></li><li><p>使用<code>..</code>省略参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com..*.*(..))<br></code></pre></td></tr></table></figure></li></ul><p>​</p><p>注意事项：</p><ul><li><p>根据业务需要，可以使用 且（&amp;&amp;）、或（||）、非（!） 来组合比较复杂的切入点表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima.service.DeptService.list(..)) || execution(* com.itheima.service.DeptService.delete(..))<br></code></pre></td></tr></table></figure></li></ul><p>切入点表达式的书写建议：</p><ul><li><p>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是 find 开头，更新类方法都是update开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//业务类</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">findAllDept</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">//省略代码...</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">findDeptById</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-comment">//省略代码...</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDeptById</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-comment">//省略代码...</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDeptByMoreCondition</span><span class="hljs-params">(Dept dept)</span> &#123;<br>       <span class="hljs-comment">//省略代码...</span><br>    &#125;<br>    <span class="hljs-comment">//其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配DeptServiceImpl类中以find开头的方法</span><br>execution(* com.itheima.service.impl.DeptServiceImpl.find*(..))<br></code></pre></td></tr></table></figure></li><li><p>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima.service.DeptService.*(..))<br></code></pre></td></tr></table></figure></li><li><p>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用 ..，使用 * 匹配单个包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima.*.*.DeptServiceImpl.find*(..))<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-2-annotation"><a href="#3-3-2-annotation" class="headerlink" title="3.3.2 @annotation"></a>3.3.2 @annotation</h4><p>已经学习了execution切入点表达式的语法。那么如果我们要匹配多个无规则的方法，比如：list()和 delete()这两个方法。这个时候我们基于execution这种切入点表达式来描述就不是很方便了。而在之前我们是将两个切入点表达式组合在了一起完成的需求，这个是比较繁琐的。</p><p>我们可以借助于另一种切入点表达式annotation来描述这一类的切入点，从而来简化切入点表达式的书写。</p><p>实现步骤：</p><ol><li><p>编写自定义注解</p></li><li><p>在业务类要做为连接点的方法上添加自定义注解</p></li></ol><p><strong>自定义注解</strong>：MyLog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyLog &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务类</strong>：DeptServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@MyLog</span> <span class="hljs-comment">//自定义注解（表示：当前方法属于目标方法）</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Dept&gt; deptList = deptMapper.list();<br>        <span class="hljs-comment">//模拟异常</span><br>        <span class="hljs-comment">//int num = 10/0;</span><br>        <span class="hljs-keyword">return</span> deptList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@MyLog</span>  <span class="hljs-comment">//自定义注解（表示：当前方法属于目标方法）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-comment">//1. 删除部门</span><br>        deptMapper.delete(id);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        dept.setCreateTime(LocalDateTime.now());<br>        dept.setUpdateTime(LocalDateTime.now());<br>        deptMapper.save(dept);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> deptMapper.getById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        dept.setUpdateTime(LocalDateTime.now());<br>        deptMapper.update(dept);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>切面类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect6</span> &#123;<br>    <span class="hljs-comment">//针对list方法、delete方法进行前置通知和后置通知</span><br><br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;@annotation(com.itheima.anno.MyLog)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect6 -&gt; before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;@annotation(com.itheima.anno.MyLog)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect6 -&gt; after ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务，测试查询所有部门数据，查看控制台日志：</p><p><img src="/assets/image-20230110224447047.png" alt="image-20230110224447047"></p><p>到此我们两种常见的切入点表达式我已经介绍完了。</p><ul><li>execution切入点表达式<ul><li>根据我们所指定的方法的描述信息来匹配切入点方法，这种方式也是最为常用的一种方式</li><li>如果我们要匹配的切入点方法的方法名不规则，或者有一些比较特殊的需求，通过execution切入点表达式描述比较繁琐</li></ul></li><li>annotation 切入点表达式<ul><li>基于注解的方式来匹配切入点方法。这种方式虽然多一步操作，我们需要自定义一个注解，但是相对来比较灵活。我们需要匹配哪个方法，就在方法上加上对应的注解就可以了</li></ul></li></ul><h3 id="3-4-连接点"><a href="#3-4-连接点" class="headerlink" title="3.4 连接点"></a>3.4 连接点</h3><p>讲解完了切入点表达式之后，接下来我们再来讲解最后一个部分连接点。我们前面在讲解AOP核心概念的时候，我们提到过什么是连接点，连接点可以简单理解为可以被AOP控制的方法。</p><p>我们目标对象当中所有的方法是不是都是可以被AOP控制的方法。而在SpringAOP当中，连接点又特指方法的执行。</p><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><ul><li><p>对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint类型</p></li><li><p>对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型</p></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect7</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.itheima.anno.MyLog)&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>   <br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(joinPoint.getSignature().getName() + <span class="hljs-string">&quot; MyAspect7 -&gt; before ...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(joinPoint.getSignature().getName() + <span class="hljs-string">&quot; MyAspect7 -&gt; after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//获取目标类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> pjp.getTarget().getClass().getName();<br>        log.info(<span class="hljs-string">&quot;目标类名：&#123;&#125;&quot;</span>,name);<br><br>        <span class="hljs-comment">//目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> pjp.getSignature().getName();<br>        log.info(<span class="hljs-string">&quot;目标方法名：&#123;&#125;&quot;</span>,methodName);<br><br>        <span class="hljs-comment">//获取方法执行时需要的参数</span><br>        Object[] args = pjp.getArgs();<br>        log.info(<span class="hljs-string">&quot;目标方法参数：&#123;&#125;&quot;</span>, Arrays.toString(args));<br><br>        <span class="hljs-comment">//执行原始方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> pjp.proceed();<br><br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务，执行查询部门数据的功能：</p><p><img src="/assets/image-20230110231629140.png" alt="image-20230110231629140"></p><h2 id="4-AOP案例"><a href="#4-AOP案例" class="headerlink" title="4. AOP案例"></a>4. AOP案例</h2><p>SpringAOP的相关知识我们就已经全部学习完毕了。最后我们要通过一个案例来对AOP进行一个综合的应用。</p><h3 id="4-1-需求"><a href="#4-1-需求" class="headerlink" title="4.1 需求"></a>4.1 需求</h3><p>需求：将案例中增、删、改相关接口的操作日志记录到数据库表中</p><ul><li>就是当访问部门管理和员工管理当中的增、删、改相关功能接口时，需要详细的操作日志，并保存在数据表中，便于后期数据追踪。</li></ul><p>操作日志信息包含：</p><ul><li>操作人、操作时间、执行方法的全类名、执行方法名、方法运行时参数、返回值、方法执行时长</li></ul><blockquote><p>所记录的日志信息包括当前接口的操作人是谁操作的，什么时间点操作的，以及访问的是哪个类当中的哪个方法，在访问这个方法的时候传入进来的参数是什么，访问这个方法最终拿到的返回值是什么，以及整个接口方法的运行时长是多长时间。</p></blockquote><h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><p>问题1：项目当中增删改相关的方法是不是有很多？</p><ul><li>很多</li></ul><p>问题2：我们需要针对每一个功能接口方法进行修改，在每一个功能接口当中都来记录这些操作日志吗？</p><ul><li>这种做法比较繁琐</li></ul><p>以上两个问题的解决方案：可以使用AOP解决(每一个增删改功能接口中要实现的记录操作日志的逻辑代码是相同)。</p><blockquote><p>可以把这部分记录操作日志的通用的、重复性的逻辑代码抽取出来定义在一个通知方法当中，我们通过AOP面向切面编程的方式，在不改动原始功能的基础上来对原始的功能进行增强。目前我们所增强的功能就是来记录操作日志，所以也可以使用AOP的技术来实现。使用AOP的技术来实现也是最为简单，最为方便的。</p></blockquote><p>问题3：既然要基于AOP面向切面编程的方式来完成的功能，那么我们要使用 AOP五种通知类型当中的哪种通知类型？</p><ul><li>答案：环绕通知</li></ul><blockquote><p>所记录的操作日志当中包括：操作人、操作时间，访问的是哪个类、哪个方法、方法运行时参数、方法的返回值、方法的运行时长。</p><p>方法返回值，是在原始方法执行后才能获取到的。</p><p>方法的运行时长，需要原始方法运行之前记录开始时间，原始方法运行之后记录结束时间。通过计算获得方法的执行耗时。</p><p>基于以上的分析我们确定要使用Around环绕通知。</p></blockquote><p>问题4：最后一个问题，切入点表达式我们该怎么写？</p><ul><li>答案：使用annotation来描述表达式</li></ul><blockquote><p>要匹配业务接口当中所有的增删改的方法，而增删改方法在命名上没有共同的前缀或后缀。此时如果使用execution切入点表达式也可以，但是会比较繁琐。 当遇到增删改的方法名没有规律时，就可以使用 annotation切入点表达式</p></blockquote><h3 id="4-3-步骤"><a href="#4-3-步骤" class="headerlink" title="4.3 步骤"></a>4.3 步骤</h3><p>简单分析了一下大概的实现思路后，接下来我们就要来完成案例了。案例的实现步骤其实就两步：</p><ul><li>准备工作<ol><li>引入AOP的起步依赖</li><li>导入资料中准备好的数据库表结构，并引入对应的实体类</li></ol></li><li>编码实现<ol><li>自定义注解@Log</li><li>定义切面类，完成记录操作日志的逻辑</li></ol></li></ul><h3 id="4-4-实现"><a href="#4-4-实现" class="headerlink" title="4.4 实现"></a>4.4 实现</h3><h4 id="4-4-1-准备工作"><a href="#4-4-1-准备工作" class="headerlink" title="4.4.1 准备工作"></a>4.4.1 准备工作</h4><ol><li>AOP起步依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AOP起步依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>导入资料中准备好的数据库表结构，并引入对应的实体类</li></ol><p>数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 操作日志表<br>create table operate_log(<br>    id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    operate_user int unsigned comment &#x27;操作人&#x27;,<br>    operate_time datetime comment &#x27;操作时间&#x27;,<br>    class_name varchar(100) comment &#x27;操作的类名&#x27;,<br>    method_name varchar(100) comment &#x27;操作的方法名&#x27;,<br>    method_params varchar(1000) comment &#x27;方法参数&#x27;,<br>    return_value varchar(2000) comment &#x27;返回值&#x27;,<br>    cost_time bigint comment &#x27;方法执行耗时, 单位:ms&#x27;<br>) comment &#x27;操作日志表&#x27;;<br></code></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作日志实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperateLog</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//主键ID</span><br>    <span class="hljs-keyword">private</span> Integer operateUser; <span class="hljs-comment">//操作人ID</span><br>    <span class="hljs-keyword">private</span> LocalDateTime operateTime; <span class="hljs-comment">//操作时间</span><br>    <span class="hljs-keyword">private</span> String className; <span class="hljs-comment">//操作类名</span><br>    <span class="hljs-keyword">private</span> String methodName; <span class="hljs-comment">//操作方法名</span><br>    <span class="hljs-keyword">private</span> String methodParams; <span class="hljs-comment">//操作方法参数</span><br>    <span class="hljs-keyword">private</span> String returnValue; <span class="hljs-comment">//操作方法返回值</span><br>    <span class="hljs-keyword">private</span> Long costTime; <span class="hljs-comment">//操作耗时</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OperateLogMapper</span> &#123;<br><br>    <span class="hljs-comment">//插入日志数据</span><br>    <span class="hljs-meta">@Insert(&quot;insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span><br><span class="hljs-meta">            &quot;values (#&#123;operateUser&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(OperateLog log)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-编码实现"><a href="#4-4-2-编码实现" class="headerlink" title="4.4.2 编码实现"></a>4.4.2 编码实现</h4><ul><li>自定义注解@Log</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义Log注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改业务实现类，在增删改业务方法上添加@Log注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Log</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        emp.setUpdateTime(LocalDateTime.now()); <span class="hljs-comment">//更新修改时间为当前时间</span><br><br>        empMapper.update(emp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Log</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        <span class="hljs-comment">//补全数据</span><br>        emp.setCreateTime(LocalDateTime.now());<br>        emp.setUpdateTime(LocalDateTime.now());<br>        <span class="hljs-comment">//调用添加方法</span><br>        empMapper.insert(emp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Log</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span> &#123;<br>        empMapper.delete(ids);<br>    &#125;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以同样的方式，修改EmpServiceImpl业务类</p><ul><li>定义切面类，完成记录操作日志的逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OperateLogMapper operateLogMapper;<br><br>    <span class="hljs-meta">@Around(&quot;@annotation(com.itheima.anno.Log)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//操作人ID - 当前登录员工ID</span><br>        <span class="hljs-comment">//获取请求头中的jwt令牌, 解析令牌</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtils.parseJWT(jwt);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">operateUser</span> <span class="hljs-operator">=</span> (Integer) claims.get(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        <span class="hljs-comment">//操作时间</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">operateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br>        <span class="hljs-comment">//操作类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br><br>        <span class="hljs-comment">//操作方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br><br>        <span class="hljs-comment">//操作方法参数</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodParams</span> <span class="hljs-operator">=</span> Arrays.toString(args);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//调用原始目标方法运行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//方法返回值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(result);<br><br>        <span class="hljs-comment">//操作耗时</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">costTime</span> <span class="hljs-operator">=</span> end - begin;<br><br><br>        <span class="hljs-comment">//记录操作日志</span><br>        <span class="hljs-type">OperateLog</span> <span class="hljs-variable">operateLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperateLog</span>(<span class="hljs-literal">null</span>,operateUser,operateTime,className,methodName,methodParams,returnValue,costTime);<br>        operateLogMapper.insert(operateLog);<br><br>        log.info(<span class="hljs-string">&quot;AOP记录操作日志: &#123;&#125;&quot;</span> , operateLog);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>代码实现细节： 获取request对象，从请求头中获取到jwt令牌，解析令牌获取出当前用户的id。</p></blockquote><p>重启SpringBoot服务，测试操作日志记录功能：</p><ul><li>添加一个新的部门</li></ul><p><img src="/assets/image-20230111001114301.png" alt="image-20230111001114301"></p><ul><li>数据表</li></ul><p><img src="/assets/image-20230111001230731.png" alt="image-20230111001230731"></p>]]></content>
    
    
    
    <tags>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>36案例-登录认证</title>
    <link href="/2023/12/10/day36-SpringBootWeb%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/"/>
    <url>/2023/12/10/day36-SpringBootWeb%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="案例-登录认证"><a href="#案例-登录认证" class="headerlink" title="案例-登录认证"></a>案例-登录认证</h1><p>在前面的课程中，我们已经实现了部门管理、员工管理的基本功能，但是大家会发现，我们并没有登录，就直接访问到了Tlias智能学习辅助系统的后台。 这是不安全的，所以我们今天的主题就是登录认证。 最终我们要实现的效果就是用户必须登录之后，才可以访问后台系统中的功能。</p><p><img src="/assets/image-20230105085212629.png" alt="image-20230105085212629"></p><h2 id="1-登录功能"><a href="#1-登录功能" class="headerlink" title="1. 登录功能"></a>1. 登录功能</h2><h3 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h3><p><img src="/assets/image-20230105085404855.png" alt="image-20230105085404855"></p><p>在登录界面中，我们可以输入用户的用户名以及密码，然后点击 “登录” 按钮就要请求服务器，服务端判断用户输入的用户名或者密码是否正确。如果正确，则返回成功结果，前端跳转至系统首页面。</p><h3 id="1-2-接口文档"><a href="#1-2-接口文档" class="headerlink" title="1.2 接口文档"></a>1.2 接口文档</h3><p>我们参照接口文档来开发登录功能</p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/login<br><br>请求方式：POST<br><br>接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 <br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>必须</td><td>用户名</td></tr><tr><td>password</td><td>string</td><td>必须</td><td>密码</td></tr></tbody></table><p>请求数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinyong&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-思路分析"><a href="#1-3-思路分析" class="headerlink" title="1.3 思路分析"></a>1.3 思路分析</h3><p><img src="/assets/image-20230105175310401.png" alt="image-20230105175310401"></p><p>登录服务端的核心逻辑就是：接收前端请求传递的用户名和密码 ，然后再根据用户名和密码查询用户信息，如果用户信息存在，则说明用户输入的用户名和密码正确。如果查询到的用户不存在，则说明用户输入的用户名和密码错误。</p><h3 id="1-4-功能开发"><a href="#1-4-功能开发" class="headerlink" title="1.4 功能开发"></a>1.4 功能开发</h3><p><strong>LoginController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span>&#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> empService.login(emp);<br>    <span class="hljs-keyword">return</span>  e != <span class="hljs-literal">null</span> ? Result.success():Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">login</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">login</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        <span class="hljs-comment">//调用dao层功能：登录</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">loginEmp</span> <span class="hljs-operator">=</span> empMapper.getByUsernameAndPassword(emp);<br><br>        <span class="hljs-comment">//返回查询结果给Controller</span><br>        <span class="hljs-keyword">return</span> loginEmp;<br>    &#125;   <br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time &quot; +</span><br><span class="hljs-meta">            &quot;from emp &quot; +</span><br><span class="hljs-meta">            &quot;where username=#&#123;username&#125; and password =#&#123;password&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getByUsernameAndPassword</span><span class="hljs-params">(Emp emp)</span>;<br>    <br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-测试"><a href="#1-5-测试" class="headerlink" title="1.5 测试"></a>1.5 测试</h3><p>功能开发完毕后，我们就可以启动服务，打开postman进行测试了。 </p><p>发起POST请求，访问：<a href="http://localhost:8080/login">http://localhost:8080/login</a></p><p><img src="/assets/image-20220907132229245.png" alt="image-20220907132229245"> </p><p>postman测试通过了，那接下来，我们就可以结合着前端工程进行联调测试。</p><p>先退出系统，进入到登录页面：</p><p><img src="/assets/image-20230105193104848.png" alt="image-20230105193104848"></p><p>在登录页面输入账户密码：</p><p><img src="/assets/image-20230105085212629.png" alt="image-20230105085212629"></p><p>登录成功之后进入到后台管理系统页面：</p><p><img src="/assets/image-20230105192918098.png" alt="image-20230105192918098"></p><h2 id="2-登录校验"><a href="#2-登录校验" class="headerlink" title="2. 登录校验"></a>2. 登录校验</h2><h3 id="2-1-问题分析"><a href="#2-1-问题分析" class="headerlink" title="2.1 问题分析"></a>2.1 问题分析</h3><p>我们已经完成了基础登录功能的开发与测试，在我们登录成功后就可以进入到后台管理系统中进行数据的操作。</p><p>但是当我们在浏览器中新的页面上输入地址：<code>http://localhost:9528/#/system/dept</code>，发现没有登录仍然可以进入到后端管理系统页面。</p><p><img src="/assets/image-20220907133329021.png" alt="image-20220907133329021"></p><p>而真正的登录功能应该是：登陆后才能访问后端系统页面，不登陆则跳转登陆页面进行登陆。</p><p>为什么会出现这个问题？其实原因很简单，就是因为针对于我们当前所开发的部门管理、员工管理以及文件上传等相关接口来说，我们在服务器端并没有做任何的判断，没有去判断用户是否登录了。所以无论用户是否登录，都可以访问部门管理以及员工管理的相关数据。所以我们目前所开发的登录功能，它只是徒有其表。而我们要想解决这个问题，我们就需要完成一步非常重要的操作：登录校验。</p><p><img src="/assets/image-20230105180811717.png" alt="image-20230105180811717"></p><p>什么是登录校验？</p><ul><li>所谓登录校验，指的是我们在服务器端接收到浏览器发送过来的请求之后，首先我们要对请求进行校验。先要校验一下用户登录了没有，如果用户已经登录了，就直接执行对应的业务操作就可以了；如果用户没有登录，此时就不允许他执行相关的业务操作，直接给前端响应一个错误的结果，最终跳转到登录页面，要求他登录成功之后，再来访问对应的数据。</li></ul><p>了解完什么是登录校验之后，接下来我们分析一下登录校验大概的实现思路。</p><p>首先我们在宏观上先有一个认知：</p><p>前面在讲解HTTP协议的时候，我们提到HTTP协议是无状态协议。什么又是无状态的协议？</p><p>所谓无状态，指的是每一次请求都是独立的，下一次请求并不会携带上一次请求的数据。而浏览器与服务器之间进行交互，基于HTTP协议也就意味着现在我们通过浏览器来访问了登陆这个接口，实现了登陆的操作，接下来我们在执行其他业务操作时，服务器也并不知道这个员工到底登陆了没有。因为HTTP协议是无状态的，两次请求之间是独立的，所以是无法判断这个员工到底登陆了没有。</p><p><img src="/assets/image-20230105194710533.png" alt="image-20230105194710533"></p><p>那应该怎么来实现登录校验的操作呢？具体的实现思路可以分为两部分：</p><ol><li>在员工登录成功后，需要将用户登录成功的信息存起来，记录用户已经登录成功的标记。</li><li>在浏览器发起请求时，需要在服务端进行统一拦截，拦截后进行登录校验。</li></ol><blockquote><p>想要判断员工是否已经登录，我们需要在员工登录成功之后，存储一个登录成功的标记，接下来在每一个接口方法执行之前，先做一个条件判断，判断一下这个员工到底登录了没有。如果是登录了，就可以执行正常的业务操作，如果没有登录，会直接给前端返回一个错误的信息，前端拿到这个错误信息之后会自动的跳转到登录页面。</p><p>我们程序中所开发的查询功能、删除功能、添加功能、修改功能，都需要使用以上套路进行登录校验。此时就会出现：相同代码逻辑，每个功能都需要编写，就会造成代码非常繁琐。</p><p>为了简化这块操作，我们可以使用一种技术：统一拦截技术。</p><p>通过统一拦截的技术，我们可以来拦截浏览器发送过来的所有的请求，拦截到这个请求之后，就可以通过请求来获取之前所存入的登录标记，在获取到登录标记且标记为登录成功，就说明员工已经登录了。如果已经登录，我们就直接放行(意思就是可以访问正常的业务接口了)。</p></blockquote><p>我们要完成以上操作，会涉及到web开发中的两个技术：</p><ol><li>会话技术</li><li>统一拦截技术</li></ol><p>而统一拦截技术现实方案也有两种：</p><ol><li>Servlet规范中的Filter过滤器</li><li>Spring提供的interceptor拦截器</li></ol><p>下面我们先学习会话技术，然后再学习统一拦截技术。</p><h3 id="2-2-会话技术"><a href="#2-2-会话技术" class="headerlink" title="2.2 会话技术"></a>2.2 会话技术</h3><p>介绍了登录校验的大概思路之后，我们先来学习下会话技术。</p><h4 id="2-2-1-会话技术介绍"><a href="#2-2-1-会话技术介绍" class="headerlink" title="2.2.1 会话技术介绍"></a>2.2.1 会话技术介绍</h4><p>什么是会话？</p><ul><li><p>在我们日常生活当中，会话指的就是谈话、交谈。</p></li><li><p>在web开发当中，会话指的就是浏览器与服务器之间的一次连接，我们就称为一次会话。</p><blockquote><p>在用户打开浏览器第一次访问服务器的时候，这个会话就建立了，直到有任何一方断开连接，此时会话就结束了。在一次会话当中，是可以包含多次请求和响应的。</p><p>比如：打开了浏览器来访问web服务器上的资源（浏览器不能关闭、服务器不能断开）</p><ul><li>第1次：访问的是登录的接口，完成登录操作</li><li>第2次：访问的是部门管理接口，查询所有部门数据</li><li>第3次：访问的是员工管理接口，查询员工数据</li></ul><p>只要浏览器和服务器都没有关闭，以上3次请求都属于一次会话当中完成的。</p></blockquote></li></ul><p><img src="/assets/image-20230105203827355.png" alt="image-20230105203827355"></p><p>需要注意的是：会话是和浏览器关联的，当有三个浏览器客户端和服务器建立了连接时，就会有三个会话。同一个浏览器在未关闭之前请求了多次服务器，这多次请求是属于同一个会话。比如：1、2、3这三个请求都是属于同一个会话。当我们关闭浏览器之后，这次会话就结束了。而如果我们是直接把web服务器关了，那么所有的会话就都结束了。</p><p>知道了会话的概念了，接下来我们再来了解下会话跟踪。</p><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p><blockquote><p>服务器会接收很多的请求，但是服务器是需要识别出这些请求是不是同一个浏览器发出来的。比如：1和2这两个请求是不是同一个浏览器发出来的，3和5这两个请求不是同一个浏览器发出来的。如果是同一个浏览器发出来的，就说明是同一个会话。如果是不同的浏览器发出来的，就说明是不同的会话。而识别多次请求是否来自于同一浏览器的过程，我们就称为会话跟踪。</p></blockquote><p>我们使用会话跟踪技术就是要完成在同一个会话中，多个请求之间进行共享数据。</p><blockquote><p>为什么要共享数据呢？</p><p>由于HTTP是无状态协议，在后面请求中怎么拿到前一次请求生成的数据呢？此时就需要在一次会话的多次请求之间进行数据共享</p></blockquote><p>会话跟踪技术有两种：</p><ol><li>Cookie（客户端会话跟踪技术）<ul><li>数据存储在客户端浏览器当中</li></ul></li><li>Session（服务端会话跟踪技术）<ul><li>数据存储在储在服务端</li></ul></li><li>令牌技术</li></ol><h4 id="2-2-2-会话跟踪方案"><a href="#2-2-2-会话跟踪方案" class="headerlink" title="2.2.2 会话跟踪方案"></a>2.2.2 会话跟踪方案</h4><p>上面我们介绍了什么是会话，什么是会话跟踪，并且也提到了会话跟踪 3 种常见的技术方案。接下来，我们就来对比一下这 3 种会话跟踪的技术方案，来看一下具体的实现思路，以及它们之间的优缺点。</p><h5 id="2-2-2-1-方案一-Cookie"><a href="#2-2-2-1-方案一-Cookie" class="headerlink" title="2.2.2.1 方案一 - Cookie"></a>2.2.2.1 方案一 - Cookie</h5><p>cookie 是客户端会话跟踪技术，它是存储在客户端浏览器的，我们使用 cookie 来跟踪会话，我们就可以在浏览器第一次发起请求来请求服务器的时候，我们在服务器端来设置一个cookie。</p><p>比如第一次请求了登录接口，登录接口执行完成之后，我们就可以设置一个cookie，在 cookie 当中我们就可以来存储用户相关的一些数据信息。比如我可以在 cookie 当中来存储当前登录用户的用户名，用户的ID。</p><p>服务器端在给客户端在响应数据的时候，会<strong>自动</strong>的将 cookie 响应给浏览器，浏览器接收到响应回来的 cookie 之后，会<strong>自动</strong>的将 cookie 的值存储在浏览器本地。接下来在后续的每一次请求当中，都会将浏览器本地所存储的 cookie <strong>自动</strong>地携带到服务端。</p><p><img src="/assets/image-20230112101901417.png" alt="image-20230112101901417"> </p><p>接下来在服务端我们就可以获取到 cookie 的值。我们可以去判断一下这个 cookie 的值是否存在，如果不存在这个cookie，就说明客户端之前是没有访问登录接口的；如果存在 cookie 的值，就说明客户端之前已经登录完成了。这样我们就可以基于 cookie 在同一次会话的不同请求之间来共享数据。</p><p>我刚才在介绍流程的时候，用了 3 个自动：</p><ul><li><p>服务器会 <strong>自动</strong> 的将 cookie 响应给浏览器。</p></li><li><p>浏览器接收到响应回来的数据之后，会 <strong>自动</strong> 的将 cookie 存储在浏览器本地。</p></li><li><p>在后续的请求当中，浏览器会 <strong>自动</strong> 的将 cookie 携带到服务器端。</p></li></ul><p><strong>为什么这一切都是自动化进行的？</strong></p><p>是因为 cookie 它是 HTP 协议当中所支持的技术，而各大浏览器厂商都支持了这一标准。在 HTTP 协议官方给我们提供了一个响应头和请求头：</p><ul><li><p>响应头 Set-Cookie ：设置Cookie数据的</p></li><li><p>请求头 Cookie：携带Cookie数据的</p></li></ul><p><img src="/assets/image-20230112101804878.png" alt="image-20230112101804878"> </p><p><strong>代码测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> &#123;<br><br>    <span class="hljs-comment">//设置Cookie</span><br>    <span class="hljs-meta">@GetMapping(&quot;/c1&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cookie1</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>        response.addCookie(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;login_username&quot;</span>,<span class="hljs-string">&quot;itheima&quot;</span>)); <span class="hljs-comment">//设置Cookie/响应Cookie</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//获取Cookie</span><br>    <span class="hljs-meta">@GetMapping(&quot;/c2&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cookie2</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        Cookie[] cookies = request.getCookies();<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;login_username&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;login_username: &quot;</span>+cookie.getValue()); <span class="hljs-comment">//输出name为login_username的cookie</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p>A. 访问c1接口，设置Cookie，<a href="http://localhost:8080/c1">http://localhost:8080/c1</a></p><p><img src="/assets/image-20230112105410076.png" alt="image-20230112105410076"> </p><p>我们可以看到，设置的cookie，通过<strong>响应头Set-Cookie</strong>响应给浏览器，并且浏览器会将Cookie，存储在浏览器端。</p><p><img src="/assets/image-20230112105538131.png" alt="image-20230112105538131"> </p><p>B. 访问c2接口 <a href="http://localhost:8080/c2%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E7%9A%84%E5%B0%86Cookie%E6%90%BA%E5%B8%A6%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E6%98%AF%E9%80%9A%E8%BF%87**%E8%AF%B7%E6%B1%82%E5%A4%B4Cookie**%EF%BC%8C%E6%90%BA%E5%B8%A6%E7%9A%84%E3%80%82">http://localhost:8080/c2，此时浏览器会自动的将Cookie携带到服务端，是通过**请求头Cookie**，携带的。</a></p><p><img src="/assets/image-20230112105658486.png" alt="image-20230112105658486"> </p><p><strong>优缺点</strong></p><ul><li>优点：HTTP协议中支持的技术（像Set-Cookie 响应头的解析以及 Cookie 请求头数据的携带，都是浏览器自动进行的，是无需我们手动操作的）</li><li>缺点：<ul><li>移动端APP(Android、IOS)中无法使用Cookie</li><li>不安全，用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul><blockquote><p>跨域介绍：</p><p>​ <img src="assets/image-20230112103840467.png" alt="image-20230112103840467" style="zoom:80%;" /> </p><ul><li>现在的项目，大部分都是前后端分离的，前后端最终也会分开部署，前端部署在服务器 192.168.150.200 上，端口 80，后端部署在 192.168.150.100上，端口 8080</li><li>我们打开浏览器直接访问前端工程，访问url：<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a></li><li>然后在该页面发起请求到服务端，而服务端所在地址不再是localhost，而是服务器的IP地址192.168.150.100，假设访问接口地址为：<a href="http://192.168.150.100:8080/login">http://192.168.150.100:8080/login</a></li><li>那此时就存在跨域操作了，因为我们是在 <a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> 这个页面上访问了<a href="http://192.168.150.100:8080/login">http://192.168.150.100:8080/login</a> 接口</li><li>此时如果服务器设置了一个Cookie，这个Cookie是不能使用的，因为Cookie无法跨域</li></ul><p>区分跨域的维度：</p><ul><li>协议</li><li>IP&#x2F;协议</li><li>端口</li></ul><p>只要上述的三个维度有任何一个维度不同，那就是跨域操作</p><p>举例：</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="https://192.168.150.200/login">https://192.168.150.200/login</a>   [协议不同，跨域]</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.100/login">http://192.168.150.100/login</a>     [IP不同，跨域]</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.200:8080/login">http://192.168.150.200:8080/login</a>   [端口不同，跨域]</p><p>​    <a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.200/login">http://192.168.150.200/login</a>     [不跨域]   </p></blockquote><h5 id="2-2-2-2-方案二-Session"><a href="#2-2-2-2-方案二-Session" class="headerlink" title="2.2.2.2 方案二 - Session"></a>2.2.2.2 方案二 - Session</h5><p>前面介绍的时候，我们提到Session，它是服务器端会话跟踪技术，所以它是存储在服务器端的。而 Session 的底层其实就是基于我们刚才所介绍的 Cookie 来实现的。</p><ul><li><p>获取Session</p><p><img src="/assets/image-20230112105938545.png" alt="image-20230112105938545"> </p><p>如果我们现在要基于 Session 来进行会话跟踪，浏览器在第一次请求服务器的时候，我们就可以直接在服务器当中来获取到会话对象Session。如果是第一次请求Session ，会话对象是不存在的，这个时候服务器会自动的创建一个会话对象Session 。而每一个会话对象Session ，它都有一个ID（示意图中Session后面括号中的1，就表示ID），我们称之为 Session 的ID。</p></li><li><p>响应Cookie (JSESSIONID)</p><p><img src="/assets/image-20230112110441075.png" alt="image-20230112110441075"> </p><p>接下来，服务器端在给浏览器响应数据的时候，它会将 Session 的 ID 通过 Cookie 响应给浏览器。其实在响应头当中增加了一个 Set-Cookie 响应头。这个  Set-Cookie  响应头对应的值是不是cookie？ cookie 的名字是固定的 JSESSIONID 代表的服务器端会话对象 Session 的 ID。浏览器会自动识别这个响应头，然后自动将Cookie存储在浏览器本地。</p></li><li><p>查找Session</p><p><img src="/assets/image-20230112101943835.png" alt="image-20230112101943835"> </p><p>接下来，在后续的每一次请求当中，都会将 Cookie 的数据获取出来，并且携带到服务端。接下来服务器拿到JSESSIONID这个 Cookie 的值，也就是 Session 的ID。拿到 ID 之后，就会从众多的 Session 当中来找到当前请求对应的会话对象Session。</p><p>这样我们是不是就可以通过 Session 会话对象在同一次会话的多次请求之间来共享数据了？好，这就是基于 Session 进行会话跟踪的流程。</p></li></ul><p><strong>代码测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/s1&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">session1</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;HttpSession-s1: &#123;&#125;&quot;</span>, session.hashCode());<br><br>        session.setAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>); <span class="hljs-comment">//往session中存储数据</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/s2&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">session2</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        log.info(<span class="hljs-string">&quot;HttpSession-s2: &#123;&#125;&quot;</span>, session.hashCode());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>); <span class="hljs-comment">//从session中获取数据</span><br>        log.info(<span class="hljs-string">&quot;loginUser: &#123;&#125;&quot;</span>, loginUser);<br>        <span class="hljs-keyword">return</span> Result.success(loginUser);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A. 访问 s1 接口，<a href="http://localhost:8080/s1">http://localhost:8080/s1</a></p><p><img src="/assets/image-20230112111004447.png" alt="image-20230112111004447"> </p><p>请求完成之后，在响应头中，就会看到有一个Set-Cookie的响应头，里面响应回来了一个Cookie，就是JSESSIONID，这个就是服务端会话对象 Session 的ID。</p><p>B. 访问 s2 接口，<a href="http://localhost:8080/s2">http://localhost:8080/s2</a></p><p><img src="/assets/image-20230112111137207.png" alt="image-20230112111137207"> </p><p>接下来，在后续的每次请求时，都会将Cookie的值，携带到服务端，那服务端呢，接收到Cookie之后，会自动的根据JSESSIONID的值，找到对应的会话对象Session。</p><p>那经过这两步测试，大家也会看到，在控制台中输出如下日志：</p><p><img src="/assets/image-20230112111328117.png" alt="image-20230112111328117"> </p><p>两次请求，获取到的Session会话对象的hashcode是一样的，就说明是同一个会话对象。而且，第一次请求时，往Session会话对象中存储的值，第二次请求时，也获取到了。 那这样，我们就可以通过Session会话对象，在同一个会话的多次请求之间来进行数据共享了。</p><p><strong>优缺点</strong></p><ul><li>优点：Session是存储在服务端的，安全</li><li>缺点：<ul><li>服务器集群环境下无法直接使用Session</li><li>移动端APP(Android、IOS)中无法使用Cookie</li><li>用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul><blockquote><p>PS：Session 底层是基于Cookie实现的会话跟踪，如果Cookie不可用，则该方案，也就失效了。</p></blockquote><blockquote><p>服务器集群环境为何无法使用Session？</p><p>​<img src="assets/image-20230112112557480.png" alt="image-20230112112557480" style="zoom:67%;" /> </p><ul><li>首先第一点，我们现在所开发的项目，一般都不会只部署在一台服务器上，因为一台服务器会存在一个很大的问题，就是单点故障。所谓单点故障，指的就是一旦这台服务器挂了，整个应用都没法访问了。</li></ul><p>​    <img src="/assets/image-20230112112740131.png" alt="image-20230112112740131"> </p><ul><li><p>所以在现在的企业项目开发当中，最终部署的时候都是以集群的形式来进行部署，也就是同一个项目它会部署多份。比如这个项目我们现在就部署了 3 份。</p></li><li><p>而用户在访问的时候，到底访问这三台其中的哪一台？其实用户在访问的时候，他会访问一台前置的服务器，我们叫负载均衡服务器，我们在后面项目当中会详细讲解。目前大家先有一个印象负载均衡服务器，它的作用就是将前端发起的请求均匀的分发给后面的这三台服务器。</p><p><img src="/assets/image-20230112113558810.png" alt="image-20230112113558810"> </p></li><li><p>此时假如我们通过 session 来进行会话跟踪，可能就会存在这样一个问题。用户打开浏览器要进行登录操作，此时会发起登录请求。登录请求到达负载均衡服务器，将这个请求转给了第一台 Tomcat 服务器。</p><p>Tomcat 服务器接收到请求之后，要获取到会话对象session。获取到会话对象 session 之后，要给浏览器响应数据，最终在给浏览器响应数据的时候，就会携带这么一个 cookie 的名字，就是 JSESSIONID ，下一次再请求的时候，是不是又会将 Cookie 携带到服务端？</p><p>好。此时假如又执行了一次查询操作，要查询部门的数据。这次请求到达负载均衡服务器之后，负载均衡服务器将这次请求转给了第二台 Tomcat 服务器，此时他就要到第二台 Tomcat 服务器当中。根据JSESSIONID 也就是对应的 session 的 ID 值，要找对应的 session 会话对象。</p><p>我想请问在第二台服务器当中有没有这个ID的会话对象 Session， 是没有的。此时是不是就出现问题了？我同一个浏览器发起了 2 次请求，结果获取到的不是同一个会话对象，这就是Session这种会话跟踪方案它的缺点，在服务器集群环境下无法直接使用Session。</p></li></ul></blockquote><p>大家会看到上面这两种传统的会话技术，在现在的企业开发当中是不是会存在很多的问题。 为了解决这些问题，在现在的企业开发当中，基本上都会采用第三种方案，通过令牌技术来进行会话跟踪。接下来我们就来介绍一下令牌技术，来看一下令牌技术又是如何跟踪会话的。</p><h5 id="2-2-2-3-方案三-令牌技术"><a href="#2-2-2-3-方案三-令牌技术" class="headerlink" title="2.2.2.3 方案三 - 令牌技术"></a>2.2.2.3 方案三 - 令牌技术</h5><p>这里我们所提到的令牌，其实它就是一个用户身份的标识，看似很高大上，很神秘，其实本质就是一个字符串。</p><p><img src="/assets/image-20230112102022634.png" alt="image-20230112102022634"> </p><p>如果通过令牌技术来跟踪会话，我们就可以在浏览器发起请求。在请求登录接口的时候，如果登录成功，我就可以生成一个令牌，令牌就是用户的合法身份凭证。接下来我在响应数据的时候，我就可以直接将令牌响应给前端。</p><p>接下来我们在前端程序当中接收到令牌之后，就需要将这个令牌存储起来。这个存储可以存储在 cookie 当中，也可以存储在其他的存储空间(比如：localStorage)当中。</p><p>接下来，在后续的每一次请求当中，都需要将令牌携带到服务端。携带到服务端之后，接下来我们就需要来校验令牌的有效性。如果令牌是有效的，就说明用户已经执行了登录操作，如果令牌是无效的，就说明用户之前并未执行登录操作。</p><p>此时，如果是在同一次会话的多次请求之间，我们想共享数据，我们就可以将共享的数据存储在令牌当中就可以了。</p><p><strong>优缺点</strong></p><ul><li>优点：<ul><li>支持PC端、移动端</li><li>解决集群环境下的认证问题</li><li>减轻服务器的存储压力（无需在服务器端存储）</li></ul></li><li>缺点：需要自己实现（包括令牌的生成、令牌的传递、令牌的校验）</li></ul><p><strong>针对于这三种方案，现在企业开发当中使用的最多的就是第三种令牌技术进行会话跟踪。而前面的这两种传统的方案，现在企业项目开发当中已经很少使用了。所以在我们的课程当中，我们也将会采用令牌技术来解决案例项目当中的会话跟踪问题。</strong></p><h3 id="2-3-JWT令牌"><a href="#2-3-JWT令牌" class="headerlink" title="2.3 JWT令牌"></a>2.3 JWT令牌</h3><p>前面我们介绍了基于令牌技术来实现会话追踪。这里所提到的令牌就是用户身份的标识，其本质就是一个字符串。令牌的形式有很多，我们使用的是功能强大的 JWT令牌。</p><h4 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2.3.1 介绍"></a>2.3.1 介绍</h4><p>JWT全称：JSON Web Token  （官网：<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a></p><ul><li><p>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><blockquote><p>简洁：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。</p><p>自包含：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。</p><p>简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在通信双方安全的进行信息传输了。</p></blockquote></li></ul><p>JWT的组成： （JWT令牌由三个部分组成，三个部分之间使用英文的点来分割）</p><ul><li><p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：{“alg”:”HS256”,”type”:”JWT”}</p></li><li><p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：{“id”:”1”,”username”:”Tom”}</p></li><li><p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</p><blockquote><p>签名的目的就是为了防jwt令牌被篡改，而正是因为jwt令牌最后一个部分数字签名的存在，所以整个jwt 令牌是非常安全可靠的。一旦jwt令牌当中任何一个部分、任何一个字符被篡改了，整个令牌在校验的时候都会失败，所以它是非常安全可靠的。</p></blockquote></li></ul><p><img src="/assets/image-20230106085442076.png" alt="image-20230106085442076"></p><blockquote><p>JWT是如何将原始的JSON格式数据，转变为字符串的呢？</p><p>其实在生成JWT令牌时，会对JSON格式的数据进行一次编码：进行base64编码</p><p>Base64：是一种基于64个可打印的字符来表示二进制数据的编码方式。既然能编码，那也就意味着也能解码。所使用的64个字符分别是A到Z、a到z、 0- 9，一个加号，一个斜杠，加起来就是64个字符。任何数据经过base64编码之后，最终就会通过这64个字符来表示。当然还有一个符号，那就是等号。等号它是一个补位的符号</p><p>需要注意的是Base64是编码方式，而不是加密方式。</p></blockquote><p><img src="/assets/image-20230112114319773.png" alt="image-20230112114319773"> </p><p>JWT令牌最典型的应用场景就是登录认证：</p><ol><li>在浏览器发起请求来执行登录操作，此时会访问登录的接口，如果登录成功之后，我们需要生成一个jwt令牌，将生成的 jwt令牌返回给前端。</li><li>前端拿到jwt令牌之后，会将jwt令牌存储起来。在后续的每一次请求中都会将jwt令牌携带到服务端。</li><li>服务端统一拦截请求之后，先来判断一下这次请求有没有把令牌带过来，如果没有带过来，直接拒绝访问，如果带过来了，还要校验一下令牌是否是有效。如果有效，就直接放行进行请求的处理。</li></ol><p>在JWT登录认证的场景中我们发现，整个流程当中涉及到两步操作：</p><ol><li>在登录成功之后，要生成令牌。</li><li>每一次请求当中，要接收令牌并对令牌进行校验。</li></ol><p>稍后我们再来学习如何来生成jwt令牌，以及如何来校验jwt令牌。</p><h4 id="2-3-2-生成和校验"><a href="#2-3-2-生成和校验" class="headerlink" title="2.3.2 生成和校验"></a>2.3.2 生成和校验</h4><p>简单介绍了JWT令牌以及JWT令牌的组成之后，接下来我们就来学习基于Java代码如何生成和校验JWT令牌。</p><p>首先我们先来实现JWT令牌的生成。要想使用JWT令牌，需要先引入JWT的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JWT依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在引入完JWT来赖后，就可以调用工具包中提供的API来完成JWT令牌的生成和校验</p><p>工具类：Jwts</p></blockquote><p>生成JWT代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">genJwt</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;String,Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    claims.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>    claims.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>        .setClaims(claims) <span class="hljs-comment">//自定义内容(载荷)          </span><br>        .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itheima&quot;</span>) <span class="hljs-comment">//签名算法        </span><br>        .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">24</span>*<span class="hljs-number">3600</span>*<span class="hljs-number">1000</span>)) <span class="hljs-comment">//有效期   </span><br>        .compact();<br>    <br>    System.out.println(jwt);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试方法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">eyJhbGciOiJIUzI1NiJ9<span class="hljs-selector-class">.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ</span>.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk<br></code></pre></td></tr></table></figure><p>输出的结果就是生成的JWT令牌,，通过英文的点分割对三个部分进行分割，我们可以将生成的令牌复制一下，然后打开JWT的官网，将生成的令牌直接放在Encoded位置，此时就会自动的将令牌解析出来。</p><p><img src="/assets/image-20230106190950305.png" alt="image-20230106190950305"></p><blockquote><p>第一部分解析出来，看到JSON格式的原始数据，所使用的签名算法为HS256。</p><p>第二个部分是我们自定义的数据，之前我们自定义的数据就是id，还有一个exp代表的是我们所设置的过期时间。</p><p>由于前两个部分是base64编码，所以是可以直接解码出来。但最后一个部分并不是base64编码，是经过签名算法计算出来的，所以最后一个部分是不会解析的。</p></blockquote><p>实现了JWT令牌的生成，下面我们接着使用Java代码来校验JWT令牌(解析生成的令牌)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseJwt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>        .setSigningKey(<span class="hljs-string">&quot;itheima&quot;</span>)<span class="hljs-comment">//指定签名密钥（必须保证和生成令牌时使用相同的签名密钥）  </span><br>    .parseClaimsJws(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk&quot;</span>)<br>        .getBody();<br><br>    System.out.println(claims);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试方法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">exp</span>=1672729730&#125;<br></code></pre></td></tr></table></figure><blockquote><p>令牌解析后，我们可以看到id和过期时间，如果在解析的过程当中没有报错，就说明解析成功了。</p></blockquote><p>下面我们做一个测试：把令牌header中的数字9变为8，运行测试方法后发现报错：</p><blockquote><p>原header： eyJhbGciOiJIUzI1NiJ9</p><p>修改为： eyJhbGciOiJIUzI1NiJ8</p></blockquote><p><img src="/assets/image-20230106205045658.png" alt="image-20230106205045658"></p><p>结论：篡改令牌中的任何一个字符，在对令牌进行解析时都会报错，所以JWT令牌是非常安全可靠的。</p><p>我们继续测试：修改生成令牌的时指定的过期时间，修改为1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">genJwt</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;String,Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    claims.put(“id”,<span class="hljs-number">1</span>);<br>    claims.put(“username”,“Tom”);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>        .setClaims(claims) <span class="hljs-comment">//自定义内容(载荷)          </span><br>        .signWith(SignatureAlgorithm.HS256, “itheima”) <span class="hljs-comment">//签名算法        </span><br>        .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">60</span>*<span class="hljs-number">1000</span>)) <span class="hljs-comment">//有效期60秒   </span><br>        .compact();<br>    <br>    System.out.println(jwt);<br>    <span class="hljs-comment">//输出结果：eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjczMDA5NzU0fQ.RcVIR65AkGiax-ID6FjW60eLFH3tPTKdoK7UtE4A1ro</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseJwt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>        .setSigningKey(<span class="hljs-string">&quot;itheima&quot;</span>)<span class="hljs-comment">//指定签名密钥</span><br>.parseClaimsJws(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjczMDA5NzU0fQ.RcVIR65AkGiax-ID6FjW60eLFH3tPTKdoK7UtE4A1ro&quot;</span>)<br>        .getBody();<br><br>    System.out.println(claims);<br>&#125;<br></code></pre></td></tr></table></figure><p>等待1分钟之后运行测试方法发现也报错了，说明：JWT令牌过期后，令牌就失效了，解析的为非法令牌。</p><p>通过以上测试，我们在使用JWT令牌时需要注意：</p><ul><li><p>JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥是配套的。</p></li><li><p>如果JWT令牌解析校验时报错，则说明 JWT令牌被篡改 或 失效了，令牌非法。</p></li></ul><h4 id="2-3-3-登录下发令牌"><a href="#2-3-3-登录下发令牌" class="headerlink" title="2.3.3 登录下发令牌"></a>2.3.3 登录下发令牌</h4><p>JWT令牌的生成和校验的基本操作我们已经学习完了，接下来我们就需要在案例当中通过JWT令牌技术来跟踪会话。具体的思路我们前面已经分析过了，主要就是两步操作：</p><ol><li>生成令牌<ul><li>在登录成功之后来生成一个JWT令牌，并且把这个令牌直接返回给前端</li></ul></li><li>校验令牌<ul><li>拦截前端请求，从请求中获取到令牌，对令牌进行解析校验</li></ul></li></ol><p>那我们首先来完成：登录成功之后生成JWT令牌，并且把令牌返回给前端。</p><p>JWT令牌怎么返回给前端呢？此时我们就需要再来看一下接口文档当中关于登录接口的描述（主要看响应数据）：</p><ul><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>备注说明</p><p>用户登录成功后，系统会自动下发JWT令牌，然后在后续的每次请求中，都需要在请求头header中携带到服务端，请求头的名称为 token ，值为 登录时下发的JWT令牌。</p><p>如果检测到用户未登录，则会返回如下固定错误信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NOT_LOGIN&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p>解读完接口文档中的描述了，目前我们先来完成令牌的生成和令牌的下发，我们只需要生成一个令牌返回给前端就可以了。</p><p><strong>实现步骤：</strong></p><ol><li>引入JWT工具类<ul><li>在项目工程下创建com.itheima.utils包，并把提供JWT工具类复制到该包下</li></ul></li><li>登录完成后，调用工具类生成JWT令牌并返回</li></ol><p><strong>JWT工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itheima&quot;</span>;<span class="hljs-comment">//签名密钥</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">43200000L</span>; <span class="hljs-comment">//有效时间</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> claims JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateJwt</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .addClaims(claims)<span class="hljs-comment">//自定义信息（有效载荷）</span><br>                .signWith(SignatureAlgorithm.HS256, signKey)<span class="hljs-comment">//签名算法（头部）</span><br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expire))<span class="hljs-comment">//过期时间</span><br>                .compact();<br>        <span class="hljs-keyword">return</span> jwt;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwt JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">parseJWT</span><span class="hljs-params">(String jwt)</span>&#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>                .setSigningKey(signKey)<span class="hljs-comment">//指定签名密钥</span><br>                .parseClaimsJws(jwt)<span class="hljs-comment">//指定令牌Token</span><br>                .getBody();<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>登录成功，生成JWT令牌并返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br>    <span class="hljs-comment">//依赖业务层对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span> &#123;<br>        <span class="hljs-comment">//调用业务层：登录功能</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">loginEmp</span> <span class="hljs-operator">=</span> empService.login(emp);<br><br>        <span class="hljs-comment">//判断：登录用户是否存在</span><br>        <span class="hljs-keyword">if</span>(loginEmp !=<span class="hljs-literal">null</span> )&#123;<br>            <span class="hljs-comment">//自定义信息</span><br>            Map&lt;String , Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            claims.put(<span class="hljs-string">&quot;id&quot;</span>, loginEmp.getId());<br>            claims.put(<span class="hljs-string">&quot;username&quot;</span>,loginEmp.getUsername());<br>            claims.put(<span class="hljs-string">&quot;name&quot;</span>,loginEmp.getName());<br><br>            <span class="hljs-comment">//使用JWT工具类，生成身份令牌</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtils.generateJwt(claims);<br>            <span class="hljs-keyword">return</span> Result.success(token);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启服务，打开postman测试登录接口：</p><p><img src="/assets/image-20230106212805480.png" alt="image-20230106212805480"></p><p>打开浏览器完成前后端联调操作：利用开发者工具，抓取一下网络请求</p><p><img src="/assets/image-20230106213419461.png" alt="image-20230106213419461"></p><blockquote><p>登录请求完成后，可以看到JWT令牌已经响应给了前端，此时前端就会将JWT令牌存储在浏览器本地。</p></blockquote><p>服务器响应的JWT令牌存储在本地浏览器哪里了呢？</p><ul><li>在当前案例中，JWT令牌存储在浏览器的本地存储空间local storage中了。 local storage是浏览器的本地存储，在移动端也是支持的。</li></ul><p><img src="/assets/image-20230106213910049.png" alt="image-20230106213910049"></p><p>我们在发起一个查询部门数据的请求，此时我们可以看到在请求头中包含一个token(JWT令牌)，后续的每一次请求当中，都会将这个令牌携带到服务端。</p><p><img src="/assets/image-20230106214331443.png" alt="image-20230106214331443"></p><h3 id="2-4-过滤器Filter"><a href="#2-4-过滤器Filter" class="headerlink" title="2.4 过滤器Filter"></a>2.4 过滤器Filter</h3><p>刚才通过浏览器的开发者工具，我们可以看到在后续的请求当中，都会在请求头中携带JWT令牌到服务端，而服务端需要统一拦截所有的请求，从而判断是否携带的有合法的JWT令牌。<br>那怎么样来统一拦截到所有的请求校验令牌的有效性呢？这里我们会学习两种解决方案：</p><ol><li>Filter过滤器</li><li>Interceptor拦截器</li></ol><p>我们首先来学习过滤器Filter。</p><h4 id="2-4-1-快速入门"><a href="#2-4-1-快速入门" class="headerlink" title="2.4.1 快速入门"></a>2.4.1 快速入门</h4><p>什么是Filter？</p><ul><li>Filter表示过滤器，是 JavaWeb三大组件(Servlet、Filter、Listener)之一。</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能<ul><li>使用了过滤器之后，要想访问web服务器上的资源，必须先经过滤器，过滤器处理完毕之后，才可以访问对应的资源。</li></ul></li><li>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</li></ul><p><img src="/assets/image-20230112120955145.png" alt="image-20230112120955145"> </p><p>下面我们通过Filter快速入门程序掌握过滤器的基本使用操作：</p><ul><li>第1步，定义过滤器 ：1.定义一个类，实现 Filter 接口，并重写其所有方法。</li><li>第2步，配置过滤器：Filter类上加 @WebFilter 注解，配置拦截资源的路径。引导类上加 @ServletComponentScan 开启Servlet组件支持。</li></ul><p><strong>定义过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个类，实现一个标准的Filter过滤器的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//初始化方法, 只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init 初始化方法执行了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//拦截到请求之后调用, 调用多次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo 拦截到了请求...放行前逻辑&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        chain.doFilter(request,response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//销毁方法, 只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy 销毁方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>init方法：过滤器的初始化方法。在web服务器启动的时候会自动的创建Filter过滤器对象，在创建过滤器对象的时候会自动调用init初始化方法，这个方法只会被调用一次。</p></li><li><p>doFilter方法：这个方法是在每一次拦截到请求之后都会被调用，所以这个方法是会被调用多次的，每拦截到一次请求就会调用一次doFilter()方法。</p></li><li><p>destroy方法： 是销毁的方法。当我们关闭服务器的时候，它会自动的调用销毁方法destroy，而这个销毁方法也只会被调用一次。</p></li></ul></blockquote><p>在定义完Filter之后，Filter其实并不会生效，还需要完成Filter的配置，Filter的配置非常简单，只需要在Filter类上添加一个注解：@WebFilter，并指定属性urlPatterns，通过这个属性指定过滤器要拦截哪些请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <span class="hljs-comment">//配置过滤器要拦截的请求路径（ /* 表示拦截浏览器的所有请求 ）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//初始化方法, 只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init 初始化方法执行了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//拦截到请求之后调用, 调用多次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo 拦截到了请求...放行前逻辑&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        chain.doFilter(request,response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//销毁方法, 只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy 销毁方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们在Filter类上面加了@WebFilter注解之后，接下来我们还需要在启动类上面加上一个注解@ServletComponentScan，通过这个@ServletComponentScan注解来开启SpringBoot项目对于Servlet组件的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TliasWebManagementApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(TliasWebManagementApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动服务，打开浏览器，执行部门管理的请求，可以看到控制台输出了过滤器中的内容：</p><p><img src="/assets/image-20230112121205697.png" alt="image-20230112121205697"> </p><blockquote><p>注意事项：</p><p>​在过滤器Filter中，如果不执行放行操作，将无法访问后面的资源。 放行操作：chain.doFilter(request, response);</p></blockquote><p>现在我们已完成了Filter过滤器的基本使用，下面我们将学习Filter过滤器在使用过程中的一些细节。</p><h4 id="2-4-2-Filter详解"><a href="#2-4-2-Filter详解" class="headerlink" title="2.4.2 Filter详解"></a>2.4.2 Filter详解</h4><p>Filter过滤器的快速入门程序我们已经完成了，接下来我们就要详细的介绍一下过滤器Filter在使用中的一些细节。主要介绍以下3个方面的细节：</p><ol><li>过滤器的执行流程</li><li>过滤器的拦截路径配置</li><li>过滤器链</li></ol><h5 id="2-4-2-1-执行流程"><a href="#2-4-2-1-执行流程" class="headerlink" title="2.4.2.1 执行流程"></a>2.4.2.1 执行流程</h5><p>首先我们先来看下过滤器的执行流程：</p><p><img src="/assets/image-20230106222559935.png" alt="image-20230106222559935"></p><p>过滤器当中我们拦截到了请求之后，如果希望继续访问后面的web资源，就要执行放行操作，放行就是调用 FilterChain对象当中的doFilter()方法，在调用doFilter()这个方法之前所编写的代码属于放行之前的逻辑。</p><p>在放行后访问完 web 资源之后还会回到过滤器当中，回到过滤器之后如有需求还可以执行放行之后的逻辑，放行之后的逻辑我们写在doFilter()这行代码之后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//初始化方法, 只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init 初始化方法执行了&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行前逻辑.....&quot;</span>);<br><br>        <span class="hljs-comment">//放行请求</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行后逻辑.....&quot;</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//销毁方法, 只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy 销毁方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230106224322625.png" alt="image-20230106224322625"></p><h5 id="2-4-2-2-拦截路径"><a href="#2-4-2-2-拦截路径" class="headerlink" title="2.4.2.2 拦截路径"></a>2.4.2.2 拦截路径</h5><p>执行流程我们搞清楚之后，接下来再来介绍一下过滤器的拦截路径，Filter可以根据需求，配置不同的拦截资源路径：</p><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问 &#x2F;login 路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><p>下面我们来测试”拦截具体路径”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/login&quot;)</span>  <span class="hljs-comment">//拦截/login具体路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行前逻辑.....&quot;</span>);<br><br>        <span class="hljs-comment">//放行请求</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行后逻辑.....&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        Filter.<span class="hljs-built_in">super</span>.init(filterConfig);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        Filter.<span class="hljs-built_in">super</span>.destroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试1：访问部门管理请求，发现过滤器没有拦截请求</p><p><img src="/assets/image-20230106225658525.png" alt="image-20230106225658525"></p><p><img src="/assets/image-20230106230332510.png" alt="image-20230106230332510"></p><p>测试2：访问登录请求&#x2F;login，发现过滤器拦截请求</p><p><img src="/assets/image-20230106230520229.png" alt="image-20230106230520229"></p><p>下面我们来测试”目录拦截”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/depts/*&quot;)</span> <span class="hljs-comment">//拦截所有以/depts开头，后面是什么无所谓</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行前逻辑.....&quot;</span>);<br><br>        <span class="hljs-comment">//放行请求</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行后逻辑.....&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        Filter.<span class="hljs-built_in">super</span>.init(filterConfig);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        Filter.<span class="hljs-built_in">super</span>.destroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试1：访问部门管理请求，发现过滤器拦截了请求</p><p><img src="/assets/image-20230106231144348.png" alt="image-20230106231144348"></p><p>测试2：访问登录请求&#x2F;login，发现过滤器没有拦截请求</p><p><img src="/assets/image-20230106231220802.png" alt="image-20230106231220802"></p><h5 id="2-4-2-3-过滤器链"><a href="#2-4-2-3-过滤器链" class="headerlink" title="2.4.2.3 过滤器链"></a>2.4.2.3 过滤器链</h5><p>最后我们在来介绍下过滤器链，什么是过滤器链呢？所谓过滤器链指的是在一个web应用程序当中，可以配置多个过滤器，多个过滤器就形成了一个过滤器链。</p><p><img src="/assets/image-20230107084730393.png" alt="image-20230107084730393"></p><p>比如：在我们web服务器当中，定义了两个过滤器，这两个过滤器就形成了一个过滤器链。</p><p>而这个链上的过滤器在执行的时候会一个一个的执行，会先执行第一个Filter，放行之后再来执行第二个Filter，如果执行到了最后一个过滤器放行之后，才会访问对应的web资源。</p><p>访问完web资源之后，按照我们刚才所介绍的过滤器的执行流程，还会回到过滤器当中来执行过滤器放行后的逻辑，而在执行放行后的逻辑的时候，顺序是反着的。</p><p>先要执行过滤器2放行之后的逻辑，再来执行过滤器1放行之后的逻辑，最后在给浏览器响应数据。</p><p>以上就是当我们在web应用当中配置了多个过滤器，形成了这样一个过滤器链以及过滤器链的执行顺序。下面我们通过idea来验证下过滤器链。</p><p>验证步骤：</p><ol><li>在filter包下再来新建一个Filter过滤器类：AbcFilter</li><li>在AbcFilter过滤器中编写放行前和放行后逻辑</li><li>配置AbcFilter过滤器拦截请求路径为：&#x2F;* </li><li>重启SpringBoot服务，查看DemoFilter、AbcFilter的执行日志</li></ol><p><img src="/assets/image-20230107085552176.png" alt="image-20230107085552176"></p><p><strong>AbcFilter过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbcFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Abc 拦截到了请求... 放行前逻辑&quot;</span>);<br><br>        <span class="hljs-comment">//放行</span><br>        chain.doFilter(request,response);<br><br>        System.out.println(<span class="hljs-string">&quot;Abc 拦截到了请求... 放行后逻辑&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DemoFilter过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行前逻辑.....&quot;</span>);<br><br>        <span class="hljs-comment">//放行请求</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行后逻辑.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开浏览器访问登录接口：</p><p><img src="/assets/image-20230107090425999.png" alt="image-20230107090425999"></p><p>通过控制台日志的输出，大家发现AbcFilter先执行DemoFilter后执行，这是为什么呢？</p><p>其实是和过滤器的类名有关系。以注解方式配置的Filter过滤器，它的执行优先级是按时过滤器类名的自动排序确定的，类名排名越靠前，优先级越高。</p><p>假如我们想让DemoFilter先执行，怎么办呢？答案就是修改类名。</p><p>测试：修改AbcFilter类名为XbcFilter，运行程序查看控制台日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XbcFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Xbc 拦截到了请求...放行前逻辑&quot;</span>);<br><br>        <span class="hljs-comment">//放行</span><br>        chain.doFilter(request,response);<br><br>        System.out.println(<span class="hljs-string">&quot;Xbc 拦截到了请求...放行后逻辑&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230107093757050.png" alt="image-20230107093757050"></p><p>到此，关于过滤器的使用细节，我们已经全部介绍完毕了。</p><h4 id="2-4-3-登录校验-Filter"><a href="#2-4-3-登录校验-Filter" class="headerlink" title="2.4.3 登录校验-Filter"></a>2.4.3 登录校验-Filter</h4><h5 id="2-4-3-1-分析"><a href="#2-4-3-1-分析" class="headerlink" title="2.4.3.1 分析"></a>2.4.3.1 分析</h5><p>过滤器Filter的快速入门以及使用细节我们已经介绍完了，接下来最后一步，我们需要使用过滤器Filter来完成案例当中的登录校验功能。</p><p><img src="/assets/image-20230107095010089.png" alt="image-20230107095010089"></p><p>我们先来回顾下前面分析过的登录校验的基本流程：</p><ul><li><p>要进入到后台管理系统，我们必须先完成登录操作，此时就需要访问登录接口login。</p></li><li><p>登录成功之后，我们会在服务端生成一个JWT令牌，并且把JWT令牌返回给前端，前端会将JWT令牌存储下来。</p></li><li><p>在后续的每一次请求当中，都会将JWT令牌携带到服务端，请求到达服务端之后，要想去访问对应的业务功能，此时我们必须先要校验令牌的有效性。</p></li><li><p>对于校验令牌的这一块操作，我们使用登录校验的过滤器，在过滤器当中来校验令牌的有效性。如果令牌是无效的，就响应一个错误的信息，也不会再去放行访问对应的资源了。如果令牌存在，并且它是有效的，此时就会放行去访问对应的web资源，执行相应的业务操作。</p></li></ul><p>大概清楚了在Filter过滤器的实现步骤了，那在正式开发登录校验过滤器之前，我们思考两个问题：</p><ol><li><p>所有的请求，拦截到了之后，都需要校验令牌吗？</p><ul><li>答案：<strong>登录请求例外</strong></li></ul></li><li><p>拦截到请求后，什么情况下才可以放行，执行业务操作？</p><ul><li>答案：<strong>有令牌，且令牌校验通过(合法)；否则都返回未登录错误结果</strong></li></ul></li></ol><h5 id="2-4-3-2-具体流程"><a href="#2-4-3-2-具体流程" class="headerlink" title="2.4.3.2 具体流程"></a>2.4.3.2 具体流程</h5><p>我们要完成登录校验，主要是利用Filter过滤器实现，而Filter过滤器的流程步骤：</p><p><img src="/assets/image-20230112122130564.png" alt="image-20230112122130564"> </p><p>基于上面的业务流程，我们分析出具体的操作步骤：</p><ol><li>获取请求url</li><li>判断请求url中是否包含login，如果包含，说明是登录操作，放行</li><li>获取请求头中的令牌（token）</li><li>判断令牌是否存在，如果不存在，返回错误结果（未登录）</li><li>解析token，如果解析失败，返回错误结果（未登录）</li><li>放行</li></ol><h5 id="2-4-3-3-代码实现"><a href="#2-4-3-3-代码实现" class="headerlink" title="2.4.3.3 代码实现"></a>2.4.3.3 代码实现</h5><p>分析清楚了以上的问题后，我们就参照接口文档来开发登录功能了，登录接口描述如下：</p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/login<br><br>请求方式：POST<br><br>接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 <br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>必须</td><td>用户名</td></tr><tr><td>password</td><td>string</td><td>必须</td><td>密码</td></tr></tbody></table><p>请求数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinyong&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>备注说明</p><p>用户登录成功后，系统会自动下发JWT令牌，然后在后续的每次请求中，都需要在请求头header中携带到服务端，请求头的名称为 token ，值为 登录时下发的JWT令牌。</p><p>如果检测到用户未登录，则会返回如下固定错误信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NOT_LOGIN&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>登录校验过滤器：LoginCheckFilter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <span class="hljs-comment">//拦截所有请求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-comment">//前置：强制转换为http协议的请求对象、响应对象 （转换原因：要使用子类中特有方法）</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) servletResponse;<br><br>        <span class="hljs-comment">//1.获取请求url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getRequestURL().toString();<br>        log.info(<span class="hljs-string">&quot;请求路径：&#123;&#125;&quot;</span>, url); <span class="hljs-comment">//请求路径：http://localhost:8080/login</span><br><br><br>        <span class="hljs-comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span><br>        <span class="hljs-keyword">if</span>(url.contains(<span class="hljs-string">&quot;/login&quot;</span>))&#123;<br>            chain.doFilter(request, response);<span class="hljs-comment">//放行请求</span><br>            <span class="hljs-keyword">return</span>;<span class="hljs-comment">//结束当前方法的执行</span><br>        &#125;<br><br><br>        <span class="hljs-comment">//3.获取请求头中的令牌（token）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;从请求头中获取的令牌：&#123;&#125;&quot;</span>,token);<br><br><br>        <span class="hljs-comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(token))&#123;<br>            log.info(<span class="hljs-string">&quot;Token不存在&quot;</span>);<br><br>            <span class="hljs-type">Result</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(responseResult);<br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            <span class="hljs-comment">//响应</span><br>            response.getWriter().write(json);<br><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtils.parseJWT(token);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.info(<span class="hljs-string">&quot;令牌解析失败!&quot;</span>);<br><br>            <span class="hljs-type">Result</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(responseResult);<br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            <span class="hljs-comment">//响应</span><br>            response.getWriter().write(json);<br><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment">//6.放行</span><br>        chain.doFilter(request, response);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述过滤器的功能实现中，我们使用到了一个第三方json处理的工具包fastjson。我们要想使用，需要引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登录校验的过滤器我们编写完成了，接下来我们就可以重新启动服务来做一个测试：</p><blockquote><p>测试前先把之前所编写的测试使用的过滤器，暂时注释掉。直接将@WebFilter注解给注释掉即可。</p></blockquote><ul><li><p>测试1：未登录是否可以访问部门管理页面</p><p>首先关闭浏览器，重新打开浏览器，在地址栏中输入：<a href="http://localhost:9528/#/system/dept">http://localhost:9528/#/system/dept</a></p><p>由于用户没有登录，登录校验过滤器返回错误信息，前端页面根据返回的错误信息结果，自动跳转到登录页面了</p><p><img src="/assets/image-20230105085212629.png" alt="image-20230105085212629"></p></li><li><p>测试2：先进行登录操作，再访问部门管理页面</p><p>登录校验成功之后，可以正常访问相关业务操作页面</p><p><img src="/assets/image-20230107102922550.png" alt="image-20230107102922550"></p></li></ul><h3 id="2-5-拦截器Interceptor"><a href="#2-5-拦截器Interceptor" class="headerlink" title="2.5 拦截器Interceptor"></a>2.5 拦截器Interceptor</h3><p>学习完了过滤器Filter之后，接下来我们继续学习拦截器Interseptor。</p><p>拦截器我们主要分为三个方面进行讲解：</p><ol><li>介绍下什么是拦截器，并通过快速入门程序上手拦截器</li><li>拦截器的使用细节</li><li>通过拦截器Interceptor完成登录校验功能</li></ol><p>我们先学习第一块内容：拦截器快速入门</p><h4 id="2-5-1-快速入门"><a href="#2-5-1-快速入门" class="headerlink" title="2.5.1 快速入门"></a>2.5.1 快速入门</h4><p>什么是拦截器？</p><ul><li>是一种动态拦截方法调用的机制，类似于过滤器。</li><li>拦截器是Spring框架中提供的，用来动态拦截控制器方法的执行。</li></ul><p>拦截器的作用：</p><ul><li>拦截请求，在指定方法调用前后，根据业务需要执行预先设定的代码。</li></ul><p>在拦截器当中，我们通常也是做一些通用性的操作，比如：我们可以通过拦截器来拦截前端发起的请求，将登录校验的逻辑全部编写在拦截器当中。在校验的过程当中，如发现用户登录了(携带JWT令牌且是合法令牌)，就可以直接放行，去访问spring当中的资源。如果校验时发现并没有登录或是非法令牌，就可以直接给前端响应未登录的错误信息。</p><p>下面我们通过快速入门程序，来学习下拦截器的基本使用。拦截器的使用步骤和过滤器类似，也分为两步：</p><ol><li><p>定义拦截器</p></li><li><p>注册配置拦截器</p></li></ol><p><strong>自定义拦截器：</strong>实现HandlerInterceptor接口，并重写其所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义拦截器</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">//目标资源方法执行前执行。 返回true：放行    返回false：不放行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle .... &quot;</span>);<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//true表示放行</span><br>    &#125;<br><br>    <span class="hljs-comment">//目标资源方法执行后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle ... &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//视图渲染完毕后执行，最后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion .... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>​preHandle方法：目标资源方法执行前执行。 返回true：放行    返回false：不放行</p><p>​postHandle方法：目标资源方法执行后执行</p><p>​afterCompletion方法：视图渲染完毕后执行，最后执行</p></blockquote><p><strong>注册配置拦截器</strong>：实现WebMvcConfigurer接口，并重写addInterceptors方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//自定义的拦截器对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>       <span class="hljs-comment">//注册自定义拦截器对象</span><br>        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<span class="hljs-comment">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动SpringBoot服务，打开postman测试：</p><p><img src="/assets/image-20230107105224741.png" alt="image-20230107105224741"></p><p><img src="/assets/image-20230107105415120.png" alt="image-20230107105415120"></p><p>接下来我们再来做一个测试：将拦截器中返回值改为false</p><p>使用postman，再次点击send发送请求后，没有响应数据，说明请求被拦截了没有放行</p><p><img src="/assets/image-20230107105815511.png" alt="image-20230107105815511"></p><h4 id="2-5-2-Interceptor详解"><a href="#2-5-2-Interceptor详解" class="headerlink" title="2.5.2 Interceptor详解"></a>2.5.2 Interceptor详解</h4><p>拦截器的入门程序完成之后，接下来我们来介绍拦截器的使用细节。拦截器的使用细节我们主要介绍两个部分：</p><ol><li>拦截器的拦截路径配置</li><li>拦截器的执行流程</li></ol><h5 id="2-5-2-1-拦截路径"><a href="#2-5-2-1-拦截路径" class="headerlink" title="2.5.2.1 拦截路径"></a>2.5.2.1 拦截路径</h5><p>首先我们先来看拦截器的拦截路径的配置，在注册配置拦截器的时候，我们要指定拦截器的拦截路径，通过<code>addPathPatterns(&quot;要拦截路径&quot;)</code>方法，就可以指定要拦截哪些资源。</p><p>在入门程序中我们配置的是<code>/**</code>，表示拦截所有资源，而在配置拦截器时，不仅可以指定要拦截哪些资源，还可以指定不拦截哪些资源，只需要调用<code>excludePathPatterns(&quot;不拦截路径&quot;)</code>方法，指定哪些资源不需要拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//拦截器对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//注册自定义拦截器对象</span><br>        registry.addInterceptor(loginCheckInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<span class="hljs-comment">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<span class="hljs-comment">//设置不拦截的请求路径</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在拦截器中除了可以设置<code>/**</code>拦截所有资源外，还有一些常见拦截路径设置：</p><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr><tr><td>&#x2F;depts&#x2F;**</td><td>&#x2F;depts下的任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td></tr></tbody></table><p>下面主要来演示下<code>/**</code>与<code>/*</code>的区别： </p><ul><li>修改拦截器配置，把拦截路径设置为<code>/*</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//拦截器对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>       <span class="hljs-comment">//注册自定义拦截器对象</span><br>        registry.addInterceptor(loginCheckInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/*&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<span class="hljs-comment">//设置不拦截的请求路径</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用postman测试：<a href="http://localhost:8080/emps/1">http://localhost:8080/emps/1</a> </p><p><img src="/assets/image-20230107111525558.png" alt="image-20230107111525558"></p><p>控制台没有输出拦截器中的日志信息，说明<code>/*</code>没有匹配到拦截路径<code>/emp/1</code> 。</p><p><img src="/assets/image-20230107111812963.png" alt="image-20230107111812963"></p><h5 id="2-5-2-2-执行流程"><a href="#2-5-2-2-执行流程" class="headerlink" title="2.5.2.2 执行流程"></a>2.5.2.2 执行流程</h5><p>介绍完拦截路径的配置之后，接下来我们再来介绍拦截器的执行流程。通过执行流程，大家就能够清晰的知道过滤器与拦截器的执行时机。</p><p><img src="/assets/image-20230107112136151.png" alt="image-20230107112136151"></p><ul><li><p>当我们打开浏览器来访问部署在web服务器当中的web应用时，此时我们所定义的过滤器会拦截到这次请求。拦截到这次请求之后，它会先执行放行前的逻辑，然后再执行放行操作。而由于我们当前是基于springboot开发的，所以放行之后是进入到了spring的环境当中，也就是要来访问我们所定义的controller当中的接口方法。</p></li><li><p>Tomcat并不识别所编写的Controller程序，但是它识别Servlet程序，所以在Spring的Web环境中提供了一个非常核心的Servlet：DispatcherServlet（前端控制器），所有请求都会先进行到DispatcherServlet，再将请求转给Controller。</p></li><li><p>当我们定义了拦截器后，会在执行Controller的方法之前，请求被拦截器拦截住。执行<code>preHandle()</code>方法，这个方法执行完成后需要返回一个布尔类型的值，如果返回true，就表示放行本次操作，才会继续访问controller中的方法；如果返回false，则不会放行（controller中的方法也不会执行）。</p></li><li><p>在controller当中的方法执行完毕之后，再回过来执行<code>postHandle()</code>这个方法以及<code>afterCompletion()</code> 方法，然后再返回给DispatcherServlet，最终再来执行过滤器当中放行后的这一部分逻辑的逻辑。执行完毕之后，最终给浏览器响应数据。</p></li></ul><p>接下来我们就来演示下过滤器和拦截器同时存在的执行流程：</p><ul><li>开启LoginCheckInterceptor拦截器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle .... &quot;</span>);<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//true表示放行</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle ... &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion .... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//拦截器对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//注册自定义拦截器对象</span><br>        registry.addInterceptor(loginCheckInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<span class="hljs-comment">//拦截所有请求</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<span class="hljs-comment">//不拦截登录请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>开启DemoFilter过滤器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行前逻辑.....&quot;</span>);<br><br>        <span class="hljs-comment">//放行请求</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>        System.out.println(<span class="hljs-string">&quot;DemoFilter   放行后逻辑.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启SpringBoot服务后，清空日志，打开Postman，测试查询部门：</p><p><img src="/assets/image-20230107113653871.png" alt="image-20230107113653871"></p><p><img src="/assets/image-20230107114008004.png" alt="image-20230107114008004"></p><p>以上就是拦截器的执行流程。通过执行流程分析，大家应该已经清楚了过滤器和拦截器之间的区别，其实它们之间的区别主要是两点：</p><ul><li>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口。</li><li>拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只会拦截Spring环境中的资源。</li></ul><h4 id="2-5-3-登录校验-Interceptor"><a href="#2-5-3-登录校验-Interceptor" class="headerlink" title="2.5.3 登录校验- Interceptor"></a>2.5.3 登录校验- Interceptor</h4><p>讲解完了拦截器的基本操作之后，接下来我们需要完成最后一步操作：通过拦截器来完成案例当中的登录校验功能。</p><p>登录校验的业务逻辑以及操作步骤我们前面已经分析过了，和登录校验Filter过滤器当中的逻辑是完全一致的。现在我们只需要把这个技术方案由原来的过滤器换成拦截器interceptor就可以了。</p><p><strong>登录校验拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义拦截器</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//当前拦截器对象由Spring创建和管理</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">//前置方式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle .... &quot;</span>);<br>        <span class="hljs-comment">//1.获取请求url</span><br>        <span class="hljs-comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span><br><br>        <span class="hljs-comment">//3.获取请求头中的令牌（token）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;从请求头中获取的令牌：&#123;&#125;&quot;</span>,token);<br><br>        <span class="hljs-comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(token))&#123;<br>            log.info(<span class="hljs-string">&quot;Token不存在&quot;</span>);<br><br>            <span class="hljs-comment">//创建响应结果对象</span><br>            <span class="hljs-type">Result</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(responseResult);<br>            <span class="hljs-comment">//设置响应头（告知浏览器：响应的数据类型为json、响应的数据编码表为utf-8）</span><br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            <span class="hljs-comment">//响应</span><br>            response.getWriter().write(json);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//不放行</span><br>        &#125;<br><br>        <span class="hljs-comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtils.parseJWT(token);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.info(<span class="hljs-string">&quot;令牌解析失败!&quot;</span>);<br><br>            <span class="hljs-comment">//创建响应结果对象</span><br>            <span class="hljs-type">Result</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(responseResult);<br>            <span class="hljs-comment">//设置响应头</span><br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            <span class="hljs-comment">//响应</span><br>            response.getWriter().write(json);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//6.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>注册配置拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">//拦截器对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>       <span class="hljs-comment">//注册自定义拦截器对象</span><br>        registry.addInterceptor(loginCheckInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>登录校验的拦截器编写完成后，接下来我们就可以重新启动服务来做一个测试： （<strong>关闭登录校验Filter过滤器</strong>）</p><ul><li><p>测试1：未登录是否可以访问部门管理页面</p><p>首先关闭浏览器，重新打开浏览器，在地址栏中输入：<a href="http://localhost:9528/#/system/dept">http://localhost:9528/#/system/dept</a></p><p>由于用户没有登录，校验机制返回错误信息，前端页面根据返回的错误信息结果，自动跳转到登录页面了</p><p><img src="/assets/image-20230105085212629.png" alt="image-20230105085212629"></p></li><li><p>测试2：先进行登录操作，再访问部门管理页面</p><p>登录校验成功之后，可以正常访问相关业务操作页面</p><p><img src="/assets/image-20230107102922550.png" alt="image-20230107102922550"></p></li></ul><p>到此我们也就验证了所开发的登录校验的拦截器也是没问题的。登录校验的过滤器和拦截器，我们只需要使用其中的一种就可以了。</p><h2 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3. 异常处理"></a>3. 异常处理</h2><h3 id="3-1-当前问题"><a href="#3-1-当前问题" class="headerlink" title="3.1 当前问题"></a>3.1 当前问题</h3><p>登录功能和登录校验功能我们都实现了，下面我们学习下今天最后一块技术点：异常处理。首先我们先来看一下系统出现异常之后会发生什么现象，再来介绍异常处理的方案。</p><p>我们打开浏览器，访问系统中的新增部门操作，系统中已经有了 “就业部” 这个部门，我们再来增加一个就业部，看看会发生什么现象。</p><img src="assets/image-20230112125651073.png" alt="image-20230112125651073" style="zoom: 80%;" />   <p>点击确定之后，窗口关闭了，页面没有任何反应，就业部也没有添加上。 而此时，大家会发现，网络请求报错了。</p><img src="assets/image-20230112125737863.png" alt="image-20230112125737863" style="zoom:80%;" /> <p>状态码为500，表示服务器端异常，我们打开idea，来看一下，服务器端出了什么问题。</p><p><img src="/assets/image-20230112125826602.png" alt="image-20230112125826602"> </p><p>上述错误信息的含义是，dept部门表的name字段的值 就业部 重复了，因为在数据库表dept中已经有了就业部，我们之前设计这张表时，为name字段建议了唯一约束，所以该字段的值是不能重复的。</p><p>而当我们再添加就业部，这个部门时，就违反了唯一约束，此时就会报错。</p><p>我们来看一下出现异常之后，最终服务端给前端响应回来的数据长什么样。</p><p><img src="/assets/image-20230112130253486.png" alt="image-20230112130253486"> </p><p>响应回来的数据是一个JSON格式的数据。但这种JSON格式的数据还是我们开发规范当中所提到的统一响应结果Result吗？显然并不是。由于返回的数据不符合开发规范，所以前端并不能解析出响应的JSON数据。</p><p>接下来我们需要思考的是出现异常之后，当前案例项目的异常是怎么处理的？</p><ul><li>答案：没有做任何的异常处理</li></ul><p><img src="/assets/image-20230107121909087.png" alt="image-20230107121909087"></p><p>当我们没有做任何的异常处理时，我们三层架构处理异常的方案：</p><ul><li>Mapper接口在操作数据库的时候出错了，此时异常会往上抛(谁调用Mapper就抛给谁)，会抛给service。 </li><li>service 中也存在异常了，会抛给controller。</li><li>而在controller当中，我们也没有做任何的异常处理，所以最终异常会再往上抛。最终抛给框架之后，框架就会返回一个JSON格式的数据，里面封装的就是错误的信息，但是框架返回的JSON格式的数据并不符合我们的开发规范。</li></ul><h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><p>那么在三层构架项目中，出现了异常，该如何处理?</p><ul><li>方案一：在所有Controller的所有方法中进行try…catch处理<ul><li>缺点：代码臃肿（不推荐）</li></ul></li><li>方案二：全局异常处理器<ul><li>好处：简单、优雅（推荐）</li></ul></li></ul><p><img src="/assets/image-20230107122904214.png" alt="image-20230107122904214"></p><h3 id="3-3-全局异常处理器"><a href="#3-3-全局异常处理器" class="headerlink" title="3.3 全局异常处理器"></a>3.3 全局异常处理器</h3><p>我们该怎么样定义全局异常处理器？</p><ul><li>定义全局异常处理器非常简单，就是定义一个类，在类上加上一个注解@RestControllerAdvice，加上这个注解就代表我们定义了一个全局异常处理器。</li><li>在全局异常处理器当中，需要定义一个方法来捕获异常，在这个方法上需要加上注解@ExceptionHandler。通过@ExceptionHandler注解当中的value属性来指定我们要捕获的是哪一类型的异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-comment">//处理异常</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span> <span class="hljs-comment">//指定能够处理的异常类型</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">ex</span><span class="hljs-params">(Exception e)</span>&#123;<br>        e.printStackTrace();<span class="hljs-comment">//打印堆栈中的异常信息</span><br><br>        <span class="hljs-comment">//捕获到异常之后，响应一个标准的Result</span><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;对不起,操作失败,请联系管理员&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@RestControllerAdvice &#x3D; @ControllerAdvice + @ResponseBody</p><p>处理异常的方法返回值会转换为json后再响应给前端</p></blockquote><p>重新启动SpringBoot服务，打开浏览器，再来测试一下添加部门这个操作，我们依然添加已存在的 “就业部” 这个部门：</p><p><img src="/assets/image-20230112131232032.png" alt="image-20230112131232032"> </p><p><img src="/assets/image-20230112131135272.png" alt="image-20230112131135272"> </p><p>此时，我们可以看到，出现异常之后，异常已经被全局异常处理器捕获了。然后返回的错误信息，被前端程序正常解析，然后提示出了对应的错误提示信息。</p><p>以上就是全局异常处理器的使用，主要涉及到两个注解：</p><ul><li>@RestControllerAdvice  &#x2F;&#x2F;表示当前类为全局异常处理器</li><li>@ExceptionHandler  &#x2F;&#x2F;指定可以捕获哪种类型的异常进行处理</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35SpringBootWeb案例2</title>
    <link href="/2023/12/10/day35-SpringBootWeb%E6%A1%88%E4%BE%8B-2/"/>
    <url>/2023/12/10/day35-SpringBootWeb%E6%A1%88%E4%BE%8B-2/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBootWeb案例"><a href="#SpringBootWeb案例" class="headerlink" title="SpringBootWeb案例"></a>SpringBootWeb案例</h1><p>前面我们已经实现了员工信息的条件分页查询以及删除操作。 关于员工管理的功能，还有两个需要实现：</p><ul><li>新增员工</li><li>修改员工</li></ul><p><img src="/assets/image-20221216160009145.png" alt="image-20221216160009145"></p><p>首先我们先完成”新增员工”的功能开发，再完成”修改员工”的功能开发。而在”新增员工”中，需要添加头像，而头像需要用到”文件上传”技术。 当整个员工管理功能全部开发完成之后，我们再通过配置文件来优化一些内容。</p><p>综上所述，我们今天的课程内容包含以下四个部分：</p><ul><li>新增员工</li><li>文件上传</li><li>修改员工</li><li>配置文件</li></ul><h2 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1. 新增员工"></a>1. 新增员工</h2><h3 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h3><p><img src="/assets/image-20221216162622582.png" alt="image-20221216162622582"> </p><p>在新增用户时，我们需要保存用户的基本信息，并且还需要上传的员工的图片，目前我们先完成第一步操作，保存用户的基本信息。 </p><h3 id="1-2-接口文档"><a href="#1-2-接口文档" class="headerlink" title="1.2 接口文档"></a>1.2 接口文档</h3><p>我们参照接口文档来开发新增员工功能</p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/emps<br><br>请求方式：POST<br><br>接口描述：该接口用于添加员工的信息<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>必须</td><td>用户名</td></tr><tr><td>name</td><td>string</td><td>必须</td><td>姓名</td></tr><tr><td>gender</td><td>number</td><td>必须</td><td>性别, 说明: 1 男, 2 女</td></tr><tr><td>image</td><td>string</td><td>非必须</td><td>图像</td></tr><tr><td>deptId</td><td>number</td><td>非必须</td><td>部门id</td></tr><tr><td>entrydate</td><td>string</td><td>非必须</td><td>入职日期</td></tr><tr><td>job</td><td>number</td><td>非必须</td><td>职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师</td></tr></tbody></table><p>请求数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-03-07-37-38222.jpg&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linpingzhi&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;林平之&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-18&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-思路分析"><a href="#1-3-思路分析" class="headerlink" title="1.3 思路分析"></a>1.3 思路分析</h3><p>新增员工的具体的流程：</p><p><img src="/assets/image-20221216170946166.png" alt="image-20221216170946166"></p><blockquote><p>接口文档规定：</p><ul><li>请求路径：&#x2F;emps</li><li>请求方式：POST</li><li>请求参数：Json格式数据</li><li>响应数据：Json格式数据</li></ul><p>问题1：如何限定请求方式是POST？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br></code></pre></td></tr></table></figure><p>问题2：怎么在controller中接收json格式的请求参数？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestBody</span>  <span class="hljs-comment">//把前端传递的json数据填充到实体类中</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="1-4-功能开发"><a href="#1-4-功能开发" class="headerlink" title="1.4 功能开发"></a>1.4 功能开发</h3><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//新增</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span>&#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;新增员工, emp:&#123;&#125;&quot;</span>,emp);<br>        <span class="hljs-comment">//调用业务层新增功能</span><br>        empService.save(emp);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存员工信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Emp emp)</span>;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        <span class="hljs-comment">//补全数据</span><br>        emp.setCreateTime(LocalDateTime.now());<br>        emp.setUpdateTime(LocalDateTime.now());<br>        <span class="hljs-comment">//调用添加方法</span><br>        empMapper.insert(emp);<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//新增员工</span><br>    <span class="hljs-meta">@Insert(&quot;insert into emp (username, name, gender, image, job, entrydate, dept_id, create_time, update_time) &quot; +</span><br><span class="hljs-meta">            &quot;values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;);&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-5-功能测试"><a href="#1-5-功能测试" class="headerlink" title="1.5 功能测试"></a>1.5 功能测试</h3><p>代码开发完成后，重启服务器，打开Postman发送 POST 请求，请求路径：<a href="http://localhost:8080/emps">http://localhost:8080/emps</a></p><p><img src="/assets/image-20221216181017910.png" alt="image-20221216181017910"></p><h3 id="1-6-前后端联调"><a href="#1-6-前后端联调" class="headerlink" title="1.6 前后端联调"></a>1.6 前后端联调</h3><p>功能测试通过后，我们再进行通过打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221216181511401.png" alt="image-20221216181511401"></p><p><img src="/assets/image-20221216181628331.png" alt="image-20221216181628331"></p><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><p>在我们完成的新增员工功能中，还存在一个问题：没有头像(图片缺失)</p><p><img src="/assets/image-20221216200653717.png" alt="image-20221216200653717"></p><p>上述问题，需要我们通过文件上传技术来解决。下面我们就进入到文件上传技术的学习。</p><p>文件上传技术这块我们主要讲解三个方面：首先我们先对文件上传做一个整体的介绍，接着再学习文件上传的本地存储方式，最后学习云存储方式。</p><p>接下来我们就先来学习下什么是文件上传。</p><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>文件上传，是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p><p>文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p><p><img src="/assets/image-20221216203904713.png" alt="image-20221216203904713"></p><blockquote><p>在我们的案例中，在新增员工的时候，要上传员工的头像，此时就会涉及到文件上传的功能。在进行文件上传时，我们点击加号或者是点击图片，就可以选择手机或者是电脑本地的图片文件了。当我们选择了某一个图片文件之后，这个文件就会上传到服务器，从而完成文件上传的操作。</p></blockquote><p>想要完成文件上传这个功能需要涉及到两个部分：</p><ol><li>前端程序</li><li>服务端程序</li></ol><p>我们先来看看在前端程序中要完成哪些代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    头像: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传文件的原始form表单，要求表单必须具备以下三点（上传文件页面三要素）：</p><ul><li><p>表单必须有file域，用于选择要上传的文件</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>表单提交方式必须为POST</p><blockquote><p>通常上传的文件会比较大，所以需要使用 POST 提交方式</p></blockquote></li><li><p>表单的编码类型enctype必须要设置为：multipart&#x2F;form-data</p><blockquote><p>普通默认的编码格式是不适合传输大型的二进制数据的，所以在文件上传时，表单的编码格式必须设置为multipart&#x2F;form-data</p></blockquote></li></ul><p>前端页面的3要素我们了解后，接下来我们就来验证下所讲解的文件上传3要素。</p><p>在提供的”课程资料”中有一个名叫”文件上传”的文件夹，直接将里的”upload.html”文件，复制到springboot项目工程下的static目录里面。</p><p><img src="/assets/image-20221216210054136.png" alt="image-20221216210054136"></p><p>下面我们来验证：删除form表单中enctype属性值，会是什么情况？</p><ol><li>在IDEA中直接使用浏览器打开upload.html页面</li></ol><p><img src="/assets/image-20221216210643628.png" alt="image-20221216210643628"></p><ol start="2"><li>选择要上传的本地文件</li></ol><p><img src="/assets/image-20221216210938612.png" alt="image-20221216210938612"></p><ol start="3"><li>点击”提交”按钮，进入到开发者模式观察</li></ol><p><img src="/assets/image-20221216211629307.png" alt="image-20221216211629307"></p><p><img src="/assets/image-20221216212152607.png" alt="image-20221216212152607"></p><p>我们再来验证：设置form表单中enctype属性值为multipart&#x2F;form-data，会是什么情况？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>       姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>       年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>       头像: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221216215320623.png" alt="image-20221216215320623"></p><p><img src="/assets/image-20221216215041710.png" alt="image-20221216215041710"></p><p>知道了前端程序中需要设置上传文件页面三要素，那我们的后端程序又是如何实现的呢？</p><ul><li><p>首先在服务端定义这么一个controller，用来进行文件上传，然后在controller当中定义一个方法来处理<code>/upload</code> 请求</p></li><li><p>在定义的方法中接收提交过来的数据 （方法中的形参名和请求参数的名字保持一致）</p><ul><li>用户名：String  name</li><li>年龄： Integer  age</li><li>文件： MultipartFile  image</li></ul><blockquote><p>Spring中提供了一个API：MultipartFile，使用这个API就可以来接收到上传的文件</p></blockquote></li></ul><p><img src="/assets/image-20221216215930807.png" alt="image-20221216215930807"></p><blockquote><p>问题：如果表单项的名字和方法中形参名不一致，该怎么办？</p><ul><li><pre><code class="javascript">public Result upload(String username,                     Integer age,                      MultipartFile file) //file形参名和请求参数名image不一致<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><br>解决：使用<span class="hljs-variable">@RequestParam</span>注解进行参数绑定<br><br>- ~~~java<br>  public Result <span class="hljs-built_in">upload</span>(String username,<br>                       Integer age, <br>                       <span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;image&quot;</span>) MultipartFile file)<br></code></pre></td></tr></table></figure></code></pre></li></ul></blockquote><p><strong>UploadController代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(String username, Integer age, MultipartFile image)</span>  &#123;<br>        log.info(<span class="hljs-string">&quot;文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,username,age,image);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>后端程序编写完成之后，打个断点，以debug方式启动SpringBoot项目</p></blockquote><p><img src="/assets/image-20221216222533720.png" alt="image-20221216222533720"></p><blockquote><p>打开浏览器输入：<a href="http://localhost:8080/upload.html">http://localhost:8080/upload.html</a> ， 录入数据并提交</p></blockquote><p><img src="/assets/image-20221216222412510.png" alt="image-20221216222412510"></p><p>通过后端程序控制台可以看到，上传的文件是存放在一个临时目录</p><p><img src="/assets/image-20221216222802617.png" alt="image-20221216222802617"></p><blockquote><p>打开临时目录可以看到以下内容：</p></blockquote><p><img src="/assets/image-20221216223328710.png" alt="image-20221216223328710"></p><blockquote><p>表单提交的三项数据(姓名、年龄、文件)，分别存储在不同的临时文件中：</p></blockquote><p><img src="/assets/image-20221216223300846.png" alt="image-20221216223300846"></p><blockquote><p>当我们程序运行完毕之后，这个临时文件会自动删除。 </p><p>所以，我们如果想要实现文件上传，需要将这个临时文件，要转存到我们的磁盘目录中。</p></blockquote><h3 id="2-2-本地存储"><a href="#2-2-本地存储" class="headerlink" title="2.2 本地存储"></a>2.2 本地存储</h3><p>前面我们已分析了文件上传功能前端和后端的基础代码实现，文件上传时在服务端会产生一个临时文件，请求响应完成之后，这个临时文件被自动删除，并没有进行保存。下面呢，我们就需要完成将上传的文件保存在服务器的本地磁盘上。</p><p>代码实现：</p><ol><li>在服务器本地磁盘上创建images目录，用来存储上传的文件（例：E盘创建images目录）</li><li>使用MultipartFile类提供的API方法，把临时文件转存到本地磁盘目录下</li></ol><blockquote><p>MultipartFile 常见方法： </p><ul><li>String  getOriginalFilename();  &#x2F;&#x2F;获取原始文件名</li><li>void  transferTo(File dest);     &#x2F;&#x2F;将接收的文件转存到磁盘文件中</li><li>long  getSize();     &#x2F;&#x2F;获取文件的大小，单位：字节</li><li>byte[]  getBytes();    &#x2F;&#x2F;获取文件内容的字节数组</li><li>InputStream  getInputStream();    &#x2F;&#x2F;获取接收到的文件内容的输入流</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(String username, Integer age, MultipartFile image)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        log.info(<span class="hljs-string">&quot;文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,username,age,image);<br><br>        <span class="hljs-comment">//获取原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> image.getOriginalFilename();<br><br>        <span class="hljs-comment">//将文件存储在服务器的磁盘目录</span><br>        image.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/images/&quot;</span>+originalFilename));<br><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>利用postman测试：</p><blockquote><p>注意：请求参数名和controller方法形参名保持一致</p></blockquote><p><img src="/assets/image-20221227211742547.png" alt="image-20221227211742547"></p><p><img src="/assets/image-20221227214219279.png" alt="image-20221227214219279"></p><p><img src="/assets/image-20221227214753358.png" alt="image-20221227214753358"></p><p>通过postman测试，我们发现文件上传是没有问题的。但是由于我们是使用原始文件名作为所上传文件的存储名字，当我们再次上传一个名为1.jpg文件时，发现会把之前已经上传成功的文件覆盖掉。</p><p>解决方案：保证每次上传文件时文件名都唯一的（使用UUID获取随机文件名）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(String username, Integer age, MultipartFile image)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        log.info(<span class="hljs-string">&quot;文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,username,age,image);<br><br>        <span class="hljs-comment">//获取原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> image.getOriginalFilename();<br><br>        <span class="hljs-comment">//构建新的文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">extname</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<span class="hljs-comment">//文件扩展名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newFileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString()+extname;<span class="hljs-comment">//随机名+文件扩展名</span><br><br>        <span class="hljs-comment">//将文件存储在服务器的磁盘目录</span><br>        image.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/images/&quot;</span>+newFileName));<br><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在解决了文件名唯一性的问题后，我们再次上传一个较大的文件(超出1M)时发现，后端程序报错：</p><p><img src="/assets/image-20221227223851924.png" alt="image-20221227223851924"></p><p>报错原因呢是因为：在SpringBoot中，文件上传时默认单个文件最大大小为1M</p><p>那么如果需要上传大文件，可以在application.properties进行如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置单个文件最大上传大小</span><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure><p>到时此，我们文件上传的本地存储方式已完成了。但是这种本地存储方式还存在一问题： </p><p><img src="/assets/image-20220904200320964.png" alt="image-20220904200320964"> </p><p>如果直接存储在服务器的磁盘目录中，存在以下缺点：</p><ul><li>不安全：磁盘如果损坏，所有的文件就会丢失</li><li>容量有限：如果存储大量的图片，磁盘空间有限(磁盘不可能无限制扩容)</li><li>无法直接访问</li></ul><p>为了解决上述问题呢，通常有两种解决方案：</p><ul><li>自己搭建存储服务器，如：fastDFS 、MinIO</li><li>使用现成的云服务，如：阿里云，腾讯云，华为云</li></ul><h3 id="2-3-阿里云OSS"><a href="#2-3-阿里云OSS" class="headerlink" title="2.3 阿里云OSS"></a>2.3 阿里云OSS</h3><h4 id="2-3-1-准备"><a href="#2-3-1-准备" class="headerlink" title="2.3.1 准备"></a>2.3.1 准备</h4><p>阿里云是阿里巴巴集团旗下全球领先的云计算公司，也是国内最大的云服务提供商 。</p><p><img src="/assets/image-20221229093412464.png" alt="image-20221229093412464"></p><blockquote><p>云服务指的就是通过互联网对外提供的各种各样的服务，比如像：语音服务、短信服务、邮件服务、视频直播服务、文字识别服务、对象存储服务等等。</p><p>当我们在项目开发时需要用到某个或某些服务，就不需要自己来开发了，可以直接使用阿里云提供好的这些现成服务就可以了。比如：在项目开发当中，我们要实现一个短信发送的功能，如果我们项目组自己实现，将会非常繁琐，因为你需要和各个运营商进行对接。而此时阿里云完成了和三大运营商对接，并对外提供了一个短信服务。我们项目组只需要调用阿里云提供的短信服务，就可以很方便的来发送短信了。这样就降低了我们项目的开发难度，同时也提高了项目的开发效率。（大白话：别人帮我们实现好了功能，我们只要调用即可）</p><p>云服务提供商给我们提供的软件服务通常是需要收取一部分费用的。</p></blockquote><p>阿里云对象存储OSS（Object Storage Service），是一款海量、安全、低成本、高可靠的云存储服务。使用OSS，您可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件。</p><p><img src="/assets/image-20220904200642064.png" alt="image-20220904200642064"> </p><p>在我们使用了阿里云OSS对象存储服务之后，我们的项目当中如果涉及到文件上传这样的业务，在前端进行文件上传并请求到服务端时，在服务器本地磁盘当中就不需要再来存储文件了。我们直接将接收到的文件上传到oss，由 oss帮我们存储和管理，同时阿里云的oss存储服务还保障了我们所存储内容的安全可靠。</p><p><img src="/assets/image-20221229095709505.png" alt="image-20221229095709505"></p><p>那我们学习使用这类云服务，我们主要学习什么呢？其实我们主要学习的是如何在项目当中来使用云服务完成具体的业务功能。而无论使用什么样的云服务，阿里云也好，腾讯云、华为云也罢，在使用第三方的服务时，操作的思路都是一样的。</p><p><img src="/assets/image-20221229093911113.png" alt="image-20221229093911113"></p><blockquote><p>SDK：Software Development Kit 的缩写，软件开发工具包，包括辅助软件开发的依赖（jar包）、代码示例等，都可以叫做SDK。</p><p>简单说，sdk中包含了我们使用第三方云服务时所需要的依赖，以及一些示例代码。我们可以参照sdk所提供的示例代码就可以完成入门程序。</p></blockquote><p>第三方服务使用的通用思路，我们做一个简单介绍之后，接下来我们就来介绍一下我们当前要使用的阿里云oss对象存储服务具体的使用步骤。</p><p><img src="/assets/image-20221229112451120.png" alt="image-20221229112451120"></p><blockquote><p>Bucket：存储空间是用户用于存储对象（Object，就是文件）的容器，所有的对象都必须隶属于某个存储空间。</p></blockquote><p>下面我们根据之前介绍的使用步骤，完成准备工作：</p><ol><li>注册阿里云账户（注册完成后需要实名认证）</li><li>注册完账号之后，就可以登录阿里云</li></ol><p><img src="/assets/image-20220904201839857.png" alt="image-20220904201839857"> </p><ol start="3"><li>通过控制台找到对象存储OSS服务</li></ol><p><img src="/assets/image-20220904201932884.png" alt="image-20220904201932884"> </p><blockquote><p>如果是第一次访问，还需要开通对象存储服务OSS</p></blockquote><p><img src="/assets/image-20220904202537579.png" alt="image-20220904202537579"> </p><p><img src="/assets/image-20220904202618423.png" alt="image-20220904202618423"> </p><ol start="4"><li>开通OSS服务之后，就可以进入到阿里云对象存储的控制台</li></ol><p><img src="/assets/image-20220904201810832.png" alt="image-20220904201810832"> </p><ol start="5"><li>点击左侧的 “Bucket列表”，创建一个Bucket</li></ol><p><img src="/assets/image-20220904202235180.png" alt="image-20220904202235180"> </p><p><img src="/assets/image-20220904202824901.png"></p><blockquote><p>大家可以参照”资料\04. 阿里云oss&quot;中提供的文档，开通阿里云OSS服务。</p></blockquote><h4 id="2-3-2-入门"><a href="#2-3-2-入门" class="headerlink" title="2.3.2 入门"></a>2.3.2 入门</h4><p>阿里云oss 对象存储服务的准备工作我们已经完成了，接下来我们就来完成第二步操作：参照官方所提供的sdk示例来编写入门程序。</p><p>首先我们需要来打开阿里云OSS的官方文档，在官方文档中找到 SDK 的示例代码：</p><p><img src="/assets/image-20221229121848524.png" alt="image-20221229121848524"></p><p><img src="/assets/image-20221229122046597.png" alt="image-20221229122046597"></p><blockquote><p>如果是在实际开发当中，我们是需要从前往后仔细的去阅读这一份文档的，但是由于现在是教学，我们就只挑重点的去看。有兴趣的同学大家下来也可以自己去看一下这份官方文档。</p></blockquote><p><img src="/assets/image-20221229144342148.png" alt="image-20221229144342148"></p><p><img src="/assets/image-20221229160827124.png" alt="image-20221229160827124"></p><p>参照官方提供的SDK，改造一下，即可实现文件上传功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.oss.ClientException;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSException;<br><span class="hljs-keyword">import</span> com.aliyun.oss.model.PutObjectRequest;<br><span class="hljs-keyword">import</span> com.aliyun.oss.model.PutObjectResult;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOssTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;oss-cn-shanghai.aliyuncs.com&quot;</span>;<br>        <br>        <span class="hljs-comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LTAI5t9MZK8iq5T2Av5GLDxX&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc&quot;</span>;<br>        <br>        <span class="hljs-comment">// 填写Bucket名称，例如examplebucket。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;web-framework01&quot;</span>;<br>        <span class="hljs-comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.jpg&quot;</span>;<br>        <span class="hljs-comment">// 填写本地文件的完整路径，例如D:\\localpath\\examplefile.txt。</span><br>        <span class="hljs-comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件流。</span><br>        String filePath= <span class="hljs-string">&quot;C:\\Users\\Administrator\\Pictures\\1.jpg&quot;</span>;<br><br>        <span class="hljs-comment">// 创建OSSClient实例。</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">// 创建PutObjectRequest对象。</span><br>            <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(bucketName, objectName, inputStream);<br>            <span class="hljs-comment">// 设置该属性可以返回response。如果不设置，则返回的response为空。</span><br>            putObjectRequest.setProcess(<span class="hljs-string">&quot;true&quot;</span>);<br>            <span class="hljs-comment">// 创建PutObject请求。</span><br>            <span class="hljs-type">PutObjectResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ossClient.putObject(putObjectRequest);<br>            <span class="hljs-comment">// 如果上传成功，则返回200。</span><br>            System.out.println(result.getResponse().getStatusCode());<br>        &#125; <span class="hljs-keyword">catch</span> (OSSException oe) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span><br>                    + <span class="hljs-string">&quot;but was rejected with an error response for some reason.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());<br>            System.out.println(<span class="hljs-string">&quot;Error Code:&quot;</span> + oe.getErrorCode());<br>            System.out.println(<span class="hljs-string">&quot;Request ID:&quot;</span> + oe.getRequestId());<br>            System.out.println(<span class="hljs-string">&quot;Host ID:&quot;</span> + oe.getHostId());<br>        &#125; <span class="hljs-keyword">catch</span> (ClientException ce) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught an ClientException, which means the client encountered &quot;</span><br>                    + <span class="hljs-string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span><br>                    + <span class="hljs-string">&quot;such as not being able to access the network.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Error Message:&quot;</span> + ce.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ossClient != <span class="hljs-literal">null</span>) &#123;<br>                ossClient.shutdown();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>在以上代码中，需要替换的内容为：</p><ul><li>accessKeyId：阿里云账号AccessKey</li><li>accessKeySecret：阿里云账号AccessKey对应的秘钥</li><li>bucketName：Bucket名称</li><li>objectName：对象名称，在Bucket中存储的对象的名称</li><li>filePath：文件路径</li></ul><p>AccessKey ：</p><p><img src="/assets/image-20221128020105943.png" alt="image-20221128020105943"> </p></blockquote><p>运行以上程序后，会把本地的文件上传到阿里云OSS服务器上：</p><p><img src="/assets/image-20221229161326919.png" alt="image-20221229161326919"></p><h4 id="2-3-3-集成"><a href="#2-3-3-集成" class="headerlink" title="2.3.3 集成"></a>2.3.3 集成</h4><p>阿里云oss对象存储服务的准备工作以及入门程序我们都已经完成了，接下来我们就需要在案例当中集成oss对象存储服务，来存储和管理案例中上传的图片。</p><p><img src="/assets/image-20221229170235632.png" alt="image-20221229170235632"></p><blockquote><p>在新增员工的时候，上传员工的图像，而之所以需要上传员工的图像，是因为将来我们需要在系统页面当中访问并展示员工的图像。而要想完成这个操作，需要做两件事：</p><ol><li>需要上传员工的图像，并把图像保存起来（存储到阿里云OSS）</li><li>访问员工图像（通过图像在阿里云OSS的存储地址访问图像）<ul><li>OSS中的每一个文件都会分配一个访问的url，通过这个url就可以访问到存储在阿里云上的图片。所以需要把url返回给前端，这样前端就可以通过url获取到图像。</li></ul></li></ol></blockquote><p>我们参照接口文档来开发文件上传功能：</p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/upload<br><br>请求方式：POST<br><br>接口描述：上传图片接口<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：multipart&#x2F;form-data</p><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>file</td><td>是</td><td></td><td></td></tr></tbody></table></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据，上传图片的访问路径</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-0400.jpg&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p>引入阿里云OSS上传文件工具类（由官方的示例代码改造而来）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://oss-cn-shanghai.aliyuncs.com&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LTAI5t9MZK8iq5T2Av5GLDxX&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;web-framework01&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> multipartFile.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>        ossClient.putObject(bucketName, fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + bucketName + <span class="hljs-string">&quot;.&quot;</span> + endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br><br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改UploadController代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> com.itheima.utils.AliOSSUtils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSUtils aliOSSUtils;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile image)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//调用阿里云OSS工具类，将上传上来的文件存入阿里云</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> aliOSSUtils.upload(image);<br>        <span class="hljs-comment">//将图片上传完成后的url返回，用于浏览器回显展示</span><br>        <span class="hljs-keyword">return</span> Result.success(url);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>使用postman测试：</p><p><img src="/assets/image-20230102175353270.png" alt="image-20230102175353270"></p><h2 id="3-修改员工"><a href="#3-修改员工" class="headerlink" title="3. 修改员工"></a>3. 修改员工</h2><p>需求：修改员工信息</p><p><img src="/assets/image-20220904220001994.png" alt="image-20220904220001994"></p> <img src="assets/image-20220904220006578.png" style="zoom: 50%;" /><p>在进行修改员工信息的时候，我们首先先要根据员工的ID查询员工的信息用于页面回显展示，然后用户修改员工数据之后，点击保存按钮，就可以将修改的数据提交到服务端，保存到数据库。 具体操作为：</p><ol><li>根据ID查询员工信息</li><li>保存修改的员工信息</li></ol><h3 id="3-1-查询回显"><a href="#3-1-查询回显" class="headerlink" title="3.1 查询回显"></a>3.1 查询回显</h3><h4 id="3-1-1-接口文档"><a href="#3-1-1-接口文档" class="headerlink" title="3.1.1 接口文档"></a>3.1.1 接口文档</h4><p>根据ID查询员工数据 </p><ul><li><p>基本信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">请求路径：<span class="hljs-regexp">/emps/</span>&#123;id&#125;<br><br>请求方式：GET<br><br>接口描述：该接口用于根据主键ID查询员工的信息<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>必须</td><td>员工ID</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/emps/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 , 0 失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td>返回的数据</td></tr><tr><td>|- id</td><td>number</td><td>非必须</td><td></td><td>id</td></tr><tr><td>|- username</td><td>string</td><td>非必须</td><td></td><td>用户名</td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td></td><td>姓名</td></tr><tr><td>|- password</td><td>string</td><td>非必须</td><td></td><td>密码</td></tr><tr><td>|- entrydate</td><td>string</td><td>非必须</td><td></td><td>入职日期</td></tr><tr><td>|- gender</td><td>number</td><td>非必须</td><td></td><td>性别 , 1 男 ; 2 女</td></tr><tr><td>|- image</td><td>string</td><td>非必须</td><td></td><td>图像</td></tr><tr><td>|- job</td><td>number</td><td>非必须</td><td></td><td>职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师</td></tr><tr><td>|- deptId</td><td>number</td><td>非必须</td><td></td><td>部门id</td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td></td><td>创建时间</td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td></td><td>更新时间</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangwuji&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张无忌&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-53B.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-01-01&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:30&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-02T00:29:04&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-1-2-实现思路"><a href="#3-1-2-实现思路" class="headerlink" title="3.1.2 实现思路"></a>3.1.2 实现思路</h4><p><img src="/assets/image-20221230161841795.png" alt="image-20221230161841795"></p><h4 id="3-1-3-代码实现"><a href="#3-1-3-代码实现" class="headerlink" title="3.1.3 代码实现"></a>3.1.3 代码实现</h4><ul><li>EmpMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-comment">//根据ID查询员工信息</span><br>    <span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time &quot; +</span><br><span class="hljs-meta">            &quot;from emp &quot; +</span><br><span class="hljs-meta">            &quot;where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据ID查询员工</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> empMapper.findById(id);<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empService.getById(id);<br>        <span class="hljs-keyword">return</span> Result.success(emp);<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-4-postman测试"><a href="#3-1-4-postman测试" class="headerlink" title="3.1.4 postman测试"></a>3.1.4 postman测试</h4><p><img src="/assets/image-20221230170926513.png" alt="image-20221230170926513"></p><h3 id="3-2-修改员工"><a href="#3-2-修改员工" class="headerlink" title="3.2 修改员工"></a>3.2 修改员工</h3><img src="assets/image-20220904220006578.png" style="zoom:67%;" /><blockquote><p>当用户修改完数据之后，点击保存按钮，就需要将数据提交到服务端，然后服务端需要将修改后的数据更新到数据库中。 </p></blockquote><h4 id="3-2-1-接口文档"><a href="#3-2-1-接口文档" class="headerlink" title="3.2.1 接口文档"></a>3.2.1 接口文档</h4><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/emps<br><br>请求方式：PUT<br><br>接口描述：该接口用于修改员工的数据信息<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>必须</td><td>id</td></tr><tr><td>username</td><td>string</td><td>必须</td><td>用户名</td></tr><tr><td>name</td><td>string</td><td>必须</td><td>姓名</td></tr><tr><td>gender</td><td>number</td><td>必须</td><td>性别, 说明: 1 男, 2 女</td></tr><tr><td>image</td><td>string</td><td>非必须</td><td>图像</td></tr><tr><td>deptId</td><td>number</td><td>非必须</td><td>部门id</td></tr><tr><td>entrydate</td><td>string</td><td>非必须</td><td>入职日期</td></tr><tr><td>job</td><td>number</td><td>非必须</td><td>职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师</td></tr></tbody></table><p>请求数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-03-07-37-38222.jpg&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linpingzhi&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;林平之&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-18&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-2-2-实现思路"><a href="#3-2-2-实现思路" class="headerlink" title="3.2.2 实现思路"></a>3.2.2 实现思路</h4><p><img src="/assets/image-20221230171342318.png" alt="image-20221230171342318"></p><h4 id="3-2-3-代码实现"><a href="#3-2-3-代码实现" class="headerlink" title="3.2.3 代码实现"></a>3.2.3 代码实现</h4><ul><li>EmpMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//修改员工信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--更新员工信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        update emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span><br>                username = #&#123;username&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span><br>                password = #&#123;password&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>                name = #&#123;name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                gender = #&#123;gender&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null and image != &#x27;&#x27;&quot;</span>&gt;</span><br>                image = #&#123;image&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null&quot;</span>&gt;</span><br>                job = #&#123;job&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;entrydate != null&quot;</span>&gt;</span><br>                entrydate = #&#123;entrydate&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptId != null&quot;</span>&gt;</span><br>                dept_id = #&#123;deptId&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>                update_time = #&#123;updateTime&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 省略... --&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>EmpService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新员工</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br>   <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        emp.setUpdateTime(LocalDateTime.now()); <span class="hljs-comment">//更新修改时间为当前时间</span><br>        <br>        empMapper.update(emp);<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//修改员工</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span>&#123;<br>        empService.update(emp);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-4-postman测试"><a href="#3-2-4-postman测试" class="headerlink" title="3.2.4 postman测试"></a>3.2.4 postman测试</h4><p><img src="/assets/image-20220904221941144.png" alt="image-20220904221941144"> </p><h4 id="3-2-5-前后端联调测试"><a href="#3-2-5-前后端联调测试" class="headerlink" title="3.2.5 前后端联调测试"></a>3.2.5 前后端联调测试</h4><p><img src="/assets/image-20220904222028501.png" alt="image-20220904222028501"> </p><h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><p>员工管理的增删改查功能我们已开发完成，但在我们所开发的程序中还一些小问题，下面我们就来分析一下当前案例中存在的问题以及如何优化解决。</p><h3 id="4-1-参数配置化"><a href="#4-1-参数配置化" class="headerlink" title="4.1 参数配置化"></a>4.1 参数配置化</h3><img src="assets/image-20221231085558457.png" alt="image-20221231085558457" style="zoom: 80%;" /><p>在我们之前编写的程序中进行文件上传时，需要调用AliOSSUtils工具类，将文件上传到阿里云OSS对象存储服务当中。而在调用工具类进行文件上传时，需要一些参数：</p><ul><li>endpoint       &#x2F;&#x2F;阿里云OSS域名</li><li>accessKeyID    &#x2F;&#x2F;用户身份ID</li><li>accessKeySecret   &#x2F;&#x2F;用户密钥</li><li>bucketName      &#x2F;&#x2F;存储空间的名字</li></ul><p>关于以上的这些阿里云相关配置信息，我们是直接写死在java代码中了(硬编码)，如果我们在做项目时每涉及到一个第三方技术服务，就将其参数硬编码，那么在Java程序中会存在两个问题：</p><ol><li>如果这些参数发生变化了，就必须在源程序代码中改动这些参数，然后需要重新进行代码的编译，将Java代码编译成class字节码文件再重新运行程序。（比较繁琐）</li><li>如果我们开发的是一个真实的企业级项目， Java类可能会有很多，如果将这些参数分散的定义在各个Java类当中，我们要修改一个参数值，我们就需要在众多的Java代码当中来定位到对应的位置，再来修改参数，修改完毕之后再重新编译再运行。（参数配置过于分散，是不方便集中的管理和维护）</li></ol><p>为了解决以上分析的问题，我们可以将参数配置在配置文件中。如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#自定义的阿里云OSS配置信息</span><br><span class="hljs-attr">aliyun.oss.endpoint</span>=<span class="hljs-string">https://oss-cn-hangzhou.aliyuncs.com</span><br><span class="hljs-attr">aliyun.oss.accessKeyId</span>=<span class="hljs-string">LTAI4GCH1vX6DKqJWxd6nEuW</span><br><span class="hljs-attr">aliyun.oss.accessKeySecret</span>=<span class="hljs-string">yBshYweHOpqDuhCArrVHwIiBKpyqSL</span><br><span class="hljs-attr">aliyun.oss.bucketName</span>=<span class="hljs-string">web-tlias</span><br></code></pre></td></tr></table></figure><p>在将阿里云OSS配置参数交给properties配置文件来管理之后，我们的AliOSSUtils工具类就变为以下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br>    <span class="hljs-comment">/*以下4个参数没有指定值（默认值：null）*/</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br>    <span class="hljs-keyword">private</span> String bucketName;<br><br>    <span class="hljs-comment">//省略其他代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>而此时如果直接调用AliOSSUtils类当中的upload方法进行文件上传时，这4项参数全部为null，原因是因为并没有给它赋值。</p><p>此时我们是不是需要将配置文件当中所配置的属性值读取出来，并分别赋值给AliOSSUtils工具类当中的各个属性呢？那应该怎么做呢？</p></blockquote><p>因为application.properties是springboot项目默认的配置文件，所以springboot程序在启动时会默认读取application.properties配置文件，而我们可以使用一个现成的注解：@Value，获取配置文件中的数据。</p><p>@Value 注解通常用于外部配置的属性注入，具体用法为： @Value(“${配置文件中的key}”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.accessKeyId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.accessKeySecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.bucketName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br> <br> <span class="hljs-comment">//省略其他代码...</span><br> &#125;   <br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230102173905913.png" alt="image-20230102173905913"></p><p>使用postman测试：</p><p><img src="/assets/image-20230102175353270.png" alt="image-20230102175353270"></p><h3 id="4-2-yml配置文件"><a href="#4-2-yml配置文件" class="headerlink" title="4.2 yml配置文件"></a>4.2 yml配置文件</h3><p>前面我们一直使用springboot项目创建完毕后自带的application.properties进行属性的配置，那其实呢，在springboot项目当中是支持多种配置方式的，除了支持properties配置文件以外，还支持另外一种类型的配置文件，就是我们接下来要讲解的yml格式的配置文件。</p><ul><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">server.address</span>=<span class="hljs-string">127.0.0.1</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure></li><li><p>application.yaml </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>yml 格式的配置文件，后缀名有两种：</p><ul><li>yml （推荐）</li><li>yaml</li></ul></blockquote><p>常见配置文件格式对比：</p><p><img src="/assets/image-20230102181215809.png" alt="image-20230102181215809"></p><p>我们可以看到配置同样的数据信息，yml格式的数据有以下特点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul><p>简单的了解过springboot所支持的配置文件，以及不同类型配置文件之间的优缺点之后，接下来我们就来了解下yml配置文件的基本语法：</p><ul><li>大小写敏感</li><li>数值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><p><img src="/assets/image-20230103084645450.png" alt="image-20230103084645450"></p><p>了解完yml格式配置文件的基本语法之后，接下来我们再来看下yml文件中常见的数据格式。在这里我们主要介绍最为常见的两类：</p><ol><li>定义对象或Map集合</li><li>定义数组、list或set集合</li></ol><p>对象&#x2F;Map集合</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zhangsan</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>数组&#x2F;List&#x2F;Set集合</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">hobby:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">java</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">game</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sport</span><br></code></pre></td></tr></table></figure><p>熟悉完了yml文件的基本语法后，我们修改下之前案例中使用的配置文件，变更为application.yml配置方式：</p><ol><li>修改application.properties名字为：<code>_application.properties</code>（名字随便更换，只要加载不到即可）</li><li>创建新的配置文件： <code>application.yml</code></li></ol><p>原有application.properties文件：</p><p><img src="/assets/image-20230103202630793.png" alt="image-20230103202630793"></p><p>新建的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span><br>      <br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">https://oss-cn-hangzhou.aliyuncs.com</span><br>    <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI4GCH1vX6DKqJWxd6nEuW</span><br>    <span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">yBshYweHOpqDuhCArrVHwIiBKpyqSL</span><br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">web-397</span><br></code></pre></td></tr></table></figure><h3 id="4-3-ConfigurationProperties"><a href="#4-3-ConfigurationProperties" class="headerlink" title="4.3 @ConfigurationProperties"></a>4.3 @ConfigurationProperties</h3><p>讲解完了yml配置文件之后，最后再来介绍一个注解<code>@ConfigurationProperties</code>。在介绍注解之前，我们先来看一个场景，分析下代码当中可能存在的问题：</p><p><img src="/assets/image-20230103202919756.png" alt="image-20230103202919756"></p><p>我们在application.properties或者application.yml中配置了阿里云OSS的四项参数之后，如果java程序中需要这四项参数数据，我们直接通过@Value注解来进行注入。这种方式本身没有什么问题问题，但是如果说需要注入的属性较多(例：需要20多个参数数据)，我们写起来就会比较繁琐。</p><p>那么有没有一种方式可以简化这些配置参数的注入呢？答案是肯定有，在Spring中给我们提供了一种简化方式，可以直接将配置文件中配置项的值自动的注入到对象的属性中。</p><p>Spring提供的简化方式套路：</p><ol><li><p>需要创建一个实现类，且实体类中的属性名和配置文件当中key的名字必须要一致</p><blockquote><p>比如：配置文件当中叫endpoints，实体类当中的属性也得叫endpoints，另外实体类当中的属性还需要提供 getter &#x2F; setter方法</p></blockquote></li><li><p>需要将实体类交给Spring的IOC容器管理，成为IOC容器当中的bean对象</p></li><li><p>在实体类上添加<code>@ConfigurationProperties</code>注解，并通过perfect属性来指定配置参数项的前缀</p></li></ol><p><img src="/assets/image-20230103210827003.png" alt="image-20230103210827003"></p><p>实体类：AliOSSProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/*阿里云OSS相关配置*/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSProperties</span> &#123;<br>    <span class="hljs-comment">//区域</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-comment">//身份ID</span><br>    <span class="hljs-keyword">private</span> String accessKeyId ;<br>    <span class="hljs-comment">//身份密钥</span><br>    <span class="hljs-keyword">private</span> String accessKeySecret ;<br>    <span class="hljs-comment">//存储空间</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br>&#125;<br></code></pre></td></tr></table></figure><p>AliOSSUtils工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//当前类对象由Spring创建和管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br><br>    <span class="hljs-comment">//注入配置参数实体类对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSProperties aliOSSProperties;<br>   <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> multipartFile.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(aliOSSProperties.getEndpoint(),<br>                aliOSSProperties.getAccessKeyId(), aliOSSProperties.getAccessKeySecret());<br>        ossClient.putObject(aliOSSProperties.getBucketName(), fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span>aliOSSProperties.getEndpoint().split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + aliOSSProperties.getBucketName() + <span class="hljs-string">&quot;.&quot;</span> + aliOSSProperties.getEndpoint().split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br><br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在我们添加上注解后，会发现idea窗口上面出现一个红色警告：</p><p><img src="/assets/image-20230103212042823.png" alt="image-20230103212042823"> </p><p>这个警告提示是告知我们还需要引入一个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当我们在pom.xml文件当中配置了这项依赖之后，我们重新启动服务，大家就会看到在properties或者是yml配置文件当中，就会提示阿里云 OSS 相关的配置项。所以这项依赖它的作用就是会自动的识别被<code>@Configuration Properties</code>注解标识的bean对象。</p><blockquote><p>刚才的红色警告，已经变成了一个灰色的提示，提示我们需要重新运行springboot服务</p></blockquote><p>@ConfigurationProperties注解我们已经介绍完了，接下来我们就来区分一下@ConfigurationProperties注解以及我们前面所介绍的另外一个@Value注解：</p><p>相同点：都是用来注入外部配置的属性的。</p><p>不同点：</p><ul><li><p>@Value注解只能一个一个的进行外部属性的注入。</p></li><li><p>@ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</p></li></ul><p>如果要注入的属性非常的多，并且还想做到复用，就可以定义这么一个bean对象。通过 configuration properties 批量的将外部的属性配置直接注入到 bin 对象的属性当中。在其他的类当中，我要想获取到注入进来的属性，我直接注入 bin 对象，然后调用 get 方法，就可以获取到对应的属性值了</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34SpringBootWeb案例1</title>
    <link href="/2023/12/10/day34-SpringBootWeb%E6%A1%88%E4%BE%8B-1/"/>
    <url>/2023/12/10/day34-SpringBootWeb%E6%A1%88%E4%BE%8B-1/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBootWeb案例"><a href="#SpringBootWeb案例" class="headerlink" title="SpringBootWeb案例"></a>SpringBootWeb案例</h1><p>前面我们已经讲解了Web前端开发的基础知识，也讲解了Web后端开发的基础(HTTP协议、请求响应)，并且也讲解了数据库MySQL，以及通过Mybatis框架如何来完成数据库的基本操作。 那接下来，我们就通过一个案例，来将前端开发、后端开发、数据库整合起来。 而这个案例呢，就是我们前面提到的Tlias智能学习辅助系统。</p><p><img src="/assets/image-20220904104826854.png"></p><p>在这个案例中，前端开发人员已经将前端工程开发完毕了。 我们需要做的，就是参考接口文档完成后端功能的开发，然后结合前端工程进行联调测试即可。</p><p><strong>完成后的成品效果展示：</strong></p><p><img src="/assets/image-20220904103734643.png" alt="image-20220904103734643"></p><blockquote><p><strong>今天的主要内容如下：</strong></p><ul><li>准备工作</li><li>部门管理</li><li>员工管理</li></ul></blockquote><p>下面我们就进入到今天的第1个内容<code>准备工作</code>的学习。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>准备工作的学习，我们先从”需求”和”环境搭建”开始入手。</p><h3 id="1-1-需求-amp-环境搭建"><a href="#1-1-需求-amp-环境搭建" class="headerlink" title="1.1 需求&amp;环境搭建"></a>1.1 需求&amp;环境搭建</h3><h4 id="1-1-1-需求说明"><a href="#1-1-1-需求说明" class="headerlink" title="1.1.1 需求说明"></a>1.1.1 需求说明</h4><p><strong>1、部门管理</strong></p><p><img src="/assets/image-20221213205503102.png" alt="image-20221213205503102"></p><p>部门管理功能开发包括：</p><ul><li>查询部门列表</li><li>删除部门</li><li>新增部门</li><li>修改部门</li></ul><p><strong>2、员工管理</strong></p><p><img src="/assets/image-20221213205737307.png" alt="image-20221213205737307"></p><p>员工管理功能开发包括：</p><ul><li>查询员工列表(分页、条件)</li><li>删除员工</li><li>新增员工</li><li>修改员工</li></ul><h4 id="1-1-2-环境搭建"><a href="#1-1-2-环境搭建" class="headerlink" title="1.1.2 环境搭建"></a>1.1.2 环境搭建</h4><p><img src="/assets/image-20221213230710821.png" alt="image-20221213230710821"></p><p>步骤：</p><ol><li>准备数据库表(dept、emp)</li><li>创建springboot工程，引入对应的起步依赖（web、mybatis、mysql驱动、lombok）</li><li>配置文件application.properties中引入mybatis的配置信息，准备对应的实体类</li><li>准备对应的Mapper、Service(接口、实现类)、Controller基础结构</li></ol><p>第1步：准备数据库表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 部门管理<br>create table dept(<br>    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br>-- 部门表测试数据<br>insert into dept (id, name, create_time, update_time) values(1,&#x27;学工部&#x27;,now(),now()),(2,&#x27;教研部&#x27;,now(),now()),(3,&#x27;咨询部&#x27;,now(),now()), (4,&#x27;就业部&#x27;,now(),now()),(5,&#x27;人事部&#x27;,now(),now());<br><br><br><br>-- 员工管理(带约束)<br>create table emp (<br>  id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>  username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>  password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>  name varchar(10) not null comment &#x27;姓名&#x27;,<br>  gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>  image varchar(300) comment &#x27;图像&#x27;,<br>  job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>  entrydate date comment &#x27;入职时间&#x27;,<br>  dept_id int unsigned comment &#x27;部门ID&#x27;,<br>  create_time datetime not null comment &#x27;创建时间&#x27;,<br>  update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br>-- 员工表测试数据<br>INSERT INTO emp<br>(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES<br>(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),<br>(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),<br>(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),<br>(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),<br>(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),<br>(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),<br>(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),<br>(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),<br>(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),<br>(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),<br>(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),<br>(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),<br>(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());<br></code></pre></td></tr></table></figure><p>第2步：创建一个SpringBoot工程，选择引入对应的起步依赖（web、mybatis、mysql驱动、lombok） (版本选择2.7.5版本，可以创建完毕之后，在pom.xml文件中更改版本号)</p><p><img src="/assets/image-20221213221142985.png" alt="image-20221213221142985"></p><p><img src="/assets/image-20221213221408420.png" alt="image-20221213221408420"></p><p> 生成的pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-web-management<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>tlias-web-management<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建项目工程目录结构：</p><p><img src="/assets/image-20221213222039985.png" alt="image-20221213222039985"></p><p>第3步：配置文件application.properties中引入mybatis的配置信息，准备对应的实体类</p><ul><li>application.properties （直接把之前项目中的复制过来）</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#数据库连接</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启mybatis的日志输出</span><br><span class="hljs-attr">mybatis.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启数据库表字段 到 实体类属性的驼峰映射</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*部门类*/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*员工类*/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Short job;<br>    <span class="hljs-keyword">private</span> LocalDate entrydate;<br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>第4步：准备对应的Mapper、Service(接口、实现类)、Controller基础结构</p><p>数据访问层：</p><ul><li>DeptMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>业务层：</p><ul><li>DeptService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-comment">//部门业务规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DeptServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">//部门业务实现类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-comment">//员工业务规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><span class="hljs-keyword">import</span> com.itheima.service.EmpService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">//员工业务实现类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>控制层：</p><ul><li>DeptController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">//部门管理控制器</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">//员工管理控制器</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目工程结构：</p><p><img src="/assets/image-20221213224927868.png" alt="image-20221213224927868"></p><h3 id="1-2-开发规范"><a href="#1-2-开发规范" class="headerlink" title="1.2 开发规范"></a>1.2 开发规范</h3><p>了解完需求也完成了环境搭建了，我们下面开始学习开发的一些规范。</p><p>开发规范我们主要从以下几方面介绍：</p><p><strong>1、开发规范-REST</strong></p><p>我们的案例是基于当前最为主流的前后端分离模式进行开发。</p><p><img src="/assets/image-20221213230911102.png" alt="image-20221213230911102"></p><p>在前后端分离的开发模式中，前后端开发人员都需要根据提前定义好的接口文档，来进行前后端功能的开发。</p><blockquote><p>后端开发人员：必须严格遵守提供的接口文档进行后端功能开发（保障开发的功能可以和前端对接）</p><p><img src="/assets/image-20221213231519551.png" alt="image-20221213231519551"></p></blockquote><p>而在前后端进行交互的时候，我们需要基于当前主流的REST风格的API接口进行交互。</p><p>什么是REST风格呢?</p><ul><li>REST（Representational State Transfer），表述性状态转换，它是一种软件架构风格。</li></ul><p><strong>传统URL风格如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/user/getById?id=1     GET：查询id为1的用户<br>http://localhost:8080/user/saveUser         POST：新增用户<br>http://localhost:8080/user/updateUser       POST：修改用户<br>http://localhost:8080/user/deleteUser?id=1  GET：删除id为1的用户<br></code></pre></td></tr></table></figure><p>我们看到，原始的传统URL呢，定义比较复杂，而且将资源的访问行为对外暴露出来了。</p><p><strong>基于REST风格URL如下：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/users/</span><span class="hljs-number">1</span>  GET：查询id为<span class="hljs-number">1</span>的用户<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/users    POST：新增用户<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/users    PUT：修改用户<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/users/</span><span class="hljs-number">1</span>  DELETE：删除id为<span class="hljs-number">1</span>的用户<br></code></pre></td></tr></table></figure><p>其中总结起来，就一句话：通过URL定位要操作的资源，通过HTTP动词(请求方式)来描述具体的操作。</p><p>在REST风格的URL中，通过四种请求方式，来操作数据的增删改查。 </p><ul><li>GET ： 查询</li><li>POST ：新增</li><li>PUT ：修改</li><li>DELETE ：删除</li></ul><p>我们看到如果是基于REST风格，定义URL，URL将会更加简洁、更加规范、更加优雅。</p><blockquote><p>注意事项：</p><ul><li>REST是风格，是约定方式，约定不是规定，可以打破</li><li>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：users、emps、books…</li></ul></blockquote><p><strong>2、开发规范-统一响应结果</strong></p><p>前后端工程在进行交互时，使用统一响应结果 Result。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//响应码，1 代表成功; 0 代表失败</span><br>    <span class="hljs-keyword">private</span> String msg;  <span class="hljs-comment">//响应信息 描述字符串</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">//返回的数据</span><br><br>    <span class="hljs-comment">//增删改 成功响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">//查询 成功响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,data);<br>    &#125;<br>    <span class="hljs-comment">//失败响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">0</span>,msg,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、开发流程</strong></p><p>我们在进行功能开发时，都是根据如下流程进行：</p><p><img src="/assets/image-20220904125004138.png" alt="image-20220904125004138"> </p><ol><li><p>查看页面原型明确需求</p><ul><li>根据页面原型和需求，进行表结构设计、编写接口文档(已提供)</li></ul></li><li><p>阅读接口文档</p></li><li><p>思路分析</p></li><li><p>功能接口开发</p><ul><li>就是开发后台的业务功能，一个业务功能，我们称为一个接口</li></ul></li><li><p>功能接口测试</p><ul><li>功能开发完毕后，先通过Postman进行功能接口测试，测试通过后，再和前端进行联调测试</li></ul></li><li><p>前后端联调测试</p><ul><li>和前端开发人员开发好的前端工程一起测试</li></ul></li></ol><h2 id="2-部门管理"><a href="#2-部门管理" class="headerlink" title="2. 部门管理"></a>2. 部门管理</h2><p>我们按照前面学习的开发流程，开始完成功能开发。首先按照之前分析的需求，完成<code>部门管理</code>的功能开发。</p><p>开发的部门管理功能包含：</p><ol><li>查询部门</li><li>删除部门</li><li>新增部门</li><li>更新部门（不讲解，自己独立完成）</li></ol><h3 id="2-1-查询部门"><a href="#2-1-查询部门" class="headerlink" title="2.1 查询部门"></a>2.1 查询部门</h3><h4 id="2-1-1-原型和需求"><a href="#2-1-1-原型和需求" class="headerlink" title="2.1.1 原型和需求"></a>2.1.1 原型和需求</h4><p><img src="/assets/image-20221213234154699.png" alt="image-20221213234154699"></p><blockquote><p>查询的部门的信息：部门ID、部门名称、修改时间</p><p>通过页面原型以及需求描述，我们可以看到，部门查询，是不需要考虑分页操作的。</p></blockquote><h4 id="2-1-2-接口文档"><a href="#2-1-2-接口文档" class="headerlink" title="2.1.2 接口文档"></a>2.1.2 接口文档</h4><p><strong>部门列表查询</strong></p><ul><li><p>基本信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">请求路径：/depts<br><br>请求方式：<span class="hljs-built_in">GET</span><br><br>接口描述：该接口用于部门列表数据查询<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>无</p></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object[ ]</td><td>非必须</td><td>返回的数据</td></tr><tr><td>|- id</td><td>number</td><td>非必须</td><td>id</td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td>部门名称</td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td>创建时间</td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td>修改时间</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学工部&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;教研部&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-1-3-思路分析"><a href="#2-1-3-思路分析" class="headerlink" title="2.1.3 思路分析"></a>2.1.3 思路分析</h4><p><img src="/assets/image-20221213235157345.png" alt="image-20221213235157345"></p><h4 id="2-1-4-功能开发"><a href="#2-1-4-功能开发" class="headerlink" title="2.1.4 功能开发"></a>2.1.4 功能开发</h4><p>通过查看接口文档：部门列表查询</p><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：GET</p><p>请求参数：无</p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/depts&quot; , method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/depts&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;查询所有部门数据&quot;</span>);<br>        List&lt;Dept&gt; deptList = deptService.list();<br>        <span class="hljs-keyword">return</span> Result.success(deptList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Slf4j注解源码：</p><p><img src="/assets/image-20221214000909044.png" alt="image-20221214000909044"></p></blockquote><p><strong>DeptService</strong>（业务接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有的部门数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>   存储Dept对象的集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>DeptServiceImpl</strong>（业务实现类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Dept&gt; deptList = deptMapper.list();<br>        <span class="hljs-keyword">return</span> deptList;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p><strong>DeptMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">//查询所有部门数据</span><br>    <span class="hljs-meta">@Select(&quot;select id, name, create_time, update_time from dept&quot;)</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-5-功能测试"><a href="#2-1-5-功能测试" class="headerlink" title="2.1.5 功能测试"></a>2.1.5 功能测试</h4><p>功能开发完成后，我们就可以启动项目，然后打开postman，发起GET请求，访问 ：<a href="http://localhost:8080/depts">http://localhost:8080/depts</a></p><p><img src="/assets/image-20220904130315247.png"></p><h3 id="2-2-前后端联调"><a href="#2-2-前后端联调" class="headerlink" title="2.2 前后端联调"></a>2.2 前后端联调</h3><p>完成了查询部门的功能，我们也通过postman工具测试通过了，下面我们再基于前后端分离的方式进行接口联调。具体操作如下：</p><p>1、将资料中提供的”前端环境”文件夹中的压缩包，拷贝到一个没有中文不带空格的目录下</p><p><img src="/assets/image-20221214100230484.png" alt="image-20221214100230484"> </p><p>2、拷贝到一个没有中文不带空格的目录后，进行解压（解压到当前目录）</p><p><img src="/assets/image-20221214100039074.png" alt="image-20221214100039074"> </p><p>3、启动nginx</p><p><img src="/assets/image-20221214100703404.png" alt="image-20221214100703404"> </p><p><img src="/assets/image-20221214101711107.png" alt="image-20221214101711107"></p><p>4、打开浏览器，访问：<a href="http://localhost:90/">http://localhost:90</a></p><p><img src="/assets/image-20221214100918557.png" alt="image-20221214100918557"></p><p>5、测试：部门管理 - 查询部门列表</p><p><img src="/assets/image-20221214101436198.png" alt="image-20221214101436198"></p><blockquote><p>说明：只要按照接口文档开发功能接口，就能保证前后端程序交互</p><ul><li>后端：严格遵守接口文档进行功能接口开发</li><li>前端：严格遵守接口文档访问功能接口</li></ul></blockquote><h3 id="2-3-删除部门"><a href="#2-3-删除部门" class="headerlink" title="2.3 删除部门"></a>2.3 删除部门</h3><p>查询部门的功能我们搞定了，下面我们开始完成<code>删除部门</code>的功能开发。</p><h4 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1 需求"></a>2.3.1 需求</h4><p><img src="/assets/image-20220904132440220.png"></p><p>点击部门列表后面操作栏的 “删除” 按钮，就可以删除该部门信息。 此时，前端只需要给服务端传递一个ID参数就可以了。 我们从接口文档中也可以看得出来。</p><h4 id="2-3-2-接口文档"><a href="#2-3-2-接口文档" class="headerlink" title="2.3.2 接口文档"></a>2.3.2 接口文档</h4><p><strong>删除部门</strong></p><ul><li><p>基本信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">请求路径：<span class="hljs-regexp">/depts/</span>&#123;id&#125;<br><br>请求方式：<span class="hljs-keyword">DELETE</span><br><br>接口描述：该接口用于根据ID删除部门数据<br></code></pre></td></tr></table></figure></li><li><p>请求参数<br>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>必须</td><td>部门ID</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/depts/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据<br>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-3-3-思路分析"><a href="#2-3-3-思路分析" class="headerlink" title="2.3.3 思路分析"></a>2.3.3 思路分析</h4><p><img src="/assets/image-20221214102705490.png" alt="image-20221214102705490"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;depts&#x2F;{id}</li><li>前端请求方式：DELETE</li></ul><p>问题1：怎么在controller中接收请求路径中的路径参数？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@PathVariable</span><br></code></pre></td></tr></table></figure><p>问题2：如何限定请求方式是delete？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@DeleteMapping</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="2-3-4-功能开发"><a href="#2-3-4-功能开发" class="headerlink" title="2.3.4 功能开发"></a>2.3.4 功能开发</h4><p>通过查看接口文档：删除部门</p><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}</p><p>请求方式：DELETE</p><p>请求参数：路径参数 {id}</p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-comment">//日志记录</span><br>        log.info(<span class="hljs-string">&quot;根据id删除部门&quot;</span>);<br>        <span class="hljs-comment">//调用service层功能</span><br>        deptService.delete(id);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id    部门id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-comment">//调用持久层删除功能</span><br>        deptMapper.deleteById(id);<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id   部门id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br>   <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-5-功能测试"><a href="#2-3-5-功能测试" class="headerlink" title="2.3.5 功能测试"></a>2.3.5 功能测试</h4><p>删除功能开发完成后，重新启动项目，使用postman，发起DELETE请求：</p><p><img src="/assets/image-20221214112451600.png" alt="image-20221214112451600"></p><h4 id="2-3-6-前后端联调"><a href="#2-3-6-前后端联调" class="headerlink" title="2.3.6 前后端联调"></a>2.3.6 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221214113708369.png" alt="image-20221214113708369"></p><p><img src="/assets/image-20221214113941657.png" alt="image-20221214113941657"></p><h3 id="2-4-新增部门"><a href="#2-4-新增部门" class="headerlink" title="2.4 新增部门"></a>2.4 新增部门</h3><p>我们前面已完成了<code>查询部门</code>、<code>删除部门</code>两个功能，也熟悉了开发的流程。下面我们继续完成<code>新增部门</code>功能。</p><h4 id="2-4-1-需求"><a href="#2-4-1-需求" class="headerlink" title="2.4.1 需求"></a>2.4.1 需求</h4><img src="assets/image-20220904150427982.png" style="zoom:80%;" /><p>点击 “新增部门” 按钮，弹出新增部门对话框，输入部门名称，点击 “保存” ，将部门信息保存到数据库。</p><h4 id="2-4-2-接口文档"><a href="#2-4-2-接口文档" class="headerlink" title="2.4.2 接口文档"></a>2.4.2 接口文档</h4><p><strong>添加部门</strong></p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/depts<br><br>请求方式：POST<br><br>接口描述：该接口用于添加部门数据<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>必须</td><td>部门名称</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;教研部&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-4-3-思路分析"><a href="#2-4-3-思路分析" class="headerlink" title="2.4.3 思路分析"></a>2.4.3 思路分析</h4><p><img src="/assets/image-20221214115519648.png" alt="image-20221214115519648"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;depts</li><li>前端请求方式：POST</li><li>前端请求参数 (Json格式)：{ “name”: “教研部” }</li></ul><p>问题1：如何限定请求方式是POST？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br></code></pre></td></tr></table></figure><p>问题2：怎么在controller中接收json格式的请求参数？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestBody</span>  <span class="hljs-comment">//把前端传递的json数据填充到实体类中</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="2-4-4-功能开发"><a href="#2-4-4-功能开发" class="headerlink" title="2.4.4 功能开发"></a>2.4.4 功能开发</h4><p>通过查看接口文档：新增部门</p><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：POST</p><p>请求参数：json格式 </p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/depts&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;新增部门：&#123;&#125;&quot;</span>,dept);<br>        <span class="hljs-comment">//调用service层添加功能</span><br>        deptService.add(dept);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dept  部门对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>DeptServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-comment">//补全部门数据</span><br>        dept.setCreateTime(LocalDateTime.now());<br>        dept.setUpdateTime(LocalDateTime.now());<br>        <span class="hljs-comment">//调用持久层增加功能</span><br>        deptMapper.inser(dept);<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>DeptMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into dept (name, create_time, update_time) values (#&#123;name&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">inser</span><span class="hljs-params">(Dept dept)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-5-功能测试"><a href="#2-4-5-功能测试" class="headerlink" title="2.4.5 功能测试"></a>2.4.5 功能测试</h4><p>新增功能开发完成后，重新启动项目，使用postman，发起POST请求：</p><p><img src="/assets/image-20221214153758708.png" alt="image-20221214153758708"></p><h4 id="2-4-6-前后端联调"><a href="#2-4-6-前后端联调" class="headerlink" title="2.4.6 前后端联调"></a>2.4.6 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215105446189.png" alt="image-20221215105446189"></p><p><img src="/assets/image-20221214154645746.png" alt="image-20221214154645746"></p><h4 id="2-4-7-请求路径"><a href="#2-4-7-请求路径" class="headerlink" title="2.4.7 请求路径"></a>2.4.7 请求路径</h4><p>我们部门管理的<code>查询</code>、<code>删除</code>、<code>新增</code>功能全部完成了，接下来我们要对controller层的代码进行优化。</p><p>首先我们先来看下目前controller层代码：</p><p><img src="/assets/image-20221215110553435.png" alt="image-20221215110553435"></p><blockquote><p>以上三个方法上的请求路径，存在一个共同点：都是以<code>/depts</code>作为开头。（重复了）</p></blockquote><p>在Spring当中为了简化请求路径的定义，可以把公共的请求路径，直接抽取到类上，在类上加一个注解@RequestMapping，并指定请求路径”&#x2F;depts”。代码参照如下：</p><p><img src="/assets/image-20221215111110219.png" alt="image-20221215111110219"></p><blockquote><p>优化前后的对比：</p><p><img src="/assets/image-20221215111309042.png" alt="image-20221215111309042"></p></blockquote><blockquote><p>注意事项：一个完整的请求路径，应该是类上@RequestMapping的value属性 + 方法上的 @RequestMapping的value属性</p></blockquote><h2 id="3-员工管理"><a href="#3-员工管理" class="headerlink" title="3. 员工管理"></a>3. 员工管理</h2><p>完成了部门管理的功能开发之后，我们进入到下一环节员工管理功能的开发。</p><p><img src="/assets/image-20221215142107329.png" alt="image-20221215142107329"></p><p>基于以上原型，我们可以把员工管理功能分为：</p><ol><li>分页查询（今天完成）</li><li>带条件的分页查询（今天完成）</li><li>删除员工（今天完成）</li><li>新增员工（后续完成）</li><li>修改员工（后续完成）</li></ol><p>那下面我们就先从分页查询功能开始学习。</p><h3 id="3-1-分页查询"><a href="#3-1-分页查询" class="headerlink" title="3.1 分页查询"></a>3.1 分页查询</h3><h4 id="3-1-1-基础分页"><a href="#3-1-1-基础分页" class="headerlink" title="3.1.1 基础分页"></a>3.1.1 基础分页</h4><h5 id="3-1-1-1-需求分析"><a href="#3-1-1-1-需求分析" class="headerlink" title="3.1.1.1 需求分析"></a>3.1.1.1 需求分析</h5><p>我们之前做的查询功能，是将数据库中所有的数据查询出来并展示到页面上，试想如果数据库中的数据有很多(假设有十几万条)的时候，将数据全部展示出来肯定不现实，那如何解决这个问题呢？</p><blockquote><p>使用分页解决这个问题。每次只展示一页的数据，比如：一页展示10条数据，如果还想看其他的数据，可以通过点击页码进行查询。</p></blockquote><p><img src="/assets/image-20221215141233541.png" alt="image-20221215141233541"></p><p>要想从数据库中进行分页查询，我们要使用<code>LIMIT</code>关键字，格式为：limit  开始索引  每页显示的条数</p><blockquote><p>查询第1页数据的SQL语句是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>查询第2页数据的SQL语句是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>查询第3页的数据的SQL语句是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">limit</span> <span class="hljs-number">20</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>观察以上SQL语句，发现： 开始索引一直在改变 ， 每页显示条数是固定的</p><p>开始索引的计算公式：   开始索引 &#x3D; (当前页码 - 1)  *  每页显示条数</p></blockquote><p>我们继续基于页面原型，继续分析，得出以下结论：</p><ol><li>前端在请求服务端时，传递的参数<ul><li>当前页码  page</li><li>每页显示条数  pageSize</li></ul></li><li>后端需要响应什么数据给前端<ul><li>所查询到的数据列表（存储到List 集合中）</li><li>总记录数</li></ul></li></ol><p><img src="/assets/image-20221215152021068.png" alt="image-20221215152021068"></p><blockquote><p>后台给前端返回的数据包含：List集合(数据列表)、total(总记录数)</p><p>而这两部分我们通常封装到PageBean对象中，并将该对象转换为json格式的数据响应回给浏览器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageBean</span> &#123;<br> <span class="hljs-keyword">private</span> Long total; <span class="hljs-comment">//总记录数</span><br> <span class="hljs-keyword">private</span> List rows; <span class="hljs-comment">//当前页数据列表</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="3-1-1-2-接口文档"><a href="#3-1-1-2-接口文档" class="headerlink" title="3.1.1.2 接口文档"></a>3.1.1.2 接口文档</h5><p><strong>员工列表查询</strong></p><ul><li><p>基本信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">请求路径：/emps<br><br>请求方式：<span class="hljs-built_in">GET</span><br><br>接口描述：该接口用于员工列表数据的条件分页查询<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：queryString</p><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张</td><td>姓名</td></tr><tr><td>gender</td><td>否</td><td>1</td><td>性别 , 1 男 , 2 女</td></tr><tr><td>begin</td><td>否</td><td>2010-01-01</td><td>范围匹配的开始时间(入职日期)</td></tr><tr><td>end</td><td>否</td><td>2020-01-01</td><td>范围匹配的结束时间(入职日期)</td></tr><tr><td>page</td><td>是</td><td>1</td><td>分页查询的页码，如果未指定，默认为1</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>分页查询的每页记录数，如果未指定，默认为10</td></tr></tbody></table><p>请求数据样例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/emps?name=张&amp;gender=1&amp;begin=2007-09-01&amp;end=2022-09-01&amp;page=1&amp;pageSize=10<br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 , 0 失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td>返回的数据</td><td></td></tr><tr><td>|- total</td><td>number</td><td>必须</td><td></td><td>总记录数</td><td></td></tr><tr><td>|- rows</td><td>object []</td><td>必须</td><td></td><td>数据列表</td><td>item 类型: object</td></tr><tr><td>|- id</td><td>number</td><td>非必须</td><td></td><td>id</td><td></td></tr><tr><td>|- username</td><td>string</td><td>非必须</td><td></td><td>用户名</td><td></td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td></td><td>姓名</td><td></td></tr><tr><td>|- password</td><td>string</td><td>非必须</td><td></td><td>密码</td><td></td></tr><tr><td>|- entrydate</td><td>string</td><td>非必须</td><td></td><td>入职日期</td><td></td></tr><tr><td>|- gender</td><td>number</td><td>非必须</td><td></td><td>性别 , 1 男 ; 2 女</td><td></td></tr><tr><td>|- image</td><td>string</td><td>非必须</td><td></td><td>图像</td><td></td></tr><tr><td>|- job</td><td>number</td><td>非必须</td><td></td><td>职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师</td><td></td></tr><tr><td>|- deptId</td><td>number</td><td>非必须</td><td></td><td>部门id</td><td></td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td></td><td>创建时间</td><td></td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td></td><td>更新时间</td><td></td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>       <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinyong&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;金庸&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-53B.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-01-01&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:30&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-02T00:29:04&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangwuji&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张无忌&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-53B.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-01-01&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:30&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-02T00:29:04&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="3-1-1-3-思路分析"><a href="#3-1-1-3-思路分析" class="headerlink" title="3.1.1.3 思路分析"></a>3.1.1.3 思路分析</h5><p><img src="/assets/image-20221215153413290.png" alt="image-20221215153413290"></p><p>分页查询需要的数据，封装在PageBean对象中：</p><p><img src="/assets/image-20221215154036047.png" alt="image-20221215154036047"></p><h5 id="3-1-1-4-功能开发"><a href="#3-1-1-4-功能开发" class="headerlink" title="3.1.1.4 功能开发"></a>3.1.1.4 功能开发</h5><p>通过查看接口文档：员工列表查询</p><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>请求参数：跟随在请求路径后的参数字符串。  例：&#x2F;emps?page&#x3D;1&amp;pageSize&#x3D;10</p><p>响应数据：json格式</p></blockquote><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.pojo.PageBean;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> com.itheima.service.EmpService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//条件分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize);<br>        <span class="hljs-comment">//调用业务层分页查询功能</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@RequestParam(defaultValue&#x3D;”默认值”)   &#x2F;&#x2F;设置请求参数默认值</p></blockquote><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize 每页展示记录数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Emp;<br><span class="hljs-keyword">import</span> com.itheima.pojo.PageBean;<br><span class="hljs-keyword">import</span> com.itheima.service.EmpService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span> &#123;<br>        <span class="hljs-comment">//1、获取总记录数</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> empMapper.count();<br><br>        <span class="hljs-comment">//2、获取分页查询结果列表</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (page - <span class="hljs-number">1</span>) * pageSize; <span class="hljs-comment">//计算起始索引 , 公式: (页码-1)*页大小</span><br>        List&lt;Emp&gt; empList = empMapper.list(start, pageSize);<br><br>        <span class="hljs-comment">//3、封装PageBean对象</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(count , empList);<br>        <span class="hljs-keyword">return</span> pageBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//获取总记录数</span><br>    <span class="hljs-meta">@Select(&quot;select count(*) from emp&quot;)</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//获取当前页的结果列表</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp limit #&#123;start&#125;, #&#123;pageSize&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer start, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-1-5-功能测试"><a href="#3-1-1-5-功能测试" class="headerlink" title="3.1.1.5 功能测试"></a>3.1.1.5 功能测试</h5><p>功能开发完成后，重新启动项目，使用postman，发起POST请求：</p><p><img src="/assets/image-20221215162008339.png" alt="image-20221215162008339"></p><h5 id="3-1-1-6-前后端联调"><a href="#3-1-1-6-前后端联调" class="headerlink" title="3.1.1.6 前后端联调"></a>3.1.1.6 前后端联调</h5><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215183413504.png" alt="image-20221215183413504"></p><h4 id="3-1-2-分页插件"><a href="#3-1-2-分页插件" class="headerlink" title="3.1.2 分页插件"></a>3.1.2 分页插件</h4><h5 id="3-1-2-1-介绍"><a href="#3-1-2-1-介绍" class="headerlink" title="3.1.2.1 介绍"></a>3.1.2.1 介绍</h5><p>前面我们已经完了基础的分页查询，大家会发现：分页查询功能编写起来比较繁琐。</p><p><img src="/assets/image-20221215164811566.png" alt="image-20221215164811566"></p><blockquote><p>在Mapper接口中定义两个方法执行两条不同的SQL语句：</p><ol><li>查询总记录数</li><li>指定页码的数据列表</li></ol><p>在Service当中，调用Mapper接口的两个方法，分别获取：总记录数、查询结果列表，然后在将获取的数据结果封装到PageBean对象中。</p><p>大家思考下：在未来开发其他项目，只要涉及到分页查询功能(例：订单、用户、支付、商品)，都必须按照以上操作完成功能开发</p></blockquote><p>结论：原始方式的分页查询，存在着”步骤固定”、”代码频繁”的问题</p><p>解决方案：可以使用一些现成的分页插件完成。对于Mybatis来讲现在最主流的就是PageHelper。</p><blockquote><p>PageHelper是Mybatis的一款功能强大、方便易用的分页插件，支持任何形式的单标、多表的分页查询。</p><p>官网：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p></blockquote><p><img src="/assets/image-20221215170038833.png" alt="image-20221215170038833"></p><blockquote><p>在执行empMapper.list()方法时，就是执行：select  *  from  emp   语句，怎么能够实现分页操作呢？</p><p>分页插件帮我们完成了以下操作：</p><ol><li>先获取到要执行的SQL语句：select  *  from  emp      </li><li>把SQL语句中的字段列表，变为：count(*)</li><li>执行SQL语句：select  count(*)  from  emp          &#x2F;&#x2F;获取到总记录数</li><li>再对要执行的SQL语句：select  *  from  emp 进行改造，在末尾添加 limit ? , ?</li><li>执行改造后的SQL语句：select  *  from  emp  limit  ? , ?</li></ol></blockquote><h5 id="3-1-2-2-代码实现"><a href="#3-1-2-2-代码实现" class="headerlink" title="3.1.2.2 代码实现"></a>3.1.2.2 代码实现</h5><p>当使用了PageHelper分页插件进行分页，就无需再Mapper中进行手动分页了。 在Mapper中我们只需要进行正常的列表查询即可。在Service层中，调用Mapper的方法之前设置分页参数，在调用Mapper方法执行查询之后，解析分页结果，并将结果封装到PageBean对象中返回。</p><p>1、在pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、EmpMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//获取当前页的结果列表</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(Integer start, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、EmpServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span> &#123;<br>    <span class="hljs-comment">// 设置分页参数</span><br>    PageHelper.startPage(page, pageSize); <br>    <span class="hljs-comment">// 执行分页查询</span><br>    List&lt;Emp&gt; empList = empMapper.list(name,gender,begin,end); <br>    <span class="hljs-comment">// 获取分页结果</span><br>    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;   <br>    <span class="hljs-comment">//封装PageBean</span><br>    <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(p.getTotal(), p.getResult()); <br>    <span class="hljs-keyword">return</span> pageBean;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-2-3-测试"><a href="#3-1-2-3-测试" class="headerlink" title="3.1.2.3 测试"></a>3.1.2.3 测试</h5><p>功能开发完成后，我们重启项目工程，打开postman，发起GET请求，访问 ：<a href="http://localhost:8080/emps?page=1&pageSize=5">http://localhost:8080/emps?page=1&amp;pageSize=5</a></p><p><img src="/assets/image-20221215162008339.png" alt="image-20221215162008339"></p><blockquote><p>后端程序SQL输出：</p><p><img src="/assets/image-20221215174820377.png" alt="image-20221215174820377"></p></blockquote><h3 id="3-2-分页查询-带条件"><a href="#3-2-分页查询-带条件" class="headerlink" title="3.2 分页查询(带条件)"></a>3.2 分页查询(带条件)</h3><p>完了分页查询后，下面我们需要在分页查询的基础上，添加条件。</p><h4 id="3-2-1-需求"><a href="#3-2-1-需求" class="headerlink" title="3.2.1 需求"></a>3.2.1 需求</h4><p><img src="/assets/image-20221215175639974.png" alt="image-20221215175639974"></p><p>通过员工管理的页面原型我们可以看到，员工列表页面的查询，不仅仅需要考虑分页，还需要考虑查询条件。 分页查询我们已经实现了，接下来，我们需要考虑在分页查询的基础上，再加上查询条件。</p><p>我们看到页面原型及需求中描述，搜索栏的搜索条件有三个，分别是：</p><ul><li>姓名：模糊匹配</li><li>性别：精确匹配</li><li>入职日期：范围匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * <br>from emp<br>where <br>  name like concat(&#x27;%&#x27;,&#x27;张&#x27;,&#x27;%&#x27;)   -- 条件1：根据姓名模糊匹配<br>  and gender = 1                   -- 条件2：根据性别精确匹配<br>  and entrydate = between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;  -- 条件3：根据入职日期范围匹配<br>order by update_time desc;<br></code></pre></td></tr></table></figure><p>而且上述的三个条件，都是可以传递，也可以不传递的，也就是动态的。 我们需要使用前面学习的Mybatis中的动态SQL 。</p><h4 id="3-2-2-思路分析"><a href="#3-2-2-思路分析" class="headerlink" title="3.2.2 思路分析"></a>3.2.2 思路分析</h4><p><img src="/assets/image-20221215180528415.png" alt="image-20221215180528415"></p><h4 id="3-2-3-功能开发"><a href="#3-2-3-功能开发" class="headerlink" title="3.2.3 功能开发"></a>3.2.3 功能开发</h4><p>通过查看接口文档：员工列表查询</p><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张</td><td>姓名</td></tr><tr><td>gender</td><td>否</td><td>1</td><td>性别 , 1 男 , 2 女</td></tr><tr><td>begin</td><td>否</td><td>2010-01-01</td><td>范围匹配的开始时间(入职日期)</td></tr><tr><td>end</td><td>否</td><td>2020-01-01</td><td>范围匹配的结束时间(入职日期)</td></tr><tr><td>page</td><td>是</td><td>1</td><td>分页查询的页码，如果未指定，默认为1</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>分页查询的每页记录数，如果未指定，默认为10</td></tr></tbody></table></blockquote><p>在原有分页查询的代码基础上进行改造：</p><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//条件分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span><br><span class="hljs-params">                       String name, Short gender,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize,name, gender, begin, end);<br>        <span class="hljs-comment">//调用业务层分页查询功能</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize, name, gender, begin, end);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page     页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize 每页展示记录数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name     姓名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender   性别</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin   开始时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end     结束时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//设置分页参数</span><br>        PageHelper.startPage(page, pageSize);<br>        <span class="hljs-comment">//执行条件分页查询</span><br>        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);<br>        <span class="hljs-comment">//获取查询结果</span><br>        Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;<br>        <span class="hljs-comment">//封装PageBean</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(p.getTotal(), p.getResult());<br>        <span class="hljs-keyword">return</span> pageBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//获取当前页的结果列表</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 条件分页查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>                name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                and gender = #&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>                and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by update_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-4-功能测试"><a href="#3-2-4-功能测试" class="headerlink" title="3.2.4 功能测试"></a>3.2.4 功能测试</h4><p>功能开发完成后，重启项目工程，打开postman，发起GET请求：</p><p><img src="/assets/image-20221215182344380.png" alt="image-20221215182344380"></p><blockquote><p>控制台SQL语句：</p><p><img src="/assets/image-20221215182952789.png" alt="image-20221215182952789"></p></blockquote><h4 id="3-2-5-前后端联调"><a href="#3-2-5-前后端联调" class="headerlink" title="3.2.5 前后端联调"></a>3.2.5 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215183510458.png" alt="image-20221215183510458"></p><h3 id="3-3-删除员工"><a href="#3-3-删除员工" class="headerlink" title="3.3 删除员工"></a>3.3 删除员工</h3><p>查询员完成之后，我们继续开发新的功能：删除员工。</p><h4 id="3-3-1-需求"><a href="#3-3-1-需求" class="headerlink" title="3.3.1 需求"></a>3.3.1 需求</h4><p><img src="/assets/image-20221215183657413.png" alt="image-20221215183657413"></p><p>当我们勾选列表前面的复选框，然后点击 “批量删除” 按钮，就可以将这一批次的员工信息删除掉了。也可以只勾选一个复选框，仅删除一个员工信息。</p><p>问题：我们需要开发两个功能接口吗？一个删除单个员工，一个删除多个员工</p><p>答案：不需要。 只需要开发一个功能接口即可（删除多个员工包含只删除一个员工）</p><h4 id="3-3-2-接口文档"><a href="#3-3-2-接口文档" class="headerlink" title="3.3.2 接口文档"></a>3.3.2 接口文档</h4><p><strong>删除员工</strong></p><ul><li><p>基本信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">请求路径：<span class="hljs-regexp">/emps/</span>&#123;ids&#125;<br><br>请求方式：<span class="hljs-keyword">DELETE</span><br><br>接口描述：该接口用于批量删除员工的数据信息<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>示例</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>ids</td><td>数组 array</td><td>1,2,3</td><td>必须</td><td>员工的id数组</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/emps/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-3-思路分析"><a href="#3-3-3-思路分析" class="headerlink" title="3.3.3 思路分析"></a>3.3.3 思路分析</h4><p><img src="/assets/image-20221215184714815.png" alt="image-20221215184714815"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;emps&#x2F;{ids}</li><li>前端请求方式：DELETE</li></ul><p>问题1：怎么在controller中接收请求路径中的路径参数？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@PathVariable</span><br></code></pre></td></tr></table></figure><p>问题2：如何限定请求方式是delete？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@DeleteMapping</span><br></code></pre></td></tr></table></figure><p>问题3：在Mapper接口中，执行delete操作的SQL语句时，条件中的id值是不确定的是动态的，怎么实现呢？</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Mybatis中的动态<span class="hljs-keyword">SQL</span>：<span class="hljs-keyword">foreach</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3-3-4-功能开发"><a href="#3-3-4-功能开发" class="headerlink" title="3.3.4 功能开发"></a>3.3.4 功能开发</h4><p>通过查看接口文档：删除员工</p><blockquote><p>请求路径：&#x2F;emps&#x2F;{ids}</p><p>请求方式：DELETE</p><p>请求参数：路径参数 {ids}</p><p>响应数据：json格式</p></blockquote><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;ids&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> List&lt;Integer&gt; ids)</span>&#123;<br>        empService.delete(ids);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//条件分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span><br><span class="hljs-params">                       String name, Short gender,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize,name, gender, begin, end);<br>        <span class="hljs-comment">//调用业务层分页查询功能</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize, name, gender, begin, end);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids id集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span> &#123;<br>        empMapper.delete(ids);<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--批量删除员工--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>        delete from emp where id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 省略... --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-5-功能测试"><a href="#3-3-5-功能测试" class="headerlink" title="3.3.5 功能测试"></a>3.3.5 功能测试</h4><p>功能开发完成后，重启项目工程，打开postman，发起DELETE请求：</p><p><img src="/assets/image-20221215190229696.png" alt="image-20221215190229696"></p><blockquote><p>控制台SQL语句：</p><p><img src="/assets/image-20221215190948723.png" alt="image-20221215190948723"></p></blockquote><h4 id="3-3-6-前后端联调"><a href="#3-3-6-前后端联调" class="headerlink" title="3.3.6 前后端联调"></a>3.3.6 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215190606676.png" alt="image-20221215190606676"></p><p><img src="/assets/image-20221215190640539.png" alt="image-20221215190640539"></p><p><img src="/assets/image-20221215190753313.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>33Mybatis基础操作</title>
    <link href="/2023/12/10/day33-Mybatis/"/>
    <url>/2023/12/10/day33-Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="33-1-Mybatis基础操作"><a href="#33-1-Mybatis基础操作" class="headerlink" title="33-1. Mybatis基础操作"></a>33-1. Mybatis基础操作</h1><p>学习完mybatis入门后，我们继续学习mybatis基础操作。</p><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h2><p>需求说明：</p><ul><li>根据资料中提供的《tlias智能学习辅助系统》页面原型及需求，完成员工管理的需求开发。</li></ul><p><img src="/assets/image-20221210180155700.png" alt="image-20221210180155700"> </p><p><img src="/assets/image-20221210180343288.png" alt="image-20221210180343288"></p><p><img src="/assets/image-20221210180515206.png" alt="image-20221210180515206"></p><p>通过分析以上的页面原型和需求，我们确定了功能列表：</p><ol><li><p>查询</p><ul><li>根据主键ID查询</li><li>条件查询</li></ul></li><li><p>新增</p></li><li><p>更新</p></li><li><p>删除</p><ul><li>根据主键ID删除</li><li>根据主键ID批量删除</li></ul></li></ol><h2 id="1-2-准备"><a href="#1-2-准备" class="headerlink" title="1.2 准备"></a>1.2 准备</h2><p>实施前的准备工作：</p><ol><li>准备数据库表</li><li>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</li><li>application.properties中引入数据库连接信息</li><li>创建对应的实体类 Emp（实体类属性采用驼峰命名）</li><li>准备Mapper接口 EmpMapper</li></ol><p><strong>准备数据库表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 部门管理<br>create table dept<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime    not null comment &#x27;创建时间&#x27;,<br>    update_time datetime    not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br>-- 部门表测试数据<br>insert into dept (id, name, create_time, update_time)<br>values (1, &#x27;学工部&#x27;, now(), now()),<br>       (2, &#x27;教研部&#x27;, now(), now()),<br>       (3, &#x27;咨询部&#x27;, now(), now()),<br>       (4, &#x27;就业部&#x27;, now(), now()),<br>       (5, &#x27;人事部&#x27;, now(), now());<br><br><br>-- 员工管理<br>create table emp<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,<br>    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name        varchar(10)      not null comment &#x27;姓名&#x27;,<br>    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image       varchar(300) comment &#x27;图像&#x27;,<br>    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>    entrydate   date comment &#x27;入职时间&#x27;,<br>    dept_id     int unsigned comment &#x27;部门ID&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br>-- 员工表测试数据<br>INSERT INTO emp (id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time)<br>VALUES <br>(1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, 2, now(), now()),<br>(2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, 2, now(), now()),<br>(3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, 2, now(), now()),<br>(4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, 2, now(), now()),<br>(5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, 2, now(), now()),<br>(6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, 1, now(), now()),<br>(7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, 1, now(), now()),<br>(8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, 1, now(), now()),<br>(9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, 1, now(), now()),<br>(10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, 1, now(), now()),<br>(11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 5, &#x27;2007-02-01&#x27;, 3, now(), now()),<br>(12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 5, &#x27;2008-08-18&#x27;, 3, now(), now()),<br>(13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 5, &#x27;2012-11-01&#x27;, 3, now(), now()),<br>(14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, 2, now(), now()),<br>(15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, 2, now(), now()),<br>(16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, 2, now(), now()),<br>(17, &#x27;chenyouliang&#x27;, &#x27;123456&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, NULL, &#x27;2015-03-21&#x27;, NULL, now(), now());<br></code></pre></td></tr></table></figure><p><strong>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</strong></p><p><img src="/assets/image-20221210182008131.png" alt="image-20221210182008131"></p><p><strong>application.properties中引入数据库连接信息</strong></p><blockquote><p>提示：可以把之前项目中已有的配置信息复制过来即可</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#驱动类名称</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment">#数据库连接的url</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-comment">#连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment">#连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><p><strong>创建对应的实体类Emp（实体类属性采用驼峰命名）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Short job;<br>    <span class="hljs-keyword">private</span> LocalDate entrydate;     <span class="hljs-comment">//LocalDate类型对应数据表中的date类型</span><br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<span class="hljs-comment">//LocalDateTime类型对应数据表中的datetime类型</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>准备Mapper接口：EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*@Mapper注解：表示当前接口为mybatis中的Mapper接口</span><br><span class="hljs-comment">  程序运行时会自动创建接口的实现类对象(代理对象)，并交给Spring的IOC容器管理</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>完成以上操作后，项目工程结构目录如下：</p><p><img src="/assets/image-20221210182500817.png" alt="image-20221210182500817"></p><h2 id="1-3-删除"><a href="#1-3-删除" class="headerlink" title="1.3 删除"></a>1.3 删除</h2><h3 id="1-3-1-功能实现"><a href="#1-3-1-功能实现" class="headerlink" title="1.3.1 功能实现"></a>1.3.1 功能实现</h3><p>页面原型：</p><p><img src="/assets/image-20221210183336095.png" alt="image-20221210183336095"></p><blockquote><p>当我们点击后面的”删除”按钮时，前端页面会给服务端传递一个参数，也就是该行数据的ID。 我们接收到ID后，根据ID删除数据即可。</p></blockquote><p><strong>功能：根据主键删除数据</strong></p><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 删除id=17的数据<br>delete from emp where id = 17;<br></code></pre></td></tr></table></figure><blockquote><p>Mybatis框架让程序员更关注于SQL语句</p></blockquote><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <br>    <span class="hljs-comment">//@Delete(&quot;delete from emp where id = 17&quot;)</span><br>    <span class="hljs-comment">//public void delete();</span><br>    <span class="hljs-comment">//以上delete操作的SQL语句中的id值写成固定的17，就表示只能删除id=17的用户数据</span><br>    <span class="hljs-comment">//SQL语句中的id值不能写成固定数值，需要变为动态的数值</span><br>    <span class="hljs-comment">//解决方案：在delete方法中添加一个参数(用户id)，将方法中的参数，传给SQL语句</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id    用户id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><span class="hljs-comment">//使用#&#123;key&#125;方式获取方法中的参数值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Delete注解：用于编写delete操作的SQL语句</p></blockquote><blockquote><p>如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，如：#{id}、#{value}。但是建议保持名字一致。</p></blockquote><ul><li>测试<ul><li>在单元测试类中通过@Autowired注解注入EmpMapper类型对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//从Spring的IOC容器中，获取类型是EmpMapper的对象并注入</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//调用删除方法</span><br>        empMapper.delete(<span class="hljs-number">16</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-2-日志输入"><a href="#1-3-2-日志输入" class="headerlink" title="1.3.2 日志输入"></a>1.3.2 日志输入</h3><p>在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作如下：</p><ol><li><p>打开application.properties文件</p></li><li><p>开启mybatis的日志，并指定输出到控制台</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#指定mybatis输出日志的位置, 输出控制台</span><br><span class="hljs-attr">mybatis.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p>开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：</p><p><img src="/assets/image-20220901164225644.png" alt="image-20220901164225644"> </p><blockquote><p>但是我们发现输出的SQL语句：delete from emp where id &#x3D; ?，我们输入的参数16并没有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL。</p></blockquote><h3 id="1-3-3-预编译SQL"><a href="#1-3-3-预编译SQL" class="headerlink" title="1.3.3 预编译SQL"></a>1.3.3 预编译SQL</h3><h4 id="1-3-3-1-介绍"><a href="#1-3-3-1-介绍" class="headerlink" title="1.3.3.1 介绍"></a>1.3.3.1 介绍</h4><p>预编译SQL有两个优势：</p><ol><li>性能更高</li><li>更安全(防止SQL注入)</li></ol><p><img src="/assets/image-20221210202222206.png" alt="image-20221210202222206"></p><blockquote><p>性能更高：预编译SQL，编译一次之后会将编译后的SQL语句缓存起来，后面再次执行这条语句时，不会再次编译。（只是输入的参数不同）</p><p>更安全(防止SQL注入)：将敏感字进行转义，保障SQL的安全性。</p></blockquote><h4 id="1-3-3-2-SQL注入"><a href="#1-3-3-2-SQL注入" class="headerlink" title="1.3.3.2 SQL注入"></a>1.3.3.2 SQL注入</h4><p>SQL注入：是通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。</p><blockquote><p>由于没有对用户输入进行充分检查，而SQL又是拼接而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，也可以完成恶意攻击。</p></blockquote><p><strong>测试1：使用资料中提供的程序，来验证SQL注入问题</strong></p><p><img src="/assets/image-20221210205419634.png" alt="image-20221210205419634"></p><p>第1步：进入到DOS</p><p><img src="/assets/image-20221211124744203.png" alt="image-20221211124744203"></p><p><img src="/assets/image-20221211124840720.png" alt="image-20221211124840720"></p><p>第2步：执行以下命令，启动程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#启动存在SQL注入的程序</span><br>java <span class="hljs-literal">-jar</span> sql_Injection_demo<span class="hljs-literal">-0</span>.<span class="hljs-number">0.1</span><span class="hljs-literal">-SNAPSHOT</span>.jar <br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221210211605231.png" alt="image-20221210211605231"></p><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="/assets/image-20221210212406527.png" alt="image-20221210212406527"></p><p>发现竟然能够登录成功：</p><p><img src="/assets/image-20221210212511915.png" alt="image-20221210212511915"></p><p>以上操作为什么能够登录成功呢？</p><ul><li>由于没有对用户输入内容进行充分检查，而SQL又是字符串拼接方式而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，从而完成恶意攻击。</li></ul><p><img src="/assets/image-20221210213311518.png" alt="image-20221210213311518"></p><blockquote><p><img src="/assets/image-20221210214431228.png" alt="image-20221210214431228"></p><p>用户在页面提交数据的时候人为的添加一些特殊字符，使得sql语句的结构发生了变化，最终可以在没有用户名或者密码的情况下进行登录。</p></blockquote><p><strong>测试2：使用资料中提供的程序，来验证SQL注入问题</strong></p><p>第1步：进入到DOS</p><p>第2步：执行以下命令，启动程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#启动解决了SQL注入的程序</span><br>java <span class="hljs-literal">-jar</span> sql_prepared_demo<span class="hljs-literal">-0</span>.<span class="hljs-number">0.1</span><span class="hljs-literal">-SNAPSHOT</span>.jar<br></code></pre></td></tr></table></figure><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="/assets/image-20221210212406527.png" alt="image-20221210212406527"></p><p>发现无法登录：</p><p><img src="/assets/image-20221211125751981.png" alt="image-20221211125751981"></p><p>以上操作SQL语句的执行：</p><p><img src="/assets/image-20221211130011973.png" alt="image-20221211130011973"></p><blockquote><p>把整个<code>&#39; or &#39;1&#39;=&#39;1</code>作为一个完整的参数，赋值给第2个问号（<code>&#39; or &#39;1&#39;=&#39;1</code>进行了转义，只当做字符串使用）</p></blockquote><h4 id="1-3-3-3-参数占位符"><a href="#1-3-3-3-参数占位符" class="headerlink" title="1.3.3.3 参数占位符"></a>1.3.3.3 参数占位符</h4><p>在Mybatis中提供的参数占位符有两种：${…} 、#{…}</p><ul><li><p>#{…}</p><ul><li>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用#{…}</li></ul></li><li><p>${…}</p><ul><li>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：如果对表名、列表进行动态设置时使用</li></ul></li></ul><blockquote><p>注意事项：在项目开发中，建议使用#{…}，生成预编译SQL，防止SQL注入安全。</p></blockquote><h2 id="1-4-新增"><a href="#1-4-新增" class="headerlink" title="1.4 新增"></a>1.4 新增</h2><p>功能：新增员工信息</p><p><img src="/assets/image-20221211134239610.png" alt="image-20221211134239610"></p><h3 id="1-4-1-基本新增"><a href="#1-4-1-基本新增" class="headerlink" title="1.4.1 基本新增"></a>1.4.1 基本新增</h3><p>员工表结构：</p><p><img src="/assets/image-20221211134746319.png" alt="image-20221211134746319"></p><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;songyuanqiao&#x27;</span>,<span class="hljs-string">&#x27;宋远桥&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1.jpg&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2012-10-09&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2022-10-01 10:00:00&#x27;</span>,<span class="hljs-string">&#x27;2022-10-01 10:00:00&#x27;</span>);<br></code></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：#{…} 里面写的名称是对象的属性名</p></blockquote><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Emp;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建员工对象</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>        emp.setName(<span class="hljs-string">&quot;汤姆&quot;</span>);<br>        emp.setImage(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setJob((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setCreateTime(LocalDateTime.now());<br>        emp.setUpdateTime(LocalDateTime.now());<br>        emp.setDeptId(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//调用添加方法</span><br>        empMapper.insert(emp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>日志输出：</p><p><img src="/assets/image-20221211140222240.png" alt="image-20221211140222240"></p></blockquote><h3 id="1-4-2-主键返回"><a href="#1-4-2-主键返回" class="headerlink" title="1.4.2 主键返回"></a>1.4.2 主键返回</h3><p>概念：在数据添加成功后，需要获取插入数据库数据的主键。</p><blockquote><p>如：添加套餐数据时，还需要维护套餐菜品关系表数据。</p><p><img src="/assets/image-20221211150353385.png" alt="image-20221211150353385"></p><p>业务场景：在前面讲解到的苍穹外卖菜品与套餐模块的表结构，菜品与套餐是多对多的关系，一个套餐对应多个菜品。既然是多对多的关系，是不是有一张套餐菜品中间表来维护它们之间的关系。</p><p><img src="/assets/image-20221212093655389.png" alt="image-20221212093655389"></p><p>在添加套餐的时候，我们需要在界面当中来录入套餐的基本信息，还需要来录入套餐与菜品的关联信息。这些信息录入完毕之后，我们一点保存，就需要将套餐的信息以及套餐与菜品的关联信息都需要保存到数据库当中。其实具体的过程包括两步，首先第一步先需要将套餐的基本信息保存了，接下来第二步再来保存套餐与菜品的关联信息。套餐与菜品的关联信息就是往中间表当中来插入数据，来维护它们之间的关系。而中间表当中有两个外键字段，一个是菜品的ID，就是当前菜品的ID，还有一个就是套餐的ID，而这个套餐的 ID 指的就是此次我所添加的套餐的ID，所以我们在第一步保存完套餐的基本信息之后，就需要将套餐的主键值返回来供第二步进行使用。这个时候就需要用到主键返回功能。</p></blockquote><p>那要如何实现在插入数据之后返回所插入行的主键值呢？</p><ul><li>默认情况下，执行插入操作时，是不会主键值返回的。如果我们想要拿到主键值，需要在Mapper接口中的方法上添加一个Options注解，并在注解中指定属性useGeneratedKeys&#x3D;true和keyProperty&#x3D;”实体类属性名”</li></ul><p>主键返回代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <br>    <span class="hljs-comment">//会自动将生成的主键值，赋值给emp对象的id属性</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建员工对象</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>        emp.setName(<span class="hljs-string">&quot;杰克&quot;</span>);<br>        emp.setImage(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setJob((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setCreateTime(LocalDateTime.now());<br>        emp.setUpdateTime(LocalDateTime.now());<br>        emp.setDeptId(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//调用添加方法</span><br>        empMapper.insert(emp);<br><br>        System.out.println(emp.getDeptId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-更新"><a href="#1-5-更新" class="headerlink" title="1.5 更新"></a>1.5 更新</h2><p>功能：修改员工信息</p><p><img src="/assets/image-20221212095605863.png" alt="image-20221212095605863"></p><blockquote><p>点击”编辑”按钮后，会查询所在行记录的员工信息，并把员工信息回显在修改员工的窗体上(下个知识点学习)</p><p>在修改员工的窗体上，可以修改的员工数据：用户名、员工姓名、性别、图像、职位、入职日期、归属部门</p><p>思考：在修改员工数据时，要以什么做为条件呢？</p><p>答案：员工id</p></blockquote><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;linghushaoxia&#x27;</span>, name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;令狐少侠&#x27;</span>, gender <span class="hljs-operator">=</span> <span class="hljs-number">1</span> , image <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1.jpg&#x27;</span> , job <span class="hljs-operator">=</span> <span class="hljs-number">2</span>, entrydate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2012-01-01&#x27;</span>, dept_id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>, update_time <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2022-10-01 12:12:12&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id修改员工信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Update(&quot;update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//要修改的员工信息</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">23</span>);<br>        emp.setUsername(<span class="hljs-string">&quot;songdaxia&quot;</span>);<br>        emp.setPassword(<span class="hljs-literal">null</span>);<br>        emp.setName(<span class="hljs-string">&quot;老宋&quot;</span>);<br>        emp.setImage(<span class="hljs-string">&quot;2.jpg&quot;</span>);<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setJob((<span class="hljs-type">short</span>)<span class="hljs-number">2</span>);<br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2012</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setCreateTime(<span class="hljs-literal">null</span>);<br>        emp.setUpdateTime(LocalDateTime.now());<br>        emp.setDeptId(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//调用方法，修改员工数据</span><br>        empMapper.update(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-查询"><a href="#1-6-查询" class="headerlink" title="1.6 查询"></a>1.6 查询</h2><h3 id="1-6-1-根据ID查询"><a href="#1-6-1-根据ID查询" class="headerlink" title="1.6.1 根据ID查询"></a>1.6.1 根据ID查询</h3><p>在员工管理的页面中，当我们进行更新数据时，会点击 “编辑” 按钮，然后此时会发送一个请求到服务端，会根据Id查询该员工信息，并将员工数据回显在页面上。</p><p><img src="/assets/image-20221212101331292.png" alt="image-20221212101331292"> </p><p>SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp;<br></code></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empMapper.getById(<span class="hljs-number">1</span>);<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行结果：</p><p><img src="/assets/image-20221212103004961.png" alt="image-20221212103004961"></p><p>而在测试的过程中，我们会发现有几个字段(deptId、createTime、updateTime)是没有数据值的</p></blockquote><h3 id="1-6-2-数据封装"><a href="#1-6-2-数据封装" class="headerlink" title="1.6.2 数据封装"></a>1.6.2 数据封装</h3><p>我们看到查询返回的结果中大部分字段是有值的，但是deptId，createTime，updateTime这几个字段是没有值的，而数据库中是有对应的字段值的，这是为什么呢？</p><p><img src="/assets/image-20221212103124490.png" alt="image-20221212103124490"></p><p>原因如下： </p><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</li></ul><p> 解决方案：</p><ol><li>起别名</li><li>结果映射</li><li>开启驼峰命名</li></ol><p><strong>起别名</strong>：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, &quot; +</span><br><span class="hljs-meta">        &quot;dept_id AS deptId, create_time AS createTime, update_time AS updateTime &quot; +</span><br><span class="hljs-meta">        &quot;from emp &quot; +</span><br><span class="hljs-meta">        &quot;where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>再次执行测试类：</p><p><img src="/assets/image-20221212111027396.png" alt="image-20221212111027396"></p></blockquote><p><strong>手动结果映射</strong>：通过 @Results及@Result 进行手动结果映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Results(&#123;@Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span><br><span class="hljs-meta">          @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span><br><span class="hljs-meta">          @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)&#125;)</span><br><span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>@Results源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Results &#123;<br> String <span class="hljs-title function_">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br> Result[] value() <span class="hljs-keyword">default</span> &#123;&#125;;  <span class="hljs-comment">//Result类型的数组</span><br>&#125;<br></code></pre></td></tr></table></figure><p>@Result源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Repeatable(Results.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Result &#123;<br> <span class="hljs-type">boolean</span> <span class="hljs-title function_">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//表示当前列是否为主键（true:是主键）</span><br><br> String <span class="hljs-title function_">column</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//指定表中字段名</span><br><br> String <span class="hljs-title function_">property</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//指定类中属性名</span><br><br> Class&lt;?&gt; javaType() <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span>.class;<br><br> JdbcType <span class="hljs-title function_">jdbcType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> JdbcType.UNDEFINED;<br><br> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&gt; typeHandler() <span class="hljs-keyword">default</span> UnknownTypeHandler.class;<br><br> One <span class="hljs-title function_">one</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-meta">@One</span>;<br><br> Many <span class="hljs-title function_">many</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-meta">@Many</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>**开启驼峰命名(推荐)**：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</p><blockquote><p>驼峰命名规则：   abc_xyz    &#x3D;&gt;   abcXyz</p><ul><li>表中字段名：abc_xyz</li><li>类中属性名：abcXyz</li></ul></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 在application.properties中添加：</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><blockquote><p>要使用驼峰命名前提是 实体类的属性 与 数据库表中的字段名严格遵守驼峰命名。</p></blockquote><h3 id="1-6-3-条件查询"><a href="#1-6-3-条件查询" class="headerlink" title="1.6.3 条件查询"></a>1.6.3 条件查询</h3><p>在员工管理的列表页面中，我们需要根据条件查询员工信息，查询条件包括：姓名、性别、入职时间。 </p><p><img src="/assets/image-20221212113422924.png" alt="image-20221212113422924"></p><p>通过页面原型以及需求描述我们要实现的查询：</p><ul><li>姓名：要求支持模糊匹配</li><li>性别：要求精确匹配</li><li>入职时间：要求进行范围查询</li><li>根据最后修改时间进行降序排序</li></ul><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time <br><span class="hljs-keyword">from</span> emp <br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%张%&#x27;</span> <br>      <span class="hljs-keyword">and</span> gender <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <br>      <span class="hljs-keyword">and</span> entrydate <span class="hljs-keyword">between</span> <span class="hljs-string">&#x27;2010-01-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;2020-01-01 &#x27;</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> update_time <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>接口方法：</p><ul><li>方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from emp &quot; +</span><br><span class="hljs-meta">            &quot;where name like &#x27;%$&#123;name&#125;%&#x27; &quot; +</span><br><span class="hljs-meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span><br><span class="hljs-meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span><br><span class="hljs-meta">            &quot;order by update_time desc&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><img src="/assets/image-20221212115149151.png" alt="image-20221212115149151"></p><p>以上方式注意事项：</p><ol><li><p>方法中的形参名和SQL语句中的参数占位符名保持一致</p></li><li><p>模糊查询使用${…}进行字符串拼接，这种方式呢，由于是字符串拼接，并不是预编译的形式，所以效率不高、且存在sql注入风险。</p></li></ol></blockquote><ul><li>方式二（解决SQL注入风险）<ul><li>使用MySQL提供的字符串拼接函数：concat(‘%’ , ‘关键字’ , ‘%’)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from emp &quot; +</span><br><span class="hljs-meta">            &quot;where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) &quot; +</span><br><span class="hljs-meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span><br><span class="hljs-meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span><br><span class="hljs-meta">            &quot;order by update_time desc&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>执行结果：生成的SQL都是预编译的SQL语句（性能高、安全）</p><p><img src="/assets/image-20221212120006242.png" alt="image-20221212120006242"></p></blockquote><h3 id="1-6-4-参数名说明"><a href="#1-6-4-参数名说明" class="headerlink" title="1.6.4 参数名说明"></a>1.6.4 参数名说明</h3><p>在上面我们所编写的条件查询功能中，我们需要保证接口中方法的形参名和SQL语句中的参数占位符名相同。</p><blockquote><p>当方法中的形参名和SQL语句中的占位符参数名不相同时，就会出现以下问题：</p><p><img src="/assets/image-20221212150611796.png" alt="image-20221212150611796"></p></blockquote><p>参数名在不同的SpringBoot版本中，处理方案还不同：</p><ul><li>在springBoot的2.x版本（保证参数名一致）</li></ul><p><img src="/assets/image-20221212151156273.png" alt="image-20221212151156273"></p><blockquote><p>springBoot的父工程对compiler编译插件进行了默认的参数parameters配置，使得在编译时，会在生成的字节码文件中保留原方法形参的名称，所以#{…}里面可以直接通过形参名获取对应的值</p><p><img src="/assets/image-20221212151411154.png" alt="image-20221212151411154"></p></blockquote><ul><li>在springBoot的1.x版本&#x2F;单独使用mybatis（使用@Param注解来指定SQL语句中的参数名）</li></ul><p><img src="/assets/image-20221212151628715.png" alt="image-20221212151628715"></p><blockquote><p>在编译时，生成的字节码文件当中，不会保留Mapper接口中方法的形参名称，而是使用var1、var2、…这样的形参名字，此时要获取参数值时，就要通过@Param注解来指定SQL语句中的参数名</p><p><img src="/assets/image-20221212151736274.png" alt="image-20221212151736274"></p></blockquote><h1 id="2-Mybatis的XML配置文件"><a href="#2-Mybatis的XML配置文件" class="headerlink" title="2. Mybatis的XML配置文件"></a>2. Mybatis的XML配置文件</h1><p>Mybatis的开发有两种方式：</p><ol><li>注解</li><li>XML</li></ol><h2 id="2-1-XML配置文件规范"><a href="#2-1-XML配置文件规范" class="headerlink" title="2.1 XML配置文件规范"></a>2.1 XML配置文件规范</h2><p>使用Mybatis的注解方式，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句，也就是将SQL语句写在XML配置文件中。</p><p>在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ol><li><p>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</p></li><li><p>XML映射文件的namespace属性为Mapper接口全限定名一致</p></li><li><p>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</p></li></ol><p><img src="/assets/image-20221212153529732.png" alt="image-20221212153529732"></p><blockquote><p>&lt;select&gt;标签：就是用于编写select查询语句的。</p><ul><li>resultType属性，指的是查询返回的单条记录所封装的类型。</li></ul></blockquote><h2 id="2-2-XML配置文件实现"><a href="#2-2-XML配置文件实现" class="headerlink" title="2.2 XML配置文件实现"></a>2.2 XML配置文件实现</h2><p>第1步：创建XML映射文件</p><p><img src="/assets/image-20221212154908306.png" alt="image-20221212154908306"></p><p><img src="/assets/image-20221212155304635.png" alt="image-20221212155304635"></p><p><img src="/assets/image-20221212155544404.png" alt="image-20221212155544404"></p><p>第2步：编写XML映射文件</p><blockquote><p>xml映射文件中的dtd约束，直接从mybatis官网复制即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置：XML映射文件的namespace属性为Mapper接口全限定名</p><p><img src="/assets/image-20221212160316644.png" alt="image-20221212160316644"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置：XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</p><p><img src="/assets/image-20221212163528787.png" alt="image-20221212163528787"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>              and gender = #&#123;gender&#125;<br>              and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        order by update_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>运行测试类，执行结果：</p><p><img src="/assets/image-20221212163719534.png" alt="image-20221212163719534"></p></blockquote><h2 id="2-3-MybatisX的使用"><a href="#2-3-MybatisX的使用" class="headerlink" title="2.3 MybatisX的使用"></a>2.3 MybatisX的使用</h2><p>MybatisX是一款基于IDEA的快速开发Mybatis的插件，为效率而生。</p><p>MybatisX的安装：</p><p><img src="/assets/image-20221213120923252.png" alt="image-20221213120923252"></p><p>可以通过MybatisX快速定位：</p><p><img src="/assets/image-20221213121521406.png" alt="image-20221213121521406"></p><blockquote><p>MybatisX的使用在后续学习中会继续分享</p></blockquote><p>学习了Mybatis中XML配置文件的开发方式了，大家可能会存在一个疑问：到底是使用注解方式开发还是使用XML方式开发？</p><blockquote><p>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></p><p><img src="/assets/image-20220901173948645.png" alt="image-20220901173948645"> </p></blockquote><p><strong>结论：</strong>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p><h1 id="3-Mybatis动态SQL"><a href="#3-Mybatis动态SQL" class="headerlink" title="3. Mybatis动态SQL"></a>3. Mybatis动态SQL</h1><h2 id="3-1-什么是动态SQL"><a href="#3-1-什么是动态SQL" class="headerlink" title="3.1 什么是动态SQL"></a>3.1 什么是动态SQL</h2><p>在页面原型中，列表上方的条件是动态的，是可以不传递的，也可以只传递其中的1个或者2个或者全部。</p><p><img src="/assets/image-20220901172933012.png"></p><p><img src="/assets/image-20220901173203491.png" alt="image-20220901173203491"></p><p>而在我们刚才编写的SQL语句中，我们会看到，我们将三个条件直接写死了。 如果页面只传递了参数姓名name 字段，其他两个字段 性别 和 入职时间没有传递，那么这两个参数的值就是null。</p><p>此时，执行的SQL语句为：</p><p><img src="/assets/image-20220901173431554.png" alt="image-20220901173431554"> </p><p>这个查询结果是不正确的。正确的做法应该是：传递了参数，再组装这个查询条件；如果没有传递参数，就不应该组装这个查询条件。</p><p>比如：如果姓名输入了”张”, 对应的SQL为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%张%&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> update_time <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>如果姓名输入了”张”,，性别选择了”男”，则对应的SQL为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%张%&#x27;</span> <span class="hljs-keyword">and</span> gender <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> update_time <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：<strong>动态SQL</strong>。</p><p><img src="/assets/image-20221213122623278.png" alt="image-20221213122623278"></p><p>在Mybatis中提供了很多实现动态SQL的标签，我们学习Mybatis中的动态SQL就是掌握这些动态SQL标签。</p><h2 id="3-2-动态SQL-if"><a href="#3-2-动态SQL-if" class="headerlink" title="3.2 动态SQL-if"></a>3.2 动态SQL-if</h2><p><code>&lt;if&gt;</code>：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;条件表达式&quot;</span>&gt;</span><br>   要拼接的sql语句<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们就通过<code>&lt;if&gt;</code>标签来改造之前条件查询的案例。</p><h3 id="3-2-1-条件查询"><a href="#3-2-1-条件查询" class="headerlink" title="3.2.1 条件查询"></a>3.2.1 条件查询</h3><p>示例：把SQL语句改造为动态SQL方式</p><ul><li>原有的SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>              and gender = #&#123;gender&#125;<br>              and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>动态SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        where<br>    <br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                 name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                 and gender = #&#123;gender&#125;<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <br>        order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//性别数据为null、开始时间和结束时间也为null</span><br>    List&lt;Emp&gt; list = empMapper.list(<span class="hljs-string">&quot;张&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">for</span>(Emp emp : list)&#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行的SQL语句： </p><p><img src="/assets/image-20221213140353285.png" alt="image-20221213140353285"></p></blockquote><p>下面呢，我们修改测试方法中的代码，再次进行测试，观察执行情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//姓名为null</span><br>    List&lt;Emp&gt; list = empMapper.list(<span class="hljs-literal">null</span>, (<span class="hljs-type">short</span>)<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">for</span>(Emp emp : list)&#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/assets/image-20221213141139015.png" alt="image-20221213141139015"> </p><p><img src="/assets/image-20221213141253355.png" alt="image-20221213141253355"> </p><p>再次修改测试方法中的代码，再次进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//传递的数据全部为null</span><br>    List&lt;Emp&gt; list = empMapper.list(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">for</span>(Emp emp : list)&#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行的SQL语句：</p><p><img src="/assets/image-20221213143854434.png" alt="image-20221213143854434"></p><p>以上问题的解决方案：使用<code>&lt;where&gt;</code>标签代替SQL语句中的where关键字</p><ul><li><code>&lt;where&gt;</code>只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>             <span class="hljs-comment">&lt;!-- if做为where标签的子元素 --&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                 and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                 and gender = #&#123;gender&#125;<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//只有性别</span><br>    List&lt;Emp&gt; list = empMapper.list(<span class="hljs-literal">null</span>, (<span class="hljs-type">short</span>)<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">for</span>(Emp emp : list)&#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="/assets/image-20221213141909455.png" alt="image-20221213141909455"></p></blockquote><h3 id="3-2-2-更新员工"><a href="#3-2-2-更新员工" class="headerlink" title="3.2.2 更新员工"></a>3.2.2 更新员工</h3><p>案例：完善更新员工功能，修改为动态更新员工数据信息</p><ul><li>动态更新员工信息，如果更新时传递有值，则更新；如果更新时没有传递值，则不更新</li><li>解决方案：动态SQL</li></ul><p>修改Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//删除@Update注解编写的SQL语句</span><br>    <span class="hljs-comment">//update操作的SQL语句编写在Mapper映射文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改Mapper映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--更新操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        update emp<br>        set<br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>                username=#&#123;username&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                name=#&#123;name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                gender=#&#123;gender&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span><br>                image=#&#123;image&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null&quot;</span>&gt;</span><br>                job=#&#123;job&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;entrydate != null&quot;</span>&gt;</span><br>                entrydate=#&#123;entrydate&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptId != null&quot;</span>&gt;</span><br>                dept_id=#&#123;deptId&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>                update_time=#&#123;updateTime&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//要修改的员工信息</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">20</span>);<br>        emp.setUsername(<span class="hljs-string">&quot;Tom111&quot;</span>);<br>        emp.setName(<span class="hljs-string">&quot;汤姆111&quot;</span>);<br><br>        emp.setUpdateTime(LocalDateTime.now());<br><br>        <span class="hljs-comment">//调用方法，修改员工数据</span><br>        empMapper.update(emp);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="/assets/image-20221213152533851.png" alt="image-20221213152533851"></p></blockquote><p>再次修改测试方法，观察SQL语句执行情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//要修改的员工信息</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">20</span>);<br>        emp.setUsername(<span class="hljs-string">&quot;Tom222&quot;</span>);<br>      <br>        <span class="hljs-comment">//调用方法，修改员工数据</span><br>        empMapper.update(emp);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="/assets/image-20221213152850322.png" alt="image-20221213152850322"></p></blockquote><p>以上问题的解决方案：使用<code>&lt;set&gt;</code>标签代替SQL语句中的set关键字</p><ul><li><code>&lt;set&gt;</code>：动态的在SQL语句中插入set关键字，并会删掉额外的逗号。（用于update语句中）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--更新操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        update emp<br>        <span class="hljs-comment">&lt;!-- 使用set标签，代替update语句中的set关键字 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>                username=#&#123;username&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                name=#&#123;name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                gender=#&#123;gender&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span><br>                image=#&#123;image&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null&quot;</span>&gt;</span><br>                job=#&#123;job&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;entrydate != null&quot;</span>&gt;</span><br>                entrydate=#&#123;entrydate&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptId != null&quot;</span>&gt;</span><br>                dept_id=#&#123;deptId&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>                update_time=#&#123;updateTime&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>再次执行测试方法，执行的SQL语句：</p><p><img src="/assets/image-20221213153329553.png" alt="image-20221213153329553"></p></blockquote><p><strong>小结</strong></p><ul><li><p><code>&lt;if&gt;</code></p><ul><li><p>用于判断条件是否成立，如果条件为true，则拼接SQL</p></li><li><p>形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span> … <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>&lt;where&gt;</code></p><ul><li>where元素只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul></li><li><p><code>&lt;set&gt;</code></p><ul><li>动态地在行首插入 SET 关键字，并会删掉额外的逗号。（用在update语句中）</li></ul></li></ul><h2 id="3-3-动态SQL-foreach"><a href="#3-3-动态SQL-foreach" class="headerlink" title="3.3 动态SQL-foreach"></a>3.3 动态SQL-foreach</h2><p>案例：员工删除功能（既支持删除单条记录，又支持批量删除）</p><p><img src="/assets/image-20220901181751004.png" alt="image-20220901181751004"> </p><p>SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from emp where id in (1,2,3);<br></code></pre></td></tr></table></figure><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>XML映射文件：</p><ul><li>使用<code>&lt;foreach&gt;</code>遍历deleteByIds方法中传递的参数ids集合</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;集合名称&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;集合遍历出来的元素/项&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;每一次遍历使用的分隔符&quot;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;遍历开始前拼接的片段&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;遍历结束后拼接的片段&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--删除操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>        delete from emp where id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span> <br></code></pre></td></tr></table></figure><blockquote><p><img src="/assets/image-20221213165710141.png" alt="image-20221213165710141"></p></blockquote><blockquote><p>执行的SQL语句：</p><p><img src="/assets/image-20221213164957636.png" alt="image-20221213164957636"></p></blockquote><h2 id="3-4-动态SQL-sql-amp-include"><a href="#3-4-动态SQL-sql-amp-include" class="headerlink" title="3.4 动态SQL-sql&amp;include"></a>3.4 动态SQL-sql&amp;include</h2><p>问题分析：</p><ul><li>在xml映射文件中配置的SQL，有时可能会存在很多重复的片段，此时就会存在很多冗余的代码</li></ul><p><img src="/assets/image-20220901182204358.png"></p><p><img src="/assets/image-20220901182249421.png"></p><p>我们可以对重复的代码片段进行抽取，将其通过<code>&lt;sql&gt;</code>标签封装到一个SQL片段，然后再通过<code>&lt;include&gt;</code>标签进行引用。</p><ul><li><p><code>&lt;sql&gt;</code>：定义可重用的SQL片段</p></li><li><p><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</p></li></ul><p><img src="/assets/image-20221213171244796.png" alt="image-20221213171244796"></p><p>SQL片段： 抽取重复的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;commonSelect&quot;</span>&gt;</span><br> select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过<code>&lt;include&gt;</code> 标签在原来抽取的地方进行引用。操作如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;commonSelect&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>            and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>32MySQL</title>
    <link href="/2023/12/10/day32-Mybatis%E5%85%A5%E9%97%A8/"/>
    <url>/2023/12/10/day32-Mybatis%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="32-Mybatis入门"><a href="#32-Mybatis入门" class="headerlink" title="32-Mybatis入门"></a>32-Mybatis入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面我们学习MySQL数据库时，都是利用图形化客户端工具(如：idea、datagrip)，来操作数据库的。</p><blockquote><p>在客户端工具中，编写增删改查的SQL语句，发给MySQL数据库管理系统，由数据库管理系统执行SQL语句并返回执行结果。</p><p>增删改操作：返回受影响行数</p><p>查询操作：返回结果集(查询的结果)</p></blockquote><p>我们做为后端程序开发人员，通常会使用Java程序来完成对数据库的操作。Java程序操作数据库，现在主流的方式是：Mybatis。</p><p>什么是MyBatis?</p><ul><li><p>MyBatis是一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发。</p></li><li><p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><p>在上面我们提到了两个词：一个是持久层，另一个是框架。</p><ul><li>持久层：指的是就是数据访问层(dao)，是用来操作数据库的。</li></ul><p><img src="/assets/image-20220901114951631.png" alt="image-20220901114951631"> </p><ul><li>框架：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础上进行软件开发更加高效、规范、通用、可拓展。</li></ul><p>Mybatis课程安排：</p><ul><li><p>Mybatis入门</p></li><li><p>Mybatis基础增删改查</p></li><li><p>Mybatis动态SQL</p></li></ul><p>接下来，我们就通过一个入门程序，让大家快速感受一下通过Mybatis如何来操作数据库。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><p>需求：使用Mybatis查询所有用户数据。</p><h3 id="1-1-入门程序分析"><a href="#1-1-入门程序分析" class="headerlink" title="1.1 入门程序分析"></a>1.1 入门程序分析</h3><p>以前我们是在图形化客户端工具中编写SQL查询代码，发送给数据库执行，数据库执行后返回操作结果。</p><p><img src="/assets/image-20221209155704203.png" alt="image-20221209155704203"> </p><p>图形化工具会把数据库执行的查询结果，使用表格的形式展现出来</p><p><img src="/assets/image-20220901121116813.png" alt="image-20220901121116813"> </p><p>现在使用Mybatis操作数据库，就是在Mybatis中编写SQL查询代码，发送给数据库执行，数据库执行后返回结果。</p><p><img src="/assets/image-20221209155904370.png" alt="image-20221209155904370"></p><p> Mybatis会把数据库执行的查询结果，使用实体类封装起来（一行记录对应一个实体类对象）</p><p><img src="/assets/image-20221209161623051.png" alt="image-20221209161623051"></p><p>Mybatis操作数据库的步骤：</p><ol><li><p>准备工作(创建springboot工程、数据库表user、实体类User)</p></li><li><p>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</p></li><li><p>编写SQL语句(注解&#x2F;XML)</p></li></ol><h3 id="1-2-入门程序实现"><a href="#1-2-入门程序实现" class="headerlink" title="1.2 入门程序实现"></a>1.2 入门程序实现</h3><h4 id="1-2-1-准备工作"><a href="#1-2-1-准备工作" class="headerlink" title="1.2.1 准备工作"></a>1.2.1 准备工作</h4><h5 id="1-2-1-1-创建springboot工程"><a href="#1-2-1-1-创建springboot工程" class="headerlink" title="1.2.1.1 创建springboot工程"></a>1.2.1.1 创建springboot工程</h5><p>创建springboot工程，并导入 mybatis的起步依赖、mysql的驱动包。</p><p><img src="/assets/image-20221209162827242.png" alt="image-20221209162827242"></p><p><img src="/assets/image-20221209163123443.png" alt="image-20221209163123443"></p><blockquote><p>项目工程创建完成后，自动在pom.xml文件中，导入Mybatis依赖和MySQL驱动依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 仅供参考：只粘贴了pom.xml中部分内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mybatis起步依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mysql驱动包依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- spring单元测试 (集成了junit) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-1-2-数据准备"><a href="#1-2-1-2-数据准备" class="headerlink" title="1.2.1.2 数据准备"></a>1.2.1.2 数据准备</h5><p>创建用户表user，并创建对应的实体类User。</p><ul><li>用户表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>    id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age tinyint unsigned comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender tinyint unsigned comment <span class="hljs-string">&#x27;性别, 1:男, 2:女&#x27;</span>,<br>    phone <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;手机号&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-comment">-- 测试数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(id, name, age, gender, phone) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;白眉鹰王&#x27;</span>,<span class="hljs-number">55</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;18800000000&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(id, name, age, gender, phone) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;金毛狮王&#x27;</span>,<span class="hljs-number">45</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;18800000001&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(id, name, age, gender, phone) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;青翼蝠王&#x27;</span>,<span class="hljs-number">38</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;18800000002&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(id, name, age, gender, phone) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;紫衫龙王&#x27;</span>,<span class="hljs-number">42</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;18800000003&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(id, name, age, gender, phone) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;光明左使&#x27;</span>,<span class="hljs-number">37</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;18800000004&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(id, name, age, gender, phone) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;光明右使&#x27;</span>,<span class="hljs-number">48</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;18800000005&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20220901121116813.png" alt="image-20220901121116813"> </p><ul><li><p>实体类</p><ul><li>实体类的属性名与表中的字段名一一对应。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id（主键）</span><br>    <span class="hljs-keyword">private</span> String name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> Short age;    <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> Short gender; <span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> String phone; <span class="hljs-comment">//手机号</span><br>    <br>    <span class="hljs-comment">//省略GET, SET方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221209170354143.png" alt="image-20221209170354143"></p><h4 id="1-2-2-配置Mybatis"><a href="#1-2-2-配置Mybatis" class="headerlink" title="1.2.2 配置Mybatis"></a>1.2.2 配置Mybatis</h4><blockquote><p>在之前使用图形化客户端工具，连接MySQL数据库时，需要配置：</p><p><img src="/assets/image-20221209172527630.png" alt="image-20221209172527630"></p><p>连接数据库的四大参数：</p><ul><li>MySQL驱动类 </li><li>登录名</li><li>密码</li><li>数据库连接字符串</li></ul></blockquote><p>基于上述分析，在Mybatis中要连接数据库，同样也需要以上4个参数配置。</p><p>在springboot项目中，可以编写application.properties文件，配置数据库连接信息。我们要连接数据库，就需要配置数据库连接的基本信息，包括：driver-class-name、url 、username，password。</p><blockquote><p>在入门程序中，大家可以直接这么配置，后面会介绍什么是驱动。</p></blockquote><p>application.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#驱动类名称</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment">#数据库连接的url</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-comment">#连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment">#连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><blockquote><p>上述的配置，可以直接复制过去，不要敲错了。 全部都是 spring.datasource.xxxx 开头。</p></blockquote><h4 id="1-2-3-编写SQL语句"><a href="#1-2-3-编写SQL语句" class="headerlink" title="1.2.3 编写SQL语句"></a>1.2.3 编写SQL语句</h4><p>在创建出来的springboot工程中，在引导类所在包下，在创建一个包 mapper。在mapper包下创建一个接口 UserMapper ，这是一个持久层接口（Mybatis的持久层接口规范一般都叫 XxxMapper）。</p><p><img src="/assets/image-20221209175843651.png" alt="image-20221209175843651"></p><p>UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <br>    <span class="hljs-comment">//查询所有用户数据</span><br>    <span class="hljs-meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Mapper注解：表示是mybatis中的Mapper接口</p><ul><li>程序运行时：框架会自动生成接口的实现类对象(代理对象)，并给交Spring的IOC容器管理</li></ul><p> @Select注解：代表的就是select查询，用于书写select查询语句</p></blockquote><h4 id="1-2-4-单元测试"><a href="#1-2-4-单元测试" class="headerlink" title="1.2.4 单元测试"></a>1.2.4 单元测试</h4><p>在创建出来的SpringBoot工程中，在src下的test目录下，已经自动帮我们创建好了测试类 ，并且在测试类上已经添加了注解 @SpringBootTest，代表该测试类已经与SpringBoot整合。 </p><p>该测试类在运行时，会自动通过引导类加载Spring的环境（IOC容器）。我们要测试那个bean对象，就可以直接通过@Autowired注解直接将其注入进行，然后就可以测试了。 </p><p>测试类代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisQuickstartApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; userList = userMapper.list();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">User&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;白眉鹰王&#x27;</span>, <span class="hljs-attribute">age</span>=55, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">phone</span>=<span class="hljs-string">&#x27;18800000000&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;金毛狮王&#x27;</span>, <span class="hljs-attribute">age</span>=45, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">phone</span>=<span class="hljs-string">&#x27;18800000001&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;青翼蝠王&#x27;</span>, <span class="hljs-attribute">age</span>=38, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">phone</span>=<span class="hljs-string">&#x27;18800000002&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;紫衫龙王&#x27;</span>, <span class="hljs-attribute">age</span>=42, <span class="hljs-attribute">gender</span>=2, <span class="hljs-attribute">phone</span>=<span class="hljs-string">&#x27;18800000003&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=5, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;光明左使&#x27;</span>, <span class="hljs-attribute">age</span>=37, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">phone</span>=<span class="hljs-string">&#x27;18800000004&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=6, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;光明右使&#x27;</span>, <span class="hljs-attribute">age</span>=48, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">phone</span>=<span class="hljs-string">&#x27;18800000005&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-3-解决SQL警告与提示"><a href="#1-3-解决SQL警告与提示" class="headerlink" title="1.3 解决SQL警告与提示"></a>1.3 解决SQL警告与提示</h3><p>默认我们在UserMapper接口上加的@Select注解中编写SQL语句是没有提示的。 如果想让idea给我们提示对应的SQL语句，我们需要在IDEA中配置与MySQL数据库的链接。 </p><p>默认我们在UserMapper接口上的@Select注解中编写SQL语句是没有提示的。如果想让idea给出提示，可以做如下配置：</p><p><img src="/assets/image-20221210143348119.png" alt="image-20221210143348119"></p><p>配置完成之后，发现SQL语句中的关键字有提示了，但还存在不识别表名(列名)的情况：</p><p><img src="/assets/image-20221210143934318.png" alt="image-20221210143934318"></p><blockquote><p>产生原因：Idea和数据库没有建立连接，不识别表信息</p><p>解决方案：在Idea中配置MySQL数据库连接</p></blockquote><p><img src="/assets/image-20221210144139792.png" alt="image-20221210144139792"> </p><blockquote><p>在配置的时候指定连接那个数据库，如上图所示连接的就是mybatis数据库。</p></blockquote><h2 id="2-JDBC介绍-了解"><a href="#2-JDBC介绍-了解" class="headerlink" title="2. JDBC介绍(了解)"></a>2. JDBC介绍(了解)</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>通过Mybatis的快速入门，我们明白了，通过Mybatis可以很方便的进行数据库的访问操作。但是大家要明白，其实java语言操作数据库呢，只能通过一种方式：使用sun公司提供的 JDBC 规范。</p><blockquote><p>Mybatis框架，就是对原始的JDBC程序的封装。 </p></blockquote><p>那到底什么是JDBC呢，接下来，我们就来介绍一下。</p><p>JDBC： ( Java DataBase Connectivity )，就是使用Java语言操作关系型数据库的一套API。</p><p><img src="/assets/image-20221210144811961.png" alt="image-20221210144811961"> </p><blockquote><p>本质：</p><ul><li><p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</p></li><li><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</p></li><li><p>我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p></li></ul></blockquote><h3 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h3><p>下面我们看看原始的JDBC程序是如何操作数据库的。操作步骤如下：</p><ol><li>注册驱动</li><li>获取连接对象</li><li>执行SQL语句，返回执行结果</li><li>处理执行结果</li><li>释放资源</li></ol><blockquote><p>在pom.xml文件中已引入MySQL驱动依赖，我们直接编写JDBC代码即可</p></blockquote><p>JDBC具体代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1. 注册驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">//2. 获取数据库连接</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3. 执行SQL</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement(); <span class="hljs-comment">//操作SQL的对象</span><br>        String sql=<span class="hljs-string">&quot;select id,name,age,gender,phone from user&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<span class="hljs-comment">//SQL查询结果会封装在ResultSet对象中</span><br><br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//集合对象（用于存储User对象）</span><br>        <span class="hljs-comment">//4. 处理SQL执行结果</span><br>        <span class="hljs-keyword">while</span> (rs.next())&#123;<br>            <span class="hljs-comment">//取出一行记录中id、name、age、gender、phone下的数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">short</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> rs.getShort(<span class="hljs-string">&quot;age&quot;</span>);<br>            <span class="hljs-type">short</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> rs.getShort(<span class="hljs-string">&quot;gender&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;phone&quot;</span>);<br>            <span class="hljs-comment">//把一行记录中的数据，封装到User对象中</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,name,age,gender,phone);<br>            userList.add(user);<span class="hljs-comment">//User对象添加到集合</span><br>        &#125;<br>        <span class="hljs-comment">//5. 释放资源</span><br>        statement.close();<br>        connection.close();<br>        rs.close();<br><br>        <span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>DriverManager(类)：数据库驱动管理类。</p><ul><li><p>作用：</p><ol><li><p>注册驱动</p></li><li><p>创建java代码和数据库之间的连接，即获取Connection对象</p></li></ol></li></ul><p>Connection(接口)：建立数据库连接的对象</p><ul><li>作用：用于建立java程序和数据库之间的连接</li></ul><p>Statement(接口)： 数据库操作对象(执行SQL语句的对象)。</p><ul><li>作用：用于向数据库发送sql语句</li></ul><p>ResultSet(接口)：结果集对象（一张虚拟表）</p><ul><li>作用：sql查询语句的执行结果会封装在ResultSet中</li></ul></blockquote><p>通过上述代码，我们看到直接基于JDBC程序来操作数据库，代码实现非常繁琐，所以在项目开发中，我们很少使用。  在项目开发中，通常会使用Mybatis这类的高级技术来操作数据库，从而简化数据库操作、提高开发效率。</p><h3 id="2-3-问题分析"><a href="#2-3-问题分析" class="headerlink" title="2.3 问题分析"></a>2.3 问题分析</h3><p>原始的JDBC程序，存在以下几点问题：</p><ol><li>数据库链接的四要素(驱动、链接、用户名、密码)全部硬编码在java代码中</li><li>查询结果的解析及封装非常繁琐</li><li>每一次查询数据库都需要获取连接,操作完毕后释放连接, 资源浪费, 性能降低</li></ol><p><img src="/assets/image-20221210153407998.png" alt="image-20221210153407998"></p><h3 id="2-4-技术对比"><a href="#2-4-技术对比" class="headerlink" title="2.4 技术对比"></a>2.4 技术对比</h3><p>分析了JDBC的缺点之后，我们再来看一下在mybatis中，是如何解决这些问题的：</p><ol><li><p>数据库连接四要素(驱动、链接、用户名、密码)，都配置在springboot默认的配置文件 application.properties中</p></li><li><p>查询结果的解析及封装，由mybatis自动完成映射封装，我们无需关注</p></li><li><p>在mybatis中使用了数据库连接池技术，从而避免了频繁的创建连接、销毁连接而带来的资源浪费。</p></li></ol><p><img src="/assets/image-20221210154324151.png" alt="image-20221210154324151"></p><blockquote><p>使用SpringBoot+Mybatis的方式操作数据库，能够提升开发效率、降低资源浪费</p></blockquote><p>而对于Mybatis来说，我们在开发持久层程序操作数据库时，需要重点关注以下两个方面：</p><ol><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#驱动类名称</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment">#数据库连接的url</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-comment">#连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment">#连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure></li><li><p>Mapper接口（编写SQL语句）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3. 数据库连接池"></a>3. 数据库连接池</h2><p>在前面我们所讲解的mybatis中，使用了数据库连接池技术，避免频繁的创建连接、销毁连接而带来的资源浪费。</p><p>下面我们就具体的了解下数据库连接池。</p><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p><img src="/assets/image-20221210160341852.png" alt="image-20221210160341852"></p><blockquote><p>没有使用数据库连接池：</p><ul><li>客户端执行SQL语句：要先创建一个新的连接对象，然后执行SQL语句，SQL语句执行后又需要关闭连接对象从而释放资源，每次执行SQL时都需要创建连接、销毁链接，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</li></ul></blockquote><p><img src="/assets/image-20221210161016314.png" alt="image-20221210161016314"></p><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p><ul><li>程序在启动时，会在数据库连接池(容器)中，创建一定数量的Connection对象</li></ul><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><ul><li>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后在执行SQL语句，SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li></ul><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p><ul><li>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)，数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间，此时数据库连接池就会自动释放掉这个连接对象</li></ul><p>数据库连接池的好处：</p><ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol><h3 id="3-2-产品"><a href="#3-2-产品" class="headerlink" title="3.2 产品"></a>3.2 产品</h3><p>要怎么样实现数据库连接池呢？</p><ul><li><p>官方(sun)提供了数据库连接池标准（javax.sql.DataSource接口）</p><ul><li><p>功能：获取连接 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></table></figure></li><li><p>第三方组织必须按照DataSource接口实现</p></li></ul></li></ul><p>常见的数据库连接池：</p><ul><li>C3P0</li><li>DBCP</li><li>Druid</li><li>Hikari (springboot默认)</li></ul><p>现在使用更多的是：Hikari、Druid  （性能更优越）</p><ul><li>Hikari（追光者） [默认的连接池]</li></ul><p><img src="/assets/image-20220901144923251.png" alt="image-20220901144923251"> </p><ul><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><p>​</p><p>如果我们想把默认的数据库连接池切换为Druid数据库连接池，只需要完成以下两步操作即可：</p><blockquote><p>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><ol><li>在pom.xml文件中引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Druid连接池依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在application.properties中引入数据库连接配置</li></ol><p>方式1：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.druid.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-attr">spring.datasource.druid.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.druid.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><h2 id="4-lombok"><a href="#4-lombok" class="headerlink" title="4. lombok"></a>4. lombok</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>Lombok是一个实用的Java类库，可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码。</p><p><img src="/assets/image-20221210164641266.png" alt="image-20221210164641266"></p><blockquote><p>通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p></blockquote><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的  toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>第1步：在pom.xml文件中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第2步：在实体类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short age;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String phone;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter&#x2F;setter、equals、hashcode、toString等方法。</p><p><img src="/assets/image-20221210170733921.png" alt="image-20221210170733921"></p></blockquote><p>说明：@Data注解中不包含全参构造方法，通常在实体类上，还会添加上：全参构造、无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span> <span class="hljs-comment">//getter方法、setter方法、toString方法、hashCode方法、equals方法</span><br><span class="hljs-meta">@NoArgsConstructor</span> <span class="hljs-comment">//无参构造</span><br><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-comment">//全参构造</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short age;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String phone;<br>&#125;<br></code></pre></td></tr></table></figure><p>Lombok的注意事项：</p><ul><li>Lombok会在编译时，会自动生成对应的java代码</li><li>在使用lombok时，还需要安装一个lombok的插件（新版本的IDEA中自带）</li></ul><p><img src="/assets/image-20221210165506359.png" alt="image-20221210165506359"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>31MySQL</title>
    <link href="/2023/12/10/day31-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL-03/"/>
    <url>/2023/12/10/day31-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL-03/</url>
    
    <content type="html"><![CDATA[<h1 id="31-数据库开发-MySQL"><a href="#31-数据库开发-MySQL" class="headerlink" title="31-数据库开发-MySQL"></a>31-数据库开发-MySQL</h1><h1 id="1-多表查询"><a href="#1-多表查询" class="headerlink" title="1. 多表查询"></a>1. 多表查询</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-数据准备"><a href="#1-1-1-数据准备" class="headerlink" title="1.1.1 数据准备"></a>1.1.1 数据准备</h3><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#建议：创建新的数据库<br>create database db04;<br>use db04;<br><br>-- 部门表<br>create table tb_dept<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime    not null comment &#x27;创建时间&#x27;,<br>    update_time datetime    not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br>-- 部门表测试<br>insert into tb_dept (id, name, create_time, update_time)<br>values (1, &#x27;学工部&#x27;, now(), now()),<br>       (2, &#x27;教研部&#x27;, now(), now()),<br>       (3, &#x27;咨询部&#x27;, now(), now()),<br>       (4, &#x27;就业部&#x27;, now(), now()),<br>       (5, &#x27;人事部&#x27;, now(), now());<br><br>-- 员工表<br>create table tb_emp<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,<br>    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name        varchar(10)      not null comment &#x27;姓名&#x27;,<br>    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image       varchar(300) comment &#x27;图像&#x27;,<br>    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>    entrydate   date comment &#x27;入职时间&#x27;,<br>    dept_id     int unsigned comment &#x27;部门ID&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br>-- 员工表测试数据<br>INSERT INTO tb_emp(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) <br>VALUES <br>(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),<br>(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),<br>(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),<br>(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),<br>(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),<br>(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),<br>(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),<br>(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),<br>(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),<br>(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),<br>(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),<br>(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),<br>(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());<br></code></pre></td></tr></table></figure><h3 id="1-1-2-介绍"><a href="#1-1-2-介绍" class="headerlink" title="1.1.2 介绍"></a>1.1.2 介绍</h3><p>多表查询：查询时从多张表中获取所需数据</p><blockquote><p>单表查询的SQL语句：select  字段列表  from  表名;</p><p>那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select   字段列表  from  表1, 表2;</p></blockquote><p>查询用户表和部门表中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from  tb_emp , tb_dept;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20220901093654673.png" alt="image-20220901093654673">  </p><p>此时,我们看到查询结果中包含了大量的结果集，总共85条记录，而这其实就是员工表所有的记录(17行)与部门表所有记录(5行)的所有组合情况，这种现象称之为笛卡尔积。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。</p><p><img src="/assets/image-20221207155509696.png" alt="image-20221207155509696"></p><blockquote><p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p></blockquote><p><img src="/assets/image-20220901093756992.png"></p><p>在SQL语句中，如何去除无效的笛卡尔积呢？只需要给多表查询加上连接查询的条件即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from tb_emp , tb_dept where tb_emp.dept_id = tb_dept.id ;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207164518904.png" alt="image-20221207164518904"></p><blockquote><p>由于id为17的员工，没有dept_id字段值，所以在多表查询时，根据连接查询的条件并没有查询到。</p></blockquote><h3 id="1-1-3-分类"><a href="#1-1-3-分类" class="headerlink" title="1.1.3 分类"></a>1.1.3 分类</h3><p>多表查询可以分为：</p><ol><li><p>连接查询</p><ul><li>内连接：相当于查询A、B交集部分数据</li></ul><p><img src="/assets/image-20221207165446062.png" alt="image-20221207165446062"> </p></li><li><p>外连接</p><ul><li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p></li><li><p>右外连接：查询右表所有数据(包括两张表交集部分数据)</p></li></ul></li><li><p>子查询</p></li></ol><h2 id="1-2-内连接"><a href="#1-2-内连接" class="headerlink" title="1.2 内连接"></a>1.2 内连接</h2><p>内连接查询：查询两表或多表中交集部分数据。</p><p>内连接从语法上可以分为：</p><ul><li><p>隐式内连接</p></li><li><p>显式内连接</p></li></ul><p>隐式内连接语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表   from   表1 , 表2   where  条件 ... ;<br></code></pre></td></tr></table></figure><p>显式内连接语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;<br></code></pre></td></tr></table></figure><p>案例：查询员工的姓名及所属的部门名称</p><ul><li>隐式内连接实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据<br>from tb_emp , tb_dept -- 关联两张表<br>where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积<br></code></pre></td></tr></table></figure><ul><li>显式内连接实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select tb_emp.name , tb_dept.name<br>from tb_emp inner join tb_dept<br>on tb_emp.dept_id = tb_dept.id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207173435289.png" alt="image-20221207173435289"></p><p>多表查询时给表起别名：</p><ul><li><p>tableA  as  别名1  ,  tableB  as  别名2 ;</p></li><li><p>tableA  别名1  ,  tableB  别名2 ;</p></li></ul><p><img src="/assets/image-20221207174234522.png" alt="image-20221207174234522"></p><p>使用了别名的多表查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select emp.name , dept.name<br>from tb_emp emp inner join tb_dept dept<br>on emp.dept_id = dept.id;<br></code></pre></td></tr></table></figure><blockquote><p>注意事项:</p><p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p></blockquote><h2 id="1-3-外连接"><a href="#1-3-外连接" class="headerlink" title="1.3 外连接"></a>1.3 外连接</h2><p>外连接分为两种：左外连接 和 右外连接。</p><p>左外连接语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表   from   表1  left  [ outer ]  join 表2  on  连接条件 ... ;<br></code></pre></td></tr></table></figure><blockquote><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>右外连接语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;<br></code></pre></td></tr></table></figure><blockquote><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>案例：查询员工表中所有员工的姓名, 和对应的部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据<br>select emp.name , dept.name<br>from tb_emp AS emp left join tb_dept AS dept <br>     on emp.dept_id = dept.id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207181204792.png" alt="image-20221207181204792"></p><p>案例：查询部门表中所有部门的名称, 和对应的员工名称 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 右外连接<br>select dept.name , emp.name<br>from tb_emp AS emp right join  tb_dept AS dept<br>     on emp.dept_id = dept.id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207181048208.png" alt="image-20221207181048208"></p><blockquote><p>注意事项：</p><p>左外连接和右外连接是可以相互替换的，只需要调整连接查询时SQL语句中表的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p></blockquote><h2 id="1-4-子查询"><a href="#1-4-子查询" class="headerlink" title="1.4 子查询"></a>1.4 子查询</h2><h3 id="1-4-1-介绍"><a href="#1-4-1-介绍" class="headerlink" title="1.4.1 介绍"></a>1.4.1 介绍</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span>   t1   <span class="hljs-keyword">WHERE</span>  column1 <span class="hljs-operator">=</span>  ( <span class="hljs-keyword">SELECT</span>  column1  <span class="hljs-keyword">FROM</span>  t2 ... );<br></code></pre></td></tr></table></figure><blockquote><p>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个，最常见的是 select。</p></blockquote><p>根据子查询结果的不同分为：</p><ol><li><p>标量子查询（子查询结果为单个值[一行一列]）</p></li><li><p>列子查询（子查询结果为一列，但可以是多行）</p></li><li><p>行子查询（子查询结果为一行，但可以是多列）</p></li><li><p>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</p></li></ol><p>子查询可以书写的位置：</p><ol><li>where之后</li><li>from之后</li><li>select之后</li></ol><h3 id="1-4-2-标量子查询"><a href="#1-4-2-标量子查询" class="headerlink" title="1.4.2 标量子查询"></a>1.4.2 标量子查询</h3><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符： &#x3D;   &lt;&gt;   &gt;    &gt;&#x3D;    &lt;   &lt;&#x3D;   </p><p>案例1：查询”教研部”的所有员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 “教研部” 部门ID</li><li>根据 “教研部” 部门ID，查询员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1.查询&quot;教研部&quot;部门ID<br>select id from tb_dept where name = &#x27;教研部&#x27;;    #查询结果：2<br>-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息<br>select * from tb_emp where dept_id = 2;<br><br>-- 合并出上两条SQL语句<br>select * from tb_emp where dept_id = (select id from tb_dept where name = &#x27;教研部&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207202215946.png" alt="image-20221207202215946"></p><p>案例2：查询在 “方东白” 入职之后的员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 方东白 的入职日期</li><li>查询 指定入职日期之后入职的员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1.查询&quot;方东白&quot;的入职日期<br>select entrydate from tb_emp where name = &#x27;方东白&#x27;;     #查询结果：2012-11-01<br>-- 2.查询指定入职日期之后入职的员工信息<br>select * from tb_emp where entrydate &gt; &#x27;2012-11-01&#x27;;<br><br>-- 合并以上两条SQL语句<br>select * from tb_emp where entrydate &gt; (select entrydate from tb_emp where name = &#x27;方东白&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207203000445.png" alt="image-20221207203000445"></p><h3 id="1-4-3-列子查询"><a href="#1-4-3-列子查询" class="headerlink" title="1.4.3 列子查询"></a>1.4.3 列子查询</h3><p>子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</p><p>常用的操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><p>案例：查询”教研部”和”咨询部”的所有员工信息</p><blockquote><p>分解为以下两步：</p><ol><li>查询 “销售部” 和 “市场部” 的部门ID</li><li>根据部门ID, 查询员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID<br>select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;;    #查询结果：3,2<br>-- 2.根据部门ID, 查询员工信息<br>select * from tb_emp where dept_id in (3,2);<br><br>-- 合并以上两条SQL语句<br>select * from tb_emp where dept_id in (select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207203620472.png" alt="image-20221207203620472"></p><h3 id="1-4-4-行子查询"><a href="#1-4-4-行子查询" class="headerlink" title="1.4.4 行子查询"></a>1.4.4 行子查询</h3><p>子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</p><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><p>案例：查询与”韦一笑”的入职日期及职位都相同的员工信息 </p><blockquote><p>可以拆解为两步进行： </p><ol><li>查询 “韦一笑” 的入职日期 及 职位</li><li>查询与”韦一笑”的入职日期及职位相同的员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询&quot;韦一笑&quot;的入职日期 及 职位<br>select entrydate , job from tb_emp where name = &#x27;韦一笑&#x27;;  #查询结果： 2007-01-01 , 2<br>-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息<br>select * from tb_emp where (entrydate,job) = (&#x27;2007-01-01&#x27;,2);<br><br>-- 合并以上两条SQL语句<br>select * from tb_emp where (entrydate,job) = (select entrydate , job from tb_emp where name = &#x27;韦一笑&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221207204452202.png" alt="image-20221207204452202"></p><h3 id="1-4-5-表子查询"><a href="#1-4-5-表子查询" class="headerlink" title="1.4.5 表子查询"></a>1.4.5 表子查询</h3><p>子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。</p><p>案例：查询入职日期是 “2006-01-01” 之后的员工信息 , 及其部门信息</p><blockquote><p>分解为两步执行：</p><ol><li>查询入职日期是 “2006-01-01” 之后的员工信息</li><li>基于查询到的员工信息，在查询对应的部门信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;;<br><br>select e.*, d.* from (select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;) e left join dept d on e.dept_id = d.id ;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208142154263.png" alt="image-20221208142154263"></p><h2 id="1-5-案例"><a href="#1-5-案例" class="headerlink" title="1.5 案例"></a>1.5 案例</h2><p>基于之前设计的多表案例的表结构，我们来完成今天的多表查询案例需求。</p><p><strong>准备环境</strong></p><p>将资料中准备好的多表查询的数据准备的SQL脚本导入数据库中。</p><p><img src="/assets/image-20221208143318921.png" alt="image-20221208143318921"> </p><ul><li>分类表：category</li><li>菜品表：dish</li><li>套餐表：setmeal</li><li>套餐菜品关系表：setmeal_dish</li></ul><p><img src="/assets/image-20221208143312292.png" alt="image-20221208143312292"> </p><p><strong>需求实现</strong></p><ol><li>查询价格低于 10元 的菜品的名称 、价格 及其 菜品的分类名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*查询技巧：<br>     明确1：查询需要用到哪些字段<br>        菜品名称、菜品价格 、 菜品分类名<br>     明确2：查询的字段分别归属于哪张表<br>        菜品表：[菜品名称、菜品价格]<br>        分类表：[分类名]<br>     明确3：如查多表，建立表与表之间的关联<br>        菜品表.caategory_id = 分类表.id<br>     其他：（其他条件、其他要求）<br>        价格 &lt; 10<br>*/<br>select d.name , d.price , c.name<br>from dish AS d , category AS c<br>where d.category_id = c.id<br>      and d.price &lt; 10;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208145036602.png" alt="image-20221208145036602"></p><ol start="2"><li>查询所有价格在 10元(含)到50元(含)之间 且 状态为”起售”的菜品名称、价格及其分类名称 (即使菜品没有分类 , 也要将菜品查询出来)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.name , d.price, c.name<br>from dish AS d left join category AS c on d.category_id = c.id<br>where d.price between 10 and 50<br>      and d.status = 1;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208145432077.png" alt="image-20221208145432077"></p><ol start="3"><li>查询每个分类下最贵的菜品, 展示出分类的名称、最贵的菜品的价格</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select c.name , max(d.price)<br>from dish AS d , category AS c<br>where d.category_id = c.id<br>group by c.name;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208150016895.png" alt="image-20221208150016895"></p><ol start="4"><li>查询各个分类下 菜品状态为 “起售” , 并且 该分类下菜品总数量大于等于3 的 分类名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*查询技巧：<br>     明确1：查询需要用到哪些字段<br>        分类名称、菜品总数量<br>     明确2：查询用到的字段分别归属于哪张表<br>        分类表：[分类名]<br>        菜品表：[菜品状态]<br>     明确3：如查多表，建立表与表之间的关联<br>        菜品表.caategory_id = 分类表.id<br>     其他：（其他条件、其他要求）<br>        条件：菜品状态 = 1 (1表示起售)<br>        分组：分类名<br>        分组后条件： 总数量 &gt;= 3<br>*/<br>select c.name , count(*)<br>from dish AS d , category AS c<br>where d.category_id = c.id<br>      and d.status = 1 -- 起售状态<br>group by c.name  -- 按照分类名分组<br>having count(*)&gt;=3; -- 各组后筛选菜品总数据&gt;=3<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208152107502.png" alt="image-20221208152107502"></p><ol start="5"><li>查询出 “商务套餐A” 中包含了哪些菜品 （展示出套餐名称、价格, 包含的菜品名称、价格、份数）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select s.name, s.price, d.name, d.price, sd.copies<br>from setmeal AS s , setmeal_dish AS sd , dish AS d<br>where s.id = sd.setmeal_id and sd.dish_id = d.id<br>      and s.name=&#x27;商务套餐A&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208152626138.png" alt="image-20221208152626138"></p><ol start="6"><li>查询出低于菜品平均价格的菜品信息 (展示出菜品名称、菜品价格)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1.计算菜品平均价格<br>select avg(price) from dish;    -- 查询结果：37.736842<br>-- 2.查询出低于菜品平均价格的菜品信息<br>select * from dish where price &lt; 37.736842;<br><br>-- 合并以上两条SQL语句<br>select * from dish where price &lt; (select avg(price) from dish);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221208153051333.png" alt="image-20221208153051333"></p><h1 id="2-事务"><a href="#2-事务" class="headerlink" title="2. 事务"></a>2. 事务</h1><p>场景：学工部整个部门解散了，该部门及部门下的员工都需要删除了。</p><ul><li><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除学工部</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">-- 删除成功</span><br><br><span class="hljs-comment">-- 删除学工部的员工</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 删除失败（操作过程中出现错误：造成删除没有成功）</span><br></code></pre></td></tr></table></figure></li><li><p>问题：如果删除部门成功了，而删除该部门的员工时失败了，此时就造成了数据的不一致。</p></li></ul><p>​要解决上述的问题，就需要通过数据库中的事务来解决。</p><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>在实际的业务开发中，有些业务操作要多次访问数据库。一个业务要发送多条SQL语句给数据库执行。需要将多次访问数据库的操作视为一个整体来执行，要么所有的SQL语句全部执行成功。如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败。</p><p>简而言之：事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>事务作用：保证在一个事务中多次操作数据库表中数据时，要么全都成功,要么全都失败。</p><h2 id="2-2-操作"><a href="#2-2-操作" class="headerlink" title="2.2 操作"></a>2.2 操作</h2><p>MYSQL中有两种方式进行事务的操作：</p><ol><li>自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li><li>手动提交事务：先开启，再提交</li></ol><p>事务操作有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction;  &#x2F;  begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><blockquote><p>手动提交事务使用步骤：</p><ul><li>第1种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  成功  &#x3D;&gt;  提交事务</li><li>第2种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  失败  &#x3D;&gt;  回滚事务</li></ul></blockquote><p>使用事务控制删除部门和删除该部门下的员工的操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">start</span> transaction ;<br><br><span class="hljs-comment">-- 删除学工部</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_dept <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 删除学工部的员工</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>上述的这组SQL语句，如果如果执行成功，则提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 提交事务 (成功时执行)</span><br><span class="hljs-keyword">commit</span> ;<br></code></pre></td></tr></table></figure><ul><li>上述的这组SQL语句，如果如果执行失败，则回滚事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 回滚事务 (出错时执行)</span><br><span class="hljs-keyword">rollback</span> ;<br></code></pre></td></tr></table></figure><h2 id="2-3-四大特性"><a href="#2-3-四大特性" class="headerlink" title="2.3 四大特性"></a>2.3 四大特性</h2><p>面试题：事务有哪些特性？</p><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><blockquote><p>事务的四大特性简称为：ACID</p></blockquote><ul><li><p><strong>原子性（Atomicity）</strong> ：原子性是指事务包装的一组sql是一个不可分割的工作单元，事务中的操作要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：一个事务完成之后数据都必须处于一致性状态。</p></li></ul><p>​如果事务成功的完成，那么数据库的所有变化将生效。</p><p>​如果事务执行出现错误，那么数据库的所有变化将会被回滚(撤销)，返回到原始状态。</p><ul><li><strong>隔离性（Isolation）</strong>：多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</li></ul><p>​一个事务的成功或者失败对于其他的事务是没有影响。</p><ul><li><strong>持久性（Durability）</strong>：一个事务一旦被提交或回滚，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据亦然存在。</li></ul><h1 id="3-索引"><a href="#3-索引" class="headerlink" title="3. 索引"></a>3. 索引</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><p>索引(index)：是帮助数据库高效获取数据的数据结构 。</p><ul><li>简单来讲，就是使用索引可以提高查询的效率。</li></ul><p>测试没有使用索引的查询：</p><p><img src="/assets/image-20221209115617429.png" alt="image-20221209115617429"></p><p>添加索引后查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 添加索引<br>create index idx_sku_sn on tb_sku (sn);  #在添加索引时，也需要消耗时间<br><br>-- 查询数据（使用了索引）<br>select * from tb_sku where sn = &#x27;100000003145008&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221209120107543.png" alt="image-20221209120107543"></p><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li>索引会占用存储空间。</li><li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li></ol><h2 id="3-2-结构"><a href="#3-2-结构" class="headerlink" title="3.2 结构"></a>3.2 结构</h2><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。</p><p>我们平常所说的索引，如果没有特别指明，都是指默认的 B+Tree 结构组织的索引。</p><p>在没有了解B+Tree结构前，我们先回顾下之前所学习的树结构：</p><blockquote><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p></blockquote><p><img src="/assets/image-20221208174135229.png" alt="image-20221208174135229"> </p><blockquote><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><p><img src="/assets/image-20221208174859866.png" alt="image-20221208174859866"> </p><blockquote><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><p><img src="/assets/image-20221209100647867.png" alt="image-20221209100647867"></p><blockquote><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><p>思考：采用二叉搜索树或者是红黑树来作为索引的结构有什么问题？</p><details>    <summary>答案</summary>    最大的问题就是在数据量大的情况下，树的层级比较深，会影响检索速度。因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。</details><blockquote><p>说明：如果数据结构是红黑树，那么查询1000万条数据，根据计算树的高度大概是23左右，这样确实比之前的方式快了很多，但是如果高并发访问，那么一个用户有可能需要23次磁盘IO，那么100万用户，那么会造成效率极其低下。所以为了减少红黑树的高度，那么就得增加树的宽度，就是不再像红黑树一样每个节点只能保存一个数据，可以引入另外一种数据结构，一个节点可以保存多个数据，这样宽度就会增加从而降低树的高度。这种数据结构例如BTree就满足。</p></blockquote><p>下面我们来看看B+Tree(多路平衡搜索树)结构中如何避免这个问题：</p><p><img src="/assets/image-20221208181315728.png" alt="image-20221208181315728"></p><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点<ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><blockquote><p><strong>拓展：</strong></p><p>非叶子节点都是由key+指针域组成的，一个key占8字节，一个指针占6字节，而一个节点总共容量是16KB，那么可以计算出一个节点可以存储的元素个数：16*1024字节 &#x2F; (8+6)&#x3D;1170个元素。</p><ul><li>查看mysql索引节点大小：show global status like ‘innodb_page_size’;    – 节点大小：16384</li></ul><p>当根节点中可以存储1170个元素，那么根据每个元素的地址值又会找到下面的子节点，每个子节点也会存储1170个元素，那么第二层即第二次IO的时候就会找到数据大概是：1170*1170&#x3D;135W。也就是说B+Tree数据结构中只需要经历两次磁盘IO就可以找到135W条数据。</p><p>对于第二层每个元素有指针，那么会找到第三层，第三层由key+数据组成，假设key+数据总大小是1KB，而每个节点一共能存储16KB，所以一个第三层一个节点大概可以存储16个元素(即16条记录)。那么结合第二层每个元素通过指针域找到第三层的节点，第二层一共是135W个元素，那么第三层总元素大小就是：135W*16结果就是2000W+的元素个数。</p><p>结合上述分析B+Tree有如下优点：</p><ul><li>千万条数据，B+Tree可以控制在小于等于3的高度</li><li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li></ul></blockquote><h2 id="3-3-语法"><a href="#3-3-语法" class="headerlink" title="3.3 语法"></a>3.3 语法</h2><p><strong>创建索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;<br></code></pre></td></tr></table></figure><p>案例：为tb_emp表的name字段建立一个索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create index idx_emp_name on tb_emp(name);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221209105119159.png" alt="image-20221209105119159"></p><blockquote><p>在创建表时，如果添加了主键和唯一约束，就会默认创建：主键索引、唯一约束</p><p><img src="/assets/image-20221209105846211.png" alt="image-20221209105846211"></p></blockquote><p><strong>查看索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show  index  from  表名;<br></code></pre></td></tr></table></figure><p>案例：查询 tb_emp 表的索引信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show  index  from  tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221209110317092.png" alt="image-20221209110317092"></p><p><strong>删除索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop  index  索引名  on  表名;<br></code></pre></td></tr></table></figure><p>案例：删除 tb_emp 表中name字段的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop index idx_emp_name on tb_emp;<br></code></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ul><li><p>主键字段，在建表时，会自动创建主键索引</p></li><li><p>添加唯一约束时，数据库实际上会添加唯一索引</p></li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>30MySQL</title>
    <link href="/2023/12/10/day30-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL-02/"/>
    <url>/2023/12/10/day30-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL-02/</url>
    
    <content type="html"><![CDATA[<h1 id="30-数据库开发-MySQL"><a href="#30-数据库开发-MySQL" class="headerlink" title="30-数据库开发-MySQL"></a>30-数据库开发-MySQL</h1><p>在上次学习的内容中，我们讲解了：</p><ul><li>使用DDL语句来操作数据库以及表结构（数据库设计）</li><li>使用DML语句来完成数据库中数据的增、删、改操作（数据库操作）</li></ul><p>我们今天还是继续学习数据库操作方面的内容：查询（DQL语句）。</p><p>查询操作我们分为两部分学习：</p><ul><li><p>DQL语句-单表操作</p></li><li><p>DQL语句-多表操作</p></li></ul><h2 id="1-数据库操作-DQL"><a href="#1-数据库操作-DQL" class="headerlink" title="1. 数据库操作-DQL"></a>1. 数据库操作-DQL</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>DQL英文全称是Data Query Language(数据查询语言)，用来查询数据库表中的记录。</p><p>查询关键字：SELECT</p><p>查询操作是所有SQL语句当中最为常见，也是最为重要的操作。在一个正常的业务系统中，查询操作的使用频次是要远高于增删改操作的。当我们打开某个网站或APP所看到的展示信息，都是通过从数据库中查询得到的，而在这个查询过程中，还会涉及到条件、排序、分页等操作。</p><p><img src="/assets/image-20220611103943417.png" alt="image-20220611103943417"> </p><h3 id="1-2-语法"><a href="#1-2-语法" class="headerlink" title="1.2 语法"></a>1.2 语法</h3><p>DQL查询语句，语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>字段列表<br>FROM<br>表名列表<br>WHERE<br>条件列表<br>GROUP  BY<br>分组字段列表<br>HAVING<br>分组后条件列表<br>ORDER BY<br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><p>我们今天会将上面的完整语法拆分为以下几个部分学习：</p><ul><li>基本查询（不带任何条件）</li><li>条件查询（where）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><p>准备一些测试数据用于查询操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database db02; -- 创建数据库<br>use db02; -- 切换数据库<br>-- 员工管理(带约束)<br>create table tb_emp (<br>    id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>    password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name varchar(10) not null comment &#x27;姓名&#x27;,<br>    gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image varchar(300) comment &#x27;图像&#x27;,<br>    job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,<br>    entrydate date comment &#x27;入职时间&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br><br>-- 准备测试数据<br>INSERT INTO tb_emp (id, username, password, name, gender, image, job, entrydate, create_time, update_time) VALUES<br>    (1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:35&#x27;),<br>    (2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:37&#x27;),<br>    (3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:39&#x27;),<br>    (4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:41&#x27;),<br>    (5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:43&#x27;),<br>    (6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:45&#x27;),<br>    (7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:47&#x27;),<br>    (8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:49&#x27;),<br>    (9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:51&#x27;),<br>    (10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:53&#x27;),<br>    (11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 2, &#x27;2007-02-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:55&#x27;),<br>    (12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 2, &#x27;2008-08-18&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:57&#x27;),<br>    (13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 1, &#x27;2012-11-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:59&#x27;),<br>    (14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:01&#x27;),<br>    (15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:03&#x27;),<br>    (16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:05&#x27;),<br>    (17, &#x27;chenyouliang&#x27;, &#x27;12345678&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, null, &#x27;2015-03-21&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:07&#x27;),<br>    (18, &#x27;zhang1&#x27;, &#x27;123456&#x27;, &#x27;张一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:09&#x27;),<br>    (19, &#x27;zhang2&#x27;, &#x27;123456&#x27;, &#x27;张二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:11&#x27;),<br>    (20, &#x27;zhang3&#x27;, &#x27;123456&#x27;, &#x27;张三&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2018-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:13&#x27;),<br>    (21, &#x27;zhang4&#x27;, &#x27;123456&#x27;, &#x27;张四&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:15&#x27;),<br>    (22, &#x27;zhang5&#x27;, &#x27;123456&#x27;, &#x27;张五&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2016-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:17&#x27;),<br>    (23, &#x27;zhang6&#x27;, &#x27;123456&#x27;, &#x27;张六&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:19&#x27;),<br>    (24, &#x27;zhang7&#x27;, &#x27;123456&#x27;, &#x27;张七&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2006-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:21&#x27;),<br>    (25, &#x27;zhang8&#x27;, &#x27;123456&#x27;, &#x27;张八&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2002-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:23&#x27;),<br>    (26, &#x27;zhang9&#x27;, &#x27;123456&#x27;, &#x27;张九&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2011-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:25&#x27;),<br>    (27, &#x27;zhang10&#x27;, &#x27;123456&#x27;, &#x27;张十&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2004-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:27&#x27;),<br>    (28, &#x27;zhang11&#x27;, &#x27;123456&#x27;, &#x27;张十一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:29&#x27;),<br>    (29, &#x27;zhang12&#x27;, &#x27;123456&#x27;, &#x27;张十二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2020-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:31&#x27;);<br></code></pre></td></tr></table></figure><h3 id="1-3-基本查询"><a href="#1-3-基本查询" class="headerlink" title="1.3 基本查询"></a>1.3 基本查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件，语法如下：</p><ul><li><p>查询多个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段1, 字段2, 字段3 from  表名;<br></code></pre></td></tr></table></figure></li><li><p>查询所有字段（通配符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select *  from  表名;<br></code></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ]  from  表名;<br></code></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct 字段列表 from  表名;<br></code></pre></td></tr></table></figure></li></ul><p>案例1：查询指定字段 name，entrydate并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name,entrydate from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206112810199.png" alt="image-20221206112810199"></p><p>案例2：查询返回所有字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from tb_emp;<br></code></pre></td></tr></table></figure><blockquote><p><code>*</code>号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）</p></blockquote><p><img src="/assets/image-20221206113904763.png" alt="image-20221206113904763"></p><p>案例3：查询所有员工的 name,entrydate，并起别名(姓名、入职日期)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 方式1：<br>select name AS 姓名, entrydate AS 入职日期 from tb_emp;<br>-- 方式2： 别名中有特殊字符时，使用&#x27;&#x27;或&quot;&quot;包含<br>select name AS &#x27;姓 名&#x27;, entrydate AS &#x27;入职日期&#x27; from tb_emp;<br>-- 方式3：<br>select name AS &quot;姓名&quot;, entrydate AS &quot;入职日期&quot; from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206114752149.png" alt="image-20221206114752149"></p><p>案例4：查询已有的员工关联了哪几种职位(不要重复)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct job from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206115440117.png" alt="image-20221206115440117"></p><h3 id="1-4-条件查询"><a href="#1-4-条件查询" class="headerlink" title="1.4 条件查询"></a>1.4 条件查询</h3><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表  <span class="hljs-keyword">from</span>   表名   <span class="hljs-keyword">where</span>   条件列表 ; <span class="hljs-comment">-- 条件列表：意味着可以有多个条件</span><br></code></pre></td></tr></table></figure><p>学习条件查询就是学习条件的构建方式，而在SQL语句当中构造条件的运算符分为两类：</p><ul><li>比较运算符</li><li>逻辑运算符</li></ul><p>常用的比较运算符如下: </p><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between …  and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><p>常用的逻辑运算符如下:</p><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><p>案例1：查询 姓名 为 杨逍 的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where name = &#x27;杨逍&#x27;; -- 字符串使用&#x27;&#x27;或&quot;&quot;包含<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206121255784.png" alt="image-20221206121255784"></p><p>案例2：查询 id小于等于5 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where id &lt;=5;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206121523712.png" alt="image-20221206121523712"></p><p>案例3：查询 没有分配职位 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where job is null ;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206121754267.png" alt="image-20221206121754267"></p><blockquote><p>注意：查询为NULL的数据时，不能使用 <code>= null</code></p><p><img src="/assets/image-20221206122036970.png" alt="image-20221206122036970"></p></blockquote><p>案例4：查询 有职位 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where job is not null ;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206122454101.png" alt="image-20221206122454101"></p><p>案例5：查询 密码不等于 ‘123456’ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 方式1：<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where password &lt;&gt; &#x27;123456&#x27;;<br>-- 方式2：<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where password != &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206122712152.png" alt="image-20221206122712152"></p><p>案例6：查询 入职日期 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 方式1：<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where entrydate&gt;=&#x27;2000-01-01&#x27; and entrydate&lt;=&#x27;2010-01-01&#x27;;<br>-- 方式2： between...and<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206125100857.png" alt="image-20221206125100857"></p><p>案例7：查询 入职时间 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间 且 性别为女 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;<br>      and gender = 2;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206125356737.png" alt="image-20221206125356737"></p><p>案例8：查询 职位是 2 (讲师), 3 (学工主管), 4 (教研主管) 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 方式1：使用or连接多个条件<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where job=2 or job=3 or job=4;<br>-- 方式2：in关键字<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where job in (2,3,4);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206141451342.png" alt="image-20221206141451342"></p><p>案例9：查询 姓名 为两个字的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where name like &#x27;__&#x27;;  # 通配符 &quot;_&quot; 代表任意1个字符<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206141937293.png" alt="image-20221206141937293"></p><p>案例10：查询 姓 ‘张’ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where name like &#x27;张%&#x27;; # 通配符 &quot;%&quot; 代表任意个字符（0个 ~ 多个）<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206142156154.png" alt="image-20221206142156154"></p><h3 id="1-5-聚合函数"><a href="#1-5-聚合函数" class="headerlink" title="1.5 聚合函数"></a>1.5 聚合函数</h3><p>之前我们做的查询都是横向查询，就是根据条件一行一行的进行判断，而使用聚合函数查询就是纵向查询，它是对一列的值进行计算，然后返回一个结果值。（将一列数据作为一个整体，进行纵向计算）</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  聚合函数(字段列表)  from  表名 ;<br></code></pre></td></tr></table></figure><blockquote><p>注意 : 聚合函数会忽略空值，对NULL值不作为统计。</p></blockquote><p>常用聚合函数：</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><blockquote><p>count ：按照列去统计有多少行数据。</p><ul><li>在根据指定的列统计的时候，如果这一列中有null的行，该行不会被统计在其中。</li></ul><p>sum ：计算指定列的数值和，如果不是数值类型，那么计算结果为0</p><p>max ：计算指定列的最大值</p><p>min ：计算指定列的最小值</p><p>avg ：计算指定列的平均值</p></blockquote><p>案例1：统计该企业员工数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># count(字段)<br>select count(id) from tb_emp;-- 结果：29<br>select count(job) from tb_emp;-- 结果：28 （聚合函数对NULL值不做计算）<br><br># count(常量)<br>select count(0) from tb_emp;<br>select count(&#x27;A&#x27;) from tb_emp;<br><br># count(*)  推荐此写法（MySQL底层进行了优化）<br>select count(*) from tb_emp;<br></code></pre></td></tr></table></figure><p>案例2：统计该企业最早入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select min(entrydate) from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206160145339.png" alt="image-20221206160145339"></p><p>案例3：统计该企业最迟入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select max(entrydate) from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206160307416.png" alt="image-20221206160307416"></p><p>案例4：统计该企业员工 ID 的平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select avg(id) from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206160416605.png" alt="image-20221206160416605"></p><p>案例5：统计该企业员工的 ID 之和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sum(id) from tb_emp;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206160604073.png" alt="image-20221206160604073"></p><h3 id="1-6-分组查询"><a href="#1-6-分组查询" class="headerlink" title="1.6 分组查询"></a>1.6 分组查询</h3><p>分组： 按照某一列或者某几列，把相同的数据进行合并输出。</p><blockquote><p>分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。</p><p>分组查询通常会使用聚合函数进行计算。</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表  from  表名  [where 条件]  group by 分组字段名  [having 分组后过滤条件];<br></code></pre></td></tr></table></figure><p>案例1：根据性别分组 , 统计男性和女性员工的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select gender, count(*)<br>from tb_emp<br>group by gender; -- 按照gender字段进行分组（gender字段下相同的数据归为一组）<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206172615000.png" alt="image-20221206172615000"></p><p>案例2：查询入职时间在 ‘2015-01-01’ (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job, count(*)<br>from tb_emp<br>where entrydate &lt;= &#x27;2015-01-01&#x27;   -- 分组前条件<br>group by job                      -- 按照job字段分组<br>having count(*) &gt;= 2;             -- 分组后条件<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206172431873.png"></p><blockquote><p>注意事项:</p><p>​• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p><p>​• 执行顺序：where &gt; 聚合函数 &gt; having </p></blockquote><p><strong>where与having区别（面试题）</strong></p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><h3 id="1-7-排序查询"><a href="#1-7-排序查询" class="headerlink" title="1.7 排序查询"></a>1.7 排序查询</h3><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表  <br>from   表名   <br>[where  条件列表] <br>[group by  分组字段 ] <br>order  by  字段1  排序方式1 , 字段2  排序方式2 … ;<br></code></pre></td></tr></table></figure><ul><li><p>排序方式：</p><ul><li><p>ASC ：升序（默认值）</p></li><li><p>DESC：降序</p></li></ul></li></ul><p>案例1：根据入职时间, 对员工进行升序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>order by entrydate ASC; -- 按照entrydate字段下的数据进行升序排序<br><br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>order by  entrydate; -- 默认就是ASC（升序）<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206175720337.png" alt="image-20221206175720337"></p><blockquote><p>注意事项：如果是升序, 可以不指定排序方式ASC </p></blockquote><p>案例2：根据入职时间，对员工进行降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>order by entrydate DESC; -- 按照entrydate字段下的数据进行降序排序<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206180358367.png" alt="image-20221206180358367"></p><p>案例3：根据入职时间对公司的员工进行升序排序，入职时间相同，再按照更新时间进行降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>order by entrydate ASC , update_time DESC;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206180824583.png" alt="image-20221206180824583"></p><blockquote><p>注意事项：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 </p></blockquote><h3 id="1-8-分页查询"><a href="#1-8-分页查询" class="headerlink" title="1.8 分页查询"></a>1.8 分页查询</h3><p>分页操作在业务系统开发时，也是非常常见的一个功能，日常我们在网站中看到的各种各样的分页条，后台也都需要借助于数据库的分页操作。</p><p><img src="/assets/image-20221206183310586.png" alt="image-20221206183310586"></p><p>分页查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表  <span class="hljs-keyword">from</span>   表名  limit  起始索引, 查询记录数 ;<br></code></pre></td></tr></table></figure><p>案例1：从起始索引0开始查询员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>limit 0 , 5; -- 从索引0开始，向后取5条记录<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206185257834.png" alt="image-20221206185257834"></p><p>案例2：查询 第1页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>limit 5; -- 如果查询的是第1页数据，起始索引可以省略，直接简写为：limit 条数<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206184957410.png" alt="image-20221206184957410"></p><p>案例3：查询 第2页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>limit 5 , 5; -- 从索引5开始，向后取5条记录<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206184602569.png" alt="image-20221206184602569"></p><p>案例4：查询 第3页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>limit 10 , 5; -- 从索引10开始，向后取5条记录<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206184414356.png" alt="image-20221206184414356"></p><blockquote><p>注意事项:</p><ol><li><p>起始索引从0开始。        计算公式 ：   起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</p></li><li><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</p></li><li><p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</p></li></ol></blockquote><h3 id="1-9-案例"><a href="#1-9-案例" class="headerlink" title="1.9 案例"></a>1.9 案例</h3><p>DQL的基本语法我们学习结束了，接下来我们就运用所掌握的DQL语句的语法来完成两个案例。</p><h4 id="1-9-1-案例一"><a href="#1-9-1-案例一" class="headerlink" title="1.9.1 案例一"></a>1.9.1 案例一</h4><p>案例：根据需求完成员工管理的条件分页查询</p><p><img src="/assets/image-20221206212240773.png" alt="image-20221206212240773"></p><blockquote><p>分析：根据输入的条件，查询第1页数据</p><ol><li><p>在员工管理的列表上方有一些查询条件：员工姓名、员工性别，员工入职时间(开始时间~结束时间)</p><ul><li>姓名：张</li><li>性别：男</li><li>入职时间：2000-01-01  ~  2015-12-31</li></ul></li><li><p>除了查询条件外，在列表的下面还有一个分页条，这就涉及到了分页查询</p><ul><li>查询第1页数据（每页显示10条数据）</li></ul></li><li><p>基于查询的结果，按照修改时间进行降序排序</p></li></ol><p>结论：条件查询 + 分页查询 + 排序查询</p></blockquote><p>SQL语句代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 根据输入条件查询第1页数据（每页展示10条记录）<br>-- 输入条件：<br>   -- 姓名：张 （模糊查询）<br>   -- 性别：男<br>   -- 入职时间：2000-01-01 ~ 2015-12-31<br>-- 分页： 0 , 10<br>-- 排序： 修改时间  DESC<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time<br>from tb_emp<br>where name like &#x27;张%&#x27; and gender = 1 and entrydate between &#x27;2000-01-01&#x27; and &#x27;2015-12-31&#x27;<br>order by update_time desc<br>limit 0 , 10;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206213235786.png" alt="image-20221206213235786"></p><h4 id="1-9-2-案例二"><a href="#1-9-2-案例二" class="headerlink" title="1.9.2 案例二"></a>1.9.2 案例二</h4><p>案例：根据需求完成员工信息的统计</p><p><img src="/assets/image-20221206210536118.png" alt="image-20221206210536118"></p><blockquote><p>分析：以上信息统计在开发中也叫图形报表(将统计好的数据以可视化的形式展示出来)</p><ul><li>员工性别统计：以饼状图的形式展示出企业男性员人数和女性员工人数<ul><li>只要查询出男性员工和女性员工各自有多少人就可以了</li></ul></li><li>员工职位统计：以柱状图的形式展示各职位的在岗人数<ul><li>只要查询出各个职位有多少人就可以了</li></ul></li></ul></blockquote><p>员工性别统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- if(条件表达式, true取值 , false取值)<br>select if(gender=1,&#x27;男性员工&#x27;,&#x27;女性员工&#x27;) AS 性别, count(*) AS 人数<br>from tb_emp<br>group by gender;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206220908397.png" alt="image-20221206220908397"></p><blockquote><p>if(表达式, tvalue, fvalue) ：当表达式为true时，取值tvalue；当表达式为false时，取值fvalue</p></blockquote><p>员工职位统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- case 表达式 when 值1 then 结果1  when 值2  then  结果2 ...  else  result  end<br>select (case job<br>             when 1 then &#x27;班主任&#x27;<br>             when 2 then &#x27;讲师&#x27;<br>             when 3 then &#x27;学工主管&#x27;<br>             when 4 then &#x27;教研主管&#x27;<br>             else &#x27;未分配职位&#x27;<br>        end) AS 职位 ,<br>       count(*) AS 人数<br>from tb_emp<br>group by job;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206221718731.png" alt="image-20221206221718731"></p><blockquote><p>case   表达式    when   值1   then  结果1   [when 值2  then  结果2 …]     [else result]     end</p></blockquote><h2 id="2-多表设计"><a href="#2-多表设计" class="headerlink" title="2. 多表设计"></a>2. 多表设计</h2><p>关于单表的操作(单表的设计、单表的增删改查)我们就已经学习完了。接下来我们就要来学习多表的操作，首先来学习多表的设计。</p><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li><p>一对多(多对一)</p></li><li><p>多对多</p></li><li><p>一对一</p></li></ul><h3 id="2-1-一对多"><a href="#2-1-一对多" class="headerlink" title="2.1 一对多"></a>2.1 一对多</h3><h4 id="2-1-1-表设计"><a href="#2-1-1-表设计" class="headerlink" title="2.1.1 表设计"></a>2.1.1 表设计</h4><p>需求：根据页面原型及需求文档 ，完成部门及员工的表结构设计</p><ul><li>员工管理页面原型：（前面已完成tb_emp表结构设计）</li></ul><p><img src="/assets/image-20220831195520739.png"></p><ul><li>部门管理页面原型：</li></ul><p><img src="/assets/image-20220831195603106.png"></p><p><img src="/assets/image-20221206224149094.png" alt="image-20221206224149094"></p><blockquote><p>经过上述分析，现已明确的部门表结构：</p><ul><li>业务字段 ： 部门名称</li><li>基础字段 ： id(主键)、创建时间、修改时间</li></ul></blockquote><p>部门表 - SQL语句： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 建议：创建新的数据库（多表设计存放在新数据库下）<br>create database db03;<br>use db03;<br><br>-- 部门表<br>create table tb_dept<br>(<br>    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name varchar(10) not null unique  comment &#x27;部门名称&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br></code></pre></td></tr></table></figure><p>部门表创建好之后，我们还需要再修改下员工表。为什么要修改员工表呢？是因为我们之前设计员工表(单表)的时候，并没有考虑员工的归属部门。</p><p><img src="/assets/image-20221206224642902.png" alt="image-20221206224642902"></p><p>员工表：添加归属部门字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 员工表<br>create table tb_emp<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,<br>    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name        varchar(10)      not null comment &#x27;姓名&#x27;,<br>    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image       varchar(300) comment &#x27;图像&#x27;,<br>    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,<br>    entrydate   date comment &#x27;入职时间&#x27;,<br>    <br>    dept_id     int unsigned comment &#x27;部门ID&#x27;, -- 员工的归属部门<br>    <br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br></code></pre></td></tr></table></figure><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 部门表测试数据<br>insert into tb_dept (id, name, create_time, update_time) values<br>(1,&#x27;学工部&#x27;,now(),now()),<br>(2,&#x27;教研部&#x27;,now(),now()),<br>(3,&#x27;咨询部&#x27;,now(),now()),<br>(4,&#x27;就业部&#x27;,now(),now()),<br>(5,&#x27;人事部&#x27;,now(),now());<br><br>-- 员工表测试数据<br>INSERT INTO tb_emp<br>(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES<br>(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),<br>(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),<br>(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),<br>(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),<br>(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),<br>(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),<br>(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),<br>(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,1,&#x27;2007-02-01&#x27;,1,now(),now()),<br>(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,1,&#x27;2008-08-18&#x27;,1,now(),now()),<br>(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,2,&#x27;2012-11-01&#x27;,2,now(),now()),<br>(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),<br>(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),<br>(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2010-01-01&#x27;,2,now(),now()),<br>(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());<br></code></pre></td></tr></table></figure><p>员工表 - 部门表之间的关系：</p><p><img src="/assets/image-20221206230156403.png" alt="image-20221206230156403"></p><blockquote><p><strong>一对多关系实现：在数据库表中多的一方，添加字段，来关联属于一这方的主键。</strong></p></blockquote><h4 id="2-1-2-外键约束"><a href="#2-1-2-外键约束" class="headerlink" title="2.1.2 外键约束"></a>2.1.2 外键约束</h4><p><strong>问题</strong></p><ul><li>表结构创建完毕后，我们看到两张表的数据分别为：</li></ul><p><img src="/assets/image-20220831201844375.png" alt="image-20220831201844375"> </p><p>现在员工表中有五个员工都归属于1号部门(学工部)，当删除了1号部门后，数据变为：</p><p><img src="/assets/image-20220831202111247.png" alt="image-20220831202111247"> </p><p>1号部门被删除了，但是依然还有5个员工是属于1号部门的。 此时：就出现数据的不完整、不一致了。 </p><p><strong>问题分析</strong></p><p>目前上述的两张表(员工表、部门表)，在数据库层面，并未建立关联，所以是无法保证数据的一致性和完整性的</p><p><strong>问题解决</strong></p><p>想解决上述的问题呢，我们就可以通过数据库中的 <strong>外键约束</strong> 来解决。</p><blockquote><p>外键约束：让两张表的数据建立连接，保证数据的一致性和完整性。  </p><p>对应的关键字：foreign key</p></blockquote><p>外键约束的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建表时指定<br>create table 表名(<br>字段名    数据类型,<br>...<br>[constraint]   [外键名称]  foreign  key (外键字段名)   references   主表 (主表列名)<br>);<br><br><br>-- 建完表后，添加外键<br>alter table  表名  add constraint  外键名称  foreign key(外键字段名) references 主表(主表列名);<br></code></pre></td></tr></table></figure><p>那接下来，我们就为员工表的dept_id 建立外键约束，来关联部门表的主键。</p><p>方式1：通过SQL语句操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 修改表： 添加外键约束<br>alter table tb_emp  <br>add  constraint  fk_dept_id  foreign key (dept_id)  references  tb_dept(id);<br></code></pre></td></tr></table></figure><p>方式2：图形化界面操作</p><p><img src="/assets/image-20221206232750376.png" alt="image-20221206232750376"> </p><blockquote><p>当我们添加外键约束时，我们得保证当前数据库表中的数据是完整的。 所以，我们需要将之前删除掉的数据再添加回来。</p></blockquote><blockquote><p>当我们添加了外键之后，再删除ID为1的部门，就会发现，此时数据库报错了，不允许删除。</p><p><img src="/assets/image-20220831205523647.png"></p><p>外键约束（foreign key）：保证了数据的完整性和一致性。</p></blockquote><p><strong>物理外键和逻辑外键</strong></p><ul><li><p>物理外键</p><ul><li>概念：使用foreign key定义外键关联另外一张表。</li><li>缺点：<ul><li>影响增、删、改的效率（需要检查外键关系）。</li><li>仅用于单节点数据库，不适用与分布式、集群场景。</li><li>容易引发数据库的死锁问题，消耗性能。</li></ul></li></ul></li><li><p>逻辑外键</p><ul><li>概念：在业务层逻辑中，解决外键关联。</li><li>通过逻辑外键，就可以很方便的解决上述问题。</li></ul></li></ul><blockquote><p>**在现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key **</p></blockquote><h3 id="2-2-一对一"><a href="#2-2-一对一" class="headerlink" title="2.2 一对一"></a>2.2 一对一</h3><p>一对一关系表在实际开发中应用起来比较简单，通常是用来做单表的拆分，也就是将一张大表拆分成两张小表，将大表中的一些基础字段放在一张表当中，将其他的字段放在另外一张表当中，以此来提高数据的操作效率。</p><blockquote><p>一对一的应用场景： 用户表(基本信息+身份信息)</p><p><img src="/assets/image-20221207104508080.png" alt="image-20221207104508080"></p><ul><li>基本信息：用户的ID、姓名、性别、手机号、学历</li><li>身份信息：民族、生日、身份证号、身份证签发机关，身份证的有效期(开始时间、结束时间)</li></ul><p>如果在业务系统当中，对用户的基本信息查询频率特别的高，但是对于用户的身份信息查询频率很低，此时出于提高查询效率的考虑，我就可以将这张大表拆分成两张小表，第一张表存放的是用户的基本信息，而第二张表存放的就是用户的身份信息。他们两者之间一对一的关系，一个用户只能对应一个身份证，而一个身份证也只能关联一个用户。</p></blockquote><p>那么在数据库层面怎么去体现上述两者之间是一对一的关系呢？</p><p>其实一对一我们可以看成一种特殊的一对多。一对多我们是怎么设计表关系的？是不是在多的一方添加外键。同样我们也可以通过外键来体现一对一之间的关系，我们只需要在任意一方来添加一个外键就可以了。</p><p><img src="/assets/image-20221207105632634.png" alt="image-20221207105632634"></p><blockquote><p>一对一 ：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p></blockquote><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 用户基本信息表<br>create table tb_user(<br>    id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,<br>    name varchar(10) not null comment &#x27;姓名&#x27;,<br>    gender tinyint unsigned not null comment &#x27;性别, 1 男  2 女&#x27;,<br>    phone char(11) comment &#x27;手机号&#x27;,<br>    degree varchar(10) comment &#x27;学历&#x27;<br>) comment &#x27;用户基本信息表&#x27;;<br>-- 测试数据<br>insert into tb_user values (1,&#x27;白眉鹰王&#x27;,1,&#x27;18812340001&#x27;,&#x27;初中&#x27;),<br>                        (2,&#x27;青翼蝠王&#x27;,1,&#x27;18812340002&#x27;,&#x27;大专&#x27;),<br>                        (3,&#x27;金毛狮王&#x27;,1,&#x27;18812340003&#x27;,&#x27;初中&#x27;),<br>                        (4,&#x27;紫衫龙王&#x27;,2,&#x27;18812340004&#x27;,&#x27;硕士&#x27;);<br><br>-- 用户身份信息表<br>create table tb_user_card(<br>    id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,<br>    nationality varchar(10) not null comment &#x27;民族&#x27;,<br>    birthday date not null comment &#x27;生日&#x27;,<br>    idcard char(18) not null comment &#x27;身份证号&#x27;,<br>    issued varchar(20) not null comment &#x27;签发机关&#x27;,<br>    expire_begin date not null comment &#x27;有效期限-开始&#x27;,<br>    expire_end date comment &#x27;有效期限-结束&#x27;,<br>    user_id int unsigned not null unique comment &#x27;用户ID&#x27;,<br>    constraint fk_user_id foreign key (user_id) references tb_user(id)<br>) comment &#x27;用户身份信息表&#x27;;<br>-- 测试数据<br>insert into tb_user_card values (1,&#x27;汉&#x27;,&#x27;1960-11-06&#x27;,&#x27;100000100000100001&#x27;,&#x27;朝阳区公安局&#x27;,&#x27;2000-06-10&#x27;,null,1),<br>        (2,&#x27;汉&#x27;,&#x27;1971-11-06&#x27;,&#x27;100000100000100002&#x27;,&#x27;静安区公安局&#x27;,&#x27;2005-06-10&#x27;,&#x27;2025-06-10&#x27;,2),<br>        (3,&#x27;汉&#x27;,&#x27;1963-11-06&#x27;,&#x27;100000100000100003&#x27;,&#x27;昌平区公安局&#x27;,&#x27;2006-06-10&#x27;,null,3),<br>        (4,&#x27;回&#x27;,&#x27;1980-11-06&#x27;,&#x27;100000100000100004&#x27;,&#x27;海淀区公安局&#x27;,&#x27;2008-06-10&#x27;,&#x27;2028-06-10&#x27;,4);<br></code></pre></td></tr></table></figure><h3 id="2-3-多对多"><a href="#2-3-多对多" class="headerlink" title="2.3 多对多"></a>2.3 多对多</h3><p>多对多的关系在开发中属于也比较常见的。比如：学生和老师的关系，一个学生可以有多个授课老师，一个授课老师也可以有多个学生。在比如：学生和课程的关系，一个学生可以选修多门课程，一个课程也可以供多个学生选修。</p><p>案例：学生与课程的关系</p><ul><li><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p></li><li><p>实现关系：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p></li></ul><p><img src="/assets/image-20221207113341028.png" alt="image-20221207113341028"></p><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 学生表<br>create table tb_student(<br>    id int auto_increment primary key comment &#x27;主键ID&#x27;,<br>    name varchar(10) comment &#x27;姓名&#x27;,<br>    no varchar(10) comment &#x27;学号&#x27;<br>) comment &#x27;学生表&#x27;;<br>-- 学生表测试数据<br>insert into tb_student(name, no) values (&#x27;黛绮丝&#x27;, &#x27;2000100101&#x27;),(&#x27;谢逊&#x27;, &#x27;2000100102&#x27;),(&#x27;殷天正&#x27;, &#x27;2000100103&#x27;),(&#x27;韦一笑&#x27;, &#x27;2000100104&#x27;);<br><br>-- 课程表<br>create table tb_course(<br>   id int auto_increment primary key comment &#x27;主键ID&#x27;,<br>   name varchar(10) comment &#x27;课程名称&#x27;<br>) comment &#x27;课程表&#x27;;<br>-- 课程表测试数据<br>insert into tb_course (name) values (&#x27;Java&#x27;), (&#x27;PHP&#x27;), (&#x27;MySQL&#x27;) , (&#x27;Hadoop&#x27;);<br><br>-- 学生课程表（中间表）<br>create table tb_student_course(<br>   id int auto_increment comment &#x27;主键&#x27; primary key,<br>   student_id int not null comment &#x27;学生ID&#x27;,<br>   course_id  int not null comment &#x27;课程ID&#x27;,<br>   constraint fk_courseid foreign key (course_id) references tb_course (id),<br>   constraint fk_studentid foreign key (student_id) references tb_student (id)<br>)comment &#x27;学生课程中间表&#x27;;<br>-- 学生课程表测试数据<br>insert into tb_student_course(student_id, course_id) values (1,1),(1,2),(1,3),(2,2),(2,3),(3,4);<br></code></pre></td></tr></table></figure><h3 id="2-4-案例"><a href="#2-4-案例" class="headerlink" title="2.4 案例"></a>2.4 案例</h3><p>下面通过一个综合案例加深对于多表关系的理解，并掌握多表设计的流程。</p><p><strong>需求</strong></p><ul><li>根据参考资料中提供的《<a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">苍穹外卖</a><a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">_</a><a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">管理后台</a>》页面原型，设计分类管理、菜品管理、套餐管理模块的表结构。</li></ul><p><strong>步骤</strong></p><ol><li><p>阅读页面原型及需求文档，分析各个模块涉及到的表结构，及表结构之间的关系。</p></li><li><p>根据页面原型及需求文档，分析各个表结构中具体的字段及约束。</p></li></ol><p><strong>分析</strong></p><ul><li>页面原型-分类管理</li></ul><p><img src="/assets/image-20221207114241260.png" alt="image-20221207114241260"></p><blockquote><p>分类的信息：分类名称、分类类型[菜品&#x2F;套餐]、分类排序、分类状态[禁用&#x2F;启用]、分类的操作时间(修改时间)。</p></blockquote><ul><li>页面原型-菜品管理</li></ul><p><img src="/assets/image-20221207114300057.png" alt="image-20221207114300057"></p><blockquote><p>菜品的信息：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态、菜品的操作时间(修改时间)。</p></blockquote><blockquote><p>思考：分类与菜品之间是什么关系？</p><ul><li>思考逻辑：一个分类下可以有多个菜品吗？反过来再想一想，一个菜品会对应多个分类吗？</li></ul><p>答案：一对多关系。一个分类下会有多个菜品，而一个菜品只能归属一个分类。</p><p>设计表原则：在多的一方，添加字段，关联属于一这方的主键。</p></blockquote><ul><li>页面原型-套餐管理</li></ul><p><img src="/assets/image-20221207114327139.png" alt="image-20221207114327139"> </p><blockquote><p>套餐的信息：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态、套餐的操作时间。</p></blockquote><blockquote><p>思考：套餐与菜品之间是什么关系？</p><ul><li>思考逻辑：一个套餐下可以有多个菜品吗？反过来再想一想，一个菜品可以出现在多个套餐中吗？</li></ul><p>答案：多对多关系。一个套餐下会有多个菜品，而一个菜品也可以出现在多个套餐中。</p><p>设计表原则：创建第三张中间表，建立两个字段分别关联菜品表的主键和套餐表的主键。</p></blockquote><p>分析页面原型及需求文档后，我们获得：</p><ul><li>分类表<ul><li>业务字段：分类名称、分类类型、分类排序、分类状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li><li>菜品表<ul><li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li><li>套餐表<ul><li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li></ul><p>表结构之间的关系：</p><ul><li>分类表 - 菜品表 ： 一对多<ul><li>在菜品表中添加字段(菜品分类)，关联分类表</li></ul></li><li>菜品表 - 套餐表 ： 多对多<ul><li>创建第三张中间表(套餐菜品关联表)，在中间表上添加两个字段(菜品id、套餐id)，分别关联菜品表和分类表</li></ul></li></ul><p><img src="/assets/image-20220831211756004.png"></p><p><strong>表结构</strong></p><p>分类表：category</p><ul><li>业务字段：分类名称、分类类型、分类排序、分类状态</li><li>基础字段：id(主键)、创建时间、修改时间</li></ul><p><img src="/assets/image-20221207143907853.png" alt="image-20221207143907853"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 分类表<br>create table category<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name        varchar(20)      not null unique comment &#x27;分类名称&#x27;,<br>    type        tinyint unsigned not null comment &#x27;类型 1 菜品分类 2 套餐分类&#x27;,<br>    sort        tinyint unsigned not null comment &#x27;顺序&#x27;,<br>    status      tinyint unsigned not null default 0 comment &#x27;状态 0 禁用，1 启用&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;更新时间&#x27;<br>) comment &#x27;菜品及套餐分类&#x27;;<br></code></pre></td></tr></table></figure><p>菜品表：dish</p><ul><li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul><p><img src="/assets/image-20221207144323100.png" alt="image-20221207144323100"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 菜品表<br>create table dish<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name        varchar(20)      not null unique comment &#x27;菜品名称&#x27;,<br>    category_id int unsigned     not null comment &#x27;菜品分类ID&#x27;,   -- 逻辑外键<br>    price       decimal(8, 2)    not null comment &#x27;菜品价格&#x27;,<br>    image       varchar(300)     not null comment &#x27;菜品图片&#x27;,<br>    description varchar(200) comment &#x27;描述信息&#x27;,<br>    status      tinyint unsigned not null default 0 comment &#x27;状态, 0 停售 1 起售&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;更新时间&#x27;<br>) comment &#x27;菜品&#x27;;<br></code></pre></td></tr></table></figure><p>套餐表：setmeal</p><ul><li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul><p><img src="/assets/image-20221207144723621.png" alt="image-20221207144723621"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 套餐表<br>create table setmeal<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name        varchar(20)      not null unique comment &#x27;套餐名称&#x27;,<br>    category_id int unsigned     not null comment &#x27;分类id&#x27;,       -- 逻辑外键<br>    price       decimal(8, 2)    not null comment &#x27;套餐价格&#x27;,<br>    image       varchar(300)     not null comment &#x27;图片&#x27;,<br>    description varchar(200) comment &#x27;描述信息&#x27;,<br>    status      tinyint unsigned not null default 0 comment &#x27;状态 0:停用 1:启用&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;更新时间&#x27;<br>) comment &#x27;套餐&#x27;;<br></code></pre></td></tr></table></figure><p>套餐菜品关联表：setmeal_dish</p><p><img src="/assets/image-20221207145016440.png" alt="image-20221207145016440"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 套餐菜品关联表<br>create table setmeal_dish<br>(<br>    id         int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    setmeal_id int unsigned     not null comment &#x27;套餐id &#x27;,    -- 逻辑外键<br>    dish_id    int unsigned     not null comment &#x27;菜品id&#x27;,     -- 逻辑外键<br>    copies     tinyint unsigned not null comment &#x27;份数&#x27;<br>) comment &#x27;套餐菜品关联表&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>29MySQL</title>
    <link href="/2023/12/10/day29-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL-01/"/>
    <url>/2023/12/10/day29-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL-01/</url>
    
    <content type="html"><![CDATA[<h1 id="29-数据库开发-MySQL"><a href="#29-数据库开发-MySQL" class="headerlink" title="29-数据库开发-MySQL"></a>29-数据库开发-MySQL</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们讲解SpringBootWeb基础知识(请求响应案例)的时候，我们讲到在web开发中，为了应用程序职责单一，方便维护，我们一般将web应用程序分为三层，即：Controller、Service、Dao 。</p><p>之前我们的案例中，是这样子的请求流程：浏览器发起请求，先请求Controller；Controller接收到请求之后，调用Service进行业务逻辑处理；Service再调用Dao，Dao再解析user.xml中所存储的数据。</p><p><img src="/assets/image-20221205001241294.png" alt="image-20221205001241294"></p><p>xml文件中可以存储数据，但是在企业项目开发中不会使用xml文件存储数据，因为不便管理维护，操作难度大。 在真实的企业开发中呢，都会采用数据库来存储和管理数据，那此时，web开发调用流程图如下所示：</p><p><img src="/assets/image-20221205001346266.png" alt="image-20221205001346266"></p><p>首先来了解一下什么是数据库。</p><ul><li>数据库：英文为 DataBase，简称DB，它是存储和管理数据的仓库。</li></ul><p>像我们日常访问的电商网站京东，企业内部的管理系统OA、ERP、CRM这类的系统，以及大家每天都会刷的头条、抖音类的app，那这些大家所看到的数据，其实都是存储在数据库中的。最终这些数据，只是在浏览器或app中展示出来而已，最终数据的存储和管理都是数据库负责的。</p><p><img src="/assets/image-20221205001501275.png" alt="image-20221205001501275"></p><p>数据是存储在数据库中的，那我们要如何来操作数据库以及数据库中所存放的数据呢？</p><p>那这里呢，会涉及到一个软件：数据库管理系统（<strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem，简称DBMS）</p><ul><li>DBMS是操作和管理数据库的大型软件。将来我们只需要操作这个软件，就可以通过这个软件来操纵和管理数据库了。</li></ul><p>此时又出现一个问题：DBMS这个软件怎么知道要操作的是哪个数据库、哪个数据呢？是对数据做修改还是查询呢？</p><ul><li>需要给DBMS软件发送一条指令，告诉这个软件我们要执行的是什么样的操作，要对哪个数据进行操作。而这个指令就是SQL语句</li></ul><p>SQL（<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage，简称SQL）：结构化查询语言，它是操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准。我们学习数据库开发，最为重要的就是学习SQL语句 。</p><blockquote><p>关系型数据库：我们后面会详细讲解，现在大家只需要知道我们学习的数据库属于关系型数据库即可。</p></blockquote><p><img src="/assets/image-20221205095039939.png" alt="image-20221205095039939"></p><p>结论：程序员给数据库管理系统(DBMS)发送SQL语句，再由数据库管理系统操作数据库当中的数据。</p><p>了解了数据库的一些简单概念之后，接下来我们再来介绍下目前主流的数据库，这里截取了排名前十的数据库：</p><p><img src="/assets/image-20221205120408757.png" alt="image-20221205120408757"> </p><ul><li>Oracle：大型的收费数据库，Oracle公司产品，价格昂贵。（通常是不差钱的公司会选择使用这个数据库）</li><li>MySQL：开源免费的中小型数据库，后来Sun公司收购了MySQL，而Oracle又收购了Sun公司。目前Oracle推出两个版本的Mysql：社区版(开源免费)、商业版(收费)。</li><li>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net等语言常用。</li><li>PostgreSQL：开源免费的中小型数据库。</li><li>DB2：IBM公司的大型收费数据库产品。</li><li>SQLLite：嵌入式的微型数据库。Android内置的数据库采用的就是该数据库。</li><li>MariaDB：开源免费的中小型数据库。是MySQL数据库的另外一个分支、另外一个衍生产品，与MySQL数据库有很好的兼容性。</li></ul><p>那这么多数据库，我们全部都需要学习吗，其实并不用，我们只需要学习其中的一个就可以了，我们此次课程中学习的数据库是现在互联网公司开发使用最为流行的MySQL数据库。</p><p>此时大家可能会有一个疑问，我们现在学习的是Mysql数据库，我们以后去公司做开发，如果用到的是Oracle数据库或SQL Server数据库该怎么办？其实大家完全不用担心这个问题，因为这些数据库都是属于关系型数据库，要操作关系型数据库都是通过 SQL语句来实现的，而SQL语句又是操作关系型数据库的统一标准。</p><blockquote><p>结论：只要我们学会了SQL语句，就可以通过SQL语句来操作Mysql，也可以通过SQL语句来操作Oracle或SQL Server</p></blockquote><p>课程内容安排：</p><p><img src="/assets/image-20221205122731402.png" alt="image-20221205122731402"></p><p>以上课程内容拆解为3部分知识点：</p><p><img src="/assets/image-20221205122937131.png" alt="image-20221205122937131"></p><p>接下来我们就先进入到第一天的Mysql概述学习。</p><h2 id="1-MySQL概述"><a href="#1-MySQL概述" class="headerlink" title="1. MySQL概述"></a>1. MySQL概述</h2><p><img src="/assets/image-20220610191829748.png" alt="image-20220610191829748"> </p><p>官网：<a href="https://dev.mysql.com/">https://dev.mysql.com/</a></p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><h4 id="1-1-1-版本"><a href="#1-1-1-版本" class="headerlink" title="1.1.1 版本"></a>1.1.1 版本</h4><p>MySQL官方提供了两个版本：</p><ul><li><p>商业版本（MySQL Enterprise Edition）</p><ul><li>该版本是收费的，我们可以使用30天。 官方会提供对应的技术支持。</li></ul></li><li><p>社区版本（MySQL Community Server）</p><ul><li>该版本是免费的，但是MySQL不会提供任何的技术支持。</li></ul></li></ul><blockquote><p>本课程，采用的是MySQL的社区版本（8.0.31）</p></blockquote><h4 id="1-1-2-安装"><a href="#1-1-2-安装" class="headerlink" title="1.1.2 安装"></a>1.1.2 安装</h4><p>官网下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/assets/image-20221205140643412.png" alt="image-20221205140643412"></p><p>这个安装包呢，大家可以不用下载，因为资料中已提供现成的安装包。 <img src="/assets/image-20221205140732982.png" alt="image-20221205140732982"></p><blockquote><p>安装MySQL具体的步骤，参考资料中提供的 《MySQL安装文档》 ，进行软件的安装即可。</p></blockquote><h4 id="1-1-3-连接"><a href="#1-1-3-连接" class="headerlink" title="1.1.3 连接"></a>1.1.3 连接</h4><p>MySQL服务器启动完毕后，然后再使用如下指令，来连接MySQL服务器：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u用户名 -<span class="hljs-selector-tag">p</span>密码 <span class="hljs-selector-attr">[-h数据库服务器的IP地址 -P端口号]</span><br></code></pre></td></tr></table></figure><blockquote><p>-h  参数不加，默认连接的是本地 127.0.0.1 的MySQL服务器</p><p>-P  参数不加，默认连接的端口号是 3306</p></blockquote><p><strong>上述指令，可以有两种形式：</strong></p><ul><li>密码直接在-p参数之后直接指定 （这种方式不安全，密码直接以明文形式出现在命令行）</li></ul><p><img src="/assets/image-20221205143139656.png" alt="image-20221205143139656"></p><ul><li>密码在-p回车之后，在命令行中输入密码，然后回车</li></ul><p><img src="/assets/image-20221205143418632.png" alt="image-20221205143418632"> </p><h4 id="1-1-4-企业使用方式-了解"><a href="#1-1-4-企业使用方式-了解" class="headerlink" title="1.1.4 企业使用方式(了解)"></a>1.1.4 企业使用方式(了解)</h4><p>上述的MySQL服务器我们是安装在本地的，这个仅仅是在我们学习阶段，在真实的企业开发中，MySQL数据库服务器是不会在我们本地安装的，是在公司的服务器上安装的，而服务器还需要放置在专门的IDC机房中的，IDC机房呢，就需要保证恒温、恒湿、恒压，而且还要保证网络、电源的可靠性(备用电源及网络)。</p><p><img src="/assets/image-20220829110618240.png" alt="image-20220829110618240"> </p><p>那我们要想使用服务器上的这台MySQL服务器，就需要在我们的电脑上去远程连接这台MySQL。 而服务器上安装的MySQL数据库呢，并不是你一个人在访问，我们项目组的其他开发人员也是需要访问这台MySQL的。</p><p><img src="/assets/image-20220829110723526.png" alt="image-20220829110723526"> </p><p>我们在学习阶段，如果想提前体验一下企业中数据库的使用方式，可以借助于VMware虚拟机来实现。我们可以在我们的电脑上安装一个VMware，然后在Vmware虚拟机上在安装一个服务器操作系统Linux，然后再在Linux服务器上安装各种企业级软件。</p><p><img src="/assets/image-20220829111237340.png" alt="image-20220829111237340"> </p><p>接下来，就来演示一下，通过MySQL的客户端命令行，如何来连接服务器上部署的MySQL ： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u用户名 -<span class="hljs-selector-tag">p</span>密码 <span class="hljs-selector-attr">[-h数据库服务器的IP地址 -P端口号]</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20220829111522126.png" alt="image-20220829111522126"></p><h3 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h3><p>介绍完了Mysql数据库的安装配置之后，接下来我们再来聊一聊Mysql当中的数据模型。学完了这一小节之后，我们就能够知道在Mysql数据库当中到底是如何来存储和管理数据的。</p><p>在介绍 Mysql的数据模型之前，需要先了解一个概念：关系型数据库。</p><p><strong>关系型数据库（RDBMS）</strong></p><p>概念：建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库。</p><p>而所谓二维表，指的是由行和列组成的表，如下图：</p><p><img src="/assets/image-20221205145028667.png" alt="image-20221205145028667"> </p><p>二维表的优点：</p><ul><li><p>使用表存储数据，格式统一，便于维护</p></li><li><p>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</p></li></ul><blockquote><p>我们之前提到的MySQL、Oracle、DB2、SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。</p><p>结论：基于二维表存储数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库（比如大家后面要学习的Redis，就属于非关系型数据库）。</p></blockquote><p><strong>2). 数据模型</strong></p><p>介绍完了关系型数据库之后，接下来我们再来看一看在Mysql数据库当中到底是如何来存储数据的，也就是Mysql 的数据模型。</p><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p><p><img src="/assets/image-20220829111741419.png" alt="image-20220829111741419"> </p><ul><li>通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库</li><li>使用MySQL客户端，向数据库管理系统发送一条SQL语句，由数据库管理系统根据SQL语句指令去操作数据库中的表结构及数据</li><li>一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包含多行记录。</li></ul><blockquote><p>在Mysql数据库服务器当中存储数据，你需要：</p><ol><li>先去创建数据库（可以创建多个数据库，之间是相互独立的）</li><li>在数据库下再去创建数据表（一个数据库下可以创建多张表）</li><li>再将数据存放在数据表中（一张表可以存储多行数据）</li></ol></blockquote><h3 id="1-3-SQL简介"><a href="#1-3-SQL简介" class="headerlink" title="1.3 SQL简介"></a>1.3 SQL简介</h3><p>SQL：结构化查询语言。一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p><p>在学习具体的SQL语句之前，先来了解一下SQL语言的语法。</p><h4 id="1-3-1-SQL通用语法"><a href="#1-3-1-SQL通用语法" class="headerlink" title="1.3.1 SQL通用语法"></a>1.3.1 SQL通用语法</h4><p>1、SQL语句可以单行或多行书写，以分号结尾。</p><p><img src="/assets/image-20221205151656214.png" alt="image-20221205151656214"></p><p>2、SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p><p><img src="/assets/image-20221205151953441.png" alt="image-20221205151953441"></p><p>3、MySQL数据库的SQL语句不区分大小写。</p><p><img src="/assets/image-20221205152112070.png" alt="image-20221205152112070"></p><p>4、注释：</p><ul><li>单行注释：– 注释内容   或   # 注释内容(MySQL特有)</li><li>多行注释： &#x2F;* 注释内容 *&#x2F;</li></ul><blockquote><p>以上就是SQL语句的通用语法，这些通用语法大家目前先有一个直观的认识，我们后面在讲解每一类SQL语句的时候，还会再来强调通用语法。</p></blockquote><h4 id="1-3-2-分类"><a href="#1-3-2-分类" class="headerlink" title="1.3.2 分类"></a>1.3.2 分类</h4><p>SQL语句根据其功能被分为四大类：DDL、DML、DQL、DCL </p><table><thead><tr><th><strong>分类</strong></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition  Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation  Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control  Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><p><img src="/assets/image-20221205152804250.png" alt="image-20221205152804250">  </p><h2 id="2-数据库设计-DDL"><a href="#2-数据库设计-DDL" class="headerlink" title="2. 数据库设计-DDL"></a>2. 数据库设计-DDL</h2><p>下面我们就正式的进入到SQL语句的学习，在学习之前先给大家介绍一下我们要开发一个项目，整个开发流程是什么样的，以及在流程当中哪些环节会涉及到数据库。</p><h3 id="2-1-项目开发流程"><a href="#2-1-项目开发流程" class="headerlink" title="2.1 项目开发流程"></a>2.1 项目开发流程</h3><p><img src="/assets/image-20220829112953742.png" alt="image-20220829112953742"></p><p>需求文档：</p><ul><li>在我们开发一个项目或者项目当中的某个模块之前，会先会拿到产品经理给我们提供的页面原型及需求文档。</li></ul><p><img src="/assets/image-20221205154101142.png" alt="image-20221205154101142"></p><p>设计：</p><ul><li>拿到产品原型和需求文档之后，我们首先要做的不是编码，而是要先进行项目的设计，其中就包括概要设计、详细设计、接口设计、数据库设计等等。</li><li>数据库设计根据产品原型以及需求文档，要分析各个模块涉及到的表结构以及表结构之间的关系，以及表结构的详细信息。最终我们需要将数据库以及数据库当中的表结构设计创建出来。</li></ul><p>开发&#x2F;测试：</p><ul><li>参照页面原型和需求进行编码，实现业务功能。在这个过程当中，我们就需要来操作设计出来的数据库表结构，来完成业务的增删改查操作等。</li></ul><p>部署上线：</p><ul><li>在项目的功能开发测试完成之后，项目就可以上线运行了，后期如果项目遇到性能瓶颈，还需要对项目进行优化。优化很重要的一个部分就是数据库的优化，包括数据库当中索引的建立、SQL 的优化、分库分表等操作。</li></ul><p>在上述的流程当中，针对于数据库来说，主要包括三个阶段：</p><ol><li>数据库设计阶段<ul><li>参照页面原型以及需求文档设计数据库表结构</li></ul></li><li>数据库操作阶段<ul><li>根据业务功能的实现，编写SQL语句对数据表中的数据进行增删改查操作</li></ul></li><li>数据库优化阶段<ul><li>通过数据库的优化来提高数据库的访问性能。优化手段：索引、SQL优化、分库分表等</li></ul></li></ol><p>接下来我们就先来学习第一部分数据库的设计，而数据库的设计就是来定义数据库，定义表结构以及表中的字段。</p><h3 id="2-2-数据库操作"><a href="#2-2-数据库操作" class="headerlink" title="2.2 数据库操作"></a>2.2 数据库操作</h3><p>我们在进行数据库设计，需要使用到刚才所介绍SQL分类中的DDL语句。</p><p>DDL英文全称是Data Definition Language(数据定义语言)，用来定义数据库对象(数据库、表)。</p><p>DDL中数据库的常见操作：查询、创建、使用、删除。</p><h4 id="2-2-1-查询数据库"><a href="#2-2-1-查询数据库" class="headerlink" title="2.2.1 查询数据库"></a>2.2.1 查询数据库</h4><p><strong>查询所有数据库：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure><p>命令行中执行效果如下：</p><p><img src="/assets/image-20220829124104154.png" alt="image-20220829124104154"> </p><p><strong>查询当前数据库：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select database();<br></code></pre></td></tr></table></figure><p>命令行中执行效果如果：</p><p><img src="/assets/image-20221205174615074.png" alt="image-20221205174615074"></p><blockquote><p>我们要操作某一个数据库，必须要切换到对应的数据库中。 </p><p>通过指令：select  database() ，就可以查询到当前所处的数据库 </p></blockquote><h4 id="2-2-2-创建数据库"><a href="#2-2-2-创建数据库" class="headerlink" title="2.2.2 创建数据库"></a>2.2.2 创建数据库</h4><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database [ if not exists ] 数据库名;<br></code></pre></td></tr></table></figure><p>案例： 创建一个itcast数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database itcast;<br></code></pre></td></tr></table></figure><p>命令行执行效果如下：</p><p><img src="/assets/image-20220829124219427.png" alt="image-20220829124219427"> </p><p>&#x3D;&#x3D;注意：在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。&#x3D;&#x3D;</p><p><img src="/assets/image-20220829124250514.png" alt="image-20220829124250514"></p><ul><li>可以使用if not exists来避免这个问题</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据库不存在,则创建该数据库；如果存在则不创建</span><br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> extists itcast; <br></code></pre></td></tr></table></figure><p> 命令行执行效果如下： <img src="/assets/image-20220829124326741.png" alt="image-20220829124326741"> </p><h4 id="2-2-3-使用数据库"><a href="#2-2-3-使用数据库" class="headerlink" title="2.2.3 使用数据库"></a>2.2.3 使用数据库</h4><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名 ;<br></code></pre></td></tr></table></figure><blockquote><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则不能操作。</p></blockquote><p>案例：切换到itcast数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use itcast;<br></code></pre></td></tr></table></figure><p>命令执行效果如下：</p><p><img src="/assets/image-20220829124929708.png" alt="image-20220829124929708"> </p><h4 id="2-2-4-删除数据库"><a href="#2-2-4-删除数据库" class="headerlink" title="2.2.4 删除数据库"></a>2.2.4 删除数据库</h4><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database [ if exists ] 数据库名 ;<br></code></pre></td></tr></table></figure><blockquote><p>如果删除一个不存在的数据库，将会报错。</p><p>可以加上参数 if exists ，如果数据库存在，再执行删除，否则不执行删除。</p></blockquote><p>案例：删除itcast数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database if exists itcast; -- itcast数据库存在时删除<br></code></pre></td></tr></table></figure><p>命令执行效果如下：</p><p><img src="/assets/image-20220829125006142.png" alt="image-20220829125006142"> </p><blockquote><p>说明：上述语法中的database，也可以替换成 schema</p><ul><li>如：create schema db01;</li><li>如：show schemas;</li></ul><p><img src="/assets/image-20221205180608004.png" alt="image-20221205180608004"></p></blockquote><h3 id="2-3-图形化工具"><a href="#2-3-图形化工具" class="headerlink" title="2.3 图形化工具"></a>2.3 图形化工具</h3><h4 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2.3.1 介绍"></a>2.3.1 介绍</h4><p>前面我们讲解了DDL中关于数据库操作的SQL语句，在我们编写这些SQL时，都是在命令行当中完成的。大家在练习的时候应该也感受到了，在命令行当中来敲这些SQL语句很不方便，主要的原因有以下 3 点：</p><ol><li>没有任何代码提示。（全靠记忆，容易敲错字母造成执行报错）</li><li>操作繁琐，影响开发效率。（所有的功能操作都是通过SQL语句来完成的）</li><li>编写过的SQL代码无法保存。</li></ol><p>在项目开发当中，通常为了提高开发效率，都会借助于现成的图形化管理工具来操作数据库。</p><p>目前MySQL主流的图形化界面工具有以下几种：</p><p><img src="/assets/image-20221205184802646.png" alt="image-20221205184802646"></p><p>DataGrip是JetBrains旗下的一款数据库管理工具，是管理和开发MySQL、Oracle、PostgreSQL的理想解决方案。</p><p>官网： <a href="https://www.jetbrains.com/zh-cn/datagrip/">https://www.jetbrains.com/zh-cn/datagrip/</a></p><h4 id="2-3-2-安装"><a href="#2-3-2-安装" class="headerlink" title="2.3.2 安装"></a>2.3.2 安装</h4><p>安装： 参考资料中提供的《DataGrip安装手册》</p><blockquote><p>说明：DataGrip这款工具可以不用安装，因为Jetbrains公司已经将DataGrip这款工具的功能已经集成到了 IDEA当中，所以我们就可以使用IDEA来作为一款图形化界面工具来操作Mysql数据库。</p></blockquote><h4 id="2-3-3-使用"><a href="#2-3-3-使用" class="headerlink" title="2.3.3 使用"></a>2.3.3 使用</h4><h5 id="2-2-3-1-连接数据库"><a href="#2-2-3-1-连接数据库" class="headerlink" title="2.2.3.1 连接数据库"></a>2.2.3.1 连接数据库</h5><p>1、打开IDEA自带的Database</p><p><img src="/assets/image-20221205190929756.png" alt="image-20221205190929756"></p><p>2、配置MySQL</p><p><img src="/assets/image-20221205191143072.png" alt="image-20221205191143072"></p><p>3、输入相关信息</p><p><img src="/assets/image-20221205192606038.png" alt="image-20221205192606038"> </p><p>4、下载MySQL连接驱动</p><p><img src="/assets/image-20221205192847190.png" alt="image-20221205192847190"></p><p>5、测试数据库连接</p><p><img src="/assets/image-20221205193304124.png" alt="image-20221205193304124"></p><p>6、保存配置</p><p><img src="/assets/image-20221205193409856.png" alt="image-20221205193409856"></p><p>默认情况下，连接上了MySQL数据库之后， 数据库并没有全部展示出来。 需要选择要展示哪些数据库。具体操作如下：</p><p><img src="/assets/8.gif"></p><h5 id="2-2-3-2-操作数据库"><a href="#2-2-3-2-操作数据库" class="headerlink" title="2.2.3.2 操作数据库"></a>2.2.3.2 操作数据库</h5><p><strong>创建数据库：</strong></p><p><img src="/assets/image-20221205195346655.png" alt="image-20221205195346655"></p><p><img src="/assets/image-20221205195510716.png" alt="image-20221205195510716"></p><blockquote><p>有了图形化界面工具后，就可以方便的使用图形化工具：创建数据库，创建表、修改表等DDL操作。</p><p>其实工具底层也是通过DDL语句操作的数据库，只不过这些SQL语句是图形化界面工具帮我们自动完成的。</p></blockquote><p><strong>查看所有数据库：</strong></p><p><img src="/assets/image-20221205195128343.png" alt="image-20221205195128343"></p><p><img src="/assets/image-20221205195833439.png" alt="image-20221205195833439"></p><h3 id="2-3-表操作"><a href="#2-3-表操作" class="headerlink" title="2.3 表操作"></a>2.3 表操作</h3><p>学习完了DDL语句当中关于数据库的操作之后，接下来我们继续学习DDL语句当中关于表结构的操作。</p><p>关于表结构的操作也是包含四个部分：创建表、查询表、修改表、删除表。</p><h4 id="2-3-1-创建"><a href="#2-3-1-创建" class="headerlink" title="2.3.1 创建"></a>2.3.1 创建</h4><h5 id="2-3-1-1-语法"><a href="#2-3-1-1-语法" class="headerlink" title="2.3.1.1 语法"></a>2.3.1.1 语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table  表名(<br>字段1  字段1类型 [约束]  [comment  字段1注释 ],<br>字段2  字段2类型 [约束]  [comment  字段2注释 ],<br>......<br>字段n  字段n类型 [约束]  [comment  字段n注释 ] <br>) [ comment  表注释 ] ;<br></code></pre></td></tr></table></figure><blockquote><p>注意： [ ] 中的内容为可选参数； 最后一个字段后面没有逗号</p></blockquote><p>案例：创建tb_user表</p><ul><li>对应的结构如下：</li></ul><p><img src="/assets/image-20220829143005524.png" alt="image-20220829143005524">  </p><ul><li>建表语句：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_user (<br>    id int comment &#x27;ID,唯一标识&#x27;,   # id是一行数据的唯一标识（不能重复）<br>    username varchar(20) comment &#x27;用户名&#x27;,<br>    name varchar(10) comment &#x27;姓名&#x27;,<br>    age int comment &#x27;年龄&#x27;,<br>    gender char(1) comment &#x27;性别&#x27;<br>) comment &#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>数据表创建完成，接下来我们还需要测试一下是否可以往这张表结构当中来存储数据。</p></blockquote><p>双击打开tb_user表结构，大家会发现里面没有数据：</p><p><img src="/assets/image-20221205211008929.png" alt="image-20221205211008929"></p><p>添加数据：</p><p><img src="/assets/9.gif"> </p><p>此时我们再插入一条数据：</p><p><img src="/assets/image-20221205214447060.png" alt="image-20221205214447060"> </p><p>我们之前提到过：id字段是一行数据的唯一标识，不能有重复值。但是现在数据表中有两个相同的id值，这是为什么呢？</p><ul><li>其实我们现在创建表结构的时候， id这个字段我们只加了一个备注信息说明它是一个唯一标识，但是在数据库层面呢，并没有去限制字段存储的数据。所以id这个字段没有起到唯一标识的作用。</li></ul><blockquote><p>想要限制字段所存储的数据，就需要用到数据库中的约束。</p></blockquote><h5 id="2-3-1-2-约束"><a href="#2-3-1-2-约束" class="headerlink" title="2.3.1.2 约束"></a>2.3.1.2 约束</h5><p>概念：所谓约束就是作用在表中字段上的规则，用于限制存储在表中的数据。</p><p>作用：就是来保证数据库当中数据的正确性、有效性和完整性。（后面的学习会验证这些）</p><p>在MySQL数据库当中，提供了以下5种约束：</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><blockquote><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p></blockquote><p>案例：创建tb_user表</p><ul><li>对应的结构如下：</li></ul><p><img src="/assets/image-20220829143005524.png" alt="image-20220829143005524"> </p><blockquote><p>在上述的表结构中:</p><ul><li><p>id 是一行数据的唯一标识</p></li><li><p>username 用户名字段是非空且唯一的</p></li><li><p>name 姓名字段是不允许存储空值的</p></li><li><p>gender 性别字段是有默认值，默认为男</p></li></ul></blockquote><ul><li>建表语句：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_user (<br>    id int primary key comment &#x27;ID,唯一标识&#x27;, <br>    username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>    name varchar(10) not null comment &#x27;姓名&#x27;,<br>    age int comment &#x27;年龄&#x27;,<br>    gender char(1) default &#x27;男&#x27; comment &#x27;性别&#x27;<br>) comment &#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>数据表创建完成，接下来测试一下表中字段上的约束是否生效</p></blockquote><p><img src="/assets/image-20221205215309011.png" alt="image-20221205215309011"></p><p><img src="/assets/image-20221205215632599.png" alt="image-20221205215632599"></p><p>大家有没有发现一个问题：id字段下存储的值，如果由我们自己来维护会比较麻烦(必须保证值的唯一性)。MySQL数据库为了解决这个问题，给我们提供了一个关键字：auto_increment（自动增长）</p><blockquote><p>主键自增：auto_increment</p><ul><li>每次插入新的行记录时，数据库自动生成id字段(主键)下的值</li><li>具有auto_increment的数据列是一个正数序列开始增长(从1开始自增)</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_user (<br>    id int primary key auto_increment comment &#x27;ID,唯一标识&#x27;, #主键自动增长<br>    username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>    name varchar(10) not null comment &#x27;姓名&#x27;,<br>    age int comment &#x27;年龄&#x27;,<br>    gender char(1) default &#x27;男&#x27; comment &#x27;性别&#x27;<br>) comment &#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><p>测试：主键自增</p><p><img src="/assets/10.gif"></p><h5 id="2-3-1-3-数据类型"><a href="#2-3-1-3-数据类型" class="headerlink" title="2.3.1.3 数据类型"></a>2.3.1.3 数据类型</h5><p>在上面建表语句中，我们在指定字段的数据类型时，用到了int 、varchar、char，那么在MySQL中除了以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><p><strong>数值类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT&#x2F;INTEGER</td><td>4bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">示例: <br>    年龄字段 <span class="hljs-comment">---不会出现负数, 而且人的年龄不会太大</span><br>age tinyint unsigned<br><br>分数 <span class="hljs-comment">---总分100分, 最多出现一位小数</span><br>score <span class="hljs-keyword">double</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>char 与 varchar 都可以描述字符串，char是定长字符串，指定长度多长，就占用多少个字符，和字段值的长度无关 。而varchar是变长字符串，指定的长度为最大占用长度 。相对来说，char的性能会更高些。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">示例： <br>    用户名 username <span class="hljs-comment">---长度不定, 最长不会超过50</span><br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)<br><br>手机号 phone <span class="hljs-comment">---固定长度为11</span><br>phone <span class="hljs-type">char</span>(<span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><p><strong>日期时间类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">示例: <br>生日字段  birthday <span class="hljs-comment">---生日只需要年月日  </span><br>birthday <span class="hljs-type">date</span><br><br>创建时间 createtime <span class="hljs-comment">--- 需要精确到时分秒</span><br>createtime  datetime<br></code></pre></td></tr></table></figure><h5 id="2-3-1-4-案例"><a href="#2-3-1-4-案例" class="headerlink" title="2.3.1.4 案例"></a>2.3.1.4 案例</h5><p>需求：根据产品原型&#x2F;需求创建表((设计合理的数据类型、长度、约束) </p><blockquote><p>参考资料中提供的《黑马-tlias智能学习辅助系统》页面原型，设计员工管理模块的表结构</p><p>暂不考虑所属部门字段</p></blockquote><p>产品原型及需求如下：</p><p><img src="/assets/image-20220829151032029.png" alt="image-20220829151032029"></p><p> <img src="/assets/image-20220829151228102.png"></p><p><img src="/assets/image-20220829151245450.png"></p><p><strong>步骤：</strong></p><ol><li><p>阅读产品原型及需求文档，看看里面涉及到哪些字段。</p></li><li><p>查看需求文档说明，确认各个字段的类型以及字段存储数据的长度限制。</p></li><li><p>在页面原型中描述的基础字段的基础上，再增加额外的基础字段。</p></li></ol><p>使用SQL创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp (<br>  id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span>,<br>  username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>  password <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;123456&#x27;</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  gender tinyint unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,<br>  image <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>) comment <span class="hljs-string">&#x27;图像&#x27;</span>,<br>  job tinyint unsigned comment <span class="hljs-string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;</span>,<br>  entrydate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>  create_time datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  update_time datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;修改时间&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br></code></pre></td></tr></table></figure><p>除了使用SQL语句创建表外，我们还可以借助于图形化界面来创建表结构，这种创建方式会更加直观、更加方便。</p><p>操作步骤如下：</p><ol><li>在指定操作的数据库上，右键New &#x3D;&#x3D;&gt; Table</li></ol><p><img src="/assets/image-20221205230447721.png" alt="image-20221205230447721"></p><ol start="2"><li>编辑表结构的相关信息</li></ol><p><img src="/assets/image-20221205231846161.png" alt="image-20221205231846161"></p><h5 id="2-3-1-5-设计表流程"><a href="#2-3-1-5-设计表流程" class="headerlink" title="2.3.1.5 设计表流程"></a>2.3.1.5 设计表流程</h5><p>通过上面的案例，我们明白了，设计一张表，基本的流程如下：</p><ol><li><p>阅读页面原型及需求文档</p></li><li><p>基于页面原则和需求文档，确定原型字段(类型、长度限制、约束)</p></li><li><p>再增加表设计所需要的业务基础字段(id主键、插入时间、修改时间)</p></li></ol><p><img src="/assets/image-20221205232253088.png" alt="image-20221205232253088"></p><blockquote><p>说明：</p><ul><li><p>create_time：记录的是当前这条数据插入的时间。 </p></li><li><p>update_time：记录当前这条数据最后更新的时间。</p></li></ul></blockquote><h4 id="2-3-2-查询"><a href="#2-3-2-查询" class="headerlink" title="2.3.2 查询"></a>2.3.2 查询</h4><blockquote><p>关于表结构的查询操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>查询当前数据库所有表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221205233746548.png" alt="image-20221205233746548"></p><p><strong>查看指定表结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc 表名 ;#可以查看指定表的字段、字段的类型、是否可以为NULL、是否存在默认值等信息<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221205234114053.png" alt="image-20221205234114053"></p><p><strong>查询指定表的建表语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table 表名 ;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221205234334696.png" alt="image-20221205234334696"></p><p><img src="/assets/image-20221205234444906.png" alt="image-20221205234444906"></p><h4 id="2-3-3-修改"><a href="#2-3-3-修改" class="headerlink" title="2.3.3 修改"></a>2.3.3 修改</h4><blockquote><p>关于表结构的修改操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>添加字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span>  字段名  类型(长度)  [comment 注释]  [约束];<br></code></pre></td></tr></table></figure><p>案例： 为tb_emp表添加字段qq，字段类型为 varchar(11)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">add</span>  qq  <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;QQ号码&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>图形化操作：添加字段</p></blockquote><p><img src="/assets/image-20221205235542272.png" alt="image-20221205235542272"></p><p><img src="/assets/image-20221205235657807.png" alt="image-20221205235657807"></p><p><strong>修改数据类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名 modify  字段名  新数据类型(长度);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change  旧字段名  新字段名  类型(长度)  [comment 注释]  [约束];<br></code></pre></td></tr></table></figure><p>案例：修改qq字段的字段类型，将其长度由11修改为13</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp modify qq <span class="hljs-type">varchar</span>(<span class="hljs-number">13</span>) comment <span class="hljs-string">&#x27;QQ号码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>案例：修改qq字段名为 qq_num，字段类型varchar(13)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp change qq qq_num <span class="hljs-type">varchar</span>(<span class="hljs-number">13</span>) comment <span class="hljs-string">&#x27;QQ号码&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>图形化操作：修改数据类型和字段名</p></blockquote><p><img src="/assets/image-20221205235950010.png" alt="image-20221205235950010"></p><p><img src="/assets/image-20221206000030734.png" alt="image-20221206000030734"></p><p><strong>删除字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 字段名;<br></code></pre></td></tr></table></figure><p>案例：删除tb_emp表中的qq_num字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">drop</span> qq_num;<br></code></pre></td></tr></table></figure><blockquote><p>图形化操作：删除字段</p></blockquote><p><img src="/assets/image-20221206000159237.png" alt="image-20221206000159237"></p><p><strong>修改表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">rename <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">to</span>  新表名;<br></code></pre></td></tr></table></figure><p>案例：将当前的tb_emp表的表名修改为emp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rename table tb_emp to emp;<br></code></pre></td></tr></table></figure><blockquote><p>图形化操作：修改表名</p></blockquote><p><img src="/assets/image-20221206000636659.png" alt="image-20221206000636659"></p><h4 id="2-3-4-删除"><a href="#2-3-4-删除" class="headerlink" title="2.3.4 删除"></a>2.3.4 删除</h4><blockquote><p>关于表结构的删除操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p>删除表语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span>  <span class="hljs-keyword">table</span> [ if <span class="hljs-keyword">exists</span> ]  表名;<br></code></pre></td></tr></table></figure><blockquote><p>if exists ：只有表名存在时才会删除该表，表名不存在，则不执行删除操作(如果不加该参数项，删除一张不存在的表，执行将会报错)。</p></blockquote><p>案例：如果tb_emp表存在，则删除tb_emp表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exists tb_emp;  -- 在删除表时，表中的全部数据也会被删除。<br></code></pre></td></tr></table></figure><blockquote><p>图形化操作：删除表</p></blockquote><p><img src="/assets/image-20221206001026916.png" alt="image-20221206001026916"> </p><h2 id="3-数据库操作-DML"><a href="#3-数据库操作-DML" class="headerlink" title="3. 数据库操作-DML"></a>3. 数据库操作-DML</h2><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增、删、改操作。</p><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE）</li><li>删除数据（DELETE）</li></ul><h3 id="3-1-增加-insert"><a href="#3-1-增加-insert" class="headerlink" title="3.1 增加(insert)"></a>3.1 增加(insert)</h3><p>insert语法：</p><ul><li><p>向指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 (字段名1, 字段名2) values (值1, 值2);<br></code></pre></td></tr></table></figure></li><li><p>全部字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 values (值1, 值2, ...);<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据（指定字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 (字段名1, 字段名2) values (值1, 值2), (值1, 值2);<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据（全部字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 values (值1, 值2, ...), (值1, 值2, ...);<br></code></pre></td></tr></table></figure></li></ul><p>案例1：向tb_emp表的username、name、gender字段插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 因为设计表时create_time, update_time两个字段不能为NULL，所以也做为要插入的字段<br>insert into tb_emp(username, name, gender, create_time, update_time)<br>values (&#x27;wuji&#x27;, &#x27;张无忌&#x27;, 1, now(), now());<br></code></pre></td></tr></table></figure><p>案例2：向tb_emp表的所有字段插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into tb_emp(id, username, password, name, gender, image, job, entrydate, create_time, update_time)<br>values (null, &#x27;zhirou&#x27;, &#x27;123&#x27;, &#x27;周芷若&#x27;, 2, &#x27;1.jpg&#x27;, 1, &#x27;2010-01-01&#x27;, now(), now());<br></code></pre></td></tr></table></figure><p>案例3：批量向tb_emp表的username、name、gender字段插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into tb_emp(username, name, gender, create_time, update_time)<br>values (&#x27;weifuwang&#x27;, &#x27;韦一笑&#x27;, 1, now(), now()),<br>       (&#x27;fengzi&#x27;, &#x27;张三疯&#x27;, 1, now(), now());<br></code></pre></td></tr></table></figure><blockquote><p>图形化操作：双击tb_emp表查看数据</p></blockquote><p><img src="/assets/image-20221206002807531.png" alt="image-20221206002807531"></p><p>Insert操作的注意事项：</p><ol><li><p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p></li><li><p>字符串和日期型数据应该包含在引号中。</p></li><li><p>插入的数据大小，应该在字段的规定范围内。</p></li></ol><h3 id="3-2-修改-update"><a href="#3-2-修改-update" class="headerlink" title="3.2 修改(update)"></a>3.2 修改(update)</h3><p>update语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span> , 字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span> , .... [<span class="hljs-keyword">where</span> 条件] ;<br></code></pre></td></tr></table></figure><p>案例1：将tb_emp表中id为1的员工，姓名name字段更新为’张三’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_emp <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张三&#x27;</span>,update_time<span class="hljs-operator">=</span>now() <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>案例2：将tb_emp表的所有员工入职日期更新为’2010-01-01’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_emp <span class="hljs-keyword">set</span> entrydate<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2010-01-01&#x27;</span>,update_time<span class="hljs-operator">=</span>now();<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221206004425527.png" alt="image-20221206004425527"></p><blockquote><p>注意事项:</p><ol><li><p>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p></li><li><p>在修改数据时，一般需要同时修改公共字段update_time，将其修改为当前操作时间。</p></li></ol></blockquote><h3 id="3-3-删除-delete"><a href="#3-3-删除-delete" class="headerlink" title="3.3 删除(delete)"></a>3.3 删除(delete)</h3><p>delete语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名  [<span class="hljs-keyword">where</span>  条件] ;<br></code></pre></td></tr></table></figure><p>案例1：删除tb_emp表中id为1的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>案例2：删除tb_emp表中所有员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp;<br></code></pre></td></tr></table></figure><blockquote><p>注意事项:</p><p>​• DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</p><p>​• DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)。</p><p>​• 当进行删除全部数据操作时，会提示询问是否确认删除所有数据，直接点击Execute即可。 </p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27SpringBoot基础</title>
    <link href="/2023/12/06/day27-SpringBootWeb-%E5%85%A5%E9%97%A8/"/>
    <url>/2023/12/06/day27-SpringBootWeb-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="27-SpringBoot基础"><a href="#27-SpringBoot基础" class="headerlink" title="27-SpringBoot基础"></a>27-SpringBoot基础</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><blockquote><ol><li><p>SpringBootWeb入门</p></li><li><p>HTTP协议</p></li><li><p>Web服务器-Tomcat</p></li></ol></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="/assets/image-20221130095316032.png" alt="image-20221130095316032"></p><p>下面我们将进入SpringBoot基础阶段的学习。</p><p>在没有正式的学习SpringBoot之前，我们要先来了解下什么是Spring。</p><p>我们可以打开Spring的官网(<a href="https://spring.io)，去看一下Spring的简介：Spring">https://spring.io)，去看一下Spring的简介：Spring</a> makes Java simple。</p><p><img src="/assets/image-20220617222738668.png"></p><p>Spring的官方提供很多开源的项目，我们可以点击上面的projects，看到spring家族旗下的项目，按照流行程度排序为：</p><p><img src="/assets/image-20220617222925923.png"></p><p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p><p><img src="/assets/image-20220617222609699.png"></p><p>而Spring家族旗下这么多的技术，最基础、最核心的是 SpringFramework。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p><p><img src="/assets/image-20220617224427947.png"></p><p>而如果我们在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。 </p><p><img src="/assets/image-20220823185227296.png"></p><p>所以基于此呢，spring官方推荐我们从另外一个项目开始学习，那就是目前最火爆的SpringBoot。 </p><p>通过springboot就可以快速的帮我们构建应用程序，所以springboot呢，最大的特点有两个 ：</p><ul><li>简化配置</li><li>快速开发</li></ul><p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p><p>接下来，我们就直接通过一个SpringBoot的web入门程序，让大家快速感受一下，基于SpringBoot进行Web开发的便捷性。</p><h2 id="1-SpringBootWeb快速入门"><a href="#1-SpringBootWeb快速入门" class="headerlink" title="1. SpringBootWeb快速入门"></a>1. SpringBootWeb快速入门</h2><h3 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h3><p>需求：基于SpringBoot的方式开发一个web应用，浏览器发起请求&#x2F;hello后，给浏览器返回字符串 “Hello World ~”。</p><p><img src="/assets/image-20220823191003444.png"></p><h3 id="1-2-开发步骤"><a href="#1-2-开发步骤" class="headerlink" title="1.2 开发步骤"></a>1.2 开发步骤</h3><p>第1步：创建SpringBoot工程项目</p><p>第2步：定义HelloController类，添加方法hello，并添加注解</p><p>第3步：测试运行</p><h4 id="1-2-1-创建SpringBoot工程（需要联网）"><a href="#1-2-1-创建SpringBoot工程（需要联网）" class="headerlink" title="1.2.1 创建SpringBoot工程（需要联网）"></a>1.2.1 创建SpringBoot工程（需要联网）</h4><p>基于Spring官方骨架，创建SpringBoot工程。</p><img src="assets/image-20221201184702136.png" alt="image-20221201184702136" style="zoom:80%;" /><p>基本信息描述完毕之后，勾选web开发相关依赖。</p><img src="assets/image-20221201184850248.png" alt="image-20221201184850248" style="zoom:80%;" /><p>点击Finish之后，就会联网创建这个SpringBoot工程，创建好之后，结构如下：</p><ul><li>&#x3D;&#x3D;注意：在联网创建过程中，会下载相关资源(请耐心等待)&#x3D;&#x3D;</li></ul><p><img src="/assets/image-20221201185910596.png" alt="image-20221201185910596"> </p><h4 id="1-2-2-定义请求处理类"><a href="#1-2-2-定义请求处理类" class="headerlink" title="1.2.2 定义请求处理类"></a>1.2.2 定义请求处理类</h4><p>在com.itheima这个包下创建一个子包controller</p><img src="assets/image-20221201190541295.png" alt="image-20221201190541295" style="zoom:80%;" /><p>然后在controller包下新建一个类：HelloController</p><img src="assets/image-20221201190825439.png" alt="image-20221201190825439" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World ~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World ~&quot;</span>;<br>    &#125;<br>    <br>&#125;    <br></code></pre></td></tr></table></figure><h4 id="1-2-3-运行测试"><a href="#1-2-3-运行测试" class="headerlink" title="1.2.3 运行测试"></a>1.2.3 运行测试</h4><p>运行SpringBoot自动生成的引导类</p><p><img src="/assets/image-20221201191028124.png" alt="image-20221201191028124"> </p><p><img src="/assets/image-20221201191348924.png" alt="image-20221201191348924"> </p><p>打开浏览器，输入 <code>http://localhost:8080/hello</code></p><img src="assets/image-20220823195048415.png" style="zoom:80%;" /><h3 id="1-3-Web分析"><a href="#1-3-Web分析" class="headerlink" title="1.3 Web分析"></a>1.3 Web分析</h3><p><img src="/assets/image-20221201224603497.png" alt="image-20221201224603497"></p><p>浏览器：</p><ul><li><p>输入网址：<code>http://192.168.100.11:8080/hello</code></p><ul><li><p>通过IP地址192.168.100.11定位到网络上的一台计算机</p><blockquote><p>我们之前在浏览器中输入的localhost，就是127.0.0.1（本机）</p></blockquote></li><li><p>通过端口号8080找到计算机上运行的程序</p><blockquote><p><code>localhost:8080</code>  , 意思是在本地计算机中找到正在运行的8080端口的程序</p></blockquote></li><li><p>&#x2F;hello是请求资源位置</p><ul><li>资源：对计算机而言资源就是数据<ul><li>web资源：通过网络可以访问到的资源（通常是指存放在服务器上的数据）</li></ul></li></ul><blockquote><p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是&#x2F;hello的数据</p><ul><li>8080端口程序，在服务器找&#x2F;hello位置的资源数据，发给浏览器</li></ul></blockquote></li></ul></li></ul><p>服务器：（可以理解为ServerSocket）</p><ul><li>接收到浏览器发送的信息（如：&#x2F;hello）</li><li>在服务器上找到&#x2F;hello的资源</li><li>把资源发送给浏览器</li></ul><blockquote><p>我们在JavaSE阶段学习网络编程时，有讲过网络三要素：</p><ul><li>IP  ：网络中计算机的唯一标识</li><li>端口 ：计算机中运行程序的唯一标识</li><li>协议 ：网络中计算机之间交互的规则</li></ul><p><strong>问题：浏览器和服务器两端进行数据交互，使用什么协议？</strong></p><p><strong>答案：http协议</strong></p></blockquote><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><h3 id="2-1-HTTP-概述"><a href="#2-1-HTTP-概述" class="headerlink" title="2.1 HTTP-概述"></a>2.1 HTTP-概述</h3><h4 id="2-1-1-介绍"><a href="#2-1-1-介绍" class="headerlink" title="2.1.1 介绍"></a>2.1.1 介绍</h4><p><img src="/assets/image-20220823200024507.png"></p><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p><ul><li>http是互联网上应用最为广泛的一种网络协议 </li><li>http协议要求：浏览器在向服务器发送请求数据时，或是服务器在向浏览器发送响应数据时，都必须按照固定的格式进行数据传输</li></ul><p>如果想知道http协议的数据传输格式有哪些，可以打开浏览器，点击<code>F12</code>打开开发者工具，点击<code>Network</code>来查看</p><p><img src="/assets/image-20221202105735230.png" alt="image-20221202105735230"></p><p>浏览器向服务器进行请求时：</p><ul><li>服务器按照固定的格式进行解析</li></ul><p><img src="/assets/image-20221202111044434.png" alt="image-20221202111044434"></p><p>服务器向浏览器进行响应时：</p><ul><li>浏览器按照固定的格式进行解析</li></ul><p><img src="/assets/image-20221202111307819.png" alt="image-20221202111307819"></p><p><strong>所以，我们学习HTTP主要就是学习请求和响应数据的具体格式内容。</strong></p><h4 id="2-2-2-特点"><a href="#2-2-2-特点" class="headerlink" title="2.2.2 特点"></a>2.2.2 特点</h4><p>我们刚才初步认识了HTTP协议，那么我们在看看HTTP协议有哪些特点：</p><ul><li><p>**基于TCP协议: **   面向连接，安全</p><blockquote><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote></li><li><p><strong>基于请求-响应模型:</strong>   一次请求对应一次响应（先请求后响应）</p><blockquote><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote></li><li><p><strong>HTTP协议是无状态协议:</strong>  对于数据没有记忆能力。每次请求-响应都是独立的</p><blockquote><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p><ul><li>缺点:  多次请求间不能共享数据</li><li>优点:  速度快</li></ul><p>请求之间无法共享数据会引发的问题：</p><ul><li>如：京东购物。加入购物车和去购物车结算是两次请求</li><li>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li><li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用会话技术(Cookie、Session)来解决这个问题。具体如何来做，我们后面课程中会讲到。</p></blockquote><p>刚才提到HTTP协议是规定了请求和响应数据的格式，那具体的格式是什么呢?</p></li></ul><h3 id="2-2-HTTP-请求协议"><a href="#2-2-HTTP-请求协议" class="headerlink" title="2.2 HTTP-请求协议"></a>2.2 HTTP-请求协议</h3><p>浏览器和服务器是按照HTTP协议进行数据通信的。</p><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器<ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器<ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><p>在HTTP1.1版本中，浏览器访问服务器的几种方式： </p><table><thead><tr><th align="center">请求方式</th><th align="left">请求说明</th></tr></thead><tbody><tr><td align="center"><strong>GET</strong></td><td align="left">获取资源。<br/>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=itheima">http://www.baidu.com/s?wd=itheima</a></td></tr><tr><td align="center"><strong>POST</strong></td><td align="left">传输实体主体。<br/>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td></tr><tr><td align="center">OPTIONS</td><td align="left">返回服务器针对特定资源所支持的HTTP请求方式。<br/>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td></tr><tr><td align="center">HEAD</td><td align="left">获得报文首部。<br/>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td></tr><tr><td align="center">PUT</td><td align="left">传输文件。<br/>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td></tr><tr><td align="center">DELETE</td><td align="left">删除文件。<br/>请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="center">TRACE</td><td align="left">追踪路径。<br/>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td align="center">CONNECT</td><td align="left">要求用隧道协议连接代理。<br/>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table><p>在我们实际应用中常用的也就是 ：<strong>GET、POST</strong></p><p><strong>GET方式的请求协议：</strong></p><p><img src="/assets/image-20220823200708026.png"> </p><ul><li><p>请求行 ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p><ul><li>请求方式：GET  </li><li>资源路径：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求路径：&#x2F;brand&#x2F;findAll</li><li>请求参数：name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求参数是以key&#x3D;value形式出现</li><li>多个请求参数之间使用<code>&amp;</code>连接</li></ul></li><li>请求路径和请求参数之间使用<code>?</code>连接</li></ul><p>  </p></li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li><p>请求头 ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式 </p><ul><li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li></ul><p>常见的HTTP请求头有:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span>: 表示请求的主机名<br><br><span class="hljs-attribute">User</span>-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> ...Chrome/<span class="hljs-number">79</span> ，IE浏览器的标识类似Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT ...)like Gecko<br><br><span class="hljs-attribute">Accept</span>：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；<br><br><span class="hljs-attribute">Accept</span>-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；<br><br><span class="hljs-attribute">Accept</span>-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。<br><br><span class="hljs-attribute">Content</span>-Type：请求主体的数据类型<br><br><span class="hljs-attribute">Content</span>-Length：数据主体的大小（单位：字节）<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>举例说明：服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求。</p><p>比如:</p><ul><li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li><li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果（这就是我们常说的浏览器兼容问题）</li></ul></blockquote><ul><li>请求体 ：存储请求参数<ul><li>GET请求的请求参数在请求行中，故不需要设置请求体</li></ul></li></ul><p><strong>POST方式的请求协议：</strong></p><p><img src="/assets/image-20220823201303601.png"></p><ul><li>请求行(以上图中红色部分)：包含请求方式、资源路径、协议&#x2F;版本<ul><li>请求方式：POST</li><li>资源路径：&#x2F;brand</li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li>请求头(以上图中黄色部分)   </li><li>请求体(以上图中绿色部分) ：存储请求参数 <ul><li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li></ul></li></ul><p>GET请求和POST请求的区别：</p><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。<br/>例：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table><h3 id="2-3-HTTP-响应协议"><a href="#2-3-HTTP-响应协议" class="headerlink" title="2.3 HTTP-响应协议"></a>2.3 HTTP-响应协议</h3><h4 id="2-3-1-格式介绍"><a href="#2-3-1-格式介绍" class="headerlink" title="2.3.1 格式介绍"></a>2.3.1 格式介绍</h4><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong> </p><p><img src="/assets/image-20220823202344149.png"> </p><ul><li><p>响应行(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p><ul><li>协议&#x2F;版本：HTTP&#x2F;1.1</li><li>响应状态码：200</li><li>状态码描述：OK</li></ul></li><li><p>响应头(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p><ul><li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样，对方在收到信息后，就可以知道你是谁，你想干什么</li></ul><p>常见的HTTP响应头有:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Content-<span class="hljs-keyword">Type</span>：表示该响应内容的类型，例如<span class="hljs-type">text</span>/html，image/jpeg ；<br><br>Content-Length：表示该响应内容的长度（字节数）；<br><br>Content-<span class="hljs-keyword">Encoding</span>：表示该响应压缩算法，例如gzip ；<br><br><span class="hljs-keyword">Cache</span>-Control：指示客户端应如何缓存，例如max-age=<span class="hljs-number">300</span>表示可以最多缓存<span class="hljs-number">300</span>秒 ;<br><br><span class="hljs-keyword">Set</span>-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;<br></code></pre></td></tr></table></figure></li></ul><ul><li>响应体(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据<ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul></li></ul><h4 id="2-3-2-响应状态码"><a href="#2-3-2-响应状态码" class="headerlink" title="2.3.2 响应状态码"></a>2.3.2 响应状态码</h4><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong> — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td></tr><tr><td>2xx</td><td><strong>成功</strong> — 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong> — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong> — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong> — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>参考: 资料&#x2F;SpringbootWeb&#x2F;响应状态码.md</p><p>关于响应状态码，我们先主要认识三个状态码，其余的等后期用到了再去掌握：</p><ul><li>200    ok   客户端请求成功</li><li>404  Not Found  请求资源不存在</li><li>500  Internal Server Error  服务端发生不可预期的错误</li></ul><h3 id="2-4-HTTP-协议解析"><a href="#2-4-HTTP-协议解析" class="headerlink" title="2.4 HTTP-协议解析"></a>2.4 HTTP-协议解析</h3><p>将资料中准备好的Demo工程，导入到我们的IDEA中，有一个Server.java类，这里面就是自定义的一个服务器代码，主要使用到的是<code>ServerSocket</code>和<code>Socket</code></p><blockquote><p>&#x3D;&#x3D;说明：以下代码大家不需要自己写，我们主要是通过代码，让大家了解到服务器针对HTTP协议的解析机制&#x3D;&#x3D;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 自定义web服务器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>); <span class="hljs-comment">// 监听指定端口</span><br>        System.out.println(<span class="hljs-string">&quot;server is running...&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> ss.accept();<br>            System.out.println(<span class="hljs-string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(sock);<br>            t.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Socket sock;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Socket sock)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sock = sock;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sock.getInputStream();<br>             <span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sock.getOutputStream()) &#123;<br>                handle(input, output);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.sock.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;client disconnected.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(InputStream input, OutputStream output)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));<br>        <span class="hljs-comment">// 读取HTTP请求:</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">requestOk</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> reader.readLine();<br>        <span class="hljs-keyword">if</span> (first.startsWith(<span class="hljs-string">&quot;GET / HTTP/1.&quot;</span>)) &#123;<br>            requestOk = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> reader.readLine();<br>            <span class="hljs-keyword">if</span> (header.isEmpty()) &#123; <span class="hljs-comment">// 读取到空行时, HTTP Header读取完毕</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(header);<br>        &#125;<br>        System.out.println(requestOk ? <span class="hljs-string">&quot;Response OK&quot;</span> : <span class="hljs-string">&quot;Response Error&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (!requestOk) &#123;<span class="hljs-comment">// 发送错误响应:</span><br>            writer.write(<span class="hljs-string">&quot;HTTP/1.0 404 Not Found\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Content-Length: 0\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>            writer.flush();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 发送成功响应:</span><br>            <span class="hljs-comment">//读取html文件，转换为字符串</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Server.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;html/a.html&quot;</span>);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                data.append(line);<br>            &#125;<br>            br.close();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> data.toString().getBytes(StandardCharsets.UTF_8).length;<br><br>            writer.write(<span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Connection: keep-alive\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Content-Length: &quot;</span> + length + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;\r\n&quot;</span>); <span class="hljs-comment">// 空行标识Header和Body的分隔</span><br>            writer.write(data.toString());<br>            writer.flush();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>启动ServerSocket程序：</p><p><img src="/assets/image-20221202170430928.png" alt="image-20221202170430928"></p><p>浏览器输入：<code>http://localhost:8080</code>  就会访问到ServerSocket程序 </p><ul><li>ServerSocket程序，会读取服务器上<code>html/a.html</code>文件，并把文件数据发送给浏览器</li><li>浏览器接收到a.html文件中的数据后进行解析，显示以下内容</li></ul><p><img src="/assets/image-20221202171204705.png" alt="image-20221202171204705"> </p><p>现在大家知道了服务器是可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，而在开发中真正用到的Web服务器，我们不会自己写的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></p><p><img src="/assets/image-20220824233452167.png"> </p><h2 id="3-WEB服务器-Tomcat"><a href="#3-WEB服务器-Tomcat" class="headerlink" title="3. WEB服务器-Tomcat"></a>3. WEB服务器-Tomcat</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><h4 id="3-1-1-服务器概述"><a href="#3-1-1-服务器概述" class="headerlink" title="3.1.1 服务器概述"></a>3.1.1 服务器概述</h4><p><strong>服务器硬件</strong></p><ul><li>指的也是计算机，只不过服务器要比我们日常使用的计算机大很多。</li></ul><p><img src="/assets/image-20221202173148317.png" alt="image-20221202173148317"> </p><p>服务器，也称伺服器。是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p><p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p><p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p><p>服务器只是一台设备，必须安装服务器软件才能提供相应的服务。</p><p><strong>服务器软件</strong></p><p>服务器软件：基于ServerSocket编写的程序</p><ul><li>服务器软件本质是一个运行在服务器设备上的应用程序</li><li>能够接收客户端请求，并根据请求给客户端响应数据</li></ul><p><img src="/assets/1530625192392.png" alt="1530625192392"></p><h4 id="3-1-2-Web服务器"><a href="#3-1-2-Web服务器" class="headerlink" title="3.1.2 Web服务器"></a>3.1.2 Web服务器</h4><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p><p><img src="/assets/image-20220824233614686.png"></p><p>Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p><strong>Web服务器软件使用步骤</strong></p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>第1步：准备静态资源</p><ul><li>在提供的资料中找到静态资源文件</li></ul><p><img src="/assets/image-20221202180119859.png" alt="image-20221202180119859"> </p><p>第2步：下载安装Web服务器软件</p><p><img src="/assets/image-20221202181110555.png" alt="image-20221202181110555"></p><p>第3步：将静态资源部署到Web服务器上</p><p><img src="/assets/image-20221202180805686.png" alt="image-20221202180805686"></p><p>第4步：启动Web服务器使用浏览器访问对应的资源</p><p><img src="/assets/image-20221202181346327.png" alt="image-20221202181346327"></p><p>浏览器输入：<code>http://localhost:8080/demo/index.html</code></p><p><img src="/assets/image-20221202181651469.png" alt="image-20221202181651469"></p><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="/assets/image-20220824233728524.png" alt="image-20220824233728524"> </p><p>Tomcat就是一款软件，我们主要是以学习如何去使用为主。具体我们会从以下这些方向去学习:</p><ol><li><p>简介：初步认识下Tomcat</p></li><li><p>基本使用: 安装、卸载、启动、关闭、配置和项目部署，这些都是对Tomcat的基本操作</p></li><li><p>IDEA中如何创建Maven Web项目</p></li><li><p>IDEA中如何使用Tomcat,后面这两个都是我们以后开发经常会用到的方式</p></li></ol><p>首选我们来认识下Tomcat。</p><h4 id="3-1-3-Tomcat"><a href="#3-1-3-Tomcat" class="headerlink" title="3.1.3 Tomcat"></a>3.1.3 Tomcat</h4><p>Tomcat服务器软件是一个免费的开源的web应用服务器。是Apache软件基金会的一个核心项目。由Apache，Sun和其他一些公司及个人共同开发而成。</p><p>由于Tomcat只支持Servlet&#x2F;JSP少量JavaEE规范，所以是一个开源免费的轻量级Web服务器。</p><blockquote><p>JavaEE规范：   JavaEE &#x3D;&gt; Java Enterprise Edition(Java企业版)</p><p>avaEE规范就是指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</p></blockquote><p>因为Tomcat支持Servlet&#x2F;JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。</p><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> </p><p><img src="/assets/image-20220824233903517.png" alt="image-20220824233903517"> </p><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><h4 id="3-2-1-下载"><a href="#3-2-1-下载" class="headerlink" title="3.2.1 下载"></a>3.2.1 下载</h4><p>直接从官方网站下载：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><img src="/assets/image-20220824234407828.png"></p><blockquote><p>Tomcat软件类型说明：</p><ul><li>tar.gz文件，是linux和mac操作系统下的压缩版本</li><li>zip文件，是window操作系统下压缩版本（我们选择zip文件）</li></ul></blockquote><p>大家可以自行下载，也可以直接使用资料中已经下载好的资源，</p><p>Tomcat的软件程序  ：&#x2F;资料&#x2F;SpringbootWeb&#x2F;apache-tomcat-9.0.27-windows-x64.zip</p><p><img src="/assets/image-20220824234527743.png"> </p><h4 id="3-2-2-安装与卸载"><a href="#3-2-2-安装与卸载" class="headerlink" title="3.2.2 安装与卸载"></a>3.2.2 安装与卸载</h4><p><strong>安装:</strong> Tomcat是绿色版，直接解压即安装</p><blockquote><p>在E盘的develop目录下，将<code>apache-tomcat-9.0.27-windows-x64.zip</code>进行解压缩，会得到一个<code>apache-tomcat-9.0.27</code>的目录，Tomcat就已经安装成功。</p></blockquote><p><img src="/assets/image-20221202184545321.png" alt="image-20221202184545321"></p><p>&#x3D;&#x3D;注意，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。&#x3D;&#x3D;</p><p>打开<code>apache-tomcat-9.0.27</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p><p><img src="/assets/image-20220824234652173.png">  </p><p>bin：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps：就是以后项目部署的目录</p><p><strong>卸载：</strong>卸载比较简单，可以直接删除目录即可</p><h4 id="3-2-3-启动与关闭"><a href="#3-2-3-启动与关闭" class="headerlink" title="3.2.3 启动与关闭"></a>3.2.3 启动与关闭</h4><p><strong>启动Tomcat</strong> </p><ul><li>双击tomcat解压目录&#x2F;bin&#x2F;<strong>startup.bat</strong>文件即可启动tomcat</li></ul><p><img src="/assets/image-20221202183201663.png" alt="image-20221202183201663"></p><p>&#x3D;&#x3D;注意: tomcat服务器启动后,黑窗口不会关闭,只要黑窗口不关闭,就证明tomcat服务器正在运行&#x3D;&#x3D;</p><p><img src="/assets/image-20221202183409304.png" alt="image-20221202183409304"></p><p>Tomcat的默认端口为8080，所以在浏览器的地址栏输入：<code>http://127.0.0.1:8080</code> 即可访问tomcat服务器</p><blockquote><p>127.0.0.1 也可以使用localhost代替。如：<code>http://localhost:8080</code></p></blockquote><p><img src="/assets/image-20221202183550682.png" alt="image-20221202183550682"></p><ul><li>能看到以上图片中Apache Tomcat的内容就说明Tomcat已经启动成功</li></ul><p>&#x3D;&#x3D;注意事项&#x3D;&#x3D; ：Tomcat启动的过程中，遇到控制台有中文乱码时，可以通常修改conf&#x2F;logging.prooperties文件解决</p><p><img src="/assets/image-20220825083848086.png" alt="image-20220825083848086"> </p><p><strong>关闭:</strong>  关闭有三种方式 </p><p>1、强制关闭：直接x掉Tomcat窗口（不建议）</p><p><img src="/assets/image-20221202184753808.png" alt="image-20221202184753808"></p><p>2、正常关闭：bin\shutdown.bat</p><p><img src="/assets/image-20221202185103941.png" alt="image-20221202185103941"></p><p>3、正常关闭：在Tomcat启动窗口中按下 Ctrl+C</p><ul><li>说明：如果按下Ctrl+C没有反映，可以多按几次</li></ul><h4 id="3-2-4-常见问题"><a href="#3-2-4-常见问题" class="headerlink" title="3.2.4 常见问题"></a>3.2.4 常见问题</h4><p><strong>问题1：Tomcat启动时，窗口一闪而过</strong></p><ul><li>检查JAVA_HOME环境变量是否正确配置</li></ul><p><img src="/assets/image-20221202190033167.png" alt="image-20221202190033167"></p><p><strong>问题2：端口号冲突</strong></p><p><img src="/assets/image-20220825084104447.png" alt="image-20220825084104447"></p><ul><li><p>发生问题的原因：Tomcat使用的端口被占用了。</p></li><li><p>解决方案：换Tomcat端口号</p><ul><li>要想修改Tomcat启动的端口号，需要修改 conf&#x2F;server.xml文件</li></ul></li></ul><img src="assets/image-20220825084017185.png" alt="image-20220825084017185" style="zoom:80%;" /> <blockquote><p>注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><h3 id="3-3-入门程序解析"><a href="#3-3-入门程序解析" class="headerlink" title="3.3 入门程序解析"></a>3.3 入门程序解析</h3><p>关于web开发的基础知识，我们可以告一段落了。下面呢，我们在基于今天的核心技术点SpringBoot快速入门案例进行分析。</p><h4 id="3-3-1-Spring官方骨架"><a href="#3-3-1-Spring官方骨架" class="headerlink" title="3.3.1 Spring官方骨架"></a>3.3.1 Spring官方骨架</h4><p>之前我们创建的SpringBoot入门案例，是基于Spring官方提供的骨架实现的。</p><p>Spring官方骨架，可以理解为Spring官方为程序员提供一个搭建项目的模板。</p><p><img src="/assets/image-20221202195646621.png" alt="image-20221202195646621"></p><p>我们可以通过访问：<a href="https://start.spring.io/">https://start.spring.io/</a> ，进入到官方骨架页面</p><p><img src="/assets/image-20221202201623424.png" alt="image-20221202201623424"></p><p><img src="/assets/image-20221202200356398.png" alt="image-20221202200356398"></p><p><img src="/assets/image-20221202200547676.png" alt="image-20221202200547676"></p><p><img src="/assets/image-20221202200708988.png" alt="image-20221202200708988"></p><p>Spring官方生成的SpringBoot项目，怎么使用呢？</p><ul><li>解压缩后，就会得到一个SpringBoot项目工程</li></ul><p><img src="/assets/image-20221202201042109.png" alt="image-20221202201042109"></p><p><img src="/assets/image-20221202201221136.png" alt="image-20221202201221136"></p><p>打开pom.xml文件，我们可以看到springboot项目中引入了web依赖和test依赖</p><p><img src="/assets/image-20221202201826364.png" alt="image-20221202201826364"></p><blockquote><p><strong>结论：不论使用IDEA创建SpringBoot项目，还是直接在官方网站利用骨架生成SpringBoot项目，项目的结构和pom.xml文件中内容是相似的。</strong></p></blockquote><h4 id="3-3-2-起步依赖"><a href="#3-3-2-起步依赖" class="headerlink" title="3.3.2 起步依赖"></a>3.3.2 起步依赖</h4><p>在我们之前讲解的SpringBoot快速入门案例中，同样也引用了：web依赖和test依赖</p><p><img src="/assets/image-20221202202305118.png" alt="image-20221202202305118"></p><p>spring-boot-starter-web和spring-boot-starter-test，在SpringBoot中又称为：起步依赖</p><p>而在SpringBoot的项目中，有很多的起步依赖，他们有一个共同的特征：就是以<code>spring-boot-starter-</code>作为开头。在以后大家遇到spring-boot-starter-xxx这类的依赖，都为起步依赖。</p><p>起步依赖有什么特殊之处呢，这里我们以入门案例中引入的起步依赖做为讲解：</p><ul><li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li><li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li></ul><blockquote><p><strong>spring-boot-starter-web</strong>内部把关于Web开发所有的依赖都已经导入并且指定了版本，只需引入 <code>spring-boot-starter-web</code> 依赖就可以实现Web开发的需要的功能</p><p><img src="/assets/image-20221202204013113.png" alt="image-20221202204013113"></p></blockquote><p>Spring的官方提供了很多现成的starter(起步依赖)，我们在开发相关应用时，只需要引入对应的starter即可。</p><p>官方地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters</a></p><p><img src="/assets/image-20221202204536647.png" alt="image-20221202204536647"></p><p>每一个起步依赖，都用于开发一个特定的功能。</p><blockquote><p>举例：当我们开发中需要使用redis数据库时，只需要在SpringBoot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖。</p></blockquote><h4 id="3-3-2-SpringBoot父工程"><a href="#3-3-2-SpringBoot父工程" class="headerlink" title="3.3.2 SpringBoot父工程"></a>3.3.2 SpringBoot父工程</h4><p>在我们之前开发的SpringBoot入门案例中，我们通过maven引入的依赖，是没有指定具体的依赖版本号的。</p><p><img src="/assets/image-20221202205103486.png" alt="image-20221202205103486"></p><p>为什么没有指定<version>版本号，可以正常使用呢？</p><ul><li>因为每一个SpringBoot工程，都有一个父工程。依赖的版本号，在父工程中统一管理。</li></ul><p><img src="/assets/image-20221202205318778.png" alt="image-20221202205318778"></p><h4 id="3-3-3-内嵌Tomcat"><a href="#3-3-3-内嵌Tomcat" class="headerlink" title="3.3.3 内嵌Tomcat"></a>3.3.3 内嵌Tomcat</h4><p>问题：为什么我们之前书写的SpringBoot入门程序中，并没有把程序部署到Tomcat的webapps目录下，也可以运行呢？</p><p>原因呢，是因为在我们的SpringBoot中，引入了web运行环境(也就是引入spring-boot-starter-web起步依赖)，其内部已经集成了内置的Tomcat服务器。</p><p>我们可以通过IDEA开发工具右侧的maven面板中，就可以看到当前工程引入的依赖。其中已经将Tomcat的相关依赖传递下来了，也就是说在SpringBoot中可以直接使用Tomcat服务器。</p><p><img src="/assets/image-20220825194553137.png"> </p><p>当我们运行SpringBoot的引导类时(运行main方法)，就会看到命令行输出的日志，其中占用8080端口的就是Tomcat。</p><p><img src="/assets/image-20220825195359993.png" alt="image-20220825195359993"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>28SpringBootWeb请求响应</title>
    <link href="/2023/12/06/day28-SpringBootWeb-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
    <url>/2023/12/06/day28-SpringBootWeb-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="28-SpringBootWeb请求响应"><a href="#28-SpringBootWeb请求响应" class="headerlink" title="28-SpringBootWeb请求响应"></a>28-SpringBootWeb请求响应</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一次的课程中，我们开发了springbootweb的入门程序。 基于SpringBoot的方式开发一个web应用，浏览器发起请求 &#x2F;hello 后 ，给浏览器返回字符串 “Hello World ~”。</p><p><img src="/assets/image-20220826161735076.png" alt="image-20220826161735076"></p><p>其实呢，是我们在浏览器发起请求，请求了我们的后端web服务器(也就是内置的Tomcat)。而我们在开发web程序时呢，定义了一个控制器类Controller，请求会被部署在Tomcat中的Controller接收，然后Controller再给浏览器一个响应，响应一个字符串 “Hello World”。 而在请求响应的过程中是遵循HTTP协议的。</p><p>但是呢，这里要告诉大家的时，其实在Tomcat这类Web服务器中，是不识别我们自己定义的Controller的。但是我们前面讲到过Tomcat是一个Servlet容器，是支持Serlvet规范的，所以呢，在tomcat中是可以识别 Servlet程序的。 那我们所编写的XxxController 是如何处理请求的，又与Servlet之间有什么联系呢？</p><p>其实呢，在SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 DispatcherServlet，称之为 核心控制器。 DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据。</p><p><img src="/assets/image-20220826165340157.png" alt="image-20220826165340157"></p><p>那将来浏览器发送请求，会携带请求数据，包括：请求行、请求头；请求到达tomcat之后，tomcat会负责解析这些请求数据，然后呢将解析后的请求数据会传递给Servlet程序的HttpServletRequest对象，那也就意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，我们就可以给浏览器设置响应数据 。</p><p><img src="/assets/image-20220826171407354.png" alt="image-20220826171407354"> </p><p>那上述所描述的这种浏览器&#x2F;服务器的架构模式呢，我们称之为：BS架构。</p><p><img src="/assets/image-20220826171454775.png" alt="image-20220826171454775"> </p><p>• BS架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><p>那今天呢，我们的课程内容主要就围绕着：请求、响应进行。 今天课程内容，主要包含三个部分：</p><blockquote><ul><li>请求</li><li>响应</li><li>分层解耦</li></ul></blockquote><h2 id="1-请求"><a href="#1-请求" class="headerlink" title="1. 请求"></a>1. 请求</h2><p>在本章节呢，我们主要讲解，如何接收页面传递过来的请求数据。</p><h3 id="1-1-Postman"><a href="#1-1-Postman" class="headerlink" title="1.1 Postman"></a>1.1 Postman</h3><p>之前我们课程中有提到当前最为主流的开发模式：前后端分离</p><p><img src="/assets/image-20221203095553048.png" alt="image-20221203095553048"></p><p>在这种模式下，前端技术人员基于”接口文档”，开发前端程序；后端技术人员也基于”接口文档”，开发后端程序。</p><p>由于前后端分离，对我们后端技术人员来讲，在开发过程中，是没有前端页面的，那我们怎么测试自己所开发的程序呢？</p><p>方式1：像之前SpringBoot入门案例中一样，直接使用浏览器。在浏览器中输入地址，测试后端程序。</p><ul><li>弊端：在浏览器地址栏中输入地址这种方式都是GET请求，如何我们要用到POST请求怎么办呢？<ul><li>要解决POST请求，需要程序员自己编写前端代码（比较麻烦）</li></ul></li></ul><p>方式2：使用专业的接口测试工具（课程中我们使用Postman工具）</p><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><p><img src="/assets/image-20220826173003949.png" alt="image-20220826173003949"> </p><ul><li><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p><blockquote><p>Postman原是Chrome浏览器的插件，可以模拟浏览器向后端服务器发起任何形式(如:get、post)的HTTP请求</p><p>使用Postman还可以在发起请求时，携带一些请求参数、请求头等信息</p></blockquote></li><li><p>作用：常用于进行接口测试</p></li><li><p>特征</p><ul><li>简单</li><li>实用</li><li>美观</li><li>大方</li></ul></li></ul><h4 id="1-1-2-安装"><a href="#1-1-2-安装" class="headerlink" title="1.1.2 安装"></a>1.1.2 安装</h4><p><img src="/assets/image-20220826173919556.png" alt="image-20220826173919556"> </p><p>双击资料中提供的<code>Postman-win64-8.3.1-Setup.exe</code>即可自动安装。</p><p><img src="/assets/image-20220826174601266.png" alt="image-20220826174601266"> </p><p>安装完成之后，进入页面中会提示有新版本可以升级（无需升级）</p><p><img src="/assets/image-20220826174900779.png" alt="image-20220826174900779"></p><p><img src="/assets/image-20221203112117979.png" alt="image-20221203112117979"></p><p>界面介绍:</p><p><img src="/assets/image-20220826175306141.png" alt="image-20220826175306141"> </p><p><strong>如果我们需要将测试的请求信息保存下来，就需要创建一个postman的账号，然后登录之后才可以。</strong></p><p><img src="/assets/image-20221203103623435.png" alt="image-20221203103623435"></p><p><img src="/assets/image-20221203112252985.png" alt="image-20221203112252985"> </p><p><img src="/assets/image-20221203112320687.png" alt="image-20221203112320687"> </p><p>登录完成之后，可以创建工作空间：</p><p><img src="/assets/image-20221203113552785.png" alt="image-20221203113552785"></p><p><img src="/assets/image-20221203113925733.png" alt="image-20221203113925733"></p><p><img src="/assets/image-20221203113847126.png" alt="image-20221203113847126"></p><p>创建请求：</p><p><img src="/assets/image-20221203114031824.png" alt="image-20221203114031824"></p><p>点击”Save”，保存当前请求</p><p><img src="/assets/image-20221203114231572.png" alt="image-20221203114231572"></p><p><img src="/assets/image-20221203114806665.png" alt="image-20221203114806665"></p><p><img src="/assets/image-20221203114852752.png" alt="image-20221203114852752"></p><p><img src="/assets/image-20221203115001098.png" alt="image-20221203115001098"></p><p><img src="/assets/image-20221203115041949.png" alt="image-20221203115041949"></p><p><img src="/assets/image-20221203115110440.png" alt="image-20221203115110440"></p><h3 id="1-2-简单参数"><a href="#1-2-简单参数" class="headerlink" title="1.2 简单参数"></a>1.2 简单参数</h3><p>简单参数：在向服务器发起请求时，向服务器传递的是一些普通的请求数据。</p><p><img src="/assets/image-20220826180550583.png" alt="image-20220826180550583"></p><p>那么在后端程序中，如何接收传递过来的普通参数数据呢？</p><p>我们在这里讲解两种方式：</p><ol><li>原始方式   </li><li>SpringBoot方式</li></ol><h4 id="1-2-1-原始方式"><a href="#1-2-1-原始方式" class="headerlink" title="1.2.1 原始方式"></a>1.2.1 原始方式</h4><p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。比如获取请求参数：</p><blockquote><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote><p>在Controller中，我们要想获取Request对象，可以直接在方法的形参中声明 HttpServletRequest 对象。然后就可以通过该对象来获取请求信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//根据指定的参数名获取请求参数的数据值</span><br>String  request.getParameter(<span class="hljs-string">&quot;参数名&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//原始方式</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span><br>        <span class="hljs-comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span><br>        <span class="hljs-comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span><br>        <span class="hljs-comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">//name就是请求参数名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ageStr</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;age&quot;</span>);<span class="hljs-comment">//age就是请求参数名</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(ageStr);<span class="hljs-comment">//需要手动进行类型转换</span><br>        System.out.println(name+<span class="hljs-string">&quot;  :  &quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上这种方式，我们仅做了解。（在以后的开发中不会使用到）</p></blockquote><h4 id="1-2-2-SpringBoot方式"><a href="#1-2-2-SpringBoot方式" class="headerlink" title="1.2.2 SpringBoot方式"></a>1.2.2 SpringBoot方式</h4><p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span><br>    <span class="hljs-comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span><br>    <span class="hljs-comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span><br>    <br>    <span class="hljs-comment">//springboot方式</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(String name , Integer age )</span>&#123;<span class="hljs-comment">//形参名和请求参数名保持一致</span><br>        System.out.println(name+<span class="hljs-string">&quot;  :  &quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>postman测试( GET 请求)：</strong></p><p><img src="/assets/image-20221203122405075.png" alt="image-20221203122405075"> </p><p><strong>postman测试( POST请求 )：</strong></p><p><img src="/assets/image-20220826181117898.png" alt="image-20220826181117898"></p><blockquote><p><strong>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证&#x3D;&#x3D;请求参数名和Controller方法中的形参名保持一致&#x3D;&#x3D;，就可以获取到请求参数中的数据值。</strong></p></blockquote><h4 id="1-2-3-参数名不一致"><a href="#1-2-3-参数名不一致" class="headerlink" title="1.2.3 参数名不一致"></a>1.2.3 参数名不一致</h4><p>如果方法形参名称与请求参数名称不一致，controller方法中的形参还能接收到请求参数值吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span><br>    <span class="hljs-comment">// 请求参数名：name</span><br><br>    <span class="hljs-comment">//springboot方式</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(String username , Integer age )</span>&#123;<span class="hljs-comment">//请求参数名和形参名不相同</span><br>        System.out.println(username+<span class="hljs-string">&quot;  :  &quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案：运行没有报错。 controller方法中的username值为：null，age值为20</p><ul><li>结论：对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</li></ul><p>那么如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p><p>解决方案：可以使用Spring提供的@RequestParam注解完成映射</p><p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span><br>    <span class="hljs-comment">// 请求参数名：name</span><br><br>    <span class="hljs-comment">//springboot方式</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String username , Integer age )</span>&#123;<br>        System.out.println(username+<span class="hljs-string">&quot;  :  &quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意事项：</strong></p><p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p><p><img src="/assets/image-20221203130726310.png" alt="image-20221203130726310"></p><p>如果该参数是可选的，可以将required属性设置为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;name&quot;, required = false)</span> String username, Integer age)</span>&#123;<br> System.out.println(username+ <span class="hljs-string">&quot;:&quot;</span> + age);<br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-3-实体参数"><a href="#1-3-实体参数" class="headerlink" title="1.3 实体参数"></a>1.3 实体参数</h3><p>在使用简单参数做为数据传递方式时，前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个。如果请求参数比较多，通过上述的方式一个参数一个参数的接收，会比较繁琐。 </p><p>此时，我们可以考虑将请求参数封装到一个实体类对象中。 要想完成数据封装，需要遵守如下规则：<strong>请求参数名与实体类的属性名相同</strong></p><p><img src="/assets/image-20221203131954932.png" alt="image-20221203131954932"></p><h4 id="1-3-1-简单实体对象"><a href="#1-3-1-简单实体对象" class="headerlink" title="1.3.1 简单实体对象"></a>1.3.1 简单实体对象</h4><p>定义POJO实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//实体参数：简单实体对象</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/simplePojo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplePojo</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><ul><li>参数名和实体类属性名一致时</li></ul><p><img src="/assets/image-20221203161246168.png" alt="image-20221203161246168"> </p><ul><li>参数名和实体类属性名不一致时</li></ul><p><img src="/assets/image-20221203161004349.png" alt="image-20221203161004349"></p><h4 id="1-3-2-复杂实体对象"><a href="#1-3-2-复杂实体对象" class="headerlink" title="1.3.2 复杂实体对象"></a>1.3.2 复杂实体对象</h4><p>上面我们讲的呢是简单的实体对象，下面我们在来学习下复杂的实体对象。</p><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><p><img src="/assets/image-20221203160447953.png" alt="image-20221203160447953"></p><p>复杂实体对象的封装，需要遵守如下规则：</p><ul><li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li></ul><p>定义POJO实体类：</p><ul><li>Address实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProvince</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> province;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProvince</span><span class="hljs-params">(String province)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Address&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;province=&#x27;&quot;</span> + province + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, city=&#x27;&quot;</span> + city + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>User实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Address address; <span class="hljs-comment">//地址对象</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Address <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(Address address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, address=&quot;</span> + address +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//实体参数：复杂实体对象</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/complexPojo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">complexPojo</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/assets/image-20221203162706175.png" alt="image-20221203162706175"> </p><h3 id="1-4-数组集合参数"><a href="#1-4-数组集合参数" class="headerlink" title="1.4 数组集合参数"></a>1.4 数组集合参数</h3><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p><img src="/assets/image-20221203164114083.png" alt="image-20221203164114083"> </p><p>多个值是怎么提交的呢？其实多个值也是一个一个的提交。</p><p><img src="/assets/image-20221203164944144.png" alt="image-20221203164944144"> </p><p>后端程序接收上述多个值的方式有两种：</p><ol><li>数组</li><li>集合</li></ol><h4 id="1-4-1-数组"><a href="#1-4-1-数组" class="headerlink" title="1.4.1 数组"></a>1.4.1 数组</h4><p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><p><img src="/assets/image-20221203190218468.png" alt="image-20221203190218468"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//数组集合参数</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/arrayParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(String[] hobby)</span>&#123;<br>        System.out.println(Arrays.toString(hobby));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p><img src="/assets/image-20221203191732601.png" alt="image-20221203191732601"> </p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><img src="/assets/image-20221203191822996.png" alt="image-20221203191822996"></p><h4 id="1-4-2-集合"><a href="#1-4-2-集合" class="headerlink" title="1.4.2 集合"></a>1.4.2 集合</h4><p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p><blockquote><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote><p><img src="/assets/image-20221203211640646.png" alt="image-20221203211640646"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//数组集合参数</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/listParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">listParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;<br>        System.out.println(hobby);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p><img src="/assets/image-20221203212221939.png" alt="image-20221203212221939"> </p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><img src="/assets/image-20221203212024679.png" alt="image-20221203212024679"></p><h3 id="1-5-日期参数"><a href="#1-5-日期参数" class="headerlink" title="1.5 日期参数"></a>1.5 日期参数</h3><p>上述演示的都是一些普通的参数，在一些特殊的需求中，可能会涉及到日期类型数据的封装。比如，如下需求：</p><p><img src="/assets/image-20220826194159343.png" alt="image-20220826194159343"> </p><p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022&#x2F;12&#x2F;12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p><img src="/assets/image-20221203213120692.png" alt="image-20221203213120692"></p><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li></ul><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//日期时间参数</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/dateParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dateParam</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;<br>        System.out.println(updateTime);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/assets/image-20221203214600716.png" alt="image-20221203214600716"></p><h3 id="1-6-JSON参数"><a href="#1-6-JSON参数" class="headerlink" title="1.6 JSON参数"></a>1.6 JSON参数</h3><p>在学习前端技术时，我们有讲到过JSON，而在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。 （JSON是开发中最常用的前后端数据交互方式）</p><p>我们学习JSON格式参数，主要从以下两个方面着手：</p><ol><li>Postman在发送请求时，如何传递json格式的请求参数</li><li>在服务端的controller方法中，如何接收json格式的请求参数</li></ol><p>Postman发送JSON格式数据：</p><p><img src="/assets/image-20221203225623337.png" alt="image-20221203225623337"></p><p>服务端Controller方法接收JSON格式数据：</p><ul><li>传递json格式的参数，在Controller中会使用实体类进行封装。 </li><li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></li></ul><p><img src="/assets/image-20221203230457901.png" alt="image-20221203230457901"></p><ul><li>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</li></ul><p>实体类：Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <br><span class="hljs-comment">//省略GET , SET 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实体类：User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <br>    <span class="hljs-comment">//省略GET , SET 方法</span><br>&#125;    <br></code></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//JSON参数</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jsonParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/assets/image-20221203231803000.png" alt="image-20221203231803000"> </p><h3 id="1-7-路径参数"><a href="#1-7-路径参数" class="headerlink" title="1.7 路径参数"></a>1.7 路径参数</h3><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面通过?key&#x3D;value的形式传递(GET请求)。</p><p><img src="/assets/image-20221203235715804.png" alt="image-20221203235715804"></p><p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">880</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span>/<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p><p>学习路径参数呢，主要掌握在后端的controller方法中，如何接收路径参数。</p><p>路径参数：</p><ul><li>前端：通过请求URL直接传递参数</li><li>后端：使用{…}来标识该路径参数，需要使用@PathVariable获取路径参数</li></ul><p><img src="/assets/image-20221204001520756.png" alt="image-20221204001520756"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//路径参数</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">pathParam</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/assets/image-20221204002040184.png" alt="image-20221204002040184"></p><p><strong>传递多个路径参数：</strong></p><p>Postman：</p><p><img src="/assets/image-20221204002306288.png" alt="image-20221204002306288"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-comment">//路径参数</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">pathParam2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id, <span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        System.out.println(id+ <span class="hljs-string">&quot; : &quot;</span> +name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-响应"><a href="#2-响应" class="headerlink" title="2. 响应"></a>2. 响应</h2><p>前面我们学习过HTTL协议的交互方式：请求响应模式（有请求就有响应）</p><p>那么Controller程序呢，除了接收请求外，还可以进行响应。</p><h3 id="2-1-ResponseBody"><a href="#2-1-ResponseBody" class="headerlink" title="2.1 @ResponseBody"></a>2.1 @ResponseBody</h3><p>在我们前面所编写的controller方法中，都已经设置了响应数据。</p><p><img src="/assets/image-20221204100656376.png" alt="image-20221204100656376"></p><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p><p>答案：使用@ResponseBody注解</p><p><strong>@ResponseBody注解：</strong></p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器<ul><li>如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li></ul></li></ul><p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World ~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World ~&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li>@RestController &#x3D; @Controller + @ResponseBody</li></ul><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="hljs-comment">//元注解（修饰注解的注解）</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="hljs-comment">//元注解</span><br><span class="hljs-meta">@Documented</span>    <span class="hljs-comment">//元注解</span><br><span class="hljs-meta">@Controller</span>   <br><span class="hljs-meta">@ResponseBody</span> <br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RestController &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Controller.class</span><br><span class="hljs-meta">    )</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：在类上添加@RestController就相当于添加了@ResponseBody注解。</p><ul><li>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据<ul><li>方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</li></ul></li></ul><p>下面我们来测试下响应数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseController</span> &#123;<br>    <span class="hljs-comment">//响应字符串</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World ~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World ~&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//响应实体对象</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getAddr&quot;)</span><br>    <span class="hljs-keyword">public</span> Address <span class="hljs-title function_">getAddr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<span class="hljs-comment">//创建实体类对象</span><br>        addr.setProvince(<span class="hljs-string">&quot;广东&quot;</span>);<br>        addr.setCity(<span class="hljs-string">&quot;深圳&quot;</span>);<br>        <span class="hljs-keyword">return</span> addr;<br>    &#125;<br>    <span class="hljs-comment">//响应集合数据</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/listAddr&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Address&gt; <span class="hljs-title function_">listAddr</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Address&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//集合对象</span><br>        <br>        <span class="hljs-type">Address</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        addr.setProvince(<span class="hljs-string">&quot;广东&quot;</span>);<br>        addr.setCity(<span class="hljs-string">&quot;深圳&quot;</span>);<br><br>        <span class="hljs-type">Address</span> <span class="hljs-variable">addr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        addr2.setProvince(<span class="hljs-string">&quot;陕西&quot;</span>);<br>        addr2.setCity(<span class="hljs-string">&quot;西安&quot;</span>);<br><br>        list.add(addr);<br>        list.add(addr2);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在服务端响应了一个对象或者集合，那私前端获取到的数据是什么样子的呢？我们使用postman发送请求来测试下。测试效果如下：</p><p><img src="/assets/image-20221204172339375.png" alt="image-20221204172339375"></p><p><img src="/assets/image-20221204172705426.png" alt="image-20221204172705426"></p><h3 id="2-2-统一响应结果"><a href="#2-2-统一响应结果" class="headerlink" title="2.2 统一响应结果"></a>2.2 统一响应结果</h3><p>大家有没有发现一个问题，我们在前面所编写的这些Controller方法中，返回值各种各样，没有任何的规范。</p><p><img src="/assets/image-20221204174052622.png" alt="image-20221204174052622"></p><p>如果我们开发一个大型项目，项目中controller方法将成千上万，使用上述方式将造成整个项目难以维护。那在真实的项目开发中是什么样子的呢？</p><p>在真实的项目开发中，无论是哪种方法，我们都会定义一个统一的返回结果。方案如下：</p><p><img src="/assets/image-20221204174537686.png" alt="image-20221204174537686"></p><blockquote><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote><p>统一的返回结果使用类来描述，在这个结果中包含：</p><ul><li><p>响应状态码：当前请求是成功，还是失败</p></li><li><p>状态码信息：给页面的提示信息</p></li><li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p></li></ul><p>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//响应码，1 代表成功; 0 代表失败</span><br>    <span class="hljs-keyword">private</span> String msg;  <span class="hljs-comment">//响应码 描述字符串</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">//返回的数据</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String msg, Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-comment">//增删改 成功响应(不需要给前端返回数据)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,data);<br>    &#125;<br>    <span class="hljs-comment">//失败响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">0</span>,msg,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseController</span> &#123; <br>    <span class="hljs-comment">//响应统一格式的结果</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World ~&quot;</span>);<br>        <span class="hljs-comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span><br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;Hello World ~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//响应统一格式的结果</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getAddr&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getAddr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        addr.setProvince(<span class="hljs-string">&quot;广东&quot;</span>);<br>        addr.setCity(<span class="hljs-string">&quot;深圳&quot;</span>);<br>        <span class="hljs-keyword">return</span> Result.success(addr);<br>    &#125;<br><br>    <span class="hljs-comment">//响应统一格式的结果</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/listAddr&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">listAddr</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Address&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">Address</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        addr.setProvince(<span class="hljs-string">&quot;广东&quot;</span>);<br>        addr.setCity(<span class="hljs-string">&quot;深圳&quot;</span>);<br><br>        <span class="hljs-type">Address</span> <span class="hljs-variable">addr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        addr2.setProvince(<span class="hljs-string">&quot;陕西&quot;</span>);<br>        addr2.setCity(<span class="hljs-string">&quot;西安&quot;</span>);<br><br>        list.add(addr);<br>        list.add(addr2);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Postman测试：</p><p><img src="/assets/image-20221204180946963.png" alt="image-20221204180946963"></p><p><img src="/assets/image-20221204180744084.png" alt="image-20221204180744084"></p><h3 id="2-3-案例"><a href="#2-3-案例" class="headerlink" title="2.3 案例"></a>2.3 案例</h3><p>下面我们通过一个案例，来加强对请求响应的学习。</p><h4 id="2-3-1-需求说明"><a href="#2-3-1-需求说明" class="headerlink" title="2.3.1 需求说明"></a>2.3.1 需求说明</h4><p>需求：加载并解析xml文件中的数据，完成数据处理，并在页面展示</p><p><img src="/assets/image-20221204185928260.png" alt="image-20221204185928260">  </p><ul><li>获取员工数据，返回统一响应结果，在页面渲染展示</li></ul><h4 id="2-3-2-准备工作"><a href="#2-3-2-准备工作" class="headerlink" title="2.3.2 准备工作"></a>2.3.2 准备工作</h4><p>案例准备：</p><ol><li><p>XML文件</p><ul><li>已经准备好(emp.xml)，直接导入进来，放在 src&#x2F;main&#x2F;resources目录下</li></ul></li><li><p>工具类</p><ul><li>已经准备好解析XML文件的工具类，无需自己实现</li><li>直接在创建一个包 com.itheima.utils ，然后将工具类拷贝进来</li></ul></li><li><p>前端页面资源</p><ul><li>已经准备好，直接拷贝进来，放在src&#x2F;main&#x2F;resources下的static目录下</li></ul></li></ol><p>Springboot项目的静态资源(html，css，js等前端资源)默认存放目录为：classpath:&#x2F;static 、 classpath:&#x2F;public、 classpath:&#x2F;resources</p><blockquote><p>在SpringBoot项目中，静态资源默认可以存放的目录：</p><ul><li>classpath:&#x2F;static&#x2F;</li><li>classpath:&#x2F;public&#x2F;</li><li>classpath:&#x2F;resources&#x2F;</li><li>classpath:&#x2F;META-INF&#x2F;resources&#x2F;</li></ul><p>classpath：</p><ul><li>代表的是类路径，在maven的项目中，其实指的就是 src&#x2F;main&#x2F;resources 或者 src&#x2F;main&#x2F;java，但是java目录是存放java代码的，所以相关的配置文件及静态资源文档，就放在 src&#x2F;main&#x2F;resources下。</li></ul></blockquote><h4 id="2-3-3-实现步骤"><a href="#2-3-3-实现步骤" class="headerlink" title="2.3.3 实现步骤"></a>2.3.3 实现步骤</h4><ol><li><p>在pom.xml文件中引入dom4j的依赖，用于解析XML文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入资料中提供的：解析XML的工具类XMLParserUtils、实体类Emp、XML文件emp.xml</p><p><img src="/assets/image-20221204182828547.png" alt="image-20221204182828547"> </p></li><li><p>引入资料中提供的静态页面文件，放在resources下的static目录下</p><p><img src="/assets/image-20221204183044848.png" alt="image-20221204183044848"> </p></li><li><p>创建EmpController类，编写Controller程序，处理请求，响应数据</p><p><img src="/assets/image-20221204184313822.png" alt="image-20221204184313822"></p></li></ol><h4 id="2-3-4-代码实现"><a href="#2-3-4-代码实现" class="headerlink" title="2.3.4 代码实现"></a>2.3.4 代码实现</h4><p>Contriller代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1. 加载并解析emp.xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        <span class="hljs-comment">//System.out.println(file);</span><br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br><br>        <span class="hljs-comment">//2. 对数据进行转换处理 - gender, job</span><br>        empList.stream().forEach(emp -&gt; &#123;<br>            <span class="hljs-comment">//处理 gender 1: 男, 2: 女</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;就业指导&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//3. 响应数据</span><br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>统一返回结果实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code ;<span class="hljs-comment">//1 成功 , 0 失败</span><br>    <span class="hljs-keyword">private</span> String msg; <span class="hljs-comment">//提示信息</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">//数据 date</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String msg, Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, data);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">0</span>, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-5-测试"><a href="#2-3-5-测试" class="headerlink" title="2.3.5 测试"></a>2.3.5 测试</h4><p>代码编写完毕之后，我们就可以运行引导类，启动服务进行测试了。 </p><p>使用Postman测试：</p><p><img src="/assets/image-20221204190341389.png" alt="image-20221204190341389"></p><p>打开浏览器，在浏览器地址栏输入： <a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></p><p><img src="/assets/image-20221204185455556.png" alt="image-20221204185455556"> </p><h4 id="2-3-6-问题分析"><a href="#2-3-6-问题分析" class="headerlink" title="2.3.6 问题分析"></a>2.3.6 问题分析</h4><p>上述案例的功能，我们虽然已经实现，但是呢，我们会发现案例中：解析XML数据，获取数据的代码，处理数据的逻辑的代码，给页面响应的代码全部都堆积在一起了，全部都写在controller方法中了。</p><p><img src="/assets/image-20221204190712411.png" alt="image-20221204190712411"></p><p>当前程序的这个业务逻辑还是比较简单的，如果业务逻辑再稍微复杂一点，我们会看到Controller方法的代码量就很大了。</p><ul><li><p>当我们要修改操作数据部分的代码，需要改动Controller</p></li><li><p>当我们要完善逻辑处理部分的代码，需要改动Controller</p></li><li><p>当我们需要修改数据响应的代码，还是需要改动Controller</p></li></ul><p>这样呢，就会造成我们整个工程代码的复用性比较差，而且代码难以维护。 那如何解决这个问题呢？其实在现在的开发中，有非常成熟的解决思路，那就是分层开发。</p><h2 id="3-分层解耦"><a href="#3-分层解耦" class="headerlink" title="3. 分层解耦"></a>3. 分层解耦</h2><h3 id="3-1-三层架构"><a href="#3-1-三层架构" class="headerlink" title="3.1 三层架构"></a>3.1 三层架构</h3><h4 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1 介绍"></a>3.1.1 介绍</h4><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>我们之前开发的程序呢，并不满足单一职责原则。下面我们来分析下之前的程序：</p><p><img src="/assets/image-20221204191650390.png" alt="image-20221204191650390"> </p><p>那其实我们上述案例的处理逻辑呢，从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><p><img src="/assets/image-20221204193837678.png" alt="image-20221204193837678"></p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><p><img src="/assets/image-20221204194207812.png" alt="image-20221204194207812"></p><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><h4 id="3-1-2-代码拆分"><a href="#3-1-2-代码拆分" class="headerlink" title="3.1.2 代码拆分"></a>3.1.2 代码拆分</h4><p>我们使用三层架构思想，来改造下之前的程序：</p><ul><li>控制层包名：xxxx.controller</li><li>业务逻辑层包名：xxxx.service</li><li>数据访问层包名：xxxx.dao</li></ul><p><img src="/assets/image-20221204195812200.png" alt="image-20221204195812200"></p><p><strong>控制层：</strong>接收前端发送的请求，对请求进行处理，并响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-comment">//业务层对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpService</span> <span class="hljs-variable">empService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpServiceA</span>();<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1. 调用service层, 获取数据</span><br>        List&lt;Emp&gt; empList = empService.listEmp();<br><br>        <span class="hljs-comment">//3. 响应数据</span><br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务逻辑层：</strong>处理具体的业务逻辑</p><ul><li>业务接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//业务逻辑接口（制定业务标准）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">//获取员工列表</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>业务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//业务逻辑实现类（按照业务标准实现）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">//dao层对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpDao</span> <span class="hljs-variable">empDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpDaoA</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 调用dao, 获取数据</span><br>        List&lt;Emp&gt; empList = empDao.listEmp();<br><br>        <span class="hljs-comment">//2. 对数据进行转换处理 - gender, job</span><br>        empList.stream().forEach(emp -&gt; &#123;<br>            <span class="hljs-comment">//处理 gender 1: 男, 2: 女</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;就业指导&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据访问层：</strong>负责数据的访问操作，包含数据的增、删、改、查</p><ul><li>数据访问接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据访问层接口（制定标准）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-comment">//获取员工列表数据</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>数据访问实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据访问实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 加载并解析emp.xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20221204201342490.png" alt="image-20221204201342490"></p><p>三层架构的好处：</p><ol><li>复用性强</li><li>便于维护</li><li>利用扩展</li></ol><h3 id="3-2-分层解耦"><a href="#3-2-分层解耦" class="headerlink" title="3.2 分层解耦"></a>3.2 分层解耦</h3><p>刚才我们学习过程序分层思想了，接下来呢，我们来学习下程序的解耦思想。</p><p>解耦：解除耦合。</p><h4 id="3-2-1-耦合问题"><a href="#3-2-1-耦合问题" class="headerlink" title="3.2.1 耦合问题"></a>3.2.1 耦合问题</h4><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p></li></ul><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><p><img src="/assets/image-20221204202531571.png" alt="image-20221204202531571"> </p><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><p><img src="/assets/image-20221204203904900.png" alt="image-20221204203904900"></p><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><p><img src="/assets/image-20220828215549593.png"></p><h4 id="3-2-2-解耦思路"><a href="#3-2-2-解耦思路" class="headerlink" title="3.2.2  解耦思路"></a>3.2.2  解耦思路</h4><p>之前我们在编写代码时，需要什么对象，就直接new一个就可以了。 这种做法呢，层与层之间代码就耦合了，当service层的实现变了之后， 我们还需要修改controller层的代码。</p><p><img src="/assets/image-20221204204916033.png" alt="image-20221204204916033"></p><p> 那应该怎么解耦呢？</p><ul><li>首先不能在EmpController中使用new对象。代码如下：</li></ul><p><img src="/assets/image-20221204205328069.png" alt="image-20221204205328069"></p><ul><li>此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul><li>我们的解决思路是：<ul><li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li><li>controller程序从容器中获取EmpService类型的对象</li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="3-3-IOC-amp-DI"><a href="#3-3-IOC-amp-DI" class="headerlink" title="3.3 IOC&amp;DI"></a>3.3 IOC&amp;DI</h3><p>上面我们引出了Spring中IOC和DI的基本概念，下面我们就来具体学习下IOC和DI的代码实现。</p><h4 id="3-3-1-IOC-amp-DI入门"><a href="#3-3-1-IOC-amp-DI入门" class="headerlink" title="3.3.1 IOC&amp;DI入门"></a>3.3.1 IOC&amp;DI入门</h4><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li>思路：<ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象<ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></li></ul><p>第1步：删除Controller层、Service层中new对象的代码</p><p><img src="/assets/image-20221204212807207.png" alt="image-20221204212807207"></p><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul><p><img src="/assets/image-20221204213328034.png" alt="image-20221204213328034"></p><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</li></ul><p><img src="/assets/image-20221204213859112.png" alt="image-20221204213859112"></p><p>完整的三层代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span><br>    <span class="hljs-keyword">private</span> EmpService empService ;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1. 调用service, 获取数据</span><br>        List&lt;Emp&gt; empList = empService.listEmp();<br><br>        <span class="hljs-comment">//3. 响应数据</span><br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span><br>    <span class="hljs-keyword">private</span> EmpDao empDao ;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 调用dao, 获取数据</span><br>        List&lt;Emp&gt; empList = empDao.listEmp();<br><br>        <span class="hljs-comment">//2. 对数据进行转换处理 - gender, job</span><br>        empList.stream().forEach(emp -&gt; &#123;<br>            <span class="hljs-comment">//处理 gender 1: 男, 2: 女</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;就业指导&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 加载并解析emp.xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试：</p><ul><li>启动SpringBoot引导类，打开浏览器，输入：<a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></li></ul><p><img src="/assets/image-20221204185455556.png" alt="image-20221204185455556"></p><h4 id="3-3-2-IOC详解"><a href="#3-3-2-IOC详解" class="headerlink" title="3.3.2 IOC详解"></a>3.3.2 IOC详解</h4><p>通过IOC和DI的入门程序呢，我们已经基本了解了IOC和DI的基础操作。接下来呢，我们学习下IOC控制反转和DI依赖注入的细节。</p><h5 id="3-3-2-1-bean的声明"><a href="#3-3-2-1-bean的声明" class="headerlink" title="3.3.2.1 bean的声明"></a>3.3.2.1 bean的声明</h5><p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller    （标注在控制层类上）</li><li>@Service          （标注在业务层类上）</li><li>@Repository    （标注在数据访问层类上）</li></ul><p>修改入门案例代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <span class="hljs-comment">//@RestController = @Controller + @ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span><br>    <span class="hljs-keyword">private</span> EmpService empService ;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1. 调用service, 获取数据</span><br>        List&lt;Emp&gt; empList = empService.listEmp();<br><br>        <span class="hljs-comment">//3. 响应数据</span><br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span><br>    <span class="hljs-keyword">private</span> EmpDao empDao ;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 调用dao, 获取数据</span><br>        List&lt;Emp&gt; empList = empDao.listEmp();<br><br>        <span class="hljs-comment">//2. 对数据进行转换处理 - gender, job</span><br>        empList.stream().forEach(emp -&gt; &#123;<br>            <span class="hljs-comment">//处理 gender 1: 男, 2: 女</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;就业指导&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 加载并解析emp.xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><blockquote><p>查看源码：<img src="/assets/image-20221204221320230.png" alt="image-20221204221320230"></p></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><p><img src="/assets/image-20221204222650873.png" alt="image-20221204222650873"></p><blockquote><p>注意事项: </p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h5 id="3-3-2-2-组件扫描"><a href="#3-3-2-2-组件扫描" class="headerlink" title="3.3.2.2 组件扫描"></a>3.3.2.2 组件扫描</h5><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><p> 下面我们通过修改项目工程的目录结构，来测试bean对象是否生效：</p><p><img src="/assets/image-20221204223602694.png" alt="image-20221204223602694"></p><p>运行程序后，报错：</p><p><img src="/assets/image-20221204223815554.png" alt="image-20221204223815554"></p><p>为什么没有找到bean对象呢？</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p><p><img src="/assets/image-20221204224643683.png" alt="image-20221204224643683"> </p></blockquote><ul><li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><p><img src="/assets/image-20221204225437297.png" alt="image-20221204225437297"></p><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><p><img src="/assets/image-20221204225815624.png" alt="image-20221204225815624"></p><h4 id="3-3-3-DI详解"><a href="#3-3-3-DI详解" class="headerlink" title="3.3.3 DI详解"></a>3.3.3 DI详解</h4><p>上一小节我们讲解了控制反转IOC的细节，接下来呢，我们学习依赖注解DI的细节。</p><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><blockquote><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而我们的IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？</p><p><img src="/assets/image-20221204232154445.png" alt="image-20221204232154445"></p><ul><li>程序运行会报错</li></ul><p><img src="/assets/image-20221204231616724.png" alt="image-20221204231616724"></p><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="/assets/image-20221204232501679.png" alt="image-20221204232501679"> </p><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="/assets/image-20221204233333606.png" alt="image-20221204233333606"></p><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="/assets/image-20221204233637735.png" alt="image-20221204233637735"></p><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24Ajax</title>
    <link href="/2023/12/06/day24-SpringBootWeb_Vue_Element/"/>
    <url>/2023/12/06/day24-SpringBootWeb_Vue_Element/</url>
    
    <content type="html"><![CDATA[<h1 id="24-Ajax"><a href="#24-Ajax" class="headerlink" title="24-Ajax"></a>24-Ajax</h1><h2 id="1-1-Ajax介绍"><a href="#1-1-Ajax介绍" class="headerlink" title="1.1 Ajax介绍"></a>1.1 Ajax介绍</h2><h3 id="1-1-1-Ajax概述"><a href="#1-1-1-Ajax概述" class="headerlink" title="1.1.1 Ajax概述"></a>1.1.1 Ajax概述</h3><p>我们前端页面中的数据，如下图所示的表格中的学生信息，应该来自于后台，那么我们的后台和前端是互不影响的2个程序，那么我们前端应该如何从后台获取数据呢？因为是2个程序，所以必须涉及到2个程序的交互，所以这就需要用到我们接下来学习的Ajax技术。</p><p><img src="/assets/1669103527446.png" alt="1669103527446"> </p><p>Ajax: 全称Asynchronous JavaScript And XML，异步的JavaScript和XML。其作用有如下2点：</p><ul><li>与服务器进行数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如：搜索联想、用户名是否可用的校验等等。</li></ul><h3 id="1-1-2-Ajax作用"><a href="#1-1-2-Ajax作用" class="headerlink" title="1.1.2 Ajax作用"></a>1.1.2 Ajax作用</h3><p>我们详细的解释一下Ajax技术的2个作用</p><ul><li><p>与服务器进行数据交互</p><p>如下图所示前端资源被浏览器解析，但是前端页面上缺少数据，前端可以通过Ajax技术，向后台服务器发起请求，后台服务器接受到前端的请求，从数据库中获取前端需要的资源，然后响应给前端，前端在通过我们学习的vue技术，可以将数据展示到页面上，这样用户就能看到完整的页面了。此处可以对比JavaSE中的网络编程技术来理解。</p><p><img src="/assets/1669104661340.png" alt="1669104661340"></p></li><li><p>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术。</p><p>如下图所示，当我们再百度搜索java时，下面的联想数据是通过Ajax请求从后台服务器得到的，在整个过程中，我们的Ajax请求不会导致整个百度页面的重新加载，并且只针对搜索栏这局部模块的数据进行了数据的更新，不会对整个页面的其他地方进行数据的更新，这样就大大提升了页面的加载速度，用户体验高。</p><p><img src="/assets/1669105041533.png" alt="1669105041533"></p></li></ul><h3 id="1-1-3-同步异步"><a href="#1-1-3-同步异步" class="headerlink" title="1.1.3 同步异步"></a>1.1.3 同步异步</h3><p>针对于上述Ajax的局部刷新功能是因为Ajax请求是异步的，与之对应的有同步请求。接下来我们介绍一下异步请求和同步请求的区别。</p><ul><li><p>同步请求发送过程如下图所示：</p><p><img src="/assets/1669105385944.png" alt="1669105385944"></p><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。 </p></li><li><p>异步请求发送过程如下图所示：</p><p><img src="/assets/1669105479350.png" alt="1669105479350"> </p><p>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</p></li></ul><h2 id="1-2-原生Ajax"><a href="#1-2-原生Ajax" class="headerlink" title="1.2 原生Ajax"></a>1.2 原生Ajax</h2><p>对于Ajax技术有了充分的认知了，我们接下来通过代码来演示Ajax的效果。此处我们先采用原生的Ajax代码来演示。因为Ajax请求是基于客户端发送请求，服务器响应数据的技术。所以为了完成快速入门案例，我们需要提供服服务器端和编写客户端。</p><ul><li><p>服务器端</p><p>因为我们暂时还没学过服务器端的代码，所以此处已经直接提供好了服务器端的请求地址，我们前端直接通过Ajax请求访问该地址即可。<strong>后台服务器地址</strong>：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p><p>上述地址我们也可以直接通过浏览器来访问，访问结果如图所示：只截取部分数据</p><p><img src="/assets/1669105963948.png" alt="1669105963948"></p></li><li><p>客户端</p><p>客户端的Ajax请求代码如下有如下4步，接下来我们跟着步骤一起操作一下。</p><p>第一步：首先我们再VS Code中创建AJAX的文件夹，并且创建名为01. Ajax-原生方式.html的文件，提供如下代码，主要是按钮绑定单击事件，我们希望点击按钮，来发送ajax请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>原生Ajax<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getData()&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">     </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：创建XMLHttpRequest对象，用于和服务器交换数据，也是原生Ajax请求的核心对象，提供了各种方法。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 创建XMLHttpRequest </span><br><span class="hljs-keyword">var</span> xmlHttpRequest  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure><p>第三步：调用对象的open()方法设置请求的参数信息，例如请求地址，请求方式。然后调用send()方法向服务器发送请求，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//2. 发送异步请求</span><br>xmlHttpRequest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://yapi.smart-xwork.cn/mock/169327/emp/list&#x27;</span>);<br>xmlHttpRequest.<span class="hljs-title function_">send</span>();<span class="hljs-comment">//发送请求</span><br></code></pre></td></tr></table></figure><p>第四步：我们通过绑定事件的方式，来获取服务器响应的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//3. 获取服务响应数据</span><br>xmlHttpRequest.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//此处判断 4表示浏览器已经完全接受到Ajax请求得到的响应， 200表示这是一个正确的Http请求，没有错误</span><br>    <span class="hljs-keyword">if</span>(xmlHttpRequest.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlHttpRequest.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>).<span class="hljs-property">innerHTML</span> = xmlHttpRequest.<span class="hljs-property">responseText</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后我们通过浏览器打开页面，请求点击按钮，发送Ajax请求，最终显示结果如下图所示：</p><p><img src="/assets/1669106850383.png" alt="1669106705778"> </p><p>并且通过浏览器的f12抓包，我们点击网络中的XHR请求，发现可以抓包到我们发送的Ajax请求。XHR代表的就是异步请求</p></li></ul><h2 id="1-3-Axios"><a href="#1-3-Axios" class="headerlink" title="1.3 Axios"></a>1.3 Axios</h2><p>上述原生的Ajax请求的代码编写起来还是比较繁琐的，所以接下来我们学习一门更加简单的发送Ajax请求的技术Axios 。Axios是对原生的AJAX进行封装，简化书写。Axios官网是：<code>https://www.axios-http.cn</code></p><h3 id="1-3-1-Axios的基本使用"><a href="#1-3-1-Axios的基本使用" class="headerlink" title="1.3.1 Axios的基本使用"></a>1.3.1 Axios的基本使用</h3><p>Axios的使用比较简单，主要分为2步：</p><ul><li><p>引入Axios文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用Axios发送请求，并获取响应结果，官方提供的api很多，此处给出2种，如下</p><ul><li><p>发送 get 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(resp.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>发送 post 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span>,<br>    <span class="hljs-attr">data</span>:<span class="hljs-string">&quot;username=zhangsan&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(resp.<span class="hljs-property">data</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p><ul><li>method属性：用来设置请求方式的。取值为 get 或者 post。</li><li>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</li><li>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</li></ul><p>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</p></li></ul><h3 id="1-3-2-Axios快速入门"><a href="#1-3-2-Axios快速入门" class="headerlink" title="1.3.2 Axios快速入门"></a>1.3.2 Axios快速入门</h3><ul><li><p>后端实现</p><p>查询所有员工信息服务器地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a> </p><p>根据员工id删除员工信息服务器地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/deleteById">http://yapi.smart-xwork.cn/mock/169327/emp/deleteById</a></p></li><li><p>前端实现</p><p>首先在VS Code中创建js文件夹，与html同级，然后将<strong>资料&#x2F;axios-0.18.0.js</strong> 文件拷贝到js目录下，然后创建名为02. Ajax-Axios.html的文件，工程结果如图所示：</p><p><img src="/assets/1669108792555.png" alt="1669108792555"> </p><p>然后在html中引入axios所依赖的js文件，并且提供2个按钮，绑定单击事件，分别用于点击时发送ajax请求，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ajax-Axios<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据GET&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;get()&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除数据POST&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;post()&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//通过axios发送异步请求-get</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">post</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//通过axios发送异步请求-post</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后分别使用Axios的方法，完整get请求和post请求的发送</p><p>get请求代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过axios发送异步请求-get</span><br> <span class="hljs-title function_">axios</span>(&#123;<br>     <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>     <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span><br> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);<br> &#125;)<br></code></pre></td></tr></table></figure><p>post请求代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过axios发送异步请求-post</span><br> <span class="hljs-title function_">axios</span>(&#123;<br>     <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>     <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,<br>     <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;id=1&quot;</span><br> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);<br> &#125;)<br></code></pre></td></tr></table></figure><p>浏览器打开，f12抓包，然后分别点击2个按钮，查看控制台效果如下：</p><p><img src="/assets/1669109382408.png" alt="1669109382408"> </p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ajax-Axios<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据GET&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;get()&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除数据POST&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;post()&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//通过axios发送异步请求-get</span></span><br><span class="language-javascript">        <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span></span><br><span class="language-javascript">        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">post</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-comment">// 通过axios发送异步请求-post</span></span><br><span class="language-javascript">        <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;id=1&quot;</span></span><br><span class="language-javascript">        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-3-请求方法的别名"><a href="#1-3-3-请求方法的别名" class="headerlink" title="1.3.3 请求方法的别名"></a>1.3.3 请求方法的别名</h3><p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.get(url [, config])</td><td>发送get请求</td></tr><tr><td>axios.delete(url [, config])</td><td>发送delete请求</td></tr><tr><td>axios.post(url [, data[, config]])</td><td>发送post请求</td></tr><tr><td>axios.put(url [, data[, config]])</td><td>发送put请求</td></tr></tbody></table><p>我们目前只关注get和post请求，所以在上述的入门案例中，我们可以将get请求代码改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>post请求改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,<span class="hljs-string">&quot;id=1&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-3-4-案例"><a href="#1-3-4-案例" class="headerlink" title="1.3.4 案例"></a>1.3.4 案例</h3><ul><li><p>需求：基于Vue及Axios完成数据的动态加载展示，如下图所示</p><p><img src="/assets/1669139756551.png" alt="1669139756551"> </p><p>其中数据是来自于后台程序的，地址是：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p></li><li><p>分析：</p><p>前端首先是一张表格，我们缺少数据，而提供数据的地址已经有了，所以意味这我们需要使用Ajax请求获取后台的数据。但是Ajax请求什么时候发送呢？页面的数据应该是页面加载完成，自动发送请求，展示数据，所以我们需要借助vue的mounted钩子函数。那么拿到数据了，我们该怎么将数据显示表格中呢？这里就得借助v-for指令来遍历数据，展示数据。</p></li><li><p>步骤：</p><ol><li>首先创建文件，提前准备基础代码，包括表格以及vue.js和axios.js文件的引入</li><li>我们需要在vue的mounted钩子函数中发送ajax请求，获取数据</li><li>拿到数据，数据需要绑定给vue的data属性</li><li>在&lt;tr&gt;标签上通过v-for指令遍历数据，展示数据</li></ol></li><li><p>代码实现：</p><ol><li><p>首先创建文件，提前准备基础代码，包括表格以及vue.js和axios.js文件的引入</p><p><img src="/assets/1669140682300.png" alt="1669140682300"></p><p>提供初始代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ajax-Axios-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>图像<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>职位<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>入职日期<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>最后操作时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> &gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;70px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                   <span class="hljs-comment">&lt;!-- &lt;span&gt;女&lt;/span&gt;--&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>班主任<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2009-08-09<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2009-08-09 12:00:00<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在vue的mounted钩子函数，编写Ajax请求，请求数据，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">mounted () &#123;<br>    <span class="hljs-comment">//发送异步请求,加载数据</span><br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ajax请求的数据我们应该绑定给vue的data属性，之后才能进行数据绑定到视图；并且浏览器打开后台地址，数据返回格式如下图所示：</p><p><img src="/assets/1669141982809.png" alt="1669141982809"> </p><p>因为服务器响应的json中的data属性才是我们需要展示的信息，所以我们应该将员工列表信息赋值给vue的data属性，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//发送异步请求,加载数据</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">emps</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><p>其中，data中生命emps变量，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">emps</span>:[]<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>在&lt;tr&gt;标签上通过v-for指令遍历数据，展示数据，其中需要注意的是图片的值，需要使用vue的属性绑定，男女的展示需要使用条件判断，其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(emp,index) in emps&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;emp.image&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;70px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;emp.gender == 1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;emp.gender == 2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.job&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.entrydate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.updatetime&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ajax-Axios-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>图像<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>职位<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>入职日期<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>最后操作时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(emp,index) in emps&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;emp.image&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;70px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;emp.gender == 1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;emp.gender == 2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.job&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.entrydate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;emp.updatetime&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">emps</span>:[]</span><br><span class="language-javascript">       &#125;,</span><br><span class="language-javascript">       mounted () &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">//发送异步请求,加载数据</span></span><br><span class="language-javascript">          axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">emps</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-前后台分离开发"><a href="#2-前后台分离开发" class="headerlink" title="2 前后台分离开发"></a>2 前后台分离开发</h1><h2 id="2-1-前后台分离开发介绍"><a href="#2-1-前后台分离开发介绍" class="headerlink" title="2.1 前后台分离开发介绍"></a>2.1 前后台分离开发介绍</h2><p>在之前的课程中，我们介绍过，前端开发有2种方式：<strong>前后台混合开发</strong>和<strong>前后台分离开发</strong>。</p><p>前后台混合开发，顾名思义就是前台后台代码混在一起开发，如下图所示：</p><p><img src="/assets/1669142636044.png" alt="1669142636044"> </p><p>这种开发模式有如下缺点：</p><ul><li>沟通成本高：后台人员发现前端有问题，需要找前端人员修改，前端修改成功，再交给后台人员使用</li><li>分工不明确：后台开发人员需要开发后台代码，也需要开发部分前端代码。很难培养专业人才</li><li>不便管理：所有的代码都在一个工程中</li><li>不便维护和扩展：前端代码更新，和后台无关，但是需要整个工程包括后台一起重新打包部署。</li></ul><p>所以我们目前基本都是采用的前后台分离开发方式，如下图所示：</p><p><img src="/assets/1669143264499.png" alt="1669143264499"> </p><p>我们将原先的工程分为前端工程和后端工程这2个工程，然后前端工程交给专业的前端人员开发，后端工程交给专业的后端人员开发。前端页面需要数据，可以通过发送异步请求，从后台工程获取。但是，我们前后台是分开来开发的，那么前端人员怎么知道后台返回数据的格式呢？后端人员开发，怎么知道前端人员需要的数据格式呢？所以针对这个问题，我们前后台统一指定一套规范！我们前后台开发人员都需要遵循这套规范开发，这就是我们的<strong>接口文档</strong>。接口文档有离线版和在线版本，接口文档示可以查询今天提供<strong>资料&#x2F;接口文档示例</strong>里面的资料。那么接口文档的内容怎么来的呢？是我们后台开发者根据产品经理提供的产品原型和需求文档所撰写出来的，产品原型示例可以参考今天提供<strong>资料&#x2F;页面原型</strong>里面的资料。</p><p>那么基于前后台分离开发的模式下，我们后台开发者开发一个功能的具体流程如何呢？如下图所示：</p><p><img src="/assets/1669143781533.png" alt="1669143781533"> </p><ol><li>需求分析：首先我们需要阅读需求文档，分析需求，理解需求。</li><li>接口定义：查询接口文档中关于需求的接口的定义，包括地址，参数，响应数据类型等等</li><li>前后台并行开发：各自按照接口文档进行开发，实现需求</li><li>测试：前后台开发完了，各自按照接口文档进行测试</li><li>前后段联调测试：前段工程请求后端工程，测试功能</li></ol><h2 id="2-2-YAPI"><a href="#2-2-YAPI" class="headerlink" title="2.2 YAPI"></a>2.2 YAPI</h2><h3 id="2-2-1-YAPI介绍"><a href="#2-2-1-YAPI介绍" class="headerlink" title="2.2.1 YAPI介绍"></a>2.2.1 YAPI介绍</h3><p>前后台分离开发中，我们前后台开发人员都需要遵循接口文档，所以接下来我们介绍一款撰写接口文档的平台。</p><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。</p><p>其官网地址：<a href="http://yapi.smart-xwork.cn/">http://yapi.smart-xwork.cn/</a></p><p>YApi主要提供了2个功能：</p><ul><li>API接口管理：根据需求撰写接口，包括接口的地址，参数，响应等等信息。</li><li>Mock服务：模拟真实接口，生成接口的模拟测试数据，用于前端的测试。</li></ul><h3 id="2-2-2-接口文档管理"><a href="#2-2-2-接口文档管理" class="headerlink" title="2.2.2 接口文档管理"></a>2.2.2 接口文档管理</h3><p>接下来我们演示一下YApi是如何管理接口文档的。</p><p>首先我们登录YAPI的官网，然后使用github或者百度账号登录，没有的话去注册一个，如下图所示：</p><p><img src="/assets/1669198315061.png" alt="1669198315061"> </p><p>登录进去后，在个人空间中，选择项目列表-&gt;添加测试项目，效果如图所示：</p><p><img src="/assets/1669198453566.png" alt="1669198453566"> </p><p>然后点击创建的项目，进入到项目中，紧接着先添加接口的分类，如下图所示</p><p><img src="/assets/1669198630531.png" alt="1669198630531"> </p><p>然后我们选择当前创建的分类，创建接口信息，如下图所示：</p><p><img src="/assets/1669289187162.png" alt="1669289187162"> </p><p>紧接着，我们来到接口的编辑界面，对接口做生层次的定制，例如：接口的参数，接口的返回值等等，效果图下图所示：</p><p><img src="/assets/1669289350540.png" alt="1669289350540"> </p><p>添加接口的请求参数，如下图所示：</p><p><img src="/assets/1669289410729.png" alt="1669289410729"></p><p>添加接口的返回值，如下图所示：</p><p><img src="/assets/1669289514661.png" alt="1669289514661"> </p><p>然后保存上述设置，紧接着我们可以来到接口的预览界面，查询接口的信息，其效果如下图所示：篇幅有限，只截取部分</p><p><img src="/assets/1669289623957.png" alt="1669289623957"> </p><p>最后，我们还可以设置接口的mock信息，</p><p><img src="/assets/1669289857670.png" alt="1669289857670"> </p><p>来到接口的Mock设置窗口，如下图所示：</p><p><img src="/assets/1669290093854.png" alt="1669290093854"> </p><p>紧接着我们来到接口的预览界面，直接点击Mock地址，如下图所示：</p><p><img src="/assets/1669290162900.png" alt="1669290162900"></p><p>我们发现浏览器直接打开，并返回如下数据：</p><p><img src="/assets/1669290210749.png" alt="1669290210749"></p><p>如上步骤就是YAPI接口平台中对于接口的配置步骤。</p><h1 id="3-前端工程化"><a href="#3-前端工程化" class="headerlink" title="3 前端工程化"></a>3 前端工程化</h1><h2 id="3-1-前端工程化介绍"><a href="#3-1-前端工程化介绍" class="headerlink" title="3.1 前端工程化介绍"></a>3.1 前端工程化介绍</h2><p>我们目前的前端开发中，当我们需要使用一些资源时，例如：vue.js，和axios.js文件，都是直接再工程中导入的，如下图所示：</p><p><img src="/assets/1669291953746.png" alt="1669291953746"></p><p>但是上述开发模式存在如下问题：</p><ul><li>每次开发都是从零开始，比较麻烦</li><li>多个页面中的组件共用性不好</li><li>js、图片等资源没有规范化的存储目录，没有统一的标准，不方便维护</li></ul><p>所以现在企业开发中更加讲究前端工程化方式的开发，主要包括如下4个特点</p><ul><li>模块化：将js和css等，做成一个个可复用模块</li><li>组件化：我们将UI组件，css样式，js行为封装成一个个的组件，便于管理</li><li>规范化：我们提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</li><li>自动化：项目的构建，测试，部署全部都是自动完成</li></ul><p>所以对于前端工程化，说白了，就是在企业级的前端项目开发中，把前端开发所需要的工具、技术、流程、经验进行规范化和标准化。从而提升开发效率，降低开发难度等等。接下来我们就需要学习vue的官方提供的脚手架帮我们完成前端的工程化。</p><h2 id="3-2-前端工程化入门"><a href="#3-2-前端工程化入门" class="headerlink" title="3.2 前端工程化入门"></a>3.2 前端工程化入门</h2><h3 id="3-2-1-环境准备"><a href="#3-2-1-环境准备" class="headerlink" title="3.2.1 环境准备"></a>3.2.1 环境准备</h3><p>我们的前端工程化是通过vue官方提供的脚手架Vue-cli来完成的，用于快速的生成一个Vue的项目模板。Vue-cli主要提供了如下功能：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><p>我们需要运行Vue-cli，需要依赖NodeJS，NodeJS是前端工程化依赖的环境。所以我们需要先安装NodeJS，然后才能安装Vue-cli</p><ul><li><p>NodeJS安装和Vue-cli安装</p><p>详细安装步骤，请参考<strong>资料&#x2F;NodeJS安装文档&#x2F;NodeJS安装文档.md</strong>文件</p><p><img src="/assets/1669293955527.png" alt="1669293955527"></p></li></ul><h3 id="3-2-2-Vue项目简介"><a href="#3-2-2-Vue项目简介" class="headerlink" title="3.2.2 Vue项目简介"></a>3.2.2 Vue项目简介</h3><p>环境准备好了，接下来我们需要通过Vue-cli创建一个vue项目，然后再学习一下vue项目的目录结构。Vue-cli提供了如下2种方式创建vue项目:</p><ul><li><p>命令行：直接通过命令行方式创建vue项目</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vue <span class="hljs-keyword">create</span> vue-project01<br></code></pre></td></tr></table></figure></li><li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue ui</span><br></code></pre></td></tr></table></figure><p>图形化界面如下：</p><p><img src="/assets/1669294586147.png" alt="1669294586147"></p></li></ul><h4 id="3-2-2-1-创建vue项目"><a href="#3-2-2-1-创建vue项目" class="headerlink" title="3.2.2.1 创建vue项目"></a>3.2.2.1 创建vue项目</h4><p>此处我们通过第二种图形化界面方式给大家演示。</p><p>首先，我们再桌面创建vue文件夹，然后双击进入文件夹，来到地址目录，输入cmd，然后进入到vue文件夹的cmd窗口界面，如下图所示：</p><p><img src="/assets/1669294790640.png" alt="1669294790640"></p><p>然后进入如下界面：</p><p><img src="/assets/1669294846601.png" alt="1669294846601"></p><p>然后再当前目录下，直接输入命令<code>vue ui</code>进入到vue的图形化界面，如下图所示：</p><p><img src="/assets/1669294939067.png" alt="1669294939067"> </p><p>然后我门选择创建按钮，在vue文件夹下创建项目，如下图所示：</p><p><img src="/assets/1669295020228.png" alt="1669295020228"></p><p>然后来到如下界面，进行vue项目的创建</p><p><img src="/assets/1669301661722.png" alt="1669301661722"></p><p>然后预设模板选择手动，如下图所示：</p><p> <img src="/assets/1669301737491.png" alt="1669301737491"> </p><p>然后再功能页面开启路由功能，如下图所示：</p><p><img src="/assets/1669301859936.png" alt="1669301859936"> </p><p>然后再配置页面选择语言版本和语法检查规范，如下图所示：</p><p><img src="/assets/1669301965095.png" alt="1669301965095"> </p><p>然后创建项目，进入如下界面：</p><p><img src="/assets/1669302091090.png" alt="1669302091090"></p><p>最后我们只需要等待片刻，即可进入到创建创建成功的界面，如下图所示：</p><p><img src="/assets/1669302171975.png" alt="1669302171975"> </p><p> 到此，vue项目创建结束</p><h4 id="3-2-2-2-vue项目目录结构介绍"><a href="#3-2-2-2-vue项目目录结构介绍" class="headerlink" title="3.2.2.2 vue项目目录结构介绍"></a>3.2.2.2 vue项目目录结构介绍</h4><p>我们通过VS Code打开之前创建的vue文件夹，打开之后，呈现如下图所示页面：</p><p><img src="/assets/1669302718419.png" alt="1669302718419"></p><p>vue项目的标准目录结构以及目录对应的解释如下图所示:</p><p><img src="/assets/1669302973198.png" alt="1669302973198"></p><p>其中我们平时开发代码就是在<strong>src目录</strong>下</p><h4 id="3-2-2-3-运行vue项目"><a href="#3-2-2-3-运行vue项目" class="headerlink" title="3.2.2.3 运行vue项目"></a>3.2.2.3 运行vue项目</h4><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p><ul><li><p>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）</p><p><img src="/assets/1669303687468.png" alt="1669303687468"></p><p>点击之后，我们等待片刻，即可运行，在终端界面中，我们发现项目是运行在本地服务的8080端口，我们直接通过浏览器打开地址</p><p><img src="/assets/1669303846100.png" alt="1669303846100"> </p><p>最终浏览器打开后，呈现如下界面，表示项目运行成功</p><p><img src="/assets/1669304009602.png" alt="1669304009602"></p><p>其实此时访问的是 <strong>src&#x2F;App.vue</strong>这个根组件，此时我们打开这个组件，修改代码：添加内容Vue</p><p><img src="/assets/1669304267724.png" alt="1669304267724"></p><p>只要我们保存更新的代码，我们直接打开浏览器，不需要做任何刷新，发现页面呈现内容发生了变化，如下图所示：</p><p><img src="/assets/1669304385826.png" alt="1669304385826"></p><p>这就是我们vue项目的热更新功能 </p><p>对于8080端口，经常被占用，所以我们可以去修改默认的8080端口。我们修改vue.config.js文件的内容，添加如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">devServer<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    port<span class="hljs-punctuation">:</span><span class="hljs-number">7000</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如下图所示，然后我们关闭服务器，并且重新启动，</p><p><img src="/assets/1669305444633.png" alt="1669305444633"></p></li></ul><p>​       重新启动如下图所示：</p><p>​<img src="/assets/1669305570022.png" alt="1669305570022"> </p><p>​端口更改成功，可以通过浏览器访问7000端口来访问我们之前的项目</p><ul><li><p>第二种方式：命令行方式</p><p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可，如下图所示：</p><p><img src="/assets/1669304694076.png" alt="1669304694076"></p></li></ul><p>补充：NPM脚本窗口调试出来</p><p>第一步：通过<strong>设置&#x2F;用户设置&#x2F;扩展&#x2F;MPM</strong>更改NPM默认配置，如下图所示</p><p><img src="/assets/1669304930336.png" alt="1669304930336"></p><p>然后重启VS Code，并且<strong>双击打开package.json文件</strong>，然后点击<strong>资源管理器处的3个小点</strong>，<strong>勾选npm脚本选项</strong>，如图所示</p><p><img src="/assets/1669305068434.png" alt="1669305068434"> </p><p>然后就能都显示NPM脚本小窗口了。</p><h3 id="3-2-3-Vue项目开发流程"><a href="#3-2-3-Vue项目开发流程" class="headerlink" title="3.2.3 Vue项目开发流程"></a>3.2.3 Vue项目开发流程</h3><p>那么我们访问的首页是index.html，但是我们找到public&#x2F;index.html文件，打开之后发现，里面没有什么代码，但是能够呈现内容丰富的首页：如下图所示：</p><p><img src="/assets/1669308098856.png" alt="1669308098856"> </p><p>我们自习观察发现，index.html的代码很简洁，但是浏览器所呈现的index.html内容却很丰富，代码和内容不匹配，所以vue是如何做到的呢？接下来我们学习一下vue项目的开发流程。</p><p>对于vue项目，index.html文件默认是引入了入口函数main.js文件，我们找到<strong>src&#x2F;main.js</strong>文件，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>上述代码中，包括如下几个关键点：</p><ul><li>import: 导入指定文件，并且重新起名。例如上述代码<code>import App from &#39;./App.vue&#39;</code>导入当前目录下得App.vue并且起名为App</li><li>new Vue(): 创建vue对象</li><li>$mount(‘#app’);将vue对象创建的dom对象挂在到id&#x3D;app的这个标签区域中，作用和之前学习的vue对象的le属性一致。</li><li>router:  路由，详细在后面的小节讲解</li><li>render: 主要使用视图的渲染的。</li></ul><p>来到<strong>public&#x2F;index.html</strong>中，我们<strong>删除div的id&#x3D;app属性</strong>，打开浏览器，发现之前访问的首页一片空白，如下图所示，这样就证明了，我们main.js中通过代码挂在到index.html的id&#x3D;app的标签区域的。</p><p>此时我们知道了vue创建的dom对象挂在到id&#x3D;app的标签区域，但是我们还是没有解决最开始的问题：首页内容如何呈现的？这就涉及到render中的App了，如下图所示：</p><p><img src="/assets/1669313364004.png" alt="1669313364004"> </p><p>那么这个App对象怎么回事呢，我们打开App.vue,注意的是.vue结尾的都是vue组件。而vue的组件文件包含3个部分：</p><ul><li>template: 模板部分，主要是HTML代码，用来展示页面主体结构的</li><li>script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</li><li>style: css样式部分，主要通过css样式控制模板的页面效果得</li></ul><p>如下图所示就是一个vue组件的小案例：</p><p><img src="/assets/1669313699186.png" alt="1669313699186"></p><p>此时我们可以打开App.vue，观察App.vue的代码，其中可以发现，App.vue组件的template部分内容，和我们浏览器访问的首页内容是一致的，如下图所示：</p><p><img src="/assets/1669313894258.png" alt="1669313894258"></p><p>接下来我们可以简化模板部分内容，添加script部分的数据模型，删除css样式，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;message&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>保存直接，回到浏览器，我们发现首页展示效果发生了变化，如下图所示：</p><p><img src="/assets/1669314115641.png" alt="1669314115641"></p><h1 id="4-Vue组件库Element"><a href="#4-Vue组件库Element" class="headerlink" title="4 Vue组件库Element"></a>4 Vue组件库Element</h1><h2 id="4-1-Element介绍"><a href="#4-1-Element介绍" class="headerlink" title="4.1 Element介绍"></a>4.1 Element介绍</h2><p>不知道同学们还否记得我们之前讲解的前端开发模式MVVM，我们之前学习的vue是侧重于VM开发的，主要用于数据绑定到视图的，那么接下来我们学习的ElementUI就是一款侧重于V开发的前端框架，主要用于开发美观的页面的。</p><p>Element：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页。</p><p>Element 提供了很多组件（组成网页的部件）供我们使用。例如 超链接、按钮、图片、表格等等。如下图所示就是我们开发的页面和ElementUI提供的效果对比：可以发现ElementUI提供的各式各样好看的按钮</p><p><img src="/assets/1669357961971.png" alt="1669357961971"> </p><p>ElementUI的学习方式和我们之前的学习方式不太一样，对于ElementUI，我们作为一个后台开发者，只需要<strong>学会如何从ElementUI的官网拷贝组件到我们自己的页面中，并且做一些修改即可</strong>。其官网地址：<a href="https://element.eleme.cn/#/zh-CN%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%BB%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%98%AFElementUI%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%EF%BC%8C%E8%87%B3%E4%BA%8E%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6%E5%90%8C%E5%AD%A6%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%88%91%E4%BB%AC%E8%BF%99%E5%87%A0%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8E%8C%E6%8F%A1%E5%88%B0ElementUI%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E8%AF%BE%E5%90%8E%E8%87%AA%E8%A1%8C%E5%AD%A6%E4%B9%A0%E3%80%82">https://element.eleme.cn/#/zh-CN，我们主要学习的是ElementUI中提供的常用组件，至于其他组件同学们可以通过我们这几个组件的学习掌握到ElementUI的学习技巧，然后课后自行学习。</a></p><h2 id="4-2-快速入门"><a href="#4-2-快速入门" class="headerlink" title="4.2 快速入门"></a>4.2 快速入门</h2><p>首先我们要掌握ElementUI的快速入门，接下来同学们就一起跟着步骤来操作一下。</p><p>首先，我们先要安装ElementUI的组件库，打开VS Code，停止之前的项目，然后在命令行输入如下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install element-ui@<span class="hljs-number">2</span>.<span class="hljs-number">15</span>.<span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p>具体操作如下图所示：</p><p><img src="/assets/1669358653297.png" alt="1669358653297"> </p><p>然后我们需要在main.js这个入口js文件中引入ElementUI的组件库，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br></code></pre></td></tr></table></figure><p>具体操作如图所示：</p><p><img src="/assets/1669358935188.png" alt="1669358935188"></p><p>然后我们需要按照vue项目的开发规范，在<strong>src&#x2F;views</strong>目录下创建一个vue组件文件，注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>具体操作如图所示：</p><p><img src="/assets/1669359450896.png" alt="1669359450896"> </p><p>最后我们只需要去ElementUI的官网，找到组件库，然后找到按钮组件，抄写代码即可，具体操作如下图所示：</p><p><img src="/assets/1669359839574.png" alt="1669359839574"></p><p>然后找到按钮的代码，如下图所示：</p><p><img src="/assets/1669359904272.png" alt="1669359904272"> </p><p>紧接着我们复制组件代码到我们的vue组件文件中，操作如下图所示：</p><p><img src="/assets/1669360120385.png" alt="1669360120385"></p><p>最后，我们需要在默认访问的根组件<strong>src&#x2F;App.vue</strong>中引入我们自定义的组件，具体操作步骤如下：</p><p><img src="/assets/1669360320983.png" alt="1669360320983"> </p><p>然后App.vue组件中的具体代码如下，<strong>代码是我们通过上述步骤引入element-view组件时自动生成的</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">element-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">element-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/Element/ElementView.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">ElementView</span> &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>然后运行我们的vue项目，浏览器直接访问之前的7000端口，展示效果如下图所示：</p><p><img src="/assets/1669360502407.png" alt="1669360502407"></p><p>到此，我们ElementUI的入门程序编写成功</p><h2 id="4-3-Element组件"><a href="#4-3-Element组件" class="headerlink" title="4.3 Element组件"></a>4.3 Element组件</h2><p>接下来我们来学习一下ElementUI的常用组件，对于组件的学习比较简单，我们只需要参考官方提供的代码，然后复制粘贴即可。</p><h3 id="4-3-1-Table表格"><a href="#4-3-1-Table表格" class="headerlink" title="4.3.1 Table表格"></a>4.3.1 Table表格</h3><h4 id="4-3-1-1-组件演示"><a href="#4-3-1-1-组件演示" class="headerlink" title="4.3.1.1 组件演示"></a>4.3.1.1 组件演示</h4><p>Table 表格：用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。</p><p>接下来我们通过代码来演示。</p><p>首先我们需要来到ElementUI的组件库中，找到表格组件，如下图所示：</p><p><img src="/assets/1669361564197.png" alt="1669361564197"></p><p>然后复制代码到我们之前的ElementVue.vue组件中，需要注意的是，我们组件包括了3个部分，如果官方有除了template部分之外的style和script都需要复制。具体操作如下图所示：</p><p>template模板部分：</p><p><img src="/assets/1669362225501.png" alt="1669362225501"> </p><p>script脚本部分</p><p><img src="/assets/1669362382846.png" alt="1669362382846"></p><p>ElementView.vue组件文件整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Button按钮 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>默认按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Table表格 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;date&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;日期&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;address&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">tableData</span>: [&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span><br><span class="language-javascript">          &#125;]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>此时回到浏览器，我们页面呈现如下效果：</p><p><img src="/assets/1669362451236.png" alt="1669362451236"> </p><h4 id="4-3-1-2-组件属性详解"><a href="#4-3-1-2-组件属性详解" class="headerlink" title="4.3.1.2 组件属性详解"></a>4.3.1.2 组件属性详解</h4><p>那么我们的ElementUI是如何将数据模型绑定到视图的呢？主要通过如下几个属性：</p><ul><li>data: 主要定义table组件的数据模型</li><li>prop: 定义列的数据应该绑定data中定义的具体的数据模型</li><li>label: 定义列的标题</li><li>width: 定义列的宽度</li></ul><p>其具体示例含义如下图所示：</p><p><img src="/assets/1669363098610.png" alt="1669363098610"> </p><p><strong>PS:Element组件的所有属性都可以在组件页面的最下方找到</strong>，如下图所示：</p><p><img src="/assets/1669363190361.png" alt="1669363190361"> </p><h3 id="4-3-2-Pagination分页"><a href="#4-3-2-Pagination分页" class="headerlink" title="4.3.2 Pagination分页"></a>4.3.2 Pagination分页</h3><h4 id="4-3-2-1-组件演示"><a href="#4-3-2-1-组件演示" class="headerlink" title="4.3.2.1 组件演示"></a>4.3.2.1 组件演示</h4><p>Pagination: 分页组件，主要提供分页工具条相关功能。其展示效果图下图所示：</p><p><img src="/assets/1669363631302.png" alt="1669363631302"> </p><p>接下来我们通过代码来演示功能。</p><p>首先在官网找到分页组件，我们选择带背景色分页组件，如下图所示：</p><p><img src="/assets/1669363746409.png" alt="1669363746409"> </p><p>然后复制代码到我们的ElementView.vue组件文件的template中，拷贝如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span><br><span class="hljs-tag">    <span class="hljs-attr">background</span></span><br><span class="hljs-tag">    <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;prev, pager, next&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开呈现如下效果：</p><p><img src="/assets/1669363921750.png" alt="1669363921750"> </p><h4 id="4-3-2-2-组件属性详解"><a href="#4-3-2-2-组件属性详解" class="headerlink" title="4.3.2.2 组件属性详解"></a>4.3.2.2 组件属性详解</h4><p>对于分页组件我们需要关注的是如下几个重要属性（可以通过查阅官网组件中最下面的组件属性详细说明得到）：</p><ul><li>background: 添加北京颜色，也就是上图蓝色背景色效果。</li><li>layout: 分页工具条的布局，其具体值包含<code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code> 这些值</li><li>total: 数据的总数量</li></ul><p>然后根据官方分页组件提供的layout属性说明，如下图所示：</p><p><img src="/assets/1669364288179.png" alt="1669364288179"> </p><p>我们修改layout属性如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">layout=<span class="hljs-string">&quot;sizes,prev, pager, next,jumper,total&quot;</span><br></code></pre></td></tr></table></figure><p>浏览器打开呈现如下效果：</p><p><img src="/assets/1669364403079.png" alt="1669364403079"></p><p>发现在原来的功能上，添加了一些额外的功能，其具体对应关系如下图所示：</p><p><img src="/assets/1669364533849.png" alt="1669364533849"> </p><h4 id="4-3-2-3-组件事件详解"><a href="#4-3-2-3-组件事件详解" class="headerlink" title="4.3.2.3 组件事件详解"></a>4.3.2.3 组件事件详解</h4><p>对于分页组件，除了上述几个属性，还有2个非常重要的事件我们需要去学习：</p><ul><li>size-change ： pageSize 改变时会触发 </li><li>current-change ：currentPage 改变时会触发</li></ul><p>其官方详细解释含义如下图所示：</p><p><img src="/assets/1669364990991.png" alt="1669364990991"> </p><p>对于这2个事件的参考代码，我们同样可以通过官方提供的完整案例中找到，如下图所示：</p><p><img src="/assets/1669365117644.png" alt="1669365117644"> </p><p>然后我们找到对应的代码，首先复制事件，复制代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">@size-change=<span class="hljs-string">&quot;handleSizeChange&quot;</span><br>@current-change=<span class="hljs-string">&quot;handleCurrentChange&quot;</span><br></code></pre></td></tr></table></figure><p>此时Panigation组件的template完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Pagination分页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span><br><span class="hljs-tag">               @<span class="hljs-attr">size-change</span>=<span class="hljs-string">&quot;handleSizeChange&quot;</span></span><br><span class="hljs-tag">               @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;handleCurrentChange&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">background</span></span><br><span class="hljs-tag">               <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br></code></pre></td></tr></table></figure><p>紧接着需要复制事件需要的2个函数，需要注意methods属性和data同级，其代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">methods<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      handleSizeChange(val) <span class="hljs-punctuation">&#123;</span><br>        console.log(`每页 $<span class="hljs-punctuation">&#123;</span>val<span class="hljs-punctuation">&#125;</span> 条`);<br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      handleCurrentChange(val) <span class="hljs-punctuation">&#123;</span><br>        console.log(`当前页<span class="hljs-punctuation">:</span> $<span class="hljs-punctuation">&#123;</span>val<span class="hljs-punctuation">&#125;</span>`);<br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>此时Panigation组件的script部分完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`每页 <span class="hljs-subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前页: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">tableData</span>: [&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span><br><span class="language-javascript">          &#125;]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>回到浏览器中，我们f12打开开发者控制台，然后切换当前页码和切换每页显示的数量，呈现如下效果：</p><p><img src="/assets/1669365585379.png" alt="1669365585379"> </p><h3 id="4-3-3-Dialog对话框"><a href="#4-3-3-Dialog对话框" class="headerlink" title="4.3.3 Dialog对话框"></a>4.3.3 Dialog对话框</h3><h4 id="4-3-3-1-组件演示"><a href="#4-3-3-1-组件演示" class="headerlink" title="4.3.3.1 组件演示"></a>4.3.3.1 组件演示</h4><p>Dialog: 在保留当前页面状态的情况下，告知用户并承载相关操作。其企业开发应用场景示例如下图所示：</p><p><img src="/assets/1669365791037.png" alt="1669365791037"></p><p>首先我们需要在ElementUI官方找到Dialog组件，如下图所示：</p><p><img src="/assets/1669365950945.png" alt="1669365950945"> </p><p>然后复制如下代码到我们的组件文件的template模块中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dialog 对话框 --&gt;</span><br><span class="hljs-comment">&lt;!-- Table --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogTableVisible = true&quot;</span>&gt;</span>打开嵌套表格的 Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;收货地址&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogTableVisible&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;gridData&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并且复制数据模型script模块中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">gridData: [&#123;<br>         <span class="hljs-type">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,<br>         <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,<br>         address: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br>       &#125;, &#123;<br>         <span class="hljs-type">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,<br>         <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,<br>         address: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br>       &#125;, &#123;<br>         <span class="hljs-type">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,<br>         <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,<br>         address: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br>       &#125;, &#123;<br>         <span class="hljs-type">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,<br>         <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,<br>         address: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br>       &#125;],<br>       dialogTableVisible: <span class="hljs-keyword">false</span>,<br></code></pre></td></tr></table></figure><p>其完整的script部分代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`每页 <span class="hljs-subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前页: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">gridData</span>: [&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;],</span><br><span class="language-javascript">        <span class="hljs-attr">dialogTableVisible</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: [&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span><br><span class="language-javascript">          &#125;]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们打开浏览器，点击按钮，呈现如下效果：</p><p><img src="/assets/1669366365778.png" alt="1669366365778"> </p><h4 id="4-3-3-2-组件属性详解"><a href="#4-3-3-2-组件属性详解" class="headerlink" title="4.3.3.2 组件属性详解"></a>4.3.3.2 组件属性详解</h4><p>那么ElementUI是如何做到对话框的显示与隐藏的呢？是通过如下的属性：</p><ul><li>visible.sync ：是否显示 Dialog</li></ul><p>具体释意如下图所示：</p><p><img src="/assets/1669366903107.png" alt="1669366903107"> </p><p>visible属性绑定的dialogTableVisble属性一开始默认是false，所以对话框隐藏；然后我们点击按钮，触发事件，修改属性值为true，</p><p>然后对话框visible属性值为true，所以对话框呈现出来。</p><h3 id="4-3-4-From表单"><a href="#4-3-4-From表单" class="headerlink" title="4.3.4 From表单"></a>4.3.4 From表单</h3><h4 id="4-3-4-1-组件演示"><a href="#4-3-4-1-组件演示" class="headerlink" title="4.3.4.1 组件演示"></a>4.3.4.1 组件演示</h4><p>Form 表单：由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据。 </p><p>表单在我们前端的开发中使用的还是比较多的，接下来我们学习这个组件，与之前的流程一样，我们首先需要在ElementUI的官方找到对应的组件示例：如下图所示：</p><p><img src="/assets/1669369751014.png" alt="1669369751014"> </p><p>我们的需求效果是：在对话框中呈现表单内容，类似如下图所示：</p><p><img src="/assets/1669365791037.png" alt="1669365791037"></p><p>所以，首先我们先要根据上一小结所学习的内容，制作一个新的对话框，其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Dialog对话框-Form表单 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogFormVisible = true&quot;</span>&gt;</span>打开嵌套Form的 Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Form表单&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogFormVisible&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还需要注意的是，针对这个新的对话框，我们需要在data中声明新的变量dialogFormVisible来控制对话框的隐藏与显示，代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dialogFormVisible:</span> <span class="hljs-literal">false</span><span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>打开浏览器，此时呈现如图所示的效果：</p><p><img src="/assets/1669370230214.png" alt="1669370230214"> </p><p>然后我们<strong>复制官网提供的template部分代码到我们的vue组件文件的Dialog组件中</strong>，但是，此处官方提供的表单项标签太多，所以我们只需要保留前面3个表单项组件，其他多余的删除，所以最终template部分代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Form表单&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogFormVisible&quot;</span>&gt;</span><br>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动名称&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动区域&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.region&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择活动区域&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;区域一&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;区域二&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动时间&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择日期&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.date1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-time-picker</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择时间&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.date2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-time-picker</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure><p>观察上述代码，我们发现其中表单项标签使用了v-model双向绑定，所以我们需要在vue的数据模型中声明变量，同样可以从官方提供的代码中复制粘贴，但是我们需要去掉我们不需要的属性，通过观察上述代码，我们发现双向绑定的属性有4个，分别是form.name,form.region,form.date1,form.date2,所以最终数据模型如下：</p><p><img src="/assets/1669371003680.png" alt="1669371003680"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">form</span>: &#123;<br>         name: <span class="hljs-string">&#x27;&#x27;</span>,<br>         region: <span class="hljs-string">&#x27;&#x27;</span>,<br>         date1: <span class="hljs-string">&#x27;&#x27;</span>,<br>         date2:<span class="hljs-string">&#x27;&#x27;</span><br>       &#125;,<br></code></pre></td></tr></table></figure><p>同样，官方的代码中，在script部分中，还提供了onSubmit函数，表单的立即创建按钮绑定了此函数，我们可以输入表单的内容，而表单的内容是双向绑定到form对象的，所以我们修改官方的onSubmit函数如下即可，而且我们还需要关闭对话框，最终函数代码如下：</p><p><img src="/assets/1669371163913.png" alt="1669371163913"> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">onSubmit</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>); <span class="hljs-comment">//输出表单内容到控制台</span><br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogFormVisible</span>=<span class="hljs-literal">false</span>; <span class="hljs-comment">//关闭表案例的对话框</span><br>     &#125;<br></code></pre></td></tr></table></figure><p>然后打开浏览器，我们打开对话框，并且输入表单内容，点击立即创建按钮，呈现如下效果；</p><p><img src="/assets/1669371448683.png" alt="1669371448683"> </p><p>最终vue组件完整代码如下，同学们可以针对form表单案例，参考该案例对应的template部分和script部分代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Button按钮 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>默认按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Table表格 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;date&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;日期&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;address&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Pagination分页 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">size-change</span>=<span class="hljs-string">&quot;handleSizeChange&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;handleCurrentChange&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">background</span></span><br><span class="hljs-tag">            <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Dialog 对话框 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- Table --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogTableVisible = true&quot;</span>&gt;</span>打开嵌套表格的 Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;收货地址&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogTableVisible&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;gridData&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Dialog对话框-Form表单 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogFormVisible = true&quot;</span>&gt;</span>打开嵌套Form的 Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Form表单&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogFormVisible&quot;</span>&gt;</span><br>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动名称&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动区域&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.region&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择活动区域&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;区域一&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;区域二&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动时间&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择日期&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.date1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-time-picker</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择时间&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.date2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-time-picker</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`每页 <span class="hljs-subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前页: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//表单案例的提交事件</span></span><br><span class="language-javascript">      <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>); <span class="hljs-comment">//输出表单内容到控制台</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogFormVisible</span>=<span class="hljs-literal">false</span>; <span class="hljs-comment">//关闭表案例的对话框</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//表单案例的数据双向绑定</span></span><br><span class="language-javascript">        <span class="hljs-attr">form</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">region</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">date1</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">date2</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">gridData</span>: [&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">        &#125;],</span><br><span class="language-javascript">        <span class="hljs-attr">dialogTableVisible</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">dialogFormVisible</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//控制form表单案例的对话框</span></span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: [&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span><br><span class="language-javascript">          &#125;, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span><br><span class="language-javascript">          &#125;]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="4-4-案例"><a href="#4-4-案例" class="headerlink" title="4.4 案例"></a>4.4 案例</h2><h3 id="4-4-1-案例需求"><a href="#4-4-1-案例需求" class="headerlink" title="4.4.1 案例需求"></a>4.4.1 案例需求</h3><p>参考 <strong>资料&#x2F;页面原型&#x2F;tlias智能学习辅助系统&#x2F;首页.html</strong> 文件，浏览器打开，点击页面中的左侧栏的员工管理，如下所示：</p><p><img src="/assets/1669373199181.png" alt="1669373199181"> </p><p>需求说明：</p><ol><li><p>制作类似格式的页面</p><p>即上面是标题，左侧栏是导航，右侧是数据展示区域</p></li><li><p>右侧需要展示搜索表单</p></li><li><p>右侧表格数据是动态展示的，数据来自于后台</p></li><li><p>实际示例效果如下图所示：</p><p><img src="/assets/1669373639681.png" alt="1669373639681"></p></li></ol><p>数据Mock地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://yapi.smart-xwork.cn/mock/169327/emp/list，浏览器打开，数据格式如下图所示：</a></p><p><img src="/assets/1669373386131.png" alt="1669373386131"> </p><p>通过观察数据，我们发现返回的json数据的data属性中，才是返回的人员列表信息</p><h3 id="4-4-2-案例分析"><a href="#4-4-2-案例分析" class="headerlink" title="4.4.2 案例分析"></a>4.4.2 案例分析</h3><p>整个案例相对来说功能比较复杂，需求较多，所以我们需要先整体，后局部细节。整个页面我们可以分为3个部分，如下图所示：</p><p><img src="/assets/1669374858620.png" alt="1669374858620"></p><p>一旦这样拆分，那么我们的思路就清晰了，主要步骤如下：</p><ol><li>创建页面，完成页面的整体布局规划</li><li>然后分别针对3个部分进行各自组件的具体实现</li><li>针对于右侧核心内容展示区域，需要使用异步加载数据，以表格渲染数据</li></ol><h3 id="4-4-3-代码实现"><a href="#4-4-3-代码实现" class="headerlink" title="4.4.3 代码实现"></a>4.4.3 代码实现</h3><h4 id="4-4-3-1-环境搭建"><a href="#4-4-3-1-环境搭建" class="headerlink" title="4.4.3.1 环境搭建"></a>4.4.3.1 环境搭建</h4><p>首先我们来到VS Code中，在views目录下创建 tlias&#x2F;EmpView.vue这个vue组件，并且编写组件的基本模板代码，其效果如下图所示：其中模板代码在之前的案例中已经提供，此处不再赘述</p><p><img src="/assets/1669375414710.png" alt="1669375414710"> </p><p>并且需要注意的是，我们默认访问的是App.vue这个组件，而我们App.vue这个组件之前是引入了element-view这个组件，此时我们需要修改成引入emp-view这个组件，并且注释掉之前的element-view这个组件，此时App.vue整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;element-view&gt;&lt;/element-view&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">emp-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">emp-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">EmpView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/tlias/EmpView.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// import ElementView from &#x27;./views/Element/ElementView.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;<span class="hljs-title class_">EmpView</span> &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>打开浏览器，我们发现之前的element案例内容没了，从而呈现的是一片空白，那么接下来我们就可以继续开发了。</p><h4 id="4-4-3-2-整体布局"><a href="#4-4-3-2-整体布局" class="headerlink" title="4.4.3.2 整体布局"></a>4.4.3.2 整体布局</h4><p>此处肯定不需要我们自己去布局的，我们直接来到ElementUI的官网，找到布局组件，如下图所示：</p><p><img src="/assets/1669376226430.png" alt="1669376226430"> </p><p>从官网提供的示例，我们发现由现成的满足我们需求的布局，所以我们只需要做一位代码搬运工即可。拷贝官方提供的如下代码直接粘贴到我们EmpView.vue组件的template模块中即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span>&gt;</span>Header<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span>&gt;</span>Aside<span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span>Main<span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开浏览器，此时呈现如下效果：</p><p><img src="/assets/1669376527001.png" alt="1669376527001"></p><p>因为我们没有拷贝官方提供的css样式，所以和官方案例的效果不太一样，但是我们需要的布局格式已经有，具体内容我们有自己的安排。首先我们需要调整整体布局的高度，所以我们需要在&lt;el-container&gt;上添加一些样式，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>到此我们布局功能就完成了</p><h4 id="4-4-3-3-顶部标题"><a href="#4-4-3-3-顶部标题" class="headerlink" title="4.4.3.3 顶部标题"></a>4.4.3.3 顶部标题</h4><p>对于顶部，我们需要实现的效果如下图所示：</p><p><img src="/assets/1669376996028.png" alt="1669376996028"></p><p>所以我们需要修改顶部的文本内容，并且提供背景色的css样式，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时浏览器打开，呈现效果如下图所示：</p><p><img src="/assets/1669377134623.png" alt="1669377134623"> </p><p>至此，我们的顶部标题就搞定了</p><p>此时整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span>&gt;</span>Aside<span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span>Main<span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-4-3-4-左侧导航栏"><a href="#4-4-3-4-左侧导航栏" class="headerlink" title="4.4.3.4 左侧导航栏"></a>4.4.3.4 左侧导航栏</h4><p>接下来我们来实现左侧导航栏，那么还是在上述布局组件中提供的案例，找到左侧栏的案例，如下图所示：</p><p><img src="/assets/1669377371518.png" alt="1669377371518"> </p><p>所以我们依然只需要搬运代码，然后做简单修改即可。官方提供的导航太多，我们不需要，所以我们需要做删减，在我们的左侧导航栏中粘贴如下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>导航一<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删减前后对比图：</p><p><img src="/assets/1669377954508.png" alt="1669377954508"></p><p>然后我们打开浏览器，展示如下内容：</p><p><img src="/assets/1669378005930.png" alt="1669378005930"></p><p>最后我们只需要替换文字内容即可。</p><p>此时整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>系统信息管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                          <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                          <br>                     <br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>                     <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>                  <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">   </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-4-3-5-右侧核心内容"><a href="#4-4-3-5-右侧核心内容" class="headerlink" title="4.4.3.5 右侧核心内容"></a>4.4.3.5 右侧核心内容</h4><h5 id="4-4-3-5-1-表格编写"><a href="#4-4-3-5-1-表格编写" class="headerlink" title="4.4.3.5.1 表格编写"></a>4.4.3.5.1 表格编写</h5><p>右侧显示的是表单和表格，首先我们先来完成表格的制作，我们同样在官方直接找表格组件，也可以直接通过我们上述容器组件中提供的案例中找到表格相关的案例，如下图所示：</p><p><img src="/assets/1669378360527.png" alt="1669378360527"> </p><p>然后找到表格的代码，复制到我们布局容器的主题区域，template模块代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;120&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表格是有数据模型的绑定的，所以我们需要继续拷贝数据模型，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">tableData</span>: [<br>          &#123;<br>              <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王小虎&#x27;</span>,<br>              <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br>          &#125;<br>      ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>浏览器打开，呈现如下效果：</p><p><img src="/assets/1669378670102.png" alt="1669378670102"> </p><p>但是这样的表格和数据并不是我们所需要的，所以，接下来我们需要修改表格，添加列，并且修改列名。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图像&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;job&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;职位&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;entrydate&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;updatetime&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最后操作时间&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;230&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，我们列名的prop属性值得内容并不是乱写的，因为我们将来需要绑定后台的数据的，所以如下图所示：</p><p><img src="/assets/1669379153961.png" alt="1669379153961"></p><p>并且此时我们data中之前的数据模型就不可用了，所以需要清空数据，设置为空数组，代码 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">tableData</span>: [<br>          <br>       ]<br>     &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>此时打开浏览器，呈现如下效果：</p><p><img src="/assets/1669379291238.png" alt="1669379291238"> </p><p>此时整体页面代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>系统信息管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                          <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                          <br>                     <br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>                     <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;image&quot;</span>     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图像&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;gender&quot;</span>    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;job&quot;</span>       <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;职位&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;entrydate&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;updatetime&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最后操作时间&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;230&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> &gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: [</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="4-4-3-5-2-表单编写"><a href="#4-4-3-5-2-表单编写" class="headerlink" title="4.4.3.5.2 表单编写"></a>4.4.3.5.2 表单编写</h5><p>在表格的上方，还需要如下图所示的表单：</p><p><img src="/assets/1669380411564.png" alt="1669380411564"></p><p>所以接下来我们需要去ElementUI官网，在表单组件中找到与之类似的示例，加以修改从而打成我们希望的效果，官方示例如下图所示：</p><p><img src="/assets/1669380607025.png" alt="1669380607025"></p><p>所以我们直接拷贝代码主体区域的table组件的上方即可，并且我们需要修改数据绑定的的变量名，最终代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">      <span class="hljs-comment">&lt;!-- 表单 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;searchForm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.gender&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码修改前后对比图：</p><p><img src="/assets/1669381155917.png" alt="1669381155917"></p><p>既然我们表单使用v-model进行数据的双向绑定了，所以我们紧接着需要在data中定义searchForm的数据模型，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">tableData</span>: [<br>         <br>      ],<br>      <span class="hljs-attr">searchForm</span>:&#123;<br>          <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>          <span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>而且，表单的提交按钮，绑定了onSubmit函数，所以我们还需要在methods中定义onSubmit函数，代码如下：</p><p>注意的是methods属性需要和data属性同级</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> methods:&#123;<br>        <span class="hljs-attr">onSubmit</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.searchForm);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器打开如图所示：</p><p><img src="/1669381520004.png" alt="1669381520004"></p><p>可以发现我们还缺少一个时间，所以可以从elementUI官网找到日期组件，如下图所示：</p><p><img src="/assets/1669381732234.png" alt="1669381732234"></p><p>参考官方代码，然后在我们之前的表单中添加一个日期表单，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.entrydate&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">range-separator</span>=<span class="hljs-string">&quot;至&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">&quot;开始日期&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">&quot;结束日期&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们添加了双向绑定，所以我们需要在data的searchForm中定义出来，需要注意的是这个日期包含2个值，所以我们定义为数组，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"> searchForm:&#123;<br>            name:<span class="hljs-string">&#x27;&#x27;</span>,<br>            gender:<span class="hljs-string">&#x27;&#x27;</span>,<br>            entrydate:[]<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们打开浏览器，填写表单，并且点击查询按钮，查看浏览器控制台，可以看到表单的内容，效果如下图所示：</p><p><img src="/assets/1669382161813.png" alt="1669382161813"></p><p>此时完整代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>系统信息管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                          <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                          <br>                     <br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>                     <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 表单 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;searchForm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.gender&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span>&gt;</span><br>                             <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.entrydate&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">range-separator</span>=<span class="hljs-string">&quot;至&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">&quot;开始日期&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">&quot;结束日期&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 表格 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;image&quot;</span>     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图像&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;gender&quot;</span>    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;job&quot;</span>       <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;职位&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;entrydate&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;updatetime&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最后操作时间&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;230&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> &gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: [</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">        <span class="hljs-attr">searchForm</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">entrydate</span>:[]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">onSubmit</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">searchForm</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="4-4-3-5-3-分页工具栏"><a href="#4-4-3-5-3-分页工具栏" class="headerlink" title="4.4.3.5.3 分页工具栏"></a>4.4.3.5.3 分页工具栏</h5><p>分页条我们之前做过，所以我们直接找到之前的案例，复制即可，代码如下：</p><p>其中template模块代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- Pagination分页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span><br><span class="hljs-tag">               @<span class="hljs-attr">size-change</span>=<span class="hljs-string">&quot;handleSizeChange&quot;</span></span><br><span class="hljs-tag">               @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;handleCurrentChange&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">background</span></span><br><span class="hljs-tag">               <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时methods中需要声明2个函数，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`每页 <span class="hljs-subst">$&#123;val&#125;</span> 条`</span>);<br>        &#125;,<br>        <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前页: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>此时打开浏览器，效果如下图所示：</p><p><img src="/assets/1669382952832.png" alt="1669382952832"></p><p>此时整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>系统信息管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                          <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                          <br>                     <br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>                     <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 表单 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;searchForm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.gender&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span>&gt;</span><br>                             <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.entrydate&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">range-separator</span>=<span class="hljs-string">&quot;至&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">&quot;开始日期&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">&quot;结束日期&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 表格 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;image&quot;</span>     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图像&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;gender&quot;</span>    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;job&quot;</span>       <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;职位&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;entrydate&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;updatetime&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最后操作时间&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;230&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> &gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><br>                    <span class="hljs-comment">&lt;!-- Pagination分页 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span><br><span class="hljs-tag">                        @<span class="hljs-attr">size-change</span>=<span class="hljs-string">&quot;handleSizeChange&quot;</span></span><br><span class="hljs-tag">                        @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;handleCurrentChange&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">background</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: [</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">        <span class="hljs-attr">searchForm</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">entrydate</span>:[]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">onSubmit</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">searchForm</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`每页 <span class="hljs-subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前页: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-4-3-6-异步数据加载"><a href="#4-4-3-6-异步数据加载" class="headerlink" title="4.4.3.6 异步数据加载"></a>4.4.3.6 异步数据加载</h4><h5 id="4-4-3-6-1-异步加载数据"><a href="#4-4-3-6-1-异步加载数据" class="headerlink" title="4.4.3.6.1 异步加载数据"></a>4.4.3.6.1 异步加载数据</h5><p>对于案例，我们只差最后的数据了，而数据的mock地址已经提供：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p><p>我们最后要做的就是异步加载数据，所以我们需要使用axios发送ajax请求。</p><p>在vue项目中，对于axios的使用，分为如下2步：</p><ol><li>安装axios: npm install axios</li><li>需要使用axios时，导入axios:  import axios from ‘axios’</li></ol><p>接下来我们先来到项目的执行终端，然后输入命令，安装axios，具体操作如下图所示：</p><p><img src="/assets/1669383450054.png" alt="1669383450054"> </p><p>然后<strong>重启项目</strong>，来到我们的EmpView.vue组件页面，通过import命令导入axios，代码如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br></code></pre></td></tr></table></figure><p>那么我们什么时候发送axios请求呢？页面加载完成，自动加载，所以可以使用之前的mounted钩子函数，并且我们需要将得到的员工数据要展示到表格，所以数据需要赋值给数据模型tableData，所以我们编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>       axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>)<br>       .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span>=&gt;</span>&#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">tableData</span>=resp.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>; <span class="hljs-comment">//响应数据赋值给数据模型</span><br>       &#125;);<br>   &#125;<br></code></pre></td></tr></table></figure><p>此时浏览器打开，呈现如下效果：</p><p><img src="/assets/1669383786402.png" alt="1669383786402"> </p><p>但是很明显，性别和图片的内容显示不正确，所以我们需要修复。</p><h5 id="4-4-3-6-2-性别内容展示修复"><a href="#4-4-3-6-2-性别内容展示修复" class="headerlink" title="4.4.3.6.2 性别内容展示修复"></a>4.4.3.6.2 性别内容展示修复</h5><p>首先我们来到ElementUI提供的表格组件，找到如下示例：</p><p><img src="/assets/1669384072912.png" alt="1669384072912"></p><p>我们仔细对比效果和功能实现代码，发现其中涉及2个非常重要的点：</p><ul><li>&lt;template&gt; : 用于自定义列的内容<ul><li>slot-scope: 通过属性的row获取当前行的数据</li></ul></li></ul><p>所以接下来，我们可以通过上述的标签自定义列的内容即可，修改性别列的内容代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;gender&quot;</span>    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>    &#123;&#123;scope.row.gender==1?&quot;男&quot;:&quot;女&quot;&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时打开浏览器，效果如下图所示：性别一列的值修复成功</p><p><img src="/assets/1669384537662.png" alt="1669384537662"></p><h5 id="4-4-3-6-3-图片内容展示修复"><a href="#4-4-3-6-3-图片内容展示修复" class="headerlink" title="4.4.3.6.3 图片内容展示修复"></a>4.4.3.6.3 图片内容展示修复</h5><p>图片内容的修复和上述一致，需要借助&lt;template&gt;标签自定义列的内容，需要需要展示图片，直接借助&lt;img&gt;标签即可，并且需要设置图片的宽度和高度，所以直接修改图片列的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;image&quot;</span>     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图像&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;scope.row.image&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;70px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时回到浏览器，效果如下图所示：图片展示修复成功</p><p><img src="/assets/1669384726550.png" alt="1669384726550"> </p><p>此时整个案例完整，其完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;230px&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid #eee&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>系统信息管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                          <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>                          <br>                     <br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>                     <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 表单 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;searchForm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.gender&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span>&gt;</span><br>                             <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchForm.entrydate&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">range-separator</span>=<span class="hljs-string">&quot;至&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">&quot;开始日期&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">&quot;结束日期&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 表格 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;image&quot;</span>     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图像&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;scope.row.image&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;70px&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;gender&quot;</span>    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>                                &#123;&#123;scope.row.gender==1?&quot;男&quot;:&quot;女&quot;&#125;&#125;<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;job&quot;</span>       <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;职位&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;140&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;entrydate&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;入职日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;updatetime&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最后操作时间&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;230&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> &gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><br>                    <span class="hljs-comment">&lt;!-- Pagination分页 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span><br><span class="hljs-tag">                        @<span class="hljs-attr">size-change</span>=<span class="hljs-string">&quot;handleSizeChange&quot;</span></span><br><span class="hljs-tag">                        @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;handleCurrentChange&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">background</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: [</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">        <span class="hljs-attr">searchForm</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">entrydate</span>:[]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">onSubmit</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">searchForm</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`每页 <span class="hljs-subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前页: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span>=&gt;</span>&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tableData</span>=resp.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="5-Vue路由"><a href="#5-Vue路由" class="headerlink" title="5 Vue路由"></a>5 Vue路由</h1><h2 id="5-1-路由介绍"><a href="#5-1-路由介绍" class="headerlink" title="5.1 路由介绍"></a>5.1 路由介绍</h2><p>将资代码&#x2F;vue-project(路由)&#x2F;vue-project&#x2F;src&#x2F;views&#x2F;tlias&#x2F;DeptView.vue拷贝到我们当前EmpView.vue同级，其结构如下：</p><p><img src="/assets/1669385311576.png" alt="1669385311576"> </p><p>此时我们希望基于4.4案例中的功能，实现点击侧边栏的部门管理，显示部门管理的信息，点击员工管理，显示员工管理的信息，效果如下图所示：</p><p><img src="/assets/1669385425617.png" alt="1669385425617"></p><p><img src="/assets/1669385446343.png" alt="1669385446343"></p><p>这就需要借助我们的vue的路由功能了。</p><p>前端路由：URL中的hash(#号之后的内容）与组件之间的对应关系，如下图所示：</p><p><img src="/assets/1669385782145.png" alt="1669385782145"></p><p>当我们点击左侧导航栏时，浏览器的地址栏会发生变化，路由自动更新显示与url所对应的vue组件。</p><p>而我们vue官方提供了路由插件Vue Router,其主要组成如下：</p><ul><li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li>&lt;router-link&gt;：请求链接组件，浏览器会解析成&lt;a&gt;</li><li>&lt;router-view&gt;：动态视图组件，用来渲染展示与路由路径对应的组件</li></ul><p>其工作原理如下图所示：</p><p><img src="/assets/1669386261570.png" alt="1669386261570"></p><p>首先VueRouter根据我们配置的url的hash片段和路由的组件关系去维护一张路由表;</p><p>然后我们页面提供一个&lt;router-link&gt;组件,用户点击，发出路由请求;</p><p>接着我们的VueRouter根据路由请求，在路由表中找到对应的vue组件；</p><p>最后VueRouter会切换&lt;router-view&gt;中的组件，从而进行视图的更新</p><h2 id="5-2-路由入门"><a href="#5-2-路由入门" class="headerlink" title="5.2 路由入门"></a>5.2 路由入门</h2><p>接下来我们来演示vue的路由功能。</p><p>首先我们需要先安装vue-router插件，可以通过如下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install vue-router@<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>但是我们不需要安装，因为当初我们再创建项目时，已经勾选了路由功能，已经安装好了。</strong></p><p>然后我们需要在<strong>src&#x2F;router&#x2F;index.js</strong>文件中定义路由表，根据其提供的模板代码进行修改，最终代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/emp&#x27;</span>,  <span class="hljs-comment">//地址hash</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;emp&#x27;</span>,<br>    <span class="hljs-attr">component</span>:  <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)  <span class="hljs-comment">//对应的vue组件</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/dept&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dept&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><p>注意需要去掉没有引用的import模块。</p><p>在main.js中，我们已经引入了router功能，如下图所示：</p><p><img src="/assets/1669387519004.png" alt="1669387519004"></p><p>路由基本信息配置好了，路由表已经被加载，此时我们还缺少2个东西，就是&lt;router-lin&gt;和&lt;router-view&gt;,所以我们需要修改2个页面（EmpView.vue和DeptView.vue）我们左侧栏的2个按钮为router-link,其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/dept&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/emp&quot;</span>&gt;</span>员工管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们还需要在内容展示区域即App.vue中定义route-view，作为组件的切换，其App.vue的完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;element-view&gt;&lt;/element-view&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;emp-view&gt;&lt;/emp-view&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// import EmpView from &#x27;./views/tlias/EmpView.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// import ElementView from &#x27;./views/Element/ElementView.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123; &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>但是我们浏览器打开地址： <a href="http://localhost:7000/">http://localhost:7000/</a> ，发现一片空白，因为我们默认的路由路径是&#x2F;,但是路由配置中没有对应的关系，</p><p>所以我们需要在路由配置中&#x2F;对应的路由组件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/emp&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;emp&#x27;</span>,<br>    <span class="hljs-attr">component</span>:  <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/dept&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dept&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/emp&#x27;</span> <span class="hljs-comment">//表示重定向到/emp即可</span><br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>此时我们打开浏览器，访问<a href="http://localhost:7000/">http://localhost:7000</a> 发现直接访问的是emp的页面，并且能够进行切换了，其具体如下图所示：</p><p><img src="/assets/1669388755027.png" alt="1669388755027"> </p><p>到此我们的路由实现成功。</p><h1 id="6-打包部署"><a href="#6-打包部署" class="headerlink" title="6 打包部署"></a>6 打包部署</h1><p>我们的前端工程开发好了，但是我们需要发布，那么如何发布呢？主要分为2步：</p><ol><li>前端工程打包</li><li>通过nginx服务器发布前端工程</li></ol><h2 id="6-1-前端工程打包"><a href="#6-1-前端工程打包" class="headerlink" title="6.1 前端工程打包"></a>6.1 前端工程打包</h2><p>接下来我们先来对前端工程进行打包</p><p>我们直接通过VS Code的NPM脚本中提供的build按钮来完整，如下图所示，直接点击即可：</p><p><img src="/assets/1669389052906.png" alt="1669389052906"></p><p>然后会在工程目录下生成一个dist目录，用于存放需要发布的前端资源，如下图所示：</p><p><img src="/assets/1669389147027.png" alt="1669389147027"></p><h2 id="6-2-部署前端工程"><a href="#6-2-部署前端工程" class="headerlink" title="6.2 部署前端工程"></a>6.2 部署前端工程</h2><h3 id="6-2-1-nginx介绍"><a href="#6-2-1-nginx介绍" class="headerlink" title="6.2.1 nginx介绍"></a>6.2.1 nginx介绍</h3><p>nginx: Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用。</p><p>niginx在windows中的安装是比较方便的，直接解压即可。所以我们直接将资料中的nginx-1.22.0.zip压缩文件拷贝到<strong>无中文的目录下</strong>，直接解压即可，如下图所示就是nginx的解压目录以及目录结构说明：</p><p><img src="/assets/1669389642057.png" alt="1669389642057"></p><p><strong>很明显，我们如果要发布，直接将资源放入到html目录中。</strong></p><h3 id="6-2-2-部署"><a href="#6-2-2-部署" class="headerlink" title="6.2.2 部署"></a>6.2.2 部署</h3><p>将我们之前打包的前端工程dist目录下得内容拷贝到nginx的html目录下，如下图所示：</p><p><img src="/assets/1669389950696.png" alt="1669389950696"></p><p>然后我们通过双击nginx下得nginx.exe文件来启动nginx，如下图所示：</p><p><img src="/assets/1669390029156.png" alt="1669390029156"></p><p>nginx服务器的端口号是80，所以启动成功之后，我们浏览器直接访问<a href="http://localhost/">http://localhost:80</a> 即可，其中80端口可以省略，其浏览器展示效果如图所示：</p><p><img src="/assets/1669390177896.png" alt="1669390177896"></p><p>到此，我们的前端工程发布成功。</p><p>PS: 如果80端口被占用，我们需要通过<strong>conf&#x2F;nginx.conf</strong>配置文件来修改端口号。如下图所示：</p><p><img src="/assets/1669390312206.png" alt="1669390312206"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>25前端开发介绍</title>
    <link href="/2023/12/06/day25-SpringBootWeb-HTML-CSS/"/>
    <url>/2023/12/06/day25-SpringBootWeb-HTML-CSS/</url>
    
    <content type="html"><![CDATA[<h1 id="25-前端开发介绍"><a href="#25-前端开发介绍" class="headerlink" title="25-前端开发介绍"></a>25-前端开发介绍</h1><p>我们介绍Web网站工作流程的时候提到，前端开发，主要的职责就是将数据以好看的样式呈现出来。说白了，就是开发网页程序，如下图所示：</p><p><img src="/assets/image-20230309163858689.png" alt="image-20230309163858689">  </p><p>那在讲解web前端开发之前，我们先需要对web前端开发有一个整体的认知。主要明确一下三个问题：</p><p>1). 网页有哪些部分组成 ?</p><p>文字、图片、音频、视频、超链接、表格等等。</p><p>2). 我们看到的网页，背后的本质是什么 ?</p><p>程序员写的前端代码 (备注：在前后端分离的开发模式中，)</p><p>3). 前端的代码是如何转换成用户眼中的网页的 ?</p><p>通过浏览器转化（解析和渲染）成用户看到的网页</p><p>浏览器中对代码进行解析和渲染的部分，称为 <strong>浏览器内核</strong></p><p>而市面上的浏览器非常多，比如：IE、火狐Firefox、苹果safari、欧朋、谷歌Chrome、QQ浏览器、360浏览器等等。 而且我们电脑上安装的浏览器可能都不止一个，有很多。 </p><p>但是呢，需要大家注意的是，不同的浏览器，内核不同，对于相同的前端代码解析的效果也会存在差异。 那这就会造成一个问题，同一段前端程序，不同浏览器展示出来的效果是不一样的，这个用户体验就很差了。而我们想达到的效果则是，即使用户使用的是不同的浏览器，解析同一段前端代码，最终展示出来的效果都是相同的。</p><p>要想达成这样一个目标，我们就需要定义一个统一的标准，然后让各大浏览器厂商都参照这个标准来实现即可。 而这套标准呢，其实早都已经定义好了，那就是我们接下来，要介绍的web标准。</p><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p><ul><li><p>HTML：负责网页的结构（页面元素和内容）。</p></li><li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p></li><li><p>JavaScript：负责网页的行为（交互效果）。</p></li></ul><img src="assets/image-20230309170412197.png" alt="image-20230309170412197" style="zoom:67%;" /> <p>当然了，随着技术的发展，我们为了更加快速的开发，现在也出现了很多前端开发的高级技术。例如：vue、elementui、Axios等等。</p><p>那这些内容呢，也是我们前端三天课程中要讲解的内容。 前端的3天课程安排如下：</p><ul><li>HTML &amp; CSS</li><li>JavaScript &amp; Vue</li><li>Ajax &amp; Axios &amp; ElementUI &amp; Nginx</li></ul><h1 id="2-HTML-amp-CSS"><a href="#2-HTML-amp-CSS" class="headerlink" title="2. HTML &amp; CSS"></a>2. HTML &amp; CSS</h1><p>1). 什么是HTML ?</p><blockquote><p>**HTML: **HyperText Markup Language，超文本标记语言。</p><ul><li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p></li><li><p>标记语言：由标签构成的语言</p><ul><li>HTML标签都是预定义好的。例如：使用 <h1> 标签展示标题，使用<a>展示超链接，使用<img>展示图片，<video>展示视频。</li><li>HTML代码直接在浏览器中运行，HTML标签由浏览器解析。</li></ul></li></ul></blockquote><p>下面展示的是一段html代码经过浏览器解析，呈现的效果如右图所示：</p><img src="assets/image-20230309172534138.png" alt="image-20230309172534138" style="zoom:80%;" />   <p>​</p><p>2). 什么是CSS ?</p><blockquote><p><strong>CSS:</strong> Cascading Style Sheet，层叠样式表，用于控制页面的样式（表现）。</p></blockquote><p>下面展示的是一段 html代码 及 CSS样式 经过浏览器解析，呈现的效果如右图所示：</p><img src="assets/image-20230309172634388.png" alt="image-20230309172634388" style="zoom: 80%;" /> <p>​</p><h2 id="2-1-HTML快速入门"><a href="#2-1-HTML快速入门" class="headerlink" title="2.1 HTML快速入门"></a>2.1 HTML快速入门</h2><h3 id="2-1-1-操作"><a href="#2-1-1-操作" class="headerlink" title="2.1.1 操作"></a>2.1.1 操作</h3><p>第一步:创建一个名为HTML的文件夹，然后找到课程资料中的 1.jpg 文件放到该目录下，此时HTML文件夹中内容如下：</p><p><img src="/assets/1668011569718.png" alt="1668011569718"> </p><p>第二步：创建一个文本文件，然后修改文件名为hello.html,注意文件的后缀是.html,如下图所示：</p><p><img src="/assets/1668012052140.png" alt="1668012052140"> </p><p>第三步：选中文件，鼠标右击，选择使用记事本打开文件，并且编写前端代码</p><p>首先html有固定的基本结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML 快速入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello HTML<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中&lt;html&gt;是根标签，&lt;head&gt;和&lt;body&gt;是子标签，&lt;head&gt;中的字标签&lt;title&gt;是用来定义网页的标题的，里面定义的内容会显示在浏览器网页的标题位置。</p><p>而 &lt;body&gt; 中编写的内容，就网页中显示的核心内容。</p><p>第四步：然后选中文件，鼠标右击，选择使用浏览器打开文件，浏览器呈现效果如下:</p><img src="assets/image-20230309173355794.png" alt="image-20230309173355794" style="zoom:67%;" />  <h3 id="2-1-2-总结"><a href="#2-1-2-总结" class="headerlink" title="2.1.2 总结"></a>2.1.2 总结</h3><p>1). HTML页面的基础结构标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>       <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&lt;title&gt;中定义标题显示在浏览器的标题位置，&lt;body&gt;中定义的内容会呈现在浏览器的内容区域</p><p>2). HTML中的标签特点</p><ul><li>HTML标签不区分大小写</li><li>HTML标签的属性值，采用单引号、双引号都可以</li><li>HTML语法相对比较松散 (建议大家编写HTML标签的时候尽量严谨一些)</li></ul><h2 id="2-2-开发工具"><a href="#2-2-开发工具" class="headerlink" title="2.2 开发工具"></a>2.2 开发工具</h2><ul><li><p>我们通过快速入门案例，发现由记事本文件开发html是非常不方便的，所以接下来我们需要学习一款前端专业的开发工具VS Code。</p></li><li><p>Visual Studio Code（简称 VS Code ）是 Microsoft 于2015年4月发布的一款代码编辑器。VS Code 对前端代码有非常强大的支持，同时也其他编程语言（例如：C++、Java、Python、PHP、Go等）。VS Code 提供了非常强大的插件库，大大提高了开发效率。</p></li><li><p>官网： <a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></p></li><li><p>详细安装教程：参考 <strong>资料&#x2F;VSCode安装&#x2F;安装文档&#x2F;VS Code安装文档.md</strong></p></li></ul><blockquote><p>注意：需要注意的是，我们作为一名开发者，不应该将软件软装在包含中文名的路径中 。</p></blockquote><h2 id="2-3-基础标签-amp-样式"><a href="#2-3-基础标签-amp-样式" class="headerlink" title="2.3 基础标签 &amp; 样式"></a>2.3 基础标签 &amp; 样式</h2><p>那我们在讲解HTML的常见基础标签 及 CSS的基本样式时，我们就以 新浪新闻页面 为例，来进行讲解，这样大家不仅能够知道 常见标签及样式的作用，还能够知道具体的应用场景。</p><p>新浪新闻的具体页面效果如下：</p><p><img src="/assets/image-20230309221756293.png" alt="image-20230309221756293"></p><p>原始页面网址：<a href="https://news.sina.com.cn/gov/xlxw/2023-03-03/doc-imyipzuy7321600.shtml">https://news.sina.com.cn/gov/xlxw/2023-03-03/doc-imyipzuy7321600.shtml</a></p><p>而对于这个新浪新闻的页面来说，核心内容分为两个部分，如下：</p><ul><li>新浪新闻-标题部分</li><li>新浪新闻-正文部分</li></ul><p><img src="/assets/image-20230309222608750.png" alt="image-20230309222608750"> </p><h3 id="2-3-1-新浪新闻-标题实现"><a href="#2-3-1-新浪新闻-标题实现" class="headerlink" title="2.3.1 新浪新闻-标题实现"></a>2.3.1 新浪新闻-标题实现</h3><h4 id="2-3-1-1-标题排版"><a href="#2-3-1-1-标题排版" class="headerlink" title="2.3.1.1 标题排版"></a>2.3.1.1 标题排版</h4><h5 id="2-3-1-1-1-分析"><a href="#2-3-1-1-1-分析" class="headerlink" title="2.3.1.1.1 分析"></a>2.3.1.1.1 分析</h5><img src="assets/image-20230309223020809.png" alt="image-20230309223020809" style="zoom:67%;" /> <p> 1). 第一部分，是一张图片，需要用到HTML中的图片标签 <img> 来实现。</p><p> 2). 第二部分，是一个标题，需要用到HTML中的标题标签 <h1> … <h6>来实现。</p><p> 3). 第三部分，有两条水平分割线，需要用到HTML中的 <hr> 标签来定义水平分割线。</p><h5 id="2-3-1-1-2-标签"><a href="#2-3-1-1-2-标签" class="headerlink" title="2.3.1.1.2 标签"></a>2.3.1.1.2 标签</h5><p>1). 图片标签 img</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">A. 图片标签: <span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span><br><br>B. 常见属性: <br>src: 指定图像的url (可以指定 绝对路径 , 也可以指定 相对路径)<br>width: 图像的宽度 (像素 / 百分比 , 相对于父元素的百分比)<br>height: 图像的高度 (像素 / 百分比 , 相对于父元素的百分比)<br><br>备注: 一般width 和 height 我们只会指定一个，另外一个会自动的等比例缩放。<br><br>C. 路径书写方式:<br>    绝对路径:<br>        1. 绝对磁盘路径: C:\Users\Administrator\Desktop\HTML\img\news_logo.png<br>           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;C:\Users\Administrator\Desktop\HTML\img\news_logo.png&quot;</span>&gt;</span><br><br>        2. 绝对网络路径: https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png<br>           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png&quot;</span>&gt;</span><br>    <br>    相对路径:<br>        ./ : 当前目录 , ./ 可以省略的<br>        ../: 上一级目录<br></code></pre></td></tr></table></figure><p>2). 标题标签 h 系列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">A. 标题标签: <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> - <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br>B. 效果 : h1为一级标题，字体也是最大的 ； h6为六级标题，字体是最小的。<br></code></pre></td></tr></table></figure><p>3). 水平分页线标签 <hr></p><h5 id="2-3-1-1-2-实现"><a href="#2-3-1-1-2-实现" class="headerlink" title="2.3.1.1.2 实现"></a>2.3.1.1.2 实现</h5><p>1). 打开VsCode，选择左侧最底部的 “资源管理器”，然后选择打开文件夹，选择打开桌面的 HTML 文件夹 </p><p>2). 将资料中提供的 图片、音频、视频 文件夹的这三个文件夹（里面是图片、音视频素材），复制到 HTML 文件夹中。 </p><p><img src="/assets/image-20230309224226495.png" alt="image-20230309224226495"> </p><p>3). 在VsCode中创建一个新的 html 文件，文件的后缀名设置为 .html</p><p><img src="/assets/image-20230309224401950.png" alt="image-20230309224401950"> </p><p>4). html 文件创建好之后，在其中输入 ！，然后直接回车，就可以生成 HTML 的基础结构标签</p><p><img src="/assets/image-20230309224645231.png" alt="image-20230309224645231"> </p><p>5). 编写标题排版的核心代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 文档类型为HTML --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符集为UTF-8 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置浏览器兼容性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    img标签: </span><br><span class="hljs-comment">        src: 图片资源路径</span><br><span class="hljs-comment">        width: 宽度(px, 像素 ; % , 相对于父元素的百分比)</span><br><span class="hljs-comment">        height: 高度(px, 像素 ; % , 相对于父元素的百分比)</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        &lt;img src=&quot;img/news_logo.png&quot; width=&quot;80%&quot; &gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    路径书写方式:</span><br><span class="hljs-comment">        绝对路径:</span><br><span class="hljs-comment">            1. 绝对磁盘路径: C:\Users\Administrator\Desktop\HTML\img\news_logo.png</span><br><span class="hljs-comment">                           &lt;img src=&quot;C:\Users\Administrator\Desktop\HTML\img\news_logo.png&quot;&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            2. 绝对网络路径: https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png</span><br><span class="hljs-comment">                           &lt;img src=&quot;https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png&quot;&gt;</span><br><span class="hljs-comment">        相对路径:</span><br><span class="hljs-comment">            ./ : 当前目录 , ./ 可以省略的</span><br><span class="hljs-comment">            ../: 上一级目录</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    2023年03月02日 21:50 央视网<br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-1-2-标题样式"><a href="#2-3-1-2-标题样式" class="headerlink" title="2.3.1.2 标题样式"></a>2.3.1.2 标题样式</h4><p>新浪新闻的标题部分的基本排版，我们已经完成了，然后大家会看到，我们编写的一级标题，默认字体颜色为纯黑色。 而原始的新浪新闻页面的新闻标题字体，并不是纯黑色，而是灰黑色， 那接下来，我们就要来设置这个字体的颜色。 而要设置这个字体的颜色，我们就需要通过CSS样式来控制 。</p><p>那在HTML的文件中，我们如何来编写CSS样式呢，此时就涉及到CSS的三种引入方式。</p><h5 id="2-3-1-2-1-CSS引入方式"><a href="#2-3-1-2-1-CSS引入方式" class="headerlink" title="2.3.1.2.1 CSS引入方式"></a>2.3.1.2.1 CSS引入方式</h5><p>具体有3种引入方式，语法如下表格所示：</p><table><thead><tr><th>名称</th><th>语法描述</th><th>示例</th></tr></thead><tbody><tr><td>行内样式</td><td>在标签内使用style属性，属性值是css属性键值对</td><td>&lt;h1 style&#x3D;”xxx:xxx;”&gt;中国新闻网&lt;&#x2F;h1&gt;</td></tr><tr><td>内嵌样式</td><td>定义&lt;style&gt;标签，在标签内部定义css样式</td><td>&lt;style&gt; h1 {…} &lt;&#x2F;style&gt;</td></tr><tr><td>外联样式</td><td>定义&lt;link&gt;标签，通过href属性引入外部css文件</td><td>&lt;link rel&#x3D;”stylesheet” href&#x3D;”css&#x2F;news.css”&gt;</td></tr></tbody></table><p>对于上述3种引入方式，企业开发的使用情况如下：</p><ol><li>内联样式会出现大量的代码冗余，不方便后期的维护，所以不常用。</li><li>内部样式，通过定义css选择器，让样式作用于当前页面的指定的标签上。</li><li>外部样式，html和css实现了完全的分离，企业开发常用方式。</li></ol><h5 id="2-3-1-2-2-颜色表示"><a href="#2-3-1-2-2-颜色表示" class="headerlink" title="2.3.1.2.2 颜色表示"></a>2.3.1.2.2 颜色表示</h5><p>在前端程序开发中，颜色的表示方式常见的有如下三种：</p><table><thead><tr><th><strong>表示方式</strong></th><th><strong>表示含义</strong></th><th><strong>取值</strong></th></tr></thead><tbody><tr><td>关键字</td><td>预定义的颜色名</td><td>red、green、blue…</td></tr><tr><td>rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td></tr><tr><td>十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000、#ff0000、#cccccc，简写：#000、#ccc</td></tr></tbody></table><h5 id="2-3-1-2-3-标题字体颜色"><a href="#2-3-1-2-3-标题字体颜色" class="headerlink" title="2.3.1.2.3 标题字体颜色"></a>2.3.1.2.3 标题字体颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 方式二: 内嵌样式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* color: red; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* color: rgb(0, 0, 255); */</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 方式三: 外联样式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/news.css&quot;&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文<br><br>    <span class="hljs-comment">&lt;!-- 方式一: 行内样式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 style=&quot;color: red;&quot;&gt;焦点访谈：中国底气 新思想夯实大国粮仓&lt;/h1&gt; --&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    2023年03月02日 21:50 央视网<br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>备注: 要想拾取某一个网页中的颜色，我们可以借助于浏览器的拾色器插件来完成。【拾色器插件的安装，参照资料中提供的文档即可】</p><h5 id="2-3-1-2-4-CSS选择器"><a href="#2-3-1-2-4-CSS选择器" class="headerlink" title="2.3.1.2.4 CSS选择器"></a>2.3.1.2.4 CSS选择器</h5><p>顾名思义：选择器是选取需设置样式的元素（标签），但是我们根据业务场景不同，选择的标签的需求也是多种多样的，所以选择器有很多种，因为我们是做后台开发的，所以对于css选择器，我们只学习最基本的3种。</p><p><strong>选择器通用语法如下</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器名   &#123;<br>    css样式名：css样式值;<br>    css样式名：css样式值;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要学习的3种选择器是元素选择器，id选择器，class选择器，语法以及作用如下：</p><p><strong>1.元素（标签）选择器：</strong> </p><ul><li>选择器的名字必须是标签的名字</li><li>作用：选择器中的样式会作用于所有同名的标签上</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">元素名称 &#123;<br>    css样式名:css样式值；<br>&#125;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.id选择器:</strong></p><ul><li>选择器的名字前面需要加上#</li><li>作用：选择器中的样式会作用于指定id的标签上，而且有且只有一个标签（由于id是唯一的）</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#id属性值 &#123;</span><br>    css样式名<span class="hljs-symbol">:css</span>样式值；<br>&#125;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#did</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.类选择器：</strong></p><ul><li>选择器的名字前面需要加上 .</li><li>作用：选择器中的样式会作用于所有class的属性值和该名字一样的标签上，可以是多个</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">.<span class="hljs-keyword">class</span>属性值 &#123;<br>    css样式名<span class="hljs-symbol">:css</span>样式值；<br>&#125;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.cls</span>&#123;<br>     <span class="hljs-attribute">color</span>: green;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-1-2-5-发布时间字体颜色"><a href="#2-3-1-2-5-发布时间字体颜色" class="headerlink" title="2.3.1.2.5 发布时间字体颜色"></a>2.3.1.2.5 发布时间字体颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 元素选择器 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* span &#123;</span></span><br><span class="hljs-comment"><span class="language-css">            color: red;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125; */</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 类选择器 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* .cls &#123;</span></span><br><span class="hljs-comment"><span class="language-css">            color: green;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125; */</span></span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-comment">/* ID选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述我们还使用了一个css的属性 font-size , 用来设置字体的大小。 但是需要注意，在设置字体的大小时，单位px不能省略，否则不生效。</p><h4 id="2-3-1-3-超链接"><a href="#2-3-1-3-超链接" class="headerlink" title="2.3.1.3 超链接"></a>2.3.1.3 超链接</h4><ul><li><p>在新浪新闻的标题部分，当我们点击顶部的 “新浪政务”，浏览器将自动在当前窗口访问新浪政务首页这个资源（<a href="http://gov.sina.com.cn/%EF%BC%89">http://gov.sina.com.cn/）</a></p></li><li><p>当我们点击新闻发布时间之后的 “央视网”，浏览器将会自动打开一个新的标签页，然后在新的标签页中访问央视网中的该新闻资源 （<a href="https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml%EF%BC%89">https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml）</a></p></li></ul><p><img src="/assets/a.gif" alt="a"></p><p>那接下来，我们就来完善新闻标题部分的这个功能，那此时呢，我们就需要用到HTML中的超链接的标签 。</p><h5 id="2-3-1-3-1-介绍"><a href="#2-3-1-3-1-介绍" class="headerlink" title="2.3.1.3.1 介绍"></a>2.3.1.3.1 介绍</h5><ul><li>标签: &lt;a href&#x3D;”…” target&#x3D;”…”&gt;央视网</a></li><li>属性:<ul><li>href: 指定资源访问的url</li><li>target: 指定在何处打开资源链接<ul><li>_self: 默认值，在当前页面打开</li><li>_blank: 在空白页面打开</li></ul></li></ul></li></ul><h5 id="2-3-1-3-2-实现"><a href="#2-3-1-3-2-实现" class="headerlink" title="2.3.1.3.2 实现"></a>2.3.1.3.2 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 设置文本为一个标准的文本 , 去除掉 超链接 下面默认的下划线 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开此页面，我们可以看到最终效果（超链接的字体，以及默认的下划线，通过css样式已经调整好了）：</p><p><img src="/assets/image-20230309233408698.png" alt="image-20230309233408698"> </p><h3 id="2-3-2-新浪新闻-正文实现"><a href="#2-3-2-新浪新闻-正文实现" class="headerlink" title="2.3.2 新浪新闻-正文实现"></a>2.3.2 新浪新闻-正文实现</h3><h4 id="2-3-2-1-正文排版"><a href="#2-3-2-1-正文排版" class="headerlink" title="2.3.2.1 正文排版"></a>2.3.2.1 正文排版</h4><h5 id="2-3-2-1-1-分析"><a href="#2-3-2-1-1-分析" class="headerlink" title="2.3.2.1.1 分析"></a>2.3.2.1.1 分析</h5><img src="assets/image-20230310084859695.png" alt="image-20230310084859695" style="zoom:80%;" /> <p>整个正文部分的排版，主要分为这么四个部分：</p><p>1). 视频 (当前这种新闻页面,可能也会存在音频)</p><p>2). 文字段落</p><p>3). 字体加粗</p><p>4). 图片</p><h5 id="2-3-2-1-2-标签"><a href="#2-3-2-1-2-标签" class="headerlink" title="2.3.2.1.2 标签"></a>2.3.2.1.2 标签</h5><p><strong>1). 视频、音频标签</strong></p><ul><li><p>视频标签: &lt;video&gt;</p><ul><li>属性: <ul><li>src: 规定视频的url</li><li>controls: 显示播放控件</li><li>width: 播放器的宽度</li><li>height: 播放器的高度</li></ul></li></ul></li><li><p>音频标签: &lt;audio&gt;</p><ul><li>属性:<ul><li>src: 规定音频的url</li><li>controls: 显示播放控件</li></ul></li></ul></li></ul><p><strong>2). 段落标签</strong></p><ul><li>换行标签: &lt;br&gt;<ul><li>注意: 在HTML页面中,我们在编辑器中通过回车实现的换行, 仅仅在文本编辑器中会看到换行效果, 浏览器是不会解析的, HTML中换行需要通过br标签</li></ul></li></ul><p>​</p><ul><li>段落标签: &lt;p&gt;<ul><li>如: &lt;p&gt; 这是一个段落 &lt;&#x2F;p&gt;</li></ul></li></ul><p><strong>3). 文本格式标签</strong></p><table><thead><tr><th>效果</th><th>标签</th><th>标签(强调)</th></tr></thead><tbody><tr><td>加粗</td><td>b</td><td>strong</td></tr><tr><td>倾斜</td><td>i</td><td>em</td></tr><tr><td>下划线</td><td>u</td><td>ins</td></tr><tr><td>删除线</td><td>s</td><td>del</td></tr></tbody></table><p>前面的标签 b、i、u、s 就仅仅是实现加粗、倾斜、下划线、删除线的效果，是没有强调语义的。 而后面的strong、em、ins、del在实现加粗、倾斜、下划线、删除线的效果的同时，还带有强调语义。</p><h5 id="2-3-2-1-3-实现"><a href="#2-3-2-1-3-实现" class="headerlink" title="2.3.2.1.3 实现"></a>2.3.2.1.3 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 设置文本为一个标准的文本 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35px</span>; <span class="hljs-comment">/* 设置首行缩进 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>; <span class="hljs-comment">/* 设置行高 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#plast</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: right; <span class="hljs-comment">/* 对齐方式 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 标题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 正文 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视频 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/1.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;950px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 音频 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;audio src=&quot;audio/1.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>央视网消息<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/1.jpg&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/2.jpg&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;plast&quot;</span>&gt;</span><br>        责任编辑：王树淼 SN242<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述的正文排版实现中，还用到了几个CSS属性： </p><ul><li>text-indent: 设置段落的首行缩进 </li><li>line-height: 设置行高</li><li>text-align: 设置对齐方式, 可取值为 left &#x2F; center &#x2F; right</li></ul><blockquote><p>注意事项: </p><ul><li><p>在HTML页面中无论输入了多少个空格, 最多只会显示一个。 可以使用空格占位符（&amp;nbsp；）来生成空格，如果需要多个空格，就使用多次占位符。</p></li><li><p>那在HTML中，除了空格占位符以外，还有一些其他的占位符(了解, 只需要知道空格的占位符写法即可)，如下：</p><ul><li><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">占位符</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left">&amp;nbsp;</td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left">&amp;lt;</td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left">&amp;gt;</td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left">&amp;amp;</td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left">&amp;quot;</td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left">&amp;apos;</td></tr></tbody></table></li></ul></li></ul></blockquote><h4 id="2-3-2-2-页面布局"><a href="#2-3-2-2-页面布局" class="headerlink" title="2.3.2.2 页面布局"></a>2.3.2.2 页面布局</h4><p>目前，新闻页面的基本排版，我们都已经完成了，但是，大家会看到，无论是标题部分，还是正文部分，都是铺满了整个浏览器。 而我们再来看看新浪新闻的原始页面，我们会看到新闻网页内容都是居中展示的，左边、右边都是一定的边距的。</p><p><img src="/assets/image-20230310092442972.png" alt="image-20230310092442972"> </p><p>那接下来呢，我们就需要按照这个效果，来完成页面布局。 而要想完成这样一个页面布局，我们就需要介绍一下CSS中的盒子模型 。 </p><h5 id="2-3-2-2-1-盒子模型"><a href="#2-3-2-2-1-盒子模型" class="headerlink" title="2.3.2.2.1 盒子模型"></a>2.3.2.2.1 盒子模型</h5><ul><li><p>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</p></li><li><p>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</p></li></ul><img src="assets/image-20230310092820616.png" alt="image-20230310092820616" style="zoom:80%;" /> <p>CSS盒子模型，其实和日常生活中的包装盒是非常类似的，就比如：</p><img src="assets/image-20230310093247265.png" alt="image-20230310093247265" style="zoom:80%;" /> <p>盒子的大小，其实就包括三个部分： border、padding、content，而margin外边距是不包括在盒子之内的。</p><h5 id="2-3-2-2-2-布局标签"><a href="#2-3-2-2-2-布局标签" class="headerlink" title="2.3.2.2.2 布局标签"></a>2.3.2.2.2 布局标签</h5><ul><li><p>布局标签：实际开发网页中，会大量频繁的使用 div 和 span 这两个没有语义的布局标签。</p></li><li><p>标签：<div> <span></p></li><li><p>特点：</p><ul><li><p>div标签：</p><ul><li><p>一行只显示一个（独占一行）</p></li><li><p>宽度默认是父元素的宽度，高度默认由内容撑开</p></li><li><p>可以设置宽高（width、height）</p></li></ul></li><li><p>span标签：</p><ul><li><p>一行可以显示多个</p></li><li><p>宽度和高度默认由内容撑开</p></li><li><p>不可以设置宽高（width、height）</p></li></ul></li></ul></li></ul><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开后的效果:</p><p>1). div会独占一行，默认宽度为父元素 body 的宽度</p><p><img src="/assets/image-20230310093734941.png" alt="image-20230310093734941">  </p><p>2). span一行会显示多个，用来组合行内元素，默认宽度为内容撑开的宽度</p><p><img src="/assets/image-20230310093827748.png" alt="image-20230310093827748"> </p><h5 id="2-3-2-2-3-盒子模型代码"><a href="#2-3-2-2-3-盒子模型代码" class="headerlink" title="2.3.2.2.3 盒子模型代码"></a>2.3.2.2.3 盒子模型代码</h5><p>代码如下: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>盒子模型<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;  <span class="hljs-comment">/* 宽度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;  <span class="hljs-comment">/* 高度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-comment">/* 指定width height为盒子的高宽 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine; <span class="hljs-comment">/* 背景色 */</span></span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 内边距, 上 右 下 左 , 边距都一行, 可以简写: padding: 20px;*/</span> </span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red; <span class="hljs-comment">/* 边框, 宽度 线条类型 颜色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> <span class="hljs-number">30px</span> <span class="hljs-number">30px</span> <span class="hljs-number">30px</span>; <span class="hljs-comment">/* 外边距, 上 右 下 左 , 边距都一行, 可以简写: margin: 30px; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码编写好了, 可以通过浏览器打开该页面, 通过开发者工具,我们就可以看到盒子的大小, 以及盒子各个组成部分(内容、内边距、边框、外边距)：</p><p><img src="/assets/image-20230310094312355.png" alt="image-20230310094312355"> </p><p>我们也可以，通过浏览器的开发者工具，清晰的看到这个盒子，以及每一个部分的大小：</p><p><img src="/assets/image-20230310094412539.png" alt="image-20230310094412539"> </p><h5 id="2-3-2-2-3-布局实现"><a href="#2-3-2-2-3-布局实现" class="headerlink" title="2.3.2.2.3 布局实现"></a>2.3.2.2.3 布局实现</h5><p>在实现新闻页面的布局时，我们需要做两部操作：</p><ul><li>第一步：需要将body中的新闻标题部分、正文部分使用一个 div 布局标签将其包裹起来，方便通过css设置内容占用的宽度，比如：65%。</li><li>第二步：通过css为该div设置外边距，左右的外边距分别为：17.5%，上下外边距靠边展示即可，为：0%。</li></ul><p>具体的代码实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 设置文本为一个标准的文本 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35px</span>; <span class="hljs-comment">/* 设置首行缩进 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>; <span class="hljs-comment">/* 设置行高 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#plast</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: right; <span class="hljs-comment">/* 对齐方式 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">65%</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* margin: 0% 17.5% 0% 17.5% ; */</span> <span class="hljs-comment">/* 外边距, 上 右 下 左 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 标题 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  &gt; 正文<br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 正文 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 视频 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/1.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;950px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 音频 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;audio src=&quot;audio/1.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>央视网消息<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/1.jpg&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/2.jpg&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;plast&quot;</span>&gt;</span><br>            责任编辑：王树淼 SN242<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开此页面，最终效果如下：</p><p><img src="/assets/image-20230310094732466.png" alt="image-20230310094732466"> </p><h2 id="2-4-表格标签"><a href="#2-4-表格标签" class="headerlink" title="2.4 表格标签"></a>2.4 表格标签</h2><p><strong>场景：</strong>在网页中以表格（行、列）形式整齐展示数据，我们在一些管理类的系统中，会看到数据通常都是以表格的形式呈现出来的，比如：班级表、学生表、课程表、成绩表等等。</p><p><img src="/assets/image-20230309174438491.png" alt="image-20230309174438491"> </p><p><strong>标签：</strong></p><ul><li><p>&lt;table&gt; : 用于定义整个表格, 可以包裹多个 &lt;tr&gt;， 常用属性如下： </p><ul><li>border：规定表格边框的宽度</li><li>width：规定表格的宽度</li><li>cellspacing: 规定单元之间的空间</li></ul></li><li><p>&lt;tr&gt; : 表格的行，可以包裹多个 &lt;td&gt;  </p></li><li><p>&lt;td&gt; : 表格单元格(普通)，可以包裹内容 , 如果是表头单元格，可以替换为 &lt;th&gt;</p></li></ul><p><strong>演示：</strong></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center; <span class="hljs-comment">/* 单元格内容居中展示 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>品牌Logo<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>品牌名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>企业名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/huawei.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>华为<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>华为技术有限公司<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/alibaba.jpg&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>阿里<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>阿里巴巴集团控股有限公司<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开浏览器，效果如下图所示：</p><p><img src="/assets/image-20230309175121361.png" alt="image-20230309175121361"> </p><p>整合表格使用 table 标签包裹 , 其中的每一行数据都是一个 tr , 每一行中的每一个单元格都是一个 td , 而如果是表头单元格, 可以使用 th (具有加粗居中展示的效果)。</p><h2 id="2-5-表单标签"><a href="#2-5-表单标签" class="headerlink" title="2.5 表单标签"></a>2.5 表单标签</h2><h3 id="2-5-1-表单"><a href="#2-5-1-表单" class="headerlink" title="2.5.1 表单"></a>2.5.1 表单</h3><h4 id="2-5-1-1-介绍"><a href="#2-5-1-1-介绍" class="headerlink" title="2.5.1.1 介绍"></a>2.5.1.1 介绍</h4><p>那表单呢,在我们日常的上网的过程中,基本上每天都会遇到。比如，我们经常在访问网站时，出现的登录页面、注册页面、个人信息提交页面，其实都是一个一个的表单 。 当我们在这些表单中录入数据之后，一点击 “提交”，就会将表单中我们填写的数据采集到，并提交， 那其实这个数据呢，一般会提交到服务端，最终保存在数据库中 （后面的课程中会讲到）。</p><p><img src="assets/1668055779440.png" alt="1668055779440" style="zoom:80%;" /> <img src="assets/image-20230309175941128.png" alt="image-20230309175941128" style="zoom:80%;" /> </p><p>那其实，上述的整个窗口是一个表单，而表单是一项一项的，这个我们称为表单项 或 表单元素。</p><ul><li><p>表单场景: 表单就是在网页中负责数据采集功能的，如：注册、登录的表单。 </p></li><li><p>表单标签: &lt;form&gt;</p></li><li><p>表单属性:</p><ul><li>action: 规定表单提交时，向何处发送表单数据，表单提交的URL。</li><li>method: 规定用于发送表单数据的方式，常见为： GET、POST。<ul><li>GET：表单数据是拼接在url后面的， 如： xxxxxxxxxxx?username&#x3D;Tom&amp;age&#x3D;12，url中能携带的表单数据大小是有限制的。</li><li>POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。</li></ul></li></ul></li><li><p>表单项标签: 不同类型的input元素、下拉列表、文本域等。</p><ul><li>input: 定义表单项，通过type属性控制输入形式</li><li>select: 定义下拉列表</li><li>textarea: 定义文本域</li></ul></li></ul><h4 id="2-5-1-2-演示"><a href="#2-5-1-2-演示" class="headerlink" title="2.5.1.2 演示"></a>2.5.1.2 演示</h4><p>1). GET方式提交的表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    form表单属性: </span><br><span class="hljs-comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span><br><span class="hljs-comment">        method: 表单的提交方式 .</span><br><span class="hljs-comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span><br><span class="hljs-comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span><br><span class="hljs-comment">    --&gt;</span>   <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表单编写完毕之后，通过浏览器打开此表单，然后再表单项中录入值之后，点击提交，我们会看到表单的数据在url后面提交到服务端，格式为：?username&#x3D;Tom&amp;age&#x3D;12。</p><img src="assets/image-20230309191725329.png" alt="image-20230309191725329" style="zoom:80%;" /> <p>2). POST方式提交表单</p><p>将上述的表单提交方式由get，改为post</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    form表单属性: </span><br><span class="hljs-comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span><br><span class="hljs-comment">        method: 表单的提交方式 .</span><br><span class="hljs-comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span><br><span class="hljs-comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span><br><span class="hljs-comment">    --&gt;</span>   <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表单编写完毕之后，通过浏览器打开此表单，然后再表单项中录入值之后，点击提交，我们会看到表单的数据在url后面提交到服务端，格式为：?username&#x3D;Tom&amp;age&#x3D;12。</p><p><img src="/assets/image-20230309192625939.png" alt="image-20230309192625939"> </p><h4 id="2-5-1-3-注意事项"><a href="#2-5-1-3-注意事项" class="headerlink" title="2.5.1.3 注意事项"></a>2.5.1.3 注意事项</h4><p>表单中的所有表单项，要想能够正常的采集数据，在提交的时候能提交到服务端，表单项必须指定name属性。 否则，无法提交该表单项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-2-表单项"><a href="#2-5-2-表单项" class="headerlink" title="2.5.2 表单项"></a>2.5.2 表单项</h3><h4 id="2-5-2-1-介绍"><a href="#2-5-2-1-介绍" class="headerlink" title="2.5.2.1 介绍"></a>2.5.2.1 介绍</h4><p>在一个表单中，可以存在很多的表单项，而虽然表单项的形式各式各样，但是表单项的标签其实就只有三个，分别是：</p><ul><li><p>&lt;input&gt;: 表单项 , 通过type属性控制输入形式。</p><table><thead><tr><th>type取值</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>text</td><td>默认值，定义单行的输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>date&#x2F;time&#x2F;datetime-local</td><td>定义日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td>number</td><td>定义数字输入框</td></tr><tr><td>email</td><td>定义邮件输入框</td></tr><tr><td>hidden</td><td>定义隐藏域</td></tr><tr><td>submit &#x2F; reset &#x2F; button</td><td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td></tr></tbody></table></li><li><p>&lt;select&gt;: 定义下拉列表, &lt;option&gt; 定义列表项</p></li><li><p>&lt;textarea&gt;: 文本域</p></li></ul><h4 id="2-5-2-2-演示"><a href="#2-5-2-2-演示" class="headerlink" title="2.5.2.2 演示"></a>2.5.2.2 演示</h4><p>创建一个新的表单项的html文件，具体内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表单项标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- value: 表单项提交的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>     姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>     性别: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 男<br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 女 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     爱好: <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span> java <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span> game <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span> sing <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     图像: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     生日: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birthday&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     时间: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     日期时间: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime-local&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;datetime&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     邮箱: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     学历: <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;degree&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>----------- 请选择 -----------<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>大专<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>本科<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>硕士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>博士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     描述: <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br> <br>     <span class="hljs-comment">&lt;!-- 表单常见按钮 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span>   <br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过浏览器打开上述的表单项html文件，最终展示出的表单信息如下：</p><p><img src="/assets/image-20230309221308252.png" alt="image-20230309221308252"> </p><p>而对于input type&#x3D;”hidden”，是一个隐藏域，在表单中并不会显示出来，但是在提交表单的时候，是会提交到服务端的。 接下来，我们就点击提交按钮，来提交当前表单，看看提交的数据：</p><p><img src="/assets/image-20230309221530214.png" alt="image-20230309221530214"> </p><h1 id="3-文档查阅"><a href="#3-文档查阅" class="headerlink" title="3. 文档查阅"></a>3. 文档查阅</h1><p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p><h2 id="3-1-HTML文档查阅"><a href="#3-1-HTML文档查阅" class="headerlink" title="3.1 HTML文档查阅"></a>3.1 HTML文档查阅</h2><p>以video标签为例:</p><p><img src="/assets/html.gif" alt="html"></p><h2 id="3-2-CSS文档查阅"><a href="#3-2-CSS文档查阅" class="headerlink" title="3.2 CSS文档查阅"></a>3.2 CSS文档查阅</h2><p>以padding属性为例:</p><p><img src="/assets/css.gif" alt="css"> </p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26Web开发介绍</title>
    <link href="/2023/12/06/day26-SpringBootWeb-%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/12/06/day26-SpringBootWeb-%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="26-Web开发介绍"><a href="#26-Web开发介绍" class="headerlink" title="26-Web开发介绍"></a>26-Web开发介绍</h1><h1 id="1-什么是web开发"><a href="#1-什么是web开发" class="headerlink" title="1 什么是web开发"></a>1 什么是web开发</h1><p><strong>Web</strong>：全球广域网，也称为<strong>万维网</strong>(www <strong>W</strong>orld <strong>W</strong>ide <strong>W</strong>eb)，能够通过浏览器访问的<strong>网站</strong>。</p><p>所以<strong>Web开发</strong>说白了，就是<strong>开发网站</strong>的，例如下图所示的网站：<strong>淘宝</strong>，<strong>京东</strong>等等</p><p><img src="/assets/1667546541068.png" alt="1667546541068"></p><p>那么我们知道了web开发是开发网站的，那么我们需要学习哪些知识呢？以及这些知识在我们整个网站开发中占据什么位置呢？对于这些问题，我们就必须知道网站整体的工作流程。</p><h1 id="2-网站的工作流程"><a href="#2-网站的工作流程" class="headerlink" title="2 网站的工作流程"></a>2 网站的工作流程</h1><p>接下来我们先来看看网站的工作流程，这样才能在我们的脑海中构建初步的知识架构体系。</p><p>1.首先我们需要通过<strong>浏览器</strong>访问发布到<strong>前端服务器</strong>中的<strong>前端程序</strong>，这时候前端程序会将前端代码返回给浏览器。如下图所示：</p><p><img src="/assets/1667546920773.png" alt="1667546920773"></p><p>2.浏览器得到前端代码，此时浏览器会将前端代码进行解析，然后展示到浏览器的窗口中，这时候我们就看到了<strong>网站</strong>的<strong>页面</strong>，如下图所示：</p><p><img src="/assets/1667547421140.png" alt="1667547421140"></p><p>3.但是此时这个页面是没有数据的，因为数据在我们的数据库中，所以我们浏览器需要根据<strong>前端代码中指定的后台服务器的地址</strong> 向 我们的<strong>后台服务器</strong>（内部有java程序）发起<strong>请求</strong>，后台服务器再去从<strong>数据库</strong>中获取数据，然后返回给浏览器。</p><p><img src="/assets/1667547561387.png" alt="1667547561387"></p><p>4.浏览器拿到后台返回的数据后，然后将数据展示在前端资源也就是<strong>网页</strong>上，然后我们就看到了如下图所示的完整的内容</p><p><img src="/assets/1667547604517.png" alt="1667547604517"></p><p><strong>整个流程如下：</strong></p><p>1.浏览器先向前端服务器请求<strong>前端资源</strong>，也就是我们所说的<strong>网页</strong></p><p>2.浏览器再向<strong>后台服务器</strong>发起请求，获取<strong>数据</strong></p><p>3.浏览器将得到的后台<strong>数据</strong>填充到<strong>网页</strong>上，然后展示给用户去看</p><h1 id="3-网站的开发模式"><a href="#3-网站的开发模式" class="headerlink" title="3 网站的开发模式"></a>3 网站的开发模式</h1><p>接下来我们来聊聊网站的开发模式，主要有2种：前端台分离和混合开发</p><p><strong>前后台分离</strong>：（<strong>目前企业开发的主流，</strong>市场占有率70%以上）这种开发模式的特点如下</p><ul><li><p>前端人员开发前端程序，前端程序单独部署到前端服务器上</p></li><li><p>后端人员开开发后端程序，后端程序单独部署到后端服务器上</p></li></ul><p><img src="/assets/1667548530745.png" alt="1667548530745"></p><p><strong>混合开发：</strong>（早期的开发技术，目前慢慢退出市场），这种开发模式的特点是：前端人员开发的代码和后端人员开发的代码在同一个项目中，一起打包部署。</p><p><img src="/assets/1667548590602.png" alt="1667548590602"></p><h1 id="4-网站的开发技术"><a href="#4-网站的开发技术" class="headerlink" title="4 网站的开发技术"></a>4 网站的开发技术</h1><p>最后我们来看看web阶段需要学习哪些技术呢？如下图我们列举了课程中需要学习的知识点</p><p><img src="/assets/1667548969631.png" alt="1667548969631"></p><p>以下是图表的方式整理了我们web阶段要学习的技术和其对应的作用</p><p>前端web开发：</p><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td>HTML</td><td>用于构建网站的基础结构的</td></tr><tr><td>css</td><td>用于美化页面的，作用和化妆或者整容作用一样</td></tr><tr><td>JavaScript</td><td>实现网页和用户的交互</td></tr><tr><td>Vue</td><td>主要用于将数据填充到html页面上的</td></tr><tr><td>Element</td><td>主要提供了一些非常美观的组件</td></tr><tr><td>Nginx</td><td>一款web服务器软件，可以用于部署我们的前端工程</td></tr></tbody></table><p>后端web开发：</p><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td>Maven</td><td>一款java中用于管理项目的软件</td></tr><tr><td>Mysql</td><td>最常用的一款数据库软件之一</td></tr><tr><td>SpringBoot</td><td>spring家族的产品，当前最为主流的项目开发技术。</td></tr><tr><td>Mybatis</td><td>用于操作数据库的框架</td></tr></tbody></table><p>所以只有我们学完上述的技术，我们才能开发出一个麻雀虽小，五脏俱全的网站。</p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22网络编程</title>
    <link href="/2023/12/06/day22-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/12/06/day22-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="day22-网络编程"><a href="#day22-网络编程" class="headerlink" title="day22-网络编程"></a>day22-网络编程</h1><h2 id="一、网络编程概述"><a href="#一、网络编程概述" class="headerlink" title="一、网络编程概述"></a>一、网络编程概述</h2><p>同学们，今天我们学习的课程内容叫网络编程。意思就是编写的应用程序可以与网络上其他设备中的应用程序进行数据交互。</p><p>网络编程有什么用呢？这个就不言而喻了，比如我们经常用的微信收发消息就需要用到网络通信的技术、在比如我们打开浏览器可以浏览各种网络、视频等也需要用到网络编程的技术。</p><p>我们知道什么是网络编程、也知道网络编程能干什么后了，那Java给我们提供了哪些网络编程的解决方案呢？</p><p>Java提供的网络编程的解决方案都是在java.net包下。在正式学习Java网络编程技术之前，我们还需要学习一些网络通信的前置知识理论知识，只有这些前置知识做基础，我们学习网络编程代码编写才起来才能继续下去。</p><p>首先和同学们聊聊网络通信的基本架构。通信的基本架构主要有两种形式：一种是CS架构（Client 客户端&#x2F;Server服务端）、一种是BS架构（Brower 浏览器&#x2F;Server服务端）。</p><ul><li><strong>CS架构的特点：</strong>CS架构需要用户在自己的电脑或者手机上安装客户端软件，然后由客户端软件通过网络连接服务器程序，由服务器把数据发给客户端，客户端就可以在页面上看到各种数据了。</li></ul><p><img src="/assets/1668262460269.png" alt="1668262460269"></p><ul><li><p><strong>BS架构的特点：</strong>BS架构不需要开发客户端软件，用户只需要通过浏览器输入网址就可以直接从服务器获取数据，并由服务器将数据返回给浏览器，用户在页面上就可以看到各种数据了。</p><p><img src="/assets/1668262589242.png" alt="1668262589242"></p></li></ul><p>这两种结构不管是CS、还是BS都是需要用到网络编程的相关技术。我们学习Java的程序员，以后从事的工作方向主要还是BS架构的。</p><h2 id="二、网络编程三要素"><a href="#二、网络编程三要素" class="headerlink" title="二、网络编程三要素"></a>二、网络编程三要素</h2><p>各位小伙伴，我们前面已经知道什么是网络编程了。接下来我们还需要学习一些网络编程的基本概念，才能去编写网络编程的应用程序。</p><p>有哪三要素呢？分别是IP地址、端口号、通信协议</p><p><img src="/assets/1668262831222.png" alt="1668262831222"></p><ol><li><p>IP地址：表示设备在网络中的地址，是网络中设备的唯一标识</p></li><li><p>端口号：应用程序在设备中唯一的标识</p></li><li><p>协议：连接和数据在网络中传输的规则。</p></li></ol><p>如下图所示：假设现在要从一台电脑中的微信上，发一句“你愁啥？”到其他电脑的微信上，流程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先通过ip地址找到对方的电脑<br><span class="hljs-number">2.</span>再通过端口号找到对方的电脑上的应用程序<br><span class="hljs-number">3.</span>按照双方约定好的规则发送、接收数据<br></code></pre></td></tr></table></figure><p><img src="/assets/1668263019076.png" alt="1668263019076"></p><h3 id="2-1-IP地址"><a href="#2-1-IP地址" class="headerlink" title="2.1 IP地址"></a>2.1 IP地址</h3><p>接下来，我们详细介绍一下IP地址。<strong>IP（Ineternet Protocol）全称互联网协议地址，是分配给网络设备的唯一表示。</strong>IP地址分为：IPV4地址、IPV6地址</p><p>IPV4地址由32个比特位（4个字节）组成，如果下图所示，但是由于采用二进制太不容易阅读了，于是就将每8位看成一组，把每一组用十进制表示（叫做点分十进制表示法）。所以就有了我们经常看到的IP地址形式，如：192.168.1.66</p><p><img src="/assets/1668263179793.png" alt="1668263179793"></p><p>如果想查看本机的IP地址，可以在命令行窗口，输入<code>ipconfig</code>命令查看，如下图所示</p><p><img src="/assets/1668263481919.png" alt="1668263481919"></p><p>经过不断的发展，现在越来越多的设备需要联网，IPV4地址已经不够用了，所以扩展出来了IPV6地址。</p><p>IPV6采用128位二进制数据来表示（16个字节），号称可以为地球上的每一粒沙子编一个IP地址，</p><p>IPV6比较长，为了方便阅读，每16位编成一组，每组采用十六进制数据表示，然后用冒号隔开（称为冒分十六进制表示法），如下图所示</p><p><img src="/assets/1668263759999.png" alt="1668263759999"></p><p>我们在命令行窗口输入<code>ipconfig</code>命令，同样可以看到ipv6地址，如下图所示</p><p><img src="/assets/1668263881709.png" alt="1668263881709"></p><p>现在的网络设备，一般IPV4和IPV6地址都是支持的。</p><hr><p>聊完什么是IP地址和IP地址分类之后，接下来再给大家介绍一下和IP地址相关的一个东西，叫做域名。</p><p>我们在浏览器上访问某一个网站是，就需要在浏览器的地址栏输入网址，这个网址的专业说法叫做域名。比如：传智播客的域名是<code>http://www.itcast.cn</code>。</p><p>域名和IP其实是一一对应的，由运营商来管理域名和IP的对应关系。我们在浏览器上敲一个域名时，首先由运营商的域名解析服务，把域名转换为ip地址，再通过IP地址去访问对应的服务器设备。</p><p><img src="/assets/1668264280209.png" alt="1668264280209"></p><p>关于IP地址，还有一个特殊的地址需要我们记住一下。就是我们在学习阶段进行测试时，经常会自己给自己消息，需要用到一个本地回送地址：<code>127.0.0.1</code></p><p>最后给同学们介绍，两个和IP地址相关的命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ipconfig: 查看本机的ip地址<br>pring 域名/ip  检测当前电脑与指定的ip是否连通<br></code></pre></td></tr></table></figure><p>ping命令出现以下的提示，说明网络是通过的</p><p><img src="/assets/1668264499362.png" alt="1668264499362"></p><h3 id="2-2-InetAddress类"><a href="#2-2-InetAddress类" class="headerlink" title="2.2 InetAddress类"></a>2.2 InetAddress类</h3><p>各位小伙伴，在上一节课我们学习了网络编程的三要素之一，IP地址。按照面向对象的设计思想，Java中也有一个类用来表IP地址，这个类是InetAddress类。我们在开发网络通信程序的时候，可能有时候会获取本机的IP地址，以及测试与其他地址是否连通，这个时候就可以使用InetAddress类来完成。下面学习几个InetAddress的方法。</p><p><img src="/assets/1668265337659.png" alt="1668265337659"></p><p>演示上面几个方法的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InetAddressTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、获取本机IP地址对象的</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip1</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>        System.out.println(ip1.getHostName());<br>        System.out.println(ip1.getHostAddress());<br><br>        <span class="hljs-comment">// 2、获取指定IP或者域名的IP地址对象。</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip2</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        System.out.println(ip2.getHostName());<br>        System.out.println(ip2.getHostAddress());<br><br>        <span class="hljs-comment">// ping www.baidu.com</span><br>        System.out.println(ip2.isReachable(<span class="hljs-number">6000</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-端口号"><a href="#2-3-端口号" class="headerlink" title="2.3 端口号"></a>2.3 端口号</h3><p>端口号：指的是计算机设备上运行的应用程序的标识，被规定为一个16位的二进制数据，范围（0~65535）</p><p>端口号分为一下几类（了解一下）</p><ul><li>周知端口：0~1023，被预先定义的知名应用程序占用（如：HTTP占用80，FTP占用21）</li><li>注册端口：1024~49151，分配给用户经常或者某些应用程序</li><li>动态端口：49152~65536，之所以称为动态端口，是因为它一般不固定分配给某进程，而是动态分配的。</li></ul><p>需要我们注意的是，同一个计算机设备中，不能出现两个应用程序，用同一个端口号</p><p><img src="/assets/1668267533206.png" alt="1668267533206"></p><h3 id="2-4-协议"><a href="#2-4-协议" class="headerlink" title="2.4 协议"></a>2.4 协议</h3><p>各位同学，前面我们已经学习了IP地址和端口号，但是想要完成数据通信还需要有通信协议。</p><p><strong>网络上通信的设备，事先规定的连接规则，以及传输数据的规则被称为网络通信协议。</strong></p><p><img src="/assets/1668267760295.png" alt="1668267760295"></p><p>为了让世界上各种上网设备能够互联互通，肯定需要有一个组织出来，指定一个规则，大家都遵守这个规则，才能进行数据通信。</p><p><img src="/assets/1668267891624.png" alt="1668267891624"></p><p>只要按照OSI网络参考模型制造的设备，就可以在国际互联网上互联互通。其中传输层有两个协议，是我们今天会接触到的（UDP协议、TCP协议）</p><ul><li><strong>UDP协议特点</strong></li></ul><p><img src="/assets/1668268046104.png" alt="1668268046104"></p><ul><li><strong>TPC协议特点</strong></li></ul><p><img src="/assets/1668268144938.png" alt="1668268144938"></p><p>三次握手如下图所示<strong>：目的是确认通信双方，手法消息都是正常没问题的</strong></p><p><img src="/assets/1668268174867.png" alt="1668268174867"></p><p>四次挥手如下图所示：<strong>目的是确保双方数据的收发已经完成，没有数据丢失</strong></p><p><img src="/assets/1668268230804.png" alt="1668268230804"></p><h2 id="三、UDP通信代码（入门案例）"><a href="#三、UDP通信代码（入门案例）" class="headerlink" title="三、UDP通信代码（入门案例）"></a>三、UDP通信代码（入门案例）</h2><p>有了网络编程的三要素基础知识之后，我们就可以开始学习编写网络通信的程序了。首先学习基于UDP协议通信的代码编写。</p><p>UDP是面向无连接的、不需要确认双方是否存在，所以它是不可靠的协议。Java提供了一个类叫DatagramSocket来完成基于UDP协议的收发数据。使用DatagramSocket收发数据时，数据要以数据包的形式体现，一个数据包限制在64KB以内</p><p>具体流程如下图所示：假设我们把DatagramSocket看做是街道两天的人，现在左边的人要扔一盘韭菜到右边，这里的韭菜就是数据，但是数据需要用一个盘子装起来，这里的盘子就是DatagramPacket数据包的意思。通信双方都需要有DatagramSocket(扔、接韭菜人)，还需要有DatagramPacket(装韭菜的盘子)</p><p><img src="/assets/1668268587965.png" alt="1668268587965"></p><p>下面我们看一个案例，需要有两个程序，一个表示客户端程序，一个表示服务端程序。</p><p>需求：客户端程序发一个字符串数据给服务端，服务端程序接收数据并打印。</p><h3 id="3-1-客户端程序"><a href="#3-1-客户端程序" class="headerlink" title="3.1 客户端程序"></a>3.1 客户端程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：完成UDP通信快速入门：实现1发1收。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建客户端对象（发韭菜出去的人）</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">7777</span>);<br><br>        <span class="hljs-comment">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span><br>       <span class="hljs-comment">/* public DatagramPacket(byte buf[], int length,</span><br><span class="hljs-comment">             InetAddress address, int port)</span><br><span class="hljs-comment">               参数一：封装要发出去的数据。</span><br><span class="hljs-comment">               参数二：发送出去的数据大小（字节个数）</span><br><span class="hljs-comment">               参数三：服务端的IP地址（找到服务端主机）</span><br><span class="hljs-comment">               参数四：服务端程序的端口。</span><br><span class="hljs-comment">             */</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;我是快乐的客户端，我爱你abc&quot;</span>.getBytes();<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length<br>                , InetAddress.getLocalHost(),  <span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">// 3、开始正式发送这个数据包的数据出去了</span><br>        socket.send(packet);<br><br>        System.out.println(<span class="hljs-string">&quot;客户端数据发送完毕~~~&quot;</span>);<br>        socket.close(); <span class="hljs-comment">// 释放资源！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-服务端程序"><a href="#3-2-服务端程序" class="headerlink" title="3.2 服务端程序"></a>3.2 服务端程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;----服务端启动----&quot;</span>);<br>        <span class="hljs-comment">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">64</span>]; <span class="hljs-comment">// 64KB.</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buffer, buffer.length);<br><br>        <span class="hljs-comment">// 3、开始正式使用数据包来接收客户端发来的数据</span><br>        socket.receive(packet);<br><br>        <span class="hljs-comment">// 4、从字节数组中，把接收到的数据直接打印出来</span><br>        <span class="hljs-comment">// 接收多少就倒出多少</span><br>        <span class="hljs-comment">// 获取本次数据包接收了多少数据。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span> , len);<br>        System.out.println(rs);<br><br>        System.out.println(packet.getAddress().getHostAddress());<br>        System.out.println(packet.getPort());<br><br>        socket.close(); <span class="hljs-comment">// 释放资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、UDP通信代码（多发多收）"><a href="#四、UDP通信代码（多发多收）" class="headerlink" title="四、UDP通信代码（多发多收）"></a>四、UDP通信代码（多发多收）</h2><p>刚才的案例，我们只能客户端发一次，服务端接收一次就结束了。下面我们想把这个代码改进一下，</p><p>需求：实现客户端不断的发数据，而服务端能不断的接收数据，客户端发送exit时客户端程序退出。</p><h3 id="4-1-客户端程序"><a href="#4-1-客户端程序" class="headerlink" title="4.1 客户端程序"></a>4.1 客户端程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：完成UDP通信快速入门：实现客户端反复的发。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建客户端对象（发韭菜出去的人）</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br>        <span class="hljs-comment">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span><br>       <span class="hljs-comment">/* public DatagramPacket(byte buf[], int length,</span><br><span class="hljs-comment">             InetAddress address, int port)</span><br><span class="hljs-comment">               参数一：封装要发出去的数据。</span><br><span class="hljs-comment">               参数二：发送出去的数据大小（字节个数）</span><br><span class="hljs-comment">               参数三：服务端的IP地址（找到服务端主机）</span><br><span class="hljs-comment">               参数四：服务端程序的端口。</span><br><span class="hljs-comment">             */</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-comment">// 一旦发现用户输入的exit命令，就退出客户端</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;欢迎下次光临！退出成功！&quot;</span>);<br>                socket.close(); <span class="hljs-comment">// 释放资源</span><br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出死循环</span><br>            &#125;<br><br>            <span class="hljs-type">byte</span>[] bytes = msg.getBytes();<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length<br>                    , InetAddress.getLocalHost(),  <span class="hljs-number">6666</span>);<br><br>            <span class="hljs-comment">// 3、开始正式发送这个数据包的数据出去了</span><br>            socket.send(packet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-服务端程序"><a href="#4-2-服务端程序" class="headerlink" title="4.2 服务端程序"></a>4.2 服务端程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：完成UDP通信快速入门-服务端反复的收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;----服务端启动----&quot;</span>);<br>        <span class="hljs-comment">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">64</span>]; <span class="hljs-comment">// 64KB.</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buffer, buffer.length);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 3、开始正式使用数据包来接收客户端发来的数据</span><br>            socket.receive(packet);<br><br>            <span class="hljs-comment">// 4、从字节数组中，把接收到的数据直接打印出来</span><br>            <span class="hljs-comment">// 接收多少就倒出多少</span><br>            <span class="hljs-comment">// 获取本次数据包接收了多少数据。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span> , len);<br>            System.out.println(rs);<br><br>            System.out.println(packet.getAddress().getHostAddress());<br>            System.out.println(packet.getPort());<br>            System.out.println(<span class="hljs-string">&quot;--------------------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、TCP通信（一发一收）"><a href="#五、TCP通信（一发一收）" class="headerlink" title="五、TCP通信（一发一收）"></a>五、TCP通信（一发一收）</h2><p>学习完UDP通信的代码编写之后，接下来我们学习TCP通信的代码如何编写。Java提供了一个java.net.Socket类来完成TCP通信。</p><p>我们先讲一下Socket完成TCP通信的流程，再讲代码怎么编写就很好理解了。如下图所示</p><ol><li>当创建Socket对象时，就会在客户端和服务端创建一个数据通信的管道，在客户端和服务端两边都会有一个Socket对象来访问这个通信管道。</li><li>现在假设客户端要发送一个“在一起”给服务端，客户端这边先需要通过Socket对象获取到一个字节输出流，通过字节输出流写数据到服务端</li><li>然后服务端这边通过Socket对象可以获取字节输入流，通过字节输入流就可以读取客户端写过来的数据，并对数据进行处理。</li><li>服务端处理完数据之后，假设需要把“没感觉”发给客户端端，那么服务端这边再通过Socket获取到一个字节输出流，将数据写给客户端</li><li>客户端这边再获取输入流，通过字节输入流来读取服务端写过来的数据。</li></ol><p><img src="/assets/1668270124031.png" alt="1668270124031"></p><h3 id="5-1-TCP客户端"><a href="#5-1-TCP客户端" class="headerlink" title="5.1 TCP客户端"></a>5.1 TCP客户端</h3><p>下面我们写一个客户端，用来往服务端发数据。由于原始的字节流不是很好用，这里根据我的经验，我原始的OutputStream包装为DataOutputStream是比较好用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：完成TCP通信快速入门-客户端开发：实现1发1收。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建Socket对象，并同时请求与服务端程序的连接。</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">// 3、把低级的字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-comment">// 4、开始写数据出去了</span><br>        dos.writeUTF(<span class="hljs-string">&quot;在一起，好吗？&quot;</span>);<br>        dos.close();<br><br>        socket.close(); <span class="hljs-comment">// 释放连接资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-TCP服务端"><a href="#5-2-TCP服务端" class="headerlink" title="5.2 TCP服务端"></a>5.2 TCP服务端</h3><p>上面我们只是写了TCP客户端，还没有服务端，接下来我们把服务端写一下。这里的服务端用来接收客户端发过来的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：完成TCP通信快速入门-服务端开发：实现1发1收。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----服务端启动成功-------&quot;</span>);<br>        <span class="hljs-comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">// 3、从socket通信管道中得到一个字节输入流。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">// 4、把原始的字节输入流包装成数据输入流</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br><br>        <span class="hljs-comment">// 5、使用数据输入流读取客户端发送过来的消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dis.readUTF();<br>        System.out.println(rs);<br>        <span class="hljs-comment">// 其实我们也可以获取客户端的IP地址</span><br>        System.out.println(socket.getRemoteSocketAddress());<br><br>        dis.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、TCP通信（多发多收）"><a href="#六、TCP通信（多发多收）" class="headerlink" title="六、TCP通信（多发多收）"></a>六、TCP通信（多发多收）</h2><p>到目前为止，我们已经完成了客户端发送消息、服务端接收消息，但是客户端只能发一次，服务端只能接收一次。现在我想要客户端能过一直发消息，服务端能够一直接收消息。</p><p>下面我们把客户端代码改写一下，采用键盘录入的方式发消息，为了让客户端能够一直发，我们只需要将发送消息的代码套一层循环就可以了，当用户输入exit时，客户端退出循环并结束客户端。</p><h3 id="6-1-TCP客户端"><a href="#6-1-TCP客户端" class="headerlink" title="6.1 TCP客户端"></a>6.1 TCP客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：完成TCP通信快速入门-客户端开发：实现客户端可以反复的发消息出去</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建Socket对象，并同时请求与服务端程序的连接。</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">// 3、把低级的字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-comment">// 一旦用户输入了exit，就退出客户端程序</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;欢迎您下次光临！退出成功！&quot;</span>);<br>                dos.close();<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4、开始写数据出去了</span><br>            dos.writeUTF(msg);<br>            dos.flush();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-TCP服务端"><a href="#6-2-TCP服务端" class="headerlink" title="6.2 TCP服务端"></a>6.2 TCP服务端</h3><p>为了让服务端能够一直接收客户端发过来的消息，服务端代码也得改写一下。我们只需要将读取数据的代码加一个循环就可以了。</p><p>但是需要我们注意的时，如果客户端Socket退出之后，就表示连接客户端与服务端的数据通道被关闭了，这时服务端就会出现异常。服务端可以通过出异常来判断客户端下线了，所以可以用try…catch把读取客户端数据的代码套一起来，catch捕获到异常后，打印客户端下线。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：完成TCP通信快速入门-服务端开发：实现服务端反复发消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----服务端启动成功-------&quot;</span>);<br>        <span class="hljs-comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">// 3、从socket通信管道中得到一个字节输入流。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">// 4、把原始的字节输入流包装成数据输入流</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 5、使用数据输入流读取客户端发送过来的消息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                System.out.println(rs);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;离线了！&quot;</span>);<br>                dis.close();<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、TCP通信（多线程改进）"><a href="#七、TCP通信（多线程改进）" class="headerlink" title="七、TCP通信（多线程改进）"></a>七、TCP通信（多线程改进）</h2><p>上一个案例中我们写的服务端程序只能和一个客户端通信，如果有多个客户端连接服务端，此时服务端是不支持的。</p><p>为了让服务端能够支持多个客户端通信，就需要用到多线程技术。具体的实现思路如下图所示：每当有一个客户端连接服务端，在服务端这边就为Socket开启一条线程取执行读取数据的操作，来多少个客户端，就有多少条线程。按照这样的设计，服务端就可以支持多个客户端连接了。</p><p><img src="/assets/1668315156739.png" alt="1668315156739"></p><p>按照上面的思路，改写服务端代码。</p><h3 id="7-1-多线程改进"><a href="#7-1-多线程改进" class="headerlink" title="7.1 多线程改进"></a>7.1 多线程改进</h3><p>首先，我们需要写一个服务端的读取数据的线程类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(msg);<br><br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;有人下线了：&quot;</span> + socket.getRemoteSocketAddress());<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，再改写服务端的主程序代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：完成TCP通信快速入门-服务端开发：要求实现与多个客户端同时通信。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----服务端启动成功-------&quot;</span>);<br>        <span class="hljs-comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>            System.out.println(<span class="hljs-string">&quot;有人上线了：&quot;</span> + socket.getRemoteSocketAddress());<br><br>            <span class="hljs-comment">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-案例拓展（群聊）"><a href="#7-2-案例拓展（群聊）" class="headerlink" title="7.2 案例拓展（群聊）"></a>7.2 案例拓展（群聊）</h3><p>接着前面的案例，下面我们案例再次拓展一下，这个并不需要同学们必须掌握，主要是为了锻炼同学们的编程能力、和编程思维。</p><p>我们想把刚才的案例，改进成全能够实现群聊的效果，就是一个客户端发的消息，其他的每一个客户端都可以收到。</p><p>刚才我们写的多个客户端可以往服务端发现消息，但是客户端和客户端是不能直接通信的。想要试下全群聊的效果，我们还是必须要有服务端在中间做中转。 具体实现方案如下图所示：</p><p>我们可以在服务端创建一个存储Socket的集合，每当一个客户端连接服务端，就可以把客户端Socket存储起来；当一个客户端给服务端发消息时，再遍历集合通过每个Socket将消息再转发给其他客户端。</p><p><img src="/assets/1668315820569.png" alt="1668315820569"></p><p>下面我们改造服务端代码，由于服务端读取数据是在线程类中完成的，所以我们改<code>SerReaderThread</code>类就可以了。服务端的主程序不用改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(msg);<br>                    <span class="hljs-comment">// 把这个消息分发给全部客户端进行接收。</span><br>                    sendMsgToAll(msg);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;有人下线了：&quot;</span> + socket.getRemoteSocketAddress());<br>                    Server.onLineSockets.remove(socket);<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgToAll</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 发送给全部在线的socket管道接收。</span><br>        <span class="hljs-keyword">for</span> (Socket onLineSocket : Server.onLineSockets) &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> onLineSocket.getOutputStream();<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>            dos.writeUTF(msg);<br>            dos.flush();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、BS架构程序（简易版）"><a href="#八、BS架构程序（简易版）" class="headerlink" title="八、BS架构程序（简易版）"></a>八、BS架构程序（简易版）</h2><p>前面我们所写的代码都是基于CS架构的。我们说网络编程还可以编写BS架构的程序，为了让同学们体验一下BS架构通信，这里我们写一个简易版的程序。仅仅只是体验下一，后期我们会详细学习BS架构的程序如何编写。</p><p>BS架构程序的实现原理，如下图所示：不需要开发客户端程序，此时浏览器就相当于是客户端，此时我们只需要写服务端程序就可以了。</p><p><img src="/assets/1668316417640.png" alt="1668316417640"></p><p>在BS结构的程序中，浏览器和服务器通信是基于HTTP协议来完成的，浏览器给客户端发送数据需要按照HTTP协议规定好的数据格式发给服务端，服务端返回数据时也需要按照HTTP协议规定好的数据给是发给浏览器，只有这两双方才能完成一次数据交互。</p><p>客户端程序不需要我们编写（浏览器就是），所以我们只需要写服务端就可以了。</p><p>服务端给客户端响应数据的数据格式（HTTP协议规定数据格式）如下图所示：左图是数据格式，右图是示例。</p><p><img src="/assets/1668316630797.png" alt="1668316630797"></p><p>接下来，我们写一个服务端程序按照右图示例的样子，给浏览器返回数据。<strong>注意：数据是由多行组成的，必须按照规定的格式来写。</strong></p><h3 id="8-1-服务端程序"><a href="#8-1-服务端程序" class="headerlink" title="8.1 服务端程序"></a>8.1 服务端程序</h3><p>先写一个线程类，用于按照HTTP协议的格式返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//  立即响应一个网页内容：“黑马程序员”给浏览器展示。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);<br>            ps.println(); <span class="hljs-comment">// 必须换行</span><br>            ps.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;黑马程序员666&lt;div&gt;&quot;</span>);<br>            ps.close();<br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再写服务端的主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：完成TCP通信快速入门-服务端开发：要求实现与多个客户端同时通信。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----服务端启动成功-------&quot;</span>);<br>        <span class="hljs-comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>            System.out.println(<span class="hljs-string">&quot;有人上线了：&quot;</span> + socket.getRemoteSocketAddress());<br><br>            <span class="hljs-comment">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-服务端主程序用线程池改进"><a href="#8-2-服务端主程序用线程池改进" class="headerlink" title="8.2 服务端主程序用线程池改进"></a>8.2 服务端主程序用线程池改进</h3><p>为了避免服务端创建太多的线程，可以把服务端用线程池改进，提高服务端的性能。</p><p>先写一个给浏览器响应数据的线程任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderRunnable</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//  立即响应一个网页内容：“黑马程序员”给浏览器展示。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);<br>            ps.println(); <span class="hljs-comment">// 必须换行</span><br>            ps.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;黑马程序员666&lt;div&gt;&quot;</span>);<br>            ps.close();<br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再改写服务端的主程序，使用ThreadPoolExecutor创建一个线程池，每次接收到一个Socket就往线程池中提交任务就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----服务端启动成功-------&quot;</span>);<br>        <span class="hljs-comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><br>        <span class="hljs-comment">// 创建出一个线程池，负责处理通信管道的任务。</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">16</span> * <span class="hljs-number">2</span>, <span class="hljs-number">16</span> * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">8</span>) , Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>            <span class="hljs-comment">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span><br>            pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderRunnable</span>(socket));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21多线程</title>
    <link href="/2023/12/06/day21-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/12/06/day21-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="day21-多线程"><a href="#day21-多线程" class="headerlink" title="day21-多线程"></a>day21-多线程</h1><h2 id="一、多线程常用方法"><a href="#一、多线程常用方法" class="headerlink" title="一、多线程常用方法"></a>一、多线程常用方法</h2><p><img src="/assets/1668051403591.png" alt="1668051403591"></p><p>下面我们演示一下<code>getName()</code>、<code>setName(String name)</code>、<code>currentThread()</code>、<code>sleep(long time)</code>这些方法的使用效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name); <span class="hljs-comment">//1.执行父类Thread(String name)构造器，为当前线程设置名字了</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//2.currentThread() 哪个线程执行它，它就会得到哪个线程对象。</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-comment">//3.getName() 获取线程名称</span><br>            System.out.println(t.getName() + <span class="hljs-string">&quot;输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再测试类中，创建线程对象，并启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t1.setName(String name) <span class="hljs-comment">//设置线程名称;</span><br>        t1.start();<br>        System.out.println(t1.getName());  <span class="hljs-comment">//Thread-0</span><br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;2号线程&quot;</span>);<br>        <span class="hljs-comment">// t2.setName(&quot;2号线程&quot;);</span><br>        t2.start();<br>        System.out.println(t2.getName()); <span class="hljs-comment">// Thread-1</span><br><br>        <span class="hljs-comment">// 主线程对象的名字</span><br>        <span class="hljs-comment">// 哪个线程执行它，它就会得到哪个线程对象。</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        m.setName(<span class="hljs-string">&quot;最牛的线程&quot;</span>);<br>        System.out.println(m.getName()); <span class="hljs-comment">// main</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(m.getName() + <span class="hljs-string">&quot;线程输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面代码，效果如下图所示，我们发现每一条线程都有自己了名字了。</p><p><img src="/assets/1668052028054.png" alt="1668052028054"></p><p><strong>最后再演示一下join这个方法是什么效果。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// join方法作用：让当前调用这个方法的线程先执行完。</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;1号线程&quot;</span>);<br>        t1.start();<br>        t1.join();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;2号线程&quot;</span>);<br>        t2.start();<br>        t2.join();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;3号线程&quot;</span>);<br>        t3.start();<br>        t3.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果是1号线程先执行完，再执行2号线程；2号线程执行完，再执行3号线程；3号线程执行完就结束了。</p><p><img src="/assets/1668052307537.png" alt="1668052307537"></p><p>我们再尝试，把join()方法去掉，再看执行效果。此时你会发现2号线程没有执行完1号线程就执行了<strong>（效果是多次运行才出现的，根据个人电脑而异，可能有同学半天也出现不了也是正常的）</strong></p><p><img src="/assets/1668052414444.png" alt="1668052414444"></p><h2 id="二、线程安全问题"><a href="#二、线程安全问题" class="headerlink" title="二、线程安全问题"></a>二、线程安全问题</h2><p>各位小伙伴，前面我们已经学习了如何创建线程，以及线程的常用方法。接下来，我们要学习一个在实际开发过程中，使用线程时最重要的一个问题，叫线程安全问题。</p><h3 id="2-1-线程安全问题概述"><a href="#2-1-线程安全问题概述" class="headerlink" title="2.1 线程安全问题概述"></a>2.1 线程安全问题概述</h3><ul><li><strong>首先，什么是线程安全问题呢？</strong></li></ul><p><strong>线程安全问题指的是，多个线程同时操作同一个共享资源的时候，可能会出现业务安全问题。</strong></p><p>下面通过一个取钱的案例给同学们演示一下。案例需求如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">场景：小明和小红是一对夫妻，他们有一个共享账户，余额是<span class="hljs-number">10</span>万元，小红和小明同时来取钱，并且<span class="hljs-number">2</span>人各自都在取钱<span class="hljs-number">10</span>万元，可能出现什么问题呢？<br></code></pre></td></tr></table></figure><p>如下图所示，小明和小红假设都是一个线程，本类每个线程都应该执行完三步操作，才算是完成的取钱的操作。但是真实执行过程可能是下面这样子的</p><p>​① 小红线程只执行了判断余额是否足够（条件为true），然后CPU的执行权就被小红线程抢走了。</p><p>​② 小红线程也执行了判断了余额是否足够（条件也是true）, 然后CPU执行权又被小明线程抢走了。</p><p>​③ 小明线程由于刚才已经判断余额是否足够了，直接执行第2步，吐出了10万元钱，此时共享账户月为0。然后CPU执行权又被小红线程抢走。 </p><p>​④ 小红线程由于刚刚也已经判断余额是否足够了，直接执行第2步，吐出了10万元钱，此时共享账户月为-10万。</p><p><img src="/assets/1668059112092.png" alt="1668059112092"></p><p><strong>你会发现，在这个取钱案例中，两个人把共享账户的钱都取了10万，但问题是只有10万块钱啊！！！</strong></p><p>以上取钱案例中的问题，就是线程安全问题的一种体现。</p><h3 id="2-2-线程安全问题的代码演示"><a href="#2-2-线程安全问题的代码演示" class="headerlink" title="2.2 线程安全问题的代码演示"></a>2.2 线程安全问题的代码演示</h3><p>先定义一个共享的账户类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId; <span class="hljs-comment">// 卡号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money; <span class="hljs-comment">// 余额。</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">// 小明 小红同时过来的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-comment">// 先搞清楚是谁来取钱？</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">// 1、判断余额是否足够</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money)&#123;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功！&quot;</span>);<br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱：余额不足~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCardId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCardId</span><span class="hljs-params">(String cardId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在定义一个是取钱的线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 取钱(小明，小红)</span><br>        acc.drawMoney(<span class="hljs-number">100000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，再写一个测试类，在测试类中创建两个线程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>         <span class="hljs-comment">// 1、创建一个账户对象，代表两个人的共享账户。</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ICBC-110&quot;</span>, <span class="hljs-number">100000</span>);<br>        <span class="hljs-comment">// 2、创建两个线程，分别代表小明 小红，再去同一个账户对象中取钱10万。</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start(); <span class="hljs-comment">// 小明</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start(); <span class="hljs-comment">// 小红</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序，执行效果如下。你会发现两个人都取了10万块钱，余额为-10完了。</p><p><img src="/assets/1668059997020.png" alt="1668059997020"></p><h3 id="2-3-线程同步方案"><a href="#2-3-线程同步方案" class="headerlink" title="2.3 线程同步方案"></a>2.3 线程同步方案</h3><p>为了解决前面的线程安全问题，我们可以使用线程同步思想。同步最常见的方案就是加锁，<strong>意思是每次只允许一个线程加锁，加锁后才能进入访问，访问完毕后自动释放锁，然后其他线程才能再加锁进来。</strong></p><p><img src="/assets/1668060312733.png" alt="1668060312733"></p><p>等小红线程执行完了，把余额改为0，出去了就会释放锁。这时小明线程就可以加锁进来执行，如下图所示。</p><p><img src="/assets/1668060382390.png" alt="1668060382390"></p><p>采用加锁的方案，就可以解决前面两个线程都取10万块钱的问题。怎么加锁呢？Java提供了三种方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>同步代码块<br><span class="hljs-number">2.</span>同步方法<br><span class="hljs-number">3.</span>Lock锁<br></code></pre></td></tr></table></figure><h3 id="2-4-同步代码块"><a href="#2-4-同步代码块" class="headerlink" title="2.4 同步代码块"></a>2.4 同步代码块</h3><p>我们先来学习同步代码块。它的作用就是把访问共享数据的代码锁起来，以此保证线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//锁对象：必须是一个唯一的对象（同一个地址）</span><br><span class="hljs-keyword">synchronized</span>(锁对象)&#123;<br>    <span class="hljs-comment">//...访问共享数据的代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用同步代码块，来解决前面代码里面的线程安全问题。我们只需要修改DrawThread类中的代码即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 小明 小红线程同时过来的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>    <span class="hljs-comment">// 先搞清楚是谁来取钱？</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>    <span class="hljs-comment">// 1、判断余额是否足够</span><br>    <span class="hljs-comment">// this正好代表共享资源！</span><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money)&#123;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功！&quot;</span>);<br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱：余额不足~&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时再运行测试类，观察是否会出现不合理的情况。</p><p><strong>最后，再给同学们说一下锁对象如何选择的问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>建议把共享资源作为锁对象, 不要将随便无关的对象当做锁对象<br><span class="hljs-number">2.</span>对于实例方法，建议使用<span class="hljs-built_in">this</span>作为锁对象<br><span class="hljs-number">3.</span>对于静态方法，建议把类的字节码(类名.class)当做锁对象<br></code></pre></td></tr></table></figure><h3 id="2-5-同步方法"><a href="#2-5-同步方法" class="headerlink" title="2.5 同步方法"></a>2.5 同步方法</h3><p>接下来，学习同步方法解决线程安全问题。<strong>其实同步方法，就是把整个方法给锁住，一个线程调用这个方法，另一个线程调用的时候就执行不了，只有等上一个线程调用结束，下一个线程调用才能继续执行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 同步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>    <span class="hljs-comment">// 先搞清楚是谁来取钱？</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>    <span class="hljs-comment">// 1、判断余额是否足够</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money)&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功！&quot;</span>);<br>        <span class="hljs-built_in">this</span>.money -= money;<br>        System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;来取钱：余额不足~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改完之后，再次运行测试类，观察是否会出现不合理的情况。</p><p><strong>接着，再问同学们一个问题，同步方法有没有锁对象？锁对象是谁？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">同步方法也是有锁对象，只不过这个锁对象没有显示的写出来而已。<br><span class="hljs-number">1.</span>对于实例方法，锁对象其实是<span class="hljs-built_in">this</span>（也就是方法的调用者）<br><span class="hljs-number">2.</span>对于静态方法，锁对象时类的字节码对象（类名.class）<br></code></pre></td></tr></table></figure><p><strong>最终，总结一下同步代码块和同步方法有什么区别？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>不存在哪个好与不好，只是一个锁住的范围大，一个范围小<br><span class="hljs-number">2.</span>同步方法是将方法中所有的代码锁住<br><span class="hljs-number">3.</span>同步代码块是将方法中的部分代码锁住<br></code></pre></td></tr></table></figure><h3 id="2-6-Lock锁"><a href="#2-6-Lock锁" class="headerlink" title="2.6 Lock锁"></a>2.6 Lock锁</h3><p>接下来，我们再来学习一种，线程安全问题的解决办法，叫做Lock锁。</p><p>Lock锁是JDK5版本专门提供的一种锁对象，通过这个锁对象的方法来达到加锁，和释放锁的目的，使用起来更加灵活。格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先在成员变量位子，需要创建一个Lock接口的实现类对象（这个对象就是锁对象）<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-number">2.</span>在需要上锁的地方加入下面的代码<br> lk.lock(); <span class="hljs-comment">// 加锁</span><br> <span class="hljs-comment">//...中间是被锁住的代码...</span><br> lk.unlock(); <span class="hljs-comment">// 解锁</span><br></code></pre></td></tr></table></figure><p>使用Lock锁改写前面DrawThread中取钱的方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建了一个锁对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-comment">// 先搞清楚是谁来取钱？</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-keyword">try</span> &#123;<br>            lk.lock(); <span class="hljs-comment">// 加锁</span><br>            <span class="hljs-comment">// 1、判断余额是否足够</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money)&#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功！&quot;</span>);<br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱：余额不足~&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lk.unlock(); <span class="hljs-comment">// 解锁</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序结果，观察是否有线程安全问题。到此三种解决线程安全问题的办法我们就学习完了。</p><h2 id="三、线程通信（了解）"><a href="#三、线程通信（了解）" class="headerlink" title="三、线程通信（了解）"></a>三、线程通信（了解）</h2><p>接下来，我们学习一下线程通信。</p><p><strong>首先，什么是线程通信呢？</strong></p><ul><li>当多个线程共同操作共享资源时，线程间通过某种方式互相告知自己的状态，以相互协调，避免无效的资源挣抢。</li></ul><p><strong>线程通信的常见模式：是生产者与消费者模型</strong></p><ul><li>生产者线程负责生成数据</li><li>消费者线程负责消费生产者生成的数据</li><li>注意：生产者生产完数据后应该让自己等待，通知其他消费者消费；消费者消费完数据之后应该让自己等待，同时通知生产者生成。</li></ul><p>比如下面案例中，有3个厨师（生产者线程），两个顾客（消费者线程）。</p><p><img src="/assets/1668064583299.png" alt="1668064583299"></p><p>接下来，我们先分析一下完成这个案例的思路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先确定在这个案例中，什么是共享数据？<br>答：这里案例中桌子是共享数据，因为厨师和顾客都需要对桌子上的包子进行操作。<br><br><span class="hljs-number">2.</span>再确定有那几条线程？哪个是生产者，哪个是消费者？<br>答：厨师是生产者线程，<span class="hljs-number">3</span>条生产者线程； <br>   顾客是消费者线程，<span class="hljs-number">2</span>条消费者线程<br>   <br><span class="hljs-number">3.</span>什么时候将哪一个线程设置为什么状态<br>生产者线程(厨师)放包子：<br> <span class="hljs-number">1</span>)先判断是否有包子<br> <span class="hljs-number">2</span>)没有包子时，厨师开始做包子, 做完之后把别人唤醒，然后让自己等待<br> <span class="hljs-number">3</span>)有包子时，不做包子了，直接唤醒别人、然后让自己等待<br> <br>消费者线程(顾客)吃包子：<br> <span class="hljs-number">1</span>)先判断是否有包子<br> <span class="hljs-number">2</span>)有包子时，顾客开始吃包子, 吃完之后把别人唤醒，然后让自己等待<br> <span class="hljs-number">3</span>)没有包子时，不吃包子了，直接唤醒别人、然后让自己等待<br></code></pre></td></tr></table></figure><p>按照上面分析的思路写代码。先写桌子类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Desk</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 放1个包子的方法</span><br>    <span class="hljs-comment">// 厨师1 厨师2 厨师3</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>            <span class="hljs-comment">// 判断是否有包子。</span><br>            <span class="hljs-keyword">if</span>(list.size() == <span class="hljs-number">0</span>)&#123;<br>                list.add(name + <span class="hljs-string">&quot;做的肉包子&quot;</span>);<br>                System.out.println(name + <span class="hljs-string">&quot;做了一个肉包子~~&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br><br>                <span class="hljs-comment">// 唤醒别人, 等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 有包子了，不做了。</span><br>                <span class="hljs-comment">// 唤醒别人, 等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 吃货1 吃货2</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>            <span class="hljs-keyword">if</span>(list.size() == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 有包子，吃了</span><br>                System.out.println(name  + <span class="hljs-string">&quot;吃了：&quot;</span> + list.get(<span class="hljs-number">0</span>));<br>                list.clear();<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 没有包子</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再写测试类，在测试类中，创建3个厨师线程对象，再创建2个顾客对象，并启动所有线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//   需求：3个生产者线程，负责生产包子，每个线程每次只能生产1个包子放在桌子上</span><br>        <span class="hljs-comment">//      2个消费者线程负责吃包子，每人每次只能从桌子上拿1个包子吃。</span><br>        <span class="hljs-type">Desk</span> <span class="hljs-variable">desk</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Desk</span>();<br><br>        <span class="hljs-comment">// 创建3个生产者线程（3个厨师）</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.put();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;厨师1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.put();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;厨师2&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.put();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;厨师3&quot;</span>).start();<br><br>        <span class="hljs-comment">// 创建2个消费者线程（2个吃货）</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.get();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;吃货1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.get();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;吃货2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面代码，运行结果如下：你会发现多个线程相互协调执行，避免无效的资源挣抢。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs">厨师1做了一个肉包子~~<br>吃货2吃了：厨师1做的肉包子<br>厨师3做了一个肉包子~~<br>吃货2吃了：厨师3做的肉包子<br>厨师1做了一个肉包子~~<br>吃货1吃了：厨师1做的肉包子<br>厨师2做了一个肉包子~~<br>吃货2吃了：厨师2做的肉包子<br>厨师3做了一个肉包子~~<br>吃货1吃了：厨师3做的肉包子<br></code></pre></td></tr></table></figure><h2 id="四、线程池"><a href="#四、线程池" class="headerlink" title="四、线程池"></a>四、线程池</h2><h3 id="4-1-线程池概述"><a href="#4-1-线程池概述" class="headerlink" title="4.1 线程池概述"></a>4.1 线程池概述</h3><p>各位小伙伴，接下来我们学习一下线程池技术。先认识一下什么是线程池技术？ 其实，<strong>线程池就是一个可以复用线程的技术</strong>。</p><p>要理解什么是线程复用技术，我们先得看一下不使用线程池会有什么问题，理解了这些问题之后，我们在解释线程复用同学们就好理解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">假设：用户每次发起一个请求给后台，后台就创建一个新的线程来处理，下次新的任务过来肯定也会创建新的线程，如果用户量非常大，创建的线程也讲越来越多。然而，创建线程是开销很大的，并且请求过多时，会严重影响系统性能。<br></code></pre></td></tr></table></figure><p>而使用线程池，就可以解决上面的问题。如下图所示，线程池内部会有一个容器，存储几个核心线程，假设有3个核心线程，这3个核心线程可以处理3个任务。</p><p><img src="/assets/1668065892511.png" alt="1668065892511"></p><p>但是任务总有被执行完的时候，假设第1个线程的任务执行完了，那么第1个线程就空闲下来了，有新的任务时，空闲下来的第1个线程可以去执行其他任务。依此内推，这3个线程可以不断的复用，也可以执行很多个任务。</p><p><img src="/assets/1668066073126.png" alt="1668066073126"></p><p><strong>所以，线程池就是一个线程复用技术，它可以提高线程的利用率。</strong></p><h3 id="4-2-创建线程池"><a href="#4-2-创建线程池" class="headerlink" title="4.2 创建线程池"></a>4.2 创建线程池</h3><p>在JDK5版本中提供了代表线程池的接口ExecutorService，而这个接口下有一个实现类叫ThreadPoolExecutor类，使用ThreadPoolExecutor类就可以用来创建线程池对象。</p><p>下面是它的构造器，参数比较多，不要怕，干就完了^_^。</p><p><img src="/assets/1668066279649.png" alt="1668066279649"></p><p>接下来，用这7个参数的构造器来创建线程池的对象。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>    <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数有3个</span><br>    <span class="hljs-number">5</span>,  <span class="hljs-comment">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span><br>    <span class="hljs-number">8</span>,<span class="hljs-comment">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span><br>    TimeUnit.SECONDS,<span class="hljs-comment">//时间单位（秒）</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">4</span>), <span class="hljs-comment">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span><br>    Executors.defaultThreadFactory(), <span class="hljs-comment">//用于创建线程的工厂对象</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy() <span class="hljs-comment">//拒绝策略</span><br>);<br></code></pre></td></tr></table></figure><p>关于线程池，我们需要注意下面的两个问题</p><ul><li><p>临时线程什么时候创建？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">新任务提交时，发现核心线程都在忙、任务队列满了、并且还可以创建临时线程，此时会创建临时线程。<br></code></pre></td></tr></table></figure></li><li><p>什么时候开始拒绝新的任务？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">核心线程和临时线程都在忙、任务队列也满了、新任务过来时才会开始拒绝任务。<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-3-线程池执行Runnable任务"><a href="#4-3-线程池执行Runnable任务" class="headerlink" title="4.3 线程池执行Runnable任务"></a>4.3 线程池执行Runnable任务</h3><p>创建好线程池之后，接下来我们就可以使用线程池执行任务了。线程池执行的任务可以有两种，一种是Runnable任务；一种是callable任务。下面的execute方法可以用来执行Runnable任务。</p><p><img src="/assets/1668066844202.png" alt="1668066844202"></p><p>先准备一个线程任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 任务是干啥的？</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; ==&gt; 输出666~~&quot;</span>);<br>        <span class="hljs-comment">//为了模拟线程一直在执行，这里睡久一点</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(Integer.MAX_VALUE);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是执行Runnable任务的代码，注意阅读注释，对照着前面的7个参数理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>    <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数有3个</span><br>    <span class="hljs-number">5</span>,  <span class="hljs-comment">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span><br>    <span class="hljs-number">8</span>,<span class="hljs-comment">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span><br>    TimeUnit.SECONDS,<span class="hljs-comment">//时间单位（秒）</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">4</span>), <span class="hljs-comment">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span><br>    Executors.defaultThreadFactory(), <span class="hljs-comment">//用于创建线程的工厂对象</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy() <span class="hljs-comment">//拒绝策略</span><br>);<br><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>pool.execute(target); <span class="hljs-comment">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span><br>pool.execute(target); <span class="hljs-comment">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span><br>pool.execute(target); <span class="hljs-comment">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span><br><span class="hljs-comment">//下面4个任务在任务队列里排队</span><br>pool.execute(target);<br>pool.execute(target);<br>pool.execute(target);<br>pool.execute(target);<br><br><span class="hljs-comment">//下面2个任务，会被临时线程的创建时机了</span><br>pool.execute(target);<br>pool.execute(target);<br><span class="hljs-comment">// 到了新任务的拒绝时机了！</span><br>pool.execute(target);<br></code></pre></td></tr></table></figure><p>执行上面的代码，结果输出如下</p><p><img src="/assets/1668067745116.png" alt="1668067745116"></p><h3 id="4-4-线程池执行Callable任务"><a href="#4-4-线程池执行Callable任务" class="headerlink" title="4.4 线程池执行Callable任务"></a>4.4 线程池执行Callable任务</h3><p>接下来，我们学习使用线程池执行Callable任务。callable任务相对于Runnable任务来说，就是多了一个返回值。</p><p>执行Callable任务需要用到下面的submit方法</p><p><img src="/assets/1668067798673.png" alt="1668067798673"></p><p>先准备一个Callable线程任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、重写call方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 描述线程的任务，返回线程执行返回后的结果。</span><br>        <span class="hljs-comment">// 需求：求1-n的和返回。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName() + <span class="hljs-string">&quot;求出了1-&quot;</span> + n + <span class="hljs-string">&quot;的和是：&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再准备一个测试类，在测试类中创建线程池，并执行callable任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、通过ThreadPoolExecutor创建一个线程池对象。</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>            <span class="hljs-number">3</span>,<br>            <span class="hljs-number">5</span>,<br>            <span class="hljs-number">8</span>,<br>            TimeUnit.SECONDS, <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">4</span>),<br>            Executors.defaultThreadFactory(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br><br>        <span class="hljs-comment">// 2、使用线程处理Callable任务。</span><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br><br>        <span class="hljs-comment">// 3、执行完Callable任务后，需要获取返回结果。</span><br>        System.out.println(f1.get());<br>        System.out.println(f2.get());<br>        System.out.println(f3.get());<br>        System.out.println(f4.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行后，结果如下图所示</p><p><img src="/assets/1668067964048.png" alt="1668067964048"></p><h3 id="4-5-线程池工具类（Executors）"><a href="#4-5-线程池工具类（Executors）" class="headerlink" title="4.5 线程池工具类（Executors）"></a>4.5 线程池工具类（Executors）</h3><p>有同学可能会觉得前面创建线程池的代码参数太多、记不住，有没有快捷的创建线程池的方法呢？有的。Java为开发者提供了一个创建线程池的工具类，叫做Executors，它提供了方法可以创建各种不能特点的线程池。如下图所示</p><p><img src="/assets/1668068110593.png" alt="1668068110593"></p><p>接下来，我们演示一下创建固定线程数量的线程池。这几个方法用得不多，所以这里不做过多演示，同学们了解一下就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、通过Executors创建一个线程池对象。</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">17</span>);<br>        <span class="hljs-comment">// 老师：核心线程数量到底配置多少呢？？？</span><br>        <span class="hljs-comment">// 计算密集型的任务：核心线程数量 = CPU的核数 + 1</span><br>        <span class="hljs-comment">// IO密集型的任务：核心线程数量 = CPU核数 * 2</span><br><br>        <span class="hljs-comment">// 2、使用线程处理Callable任务。</span><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br><br>        System.out.println(f1.get());<br>        System.out.println(f2.get());<br>        System.out.println(f3.get());<br>        System.out.println(f4.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Executors创建线程池这么好用，为什么不推荐同学们使用呢？原因在这里：看下图，这是《阿里巴巴Java开发手册》提供的强制规范要求。</p><p><img src="/assets/1668068399363.png" alt="1668068399363"></p><h2 id="五、补充知识"><a href="#五、补充知识" class="headerlink" title="五、补充知识"></a>五、补充知识</h2><p>最后，我们再补充几个概念性的知识点，同学们知道这些概念什么意思就可以了。</p><h3 id="5-1-并发和并行"><a href="#5-1-并发和并行" class="headerlink" title="5.1 并发和并行"></a>5.1 并发和并行</h3><p>先学习第一个补充知识点，并发和并行。在讲解并发和并行的含义之前，我们先来了解一下什么是进程、线程？</p><ul><li>正常运行的程序（软件）就是一个独立的进程</li><li>线程是属于进程，一个进程中包含多个线程</li><li>进程中的线程其实并发和并行同时存在（继续往下看）</li></ul><p>我们可以打开系统的任务管理器看看（快捷键：Ctrl+Shfit+Esc），自己的电脑上目前有哪些进程。</p><p><img src="/assets/1668069176927.png" alt="1668069176927"></p><p>知道了什么是进程和线程之后，接着我们再来学习并发和并行的含义。</p><p><strong>首先，来学习一下什么是并发？</strong></p><p>进程中的线程由CPU负责调度执行，但是CPU同时处理线程的数量是优先的，为了保证全部线程都能执行到，CPU采用轮询机制为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。（简单记：并发就是多条线程交替执行）</p><p><strong>接下，再来学习一下什么是并行？</strong></p><p>并行指的是，多个线程同时被CPU调度执行。如下图所示，多个CPU核心在执行多条线程</p><p><img src="/assets/1668069524799.png" alt="1668069524799"></p><p><strong>最后一个问题，多线程到底是并发还是并行呢？</strong></p><p>其实多个线程在我们的电脑上执行，并发和并行是同时存在的。</p><h3 id="5-2-线程的生命周期"><a href="#5-2-线程的生命周期" class="headerlink" title="5.2 线程的生命周期"></a>5.2 线程的生命周期</h3><p>接下来，我们学习最后一个有关线程的知识点，叫做线程的生命周期。所谓生命周期就是线程从生到死的过程中间有哪些状态，以及这些状态之间是怎么切换的。</p><p>为了让大家同好的理解线程的生命周期，先用人的生命周期举个例子，人从生到死有下面的几个过程。在人的生命周期过程中，各种状态之间可能会有切换，线程也是一样的。</p><p><img src="/assets/1668069740969.png" alt="1668069740969"></p><p>接下来就来学习线程的生命周期。在Thread类中有一个嵌套的枚举类叫Thread.Status，这里面定义了线程的6中状态。如下图所示</p><p><img src="/assets/1668069923403.png" alt="1668069923403"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">NEW: 新建状态，线程还没有启动<br>RUNNABLE: 可以运行状态，线程调用了start()方法后处于这个状态<br>BLOCKED: 锁阻塞状态，没有获取到锁处于这个状态<br>WAITING: 无限等待状态，线程执行时被调用了wait方法处于这个状态<br>TIMED_WAITING: 计时等待状态，线程执行时被调用了sleep(毫秒)或者wait(毫秒)方法处于这个状态<br>TERMINATED: 终止状态, 线程执行完毕或者遇到异常时，处于这个状态。<br></code></pre></td></tr></table></figure><p>这几种状态之间切换关系如下图所示</p><p><img src="/assets/1668070204768.png" alt="1668070204768"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20特殊文件、日志技术、多线程</title>
    <link href="/2023/12/06/day20-%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E3%80%81%E6%97%A5%E5%BF%97%E6%8A%80%E6%9C%AF%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/12/06/day20-%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E3%80%81%E6%97%A5%E5%BF%97%E6%8A%80%E6%9C%AF%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="day20-特殊文件、日志技术、多线程"><a href="#day20-特殊文件、日志技术、多线程" class="headerlink" title="day20-特殊文件、日志技术、多线程"></a>day20-特殊文件、日志技术、多线程</h1><h2 id="一、属性文件"><a href="#一、属性文件" class="headerlink" title="一、属性文件"></a>一、属性文件</h2><h3 id="1-1-特殊文件概述"><a href="#1-1-特殊文件概述" class="headerlink" title="1.1 特殊文件概述"></a>1.1 特殊文件概述</h3><p>同学们，前面我们学习了IO流，我们知道IO流是用来读、写文件中的数据。但是我们接触到的文件都是普通的文本文件，普通的文本文件里面的数据是没有任何格式规范的，用户可以随意编写，如下图所示。</p><p>像这种普通的文本文件，没有任何规律可言，不方便程序对文件中的数据信息处理。</p><p><img src="/assets/1667990938340.png" alt="1667990938340"></p><p>在以后的Java开发过程中还会遇到一些特殊的文本文件，这些文件是有一些格式要求的，方便程序对文件中的数据进行处理。</p><p>比如，后面我们会用到两种特殊的文本文件，一种是properties文件，还有一种是xml文件。如下图所示。</p><p><img src="/assets/1667991153379.png" alt="1667991153379"></p><ul><li>后缀为.properties的文件，称之为属性文件，它可以很方便的存储一些类似于键值对的数据。经常当做软件的配置文件使用。</li><li>而xml文件能够表示更加复杂的数据关系，比如要表示多个用户的用户名、密码、家乡、性别等。在后面，也经常当做软件的配置文件使用。</li></ul><p>现在，学习特殊的文件主要学习什么呢？ 主要学习以下的三点</p><p><img src="/assets/1667991441046.png" alt="1667991441046"></p><h3 id="1-2-Properties属性文件"><a href="#1-2-Properties属性文件" class="headerlink" title="1.2 Properties属性文件"></a>1.2 Properties属性文件</h3><p>接下来，我们先学习Properties这种属性文件。首先我们要掌握属性文件的格式：</p><ol><li>属性文件后缀以<code>.properties</code>结尾</li><li>属性文件里面的每一行都是一个键值对，键和值中间用&#x3D;隔开。比如: <code>admin=123456</code> </li><li><code>#</code>表示这样是注释信息，是用来解释这一行配置是什么意思。</li><li>每一行末尾不要习惯性加分号，以及空格等字符；不然会把分号，空格会当做值的一部分。</li><li>键不能重复，值可以重复</li></ol><p>如下图所示</p><p><img src="/assets/1667992083258.png" alt="1667992083258"></p><p>接下来，我们学习如何读取属性文件中的数据。这里需要给同学们，介绍一个来叫Properties.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>Properties是什么？<br>Properties是Map接口下面的一个实现类，所以Properties也是一种双列集合，用来存储键值对。  但是一般不会把它当做集合来使用。<br><br><span class="hljs-number">2.</span>Properties核心作用？<br>Properties类的对象，用来表示属性文件，可以用来读取属性文件中的键值对。<br></code></pre></td></tr></table></figure><ul><li><strong>使用Properties读取属性文件中的键值对</strong>，需要用到的方法如下。</li></ul><p><img src="/assets/1667992486134.png" alt="1667992486134"></p><p>实用Properties读取属性文件的步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、创建一个Properties的对象出来（键值对集合，空容器）<br><span class="hljs-number">2</span>、调用load(字符输入流/字节输入流)方法，开始加载属性文件中的键值对数据到properties对象中去<br><span class="hljs-number">3</span>、调用getProperty(键)方法，根据键取值<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握使用Properties类读取属性文件中的键值对信息。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建一个Properties的对象出来（键值对集合，空容器）</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        System.out.println(properties);<br><br>        <span class="hljs-comment">// 2、开始加载属性文件中的键值对数据到properties对象中去</span><br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;properties-xml-log-app\\src\\users.properties&quot;</span>));<br>        System.out.println(properties);<br><br>        <span class="hljs-comment">// 3、根据键取值</span><br>        System.out.println(properties.getProperty(<span class="hljs-string">&quot;赵敏&quot;</span>));<br>        System.out.println(properties.getProperty(<span class="hljs-string">&quot;张无忌&quot;</span>));<br><br>        <span class="hljs-comment">// 4、遍历全部的键和值。</span><br>        <span class="hljs-comment">//获取键的集合</span><br>        Set&lt;String&gt; keys = properties.stringPropertyNames();<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">//再根据键获取值</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> properties.getProperty(key);<br>            System.out.println(key + <span class="hljs-string">&quot;----&gt;&quot;</span> + value);<br>        &#125;<br><br>        properties.forEach((k, v) -&gt; &#123;<br>            System.out.println(k + <span class="hljs-string">&quot;----&gt;&quot;</span> + v);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>使用Properties往属性文件中写键值对</strong>，需要用到的方法如下</li></ul><p><img src="/assets/1667993320872.png" alt="1667993320872"></p><p>往Properties属性文件中写键值对的步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、先准备一个.properties属性文件，按照格式写几个键值对<br><span class="hljs-number">1</span>、创建Properties对象出来，<br><span class="hljs-number">2</span>、调用setProperty存储一些键值对数据<br><span class="hljs-number">3</span>、调用store(字符输出流/字节输出流, 注释)，将Properties集合中的键和值写到文件中<br>注意：第二个参数是注释，必须得加；<br></code></pre></td></tr></table></figure><p>先准备一个<code>users.properties</code>属性文件，如下图所示</p><p><img src="/assets/1667993682237.png" alt="1667993682237"></p><p>接下来，编写代码读取上面的属性文件。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建Properties对象出来，先用它存储一些键值对数据</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;minmin&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;殷素素&quot;</span>, <span class="hljs-string">&quot;cuishan&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;张翠山&quot;</span>, <span class="hljs-string">&quot;susu&quot;</span>);<br><br>        <span class="hljs-comment">// 2、把properties对象中的键值对数据存入到属性文件中去</span><br>        properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;properties-xml-log-app/src/users2.properties&quot;</span>)<br>                         , <span class="hljs-string">&quot;i saved many users!&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上面的代码，<code>user2.properties</code> 配置文件打开效果如下图所示。</p><p><img src="/assets/1667993581146.png" alt="1667993581146"></p><h2 id="二、XML文件"><a href="#二、XML文件" class="headerlink" title="二、XML文件"></a>二、XML文件</h2><p>同学们，在上一节我们学习了properties属性文件。接下来我们再学习一种在开发中经常使用的文件，叫做xml文件。我们先来给同学们介绍一下，什么是xml文件，然后再来学习如何读取xml文件中的数据。</p><h3 id="2-1-XML文件概述"><a href="#2-1-XML文件概述" class="headerlink" title="2.1 XML文件概述"></a>2.1 XML文件概述</h3><p><strong>首先，我们来认识一下，什么是XML？</strong></p><p>XML是可扩展的标记语言，意思是它是由一些标签组成的，而这些标签是自己定义的。本质上一种数据格式，可以用来表示复杂的数据关系。</p><p>XML文件有如下的特点：</p><ul><li>XML中的<code>&lt;标签名&gt;</code> 称为一个标签或者一个元素，一般是成对出现的。</li><li>XML中的标签名可以自己定义（可扩展），但是必须要正确的嵌套</li><li>XML中只能有一个根标签。</li><li>XML标准中可以有属性</li><li>XML必须第一行有一个文档声明，格式是固定的<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li><li>XML文件必须是以.xml为后缀结尾</li></ul><p>如下图所示</p><p><img src="/assets/1667993965682.png" alt="1667993965682"></p><p><strong>接下，同学们可以跟着步骤新建一个XML文件，试试！</strong></p><p><img src="/assets/1667994441934.png" alt="1667994441934"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- 注释：以上抬头声明必须放在第一行，必须有 --&gt;</span><br><span class="hljs-comment">&lt;!--  根标签只能有一个 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">desc</span>=<span class="hljs-string">&quot;第一个用户&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张无忌<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">地址</span>&gt;</span>光明顶<span class="hljs-tag">&lt;/<span class="hljs-name">地址</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>minmin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">people</span>&gt;</span>很多人<span class="hljs-tag">&lt;/<span class="hljs-name">people</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>敏敏<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">地址</span>&gt;</span>光明顶<span class="hljs-tag">&lt;/<span class="hljs-name">地址</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>wuji<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面XML文件中的数据格式是最为常见的，标签有属性、文本、还有合理的嵌套。XML文件中除了写以上的数据格式之外，还有一些特殊的字符不能直接写。</p><ul><li><p>像 <code>&lt;,&gt;,&amp; </code>等这些符号不能出现在标签的文本中，因为标签格式本身就有&lt;&gt;，会和标签格式冲突。</p><p>如果标签文本中有这些特殊字符，需要用一些占位符代替。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">&amp;lt;  表示 &lt;<br>&amp;gt;  表示 &gt;<br>&amp;amp; 表示 &amp;<br>&amp;apos; 表示 &#x27;<br>&amp;quot; 表示 &quot;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span> 3 <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> 5 <span class="hljs-symbol">&amp;gt;</span> 4 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果在标签文本中，出现大量的特殊字符，不想使用特殊字符，此时可以用CDATA区，格式如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">data1</span>&gt;</span><br>    &lt;![CDATA[<br>   3 &lt; 2 &amp;&amp; 5 &gt; 4<br>    ]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">data1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>最后，给同学们聊聊，XML在实际开发中有什么作用？</strong></p><p><img src="/assets/1667995490654.png" alt="1667995490654"></p><p>关于XML是什么，以及XML的格式，还有XML有什么作用，就先认识到这里。</p><h3 id="2-2-XML解析1"><a href="#2-2-XML解析1" class="headerlink" title="2.2 XML解析1"></a>2.2 XML解析1</h3><p>使用程序读取XML文件中的数据，称之为XML解析。这里并不需要我们自己写IO流代码去读取xml文件中的数据。其实有很多开源的，好用的XML解析框架，最知名的是DOM4J（第三方开发的）</p><p><img src="/assets/1667996374837.png" alt="1667996374837"></p><p>由于DOM4J是第三方提供的，所以需要把第三方提供的Jar包导入到自己的项目中来，才可以使用。具体步骤如下：</p><p><img src="/assets/1667996538290.png" alt="1667996538290"></p><p>DOM4J解析XML文件的思想是：文档对象模型（意思是把整个XML文档、每一个标签、每一个属性都等都当做对象来看待）。Dowument对象表示真个XML文档、Element对象表示标签（元素）、Attribute对象表示属性、标签中的内容就是文本</p><p><img src="/assets/1667996650787.png" alt="1667996650787"></p><p>DOM4J解析XML需要用到的方法如下图所示</p><p><img src="/assets/1667996750188.png" alt="1667996750188"></p><p>XML解析的过程，是从根元素开始，从外层往里层解析。 我们先把Document对象，和根元素获取出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4JTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建一个Dom4J框架提供的解析器对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br><br>        <span class="hljs-comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span><br>                saxReader.read(<span class="hljs-string">&quot;properties-xml-log-app\\src\\helloworld.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 3、从文档对象中解析XML文件的全部数据了</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        System.out.println(root.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/1667996995326.png" alt="1667996995326"> </p><h3 id="2-3-XML解析2"><a href="#2-3-XML解析2" class="headerlink" title="2.3 XML解析2"></a>2.3 XML解析2</h3><p>获取到XML文件的根元素之后，接下来，就可以用根元素在获取到它里面的子元素（包括子标签、表属性等）。需要用到的方法如下图所示</p><p><img src="/assets/1667997211327.png" alt="1667997211327"></p><p>接下来，把上面的方法先一个一个的演示一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4JTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建一个Dom4J框架提供的解析器对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br><br>        <span class="hljs-comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span><br>                saxReader.read(<span class="hljs-string">&quot;properties-xml-log-app\\src\\helloworld.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 3、从文档对象中解析XML文件的全部数据了</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        System.out.println(root.getName());<br><br>        <span class="hljs-comment">// 4、获取根元素下的全部一级子元素。</span><br>        <span class="hljs-comment">// List&lt;Element&gt; elements = root.elements();</span><br>        List&lt;Element&gt; elements = root.elements(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>            System.out.println(element.getName());<br>        &#125;<br><br>        <span class="hljs-comment">// 5、获取当前元素下的某个子元素。</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> root.element(<span class="hljs-string">&quot;people&quot;</span>);<br>        System.out.println(people.getText());<br><br>        <span class="hljs-comment">// 如果下面有很多子元素user，默认获取第一个。</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> root.element(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user.elementText(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        <span class="hljs-comment">// 6、获取元素的属性信息呢？</span><br>        System.out.println(user.attributeValue(<span class="hljs-string">&quot;id&quot;</span>));<br>        <span class="hljs-type">Attribute</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> user.attribute(<span class="hljs-string">&quot;id&quot;</span>);<br>        System.out.println(id.getName());<br>        System.out.println(id.getValue());<br><br>        List&lt;Attribute&gt; attributes = user.attributes();<br>        <span class="hljs-keyword">for</span> (Attribute attribute : attributes) &#123;<br>            System.out.println(attribute.getName() + <span class="hljs-string">&quot;=&quot;</span> + attribute.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// 7、如何获取全部的文本内容:获取当前元素下的子元素文本值</span><br>        System.out.println(user.elementText(<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(user.elementText(<span class="hljs-string">&quot;地址&quot;</span>));<br>        System.out.println(user.elementTextTrim(<span class="hljs-string">&quot;地址&quot;</span>)); <span class="hljs-comment">// 取出文本去除前后空格</span><br>        System.out.println(user.elementText(<span class="hljs-string">&quot;password&quot;</span>));<br><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> user.element(<span class="hljs-string">&quot;data&quot;</span>);<br>        System.out.println(data.getText());<br>        System.out.println(data.getTextTrim()); <span class="hljs-comment">// 取出文本去除前后空格</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-XML文件写入"><a href="#2-4-XML文件写入" class="headerlink" title="2.4 XML文件写入"></a>2.4 XML文件写入</h3><p>在前面我们已经学习了XML解析，意思就是使用程序把XML文件中的数据读取出来。反过来能不能往XML文件中写入数据呢？ 答案是可以的。</p><p>DOM4J也提供了往XML文件中写标签的方法，但是用起来比较麻烦。这里不建议使用</p><p>我们自己使用StringBuilder按照标签的格式拼接，然后再使用BufferedWriter写到XML文件中去就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4JTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、使用一个StringBuilder对象来拼接XML格式的数据。</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        sb.append(<span class="hljs-string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; ?&gt;\r\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;&lt;book&gt;\r\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;\t&lt;name&gt;&quot;</span>).append(<span class="hljs-string">&quot;从入门到跑路&quot;</span>).append(<span class="hljs-string">&quot;&lt;/name&gt;\r\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;\t&lt;author&gt;&quot;</span>).append(<span class="hljs-string">&quot;dlei&quot;</span>).append(<span class="hljs-string">&quot;&lt;/author&gt;\r\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;\t&lt;price&gt;&quot;</span>).append(<span class="hljs-number">999.99</span>).append(<span class="hljs-string">&quot;&lt;/price&gt;\r\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;&lt;/book&gt;&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;properties-xml-log-app/src/book.xml&quot;</span>));<br>                )&#123;<br>            bw.write(sb.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-XML约束（了解）"><a href="#2-5-XML约束（了解）" class="headerlink" title="2.5 XML约束（了解）"></a>2.5 XML约束（了解）</h3><p>各位小伙伴，关于XML还有最后一个知识需要大家了解一下。这个知识叫做约束XML文件的编写，我讲这个知识的目的是因为同学们以后在开发过程中会遇到这个知识，但是这个代码不需要大家写，了解一下就可以了。</p><p><strong>首先，说一些什么是XML约束？</strong></p><p>XML约束指的是限制XML文件中的标签或者属性，只能按照规定的格式写。</p><p>比如我在项目中，想约束一个XML文件中的标签只能写&lt;书&gt;、&lt;书名&gt;、&lt;作者&gt;、&lt;售价&gt;这几个标签，如果写其他标签就报错。</p><p><img src="/assets/1668001422123.png" alt="1668001422123"></p><p>怎么才能达到上面的效果呢？有两种约束技术，一种是DTD约束、一种是Schame约束。</p><ul><li><p>DTD约束案例</p><p>如下图所示book.xml中引入了DTD约束文件，book.xml文件中的标签就受到DTD文件的约束</p><p><img src="/assets/1668001621567.png" alt="1668001621567"></p><p>DTD文件解释</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT 书架(书+)&gt;</span>   表示根标签是<span class="hljs-tag">&lt;<span class="hljs-name">书架</span>&gt;</span>，并且书架中有子标签<span class="hljs-tag">&lt;<span class="hljs-name">书</span>&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT 书(书名、作者、售价)&gt;</span> 表示书是一个标签，且书中有子标签<span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT 书名(<span class="hljs-keyword">#PCDATA</span>)&gt;</span>表示<span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>是一个标签，且<span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>里面是普通文本<br><span class="hljs-meta">&lt;!ELEMENT 作者(<span class="hljs-keyword">#PCDATA</span>)&gt;</span>表示<span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>是一个标签，且<span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>里面是普通文本<br><span class="hljs-meta">&lt;!ELEMENT 售价(<span class="hljs-keyword">#PCDATA</span>)&gt;</span>表示<span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>是一个标签，且<span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>里面是普通文本<br></code></pre></td></tr></table></figure></li><li><p>Schame约束案例</p><p>如下图所示，左边的book2.xml文件就受到右边schame文件（.xsd结尾的文件）的约束。</p><p><img src="/assets/1668001745089.png" alt="1668001745089"></p></li></ul><h2 id="三、日志技术"><a href="#三、日志技术" class="headerlink" title="三、日志技术"></a>三、日志技术</h2><h3 id="3-1-日志概述"><a href="#3-1-日志概述" class="headerlink" title="3.1 日志概述"></a>3.1 日志概述</h3><p>好的同学们，接下来我们学习一个将来我们会用到的一个技术，叫做日志技术。首先同学们肯定想知道什么是日志？</p><p>想搞清楚什么是日志，其实可以通过下面几个问题来了解的。</p><ul><li>系统系统能记住某些数据被谁操作，比如被谁删除了？</li><li>想分析用户浏览系统的具体情况，比如挖掘用户的具体喜好？</li><li>当系统在开发中或者上线后出现了Bug，崩溃了，该通过什么去分析，定位Bug?</li></ul><p>而日志就可以帮我们解决以上的问题。所以日志就好比生活中的日记，日记可以记录生活中的点点滴滴；而程序中的日志，通常就是一个文件，里面记录了程序运行过程中产生的各种数据。</p><p>日志技术有如下好处</p><ol><li>日志可以将系统执行的信息，方便的记录到指定位置，可以是控制台、可以是文件、可以是数据库中。</li><li>日志可以随时以开关的形式控制启停，无需侵入到源代码中去修改。</li></ol><h3 id="3-2-日志的体系"><a href="#3-2-日志的体系" class="headerlink" title="3.2 日志的体系"></a>3.2 日志的体系</h3><p>在上一节给同学们介绍了，什么是日志，日志能干什么。接下来需要给同学们介绍一下有哪些日志技术，以及日志的体系。</p><p>大家注意了在行内，其实有很多日志框架给开发者使用。所谓日志框架就是由一些牛人或者第三方公司已经做好的实现代码，后来者就可以直接拿过去使用。</p><p>日志框架有很多种，比如有JUL（java.util.logging）、Log4j、logback等。但是这些日志框架如果使用的API方法都不一样的话，使用者的学习成本就很高。为了降低程序员的学习压力，行内提供了一套日志接口，然后所有的日志框架都按照日志接口的API来实现就可以了。</p><p>这样程序员只要会一套日志框架，那么其他的也就可以通过用，甚至可以在多套日志框架之间来回切换。比较常用的日志框架，和日志接口的关系如下图所示</p><p><img src="/assets/1668044513873.png" alt="1668044513873"></p><p><strong>这里推荐同学们使用Logback日志框架，也在行业中最为广泛使用的。</strong></p><p><strong>Logback日志分为哪几个模块</strong></p><p><img src="/assets/1668044711404.png" alt="1668044711404"></p><h3 id="3-3-Logback快速入门"><a href="#3-3-Logback快速入门" class="headerlink" title="3.3 Logback快速入门"></a>3.3 Logback快速入门</h3><p>接下来，就带领同学们快速使用一下Logback日志框架，使用Logback记录几条日志信息到文件中去和将日志信息打印在控制台上。</p><p>由于Logback是第三方提供的技术，所以首先需要啊将Jar包引入到项目中，具体步骤如下</p><ol><li><p>在资料中找到<code>slftj-api.jar、logback-core.jar、logback-classes.jar</code> 这三个jar包，复制一下</p></li><li><p>在当前模块下面新建一个lib文件夹，把刚刚复制的三个jar包都粘贴到此处</p></li><li><p>从资料中找到<code>logback.xml</code>配置文件，将此文件复制粘贴到src目录下（必须是src目录）</p></li><li><p>然后就可以开始写代码了，在代码中创建一个日志记录日对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-string">&quot;当前类名&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>开始记录日志，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogBackTest</span> &#123;<br>    <span class="hljs-comment">// 创建一个Logger日志对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-string">&quot;LogBackTest&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//while (true) &#123;</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                LOGGER.info(<span class="hljs-string">&quot;chu法方法开始执行~~~&quot;</span>);<br>                chu(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>);<br>                LOGGER.info(<span class="hljs-string">&quot;chu法方法执行成功~~~&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                LOGGER.error(<span class="hljs-string">&quot;chu法方法执行失败了，出现了bug~~~&quot;</span>);<br>            &#125;<br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chu</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;参数a:&quot;</span> + a);<br>        LOGGER.debug(<span class="hljs-string">&quot;参数b:&quot;</span> + b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a / b;<br>        LOGGER.info(<span class="hljs-string">&quot;结果是：&quot;</span> + c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>当我们运行程序时，就可以看到控制台记录的日志</p><p><img src="/assets/1668045391911.png" alt="1668045391911"></p><p>同时在文件中，也有一份这样的日志信息。文件在哪里内，从配置文件中去找</p><p><img src="/assets/1668045471304.png" alt="1668045471304"></p><p>打开<code>D:/log/itheima-data.log</code>看一下文件中是否有记录日志吧！！</p><p><img src="/assets/1668045530645.png" alt="1668045530645"></p><p>关于Logback的快速入门我们就做完了。至于日志的配置文件中，其他的配置是什么含义我们下一节再继续学习。</p><h3 id="3-4-日志配置文件"><a href="#3-4-日志配置文件" class="headerlink" title="3.4 日志配置文件"></a>3.4 日志配置文件</h3><p>Logback提供了一个核心配置文件logback.xml，日志框架在记录日志时会读取配置文件中的配置信息，从而记录日志的形式。具体可以做哪些配置呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 可以配置日志输出的位置是文件、还是控制台<br><span class="hljs-number">2.</span> 可以配置日志输出的格式<br><span class="hljs-number">3.</span> 还可以配置日志关闭和开启、以及哪些日志输出哪些日志不输出。<br></code></pre></td></tr></table></figure><ul><li><strong>如下图所示，控制日志往文件中输出，还是往控制台输出</strong></li></ul><p><img src="/assets/1668045955362.png" alt="1668045955362"></p><ul><li><strong>如下图所示，控制打开和关闭日志</strong></li></ul><p><img src="/assets/1668046078574.png" alt="1668046078574"></p><ul><li><p><strong>如下图所示，控制日志的输出的格式</strong></p><p>日志格式是由一些特殊的符号组成，可以根据需要删减不想看到的部分。比如不想看到线程名那就不要[%thread]。但是不建议同学们更改这些格式，因为这些都是日志很基本的信息。</p></li></ul><p><img src="/assets/1668046216355.png" alt="1668046216355"></p><h3 id="3-5-配置日志级别"><a href="#3-5-配置日志级别" class="headerlink" title="3.5 配置日志级别"></a>3.5 配置日志级别</h3><p><img src="/assets/1668046420402.png" alt="1668046420402"></p><ul><li>在哪里配置日志级别呢？如下图所示</li></ul><p><img src="/assets/1668046551345.png" alt="1668046551345"></p><ul><li><p>Logback只输出大于或者等于核心配置文件配置的日志级别信息。小于配置级别的日志信息，不被记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">配置的是trace，则trace、debug、info、warn、error级别的日志都被输出<br>配置的是debug, 则debug、info、warn、error级别的日志被输出<br>配置的是info,则info、warn、error级别的日志被输出<br>...<br></code></pre></td></tr></table></figure></li></ul><h2 id="三、多线程"><a href="#三、多线程" class="headerlink" title="三、多线程"></a>三、多线程</h2><p>同学们，接下来我们来学习一个全新而且非常重要的知识，叫做多线程。首先和同学们聊聊什么是线程？<strong>线程其实是程序中的一条执行路径。</strong></p><p> 我们之前写过的程序，其实都是单线程程序，如下图代码，如果前面的for循环没有执行完，for循环下面的代码是不会执行的。</p><p><img src="/assets/1668046984412.png" alt="1668046984412"></p><p><strong>怎样的程序才是多线程程序呢？</strong> 如下图所示，12306网站就是支持多线程的，因为同时可以有很多人一起进入网站购票，而且每一个人互不影响。再比如百度网盘，可以同时下载或者上传多个文件。这些程序中其实就有多条执行路径，每一条执行执行路径就是一条线程，所以这样的程序就是多线程程序。</p><p><img src="/assets/1668047091631.png" alt="1668047091631"></p><p>认识了什么是多线程程序，那如何使用Java创建线程呢？ Java提供了几种创建线程的方式，下一节再一种一种的学习。</p><h3 id="4-1-线程创建方式1"><a href="#4-1-线程创建方式1" class="headerlink" title="4.1 线程创建方式1"></a>4.1 线程创建方式1</h3><p>Java为开发者提供了一个类叫做Thread，此类的对象用来表示线程。创建线程并执行线程的步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>定义一个子类继承Thread类，并重写run方法<br><span class="hljs-number">2.</span>创建Thread的子类对象<br><span class="hljs-number">3.</span>调用start方法启动线程（启动线程后，会自动执行run方法中的代码）<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">// 2、必须重写Thread类的run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 描述线程的执行任务。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程MyThread输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个测试类，在测试类中创建MyThread线程对象，并启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-comment">// main方法是由一条默认的主线程负责执行。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 3、创建MyThread线程类的对象代表一个线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">// 4、启动线程（自动执行run方法的）</span><br>        t.start(); <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程main输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下图所示，我们会发现MyThread和main线程在相互抢夺CPU的执行权（<strong>注意：哪一个线程先执行，哪一个线程后执行，目前我们是无法控制的，每次输出结果都会不一样</strong>）</p><p><img src="/assets/1668047848218.png" alt="1668047848218"></p><p><strong>最后我们还需要注意一点</strong>：不能直接去调用run方法，如果直接调用run方法就不认为是一条线程启动了，而是把Thread当做一个普通对象，此时run方法中的执行的代码会成为主线程的一部分。此时执行结果是这样的。</p><p><img src="/assets/1668048108548.png" alt="1668048108548"></p><h3 id="4-2-线程创建方式2"><a href="#4-2-线程创建方式2" class="headerlink" title="4.2 线程创建方式2"></a>4.2 线程创建方式2</h3><p>接下来我们学习线程的第二种创建方式。Java为开发者提供了一个Runnable接口，该接口中只有一个run方法，意思就是通过Runnable接口的实现类对象专门来表示线程要执行的任务。具体步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先写一个Runnable接口的实现类，重写run方法(这里面就是线程要执行的代码)<br><span class="hljs-number">2.</span>再创建一个Runnable实现类的对象<br><span class="hljs-number">3.</span>创建一个Thread对象，把Runnable实现类的对象传递给Thread<br><span class="hljs-number">4.</span>调用Thread对象的start()方法启动线程（启动后会自动执行Runnable里面的run方法）<br></code></pre></td></tr></table></figure><p>代码如下：先准备一个Runnable接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、定义一个任务类，实现Runnable接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">// 2、重写runnable的run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 线程要执行的任务。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程输出 ===》&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再写一个测试类，在测试类中创建线程对象，并执行线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 3、创建任务对象。</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">// 4、把任务对象交给一个线程对象处理。</span><br>        <span class="hljs-comment">//  public Thread(Runnable target)</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target).start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程main输出 ===》&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上面代码，结果如下图所示<strong>（注意：没有出现下面交替执行的效果，也是正常的）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">主线程main输出 ===》<span class="hljs-number">1</span><br>主线程main输出 ===》<span class="hljs-number">2</span><br>主线程main输出 ===》<span class="hljs-number">3</span><br>子线程输出 ===》<span class="hljs-number">1</span><br>子线程输出 ===》<span class="hljs-number">2</span><br>子线程输出 ===》<span class="hljs-number">3</span><br>子线程输出 ===》<span class="hljs-number">4</span><br>子线程输出 ===》<span class="hljs-number">5</span><br>主线程main输出 ===》<span class="hljs-number">4</span><br>主线程main输出 ===》<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="4-3-线程创建方式2—匿名内部类"><a href="#4-3-线程创建方式2—匿名内部类" class="headerlink" title="4.3 线程创建方式2—匿名内部类"></a>4.3 线程创建方式2—匿名内部类</h3><p>同学们注意了，现在这种写法不是新知识。只是将前面第二种方式用匿名内部类改写一下。因为同学们在看别人写的代码时，有可能会看到这种写法。你知道是怎么回事就可以了。</p><p>刚刚我们学习的第二种线程的创建方式，需要写一个Runnable接口的实现类，然后再把Runnable实现类的对象传递给Thread对象。</p><p><strong>现在我不想写Runnable实现类，于是可以直接创建Runnable接口的匿名内部类对象，传递给Thread对象。</strong></p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest2_2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、直接创建Runnable接口的匿名内部类形式（任务对象）</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;子线程1输出：&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target).start();<br><br>        <span class="hljs-comment">// 简化形式1：</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;子线程2输出：&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-comment">// 简化形式2：</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;子线程3输出：&quot;</span> + i);<br>                &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程main输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-线程的创建方式3"><a href="#4-4-线程的创建方式3" class="headerlink" title="4.4 线程的创建方式3"></a>4.4 线程的创建方式3</h3><p>接下来，我们学习线程的第三种创建方式。已经有两种了为什么还有要第三种呢？ 这样，我们先分析一下前面两种都存在的一个问题。然后再引出第三种可以解决这个问题。</p><ul><li><p>假设线程执行完毕之后有一些数据需要返回，前面两种方式重写的run方法均没有返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    ...线程执行的代码...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>JDK5提供了Callable接口和FutureTask类来创建线程，它最大的优点就是有返回值。</p><p>在Callable接口中有一个call方法，重写call方法就是线程要执行的代码，它是有返回值的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>    ...线程执行的代码...<br>    <span class="hljs-keyword">return</span> 结果;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>第三种创建线程的方式，步骤如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先定义一个Callable接口的实现类，重写call方法<br><span class="hljs-number">2.</span>创建Callable实现类的对象<br><span class="hljs-number">3.</span>创建FutureTask类的对象，将Callable对象传递给FutureTask<br><span class="hljs-number">4.</span>创建Thread对象，将Future对象传递给Thread<br><span class="hljs-number">5.</span>调用Thread的start()方法启动线程(启动后会自动执行call方法)<br>   等call()方法执行完之后，会自动将返回值结果封装到FutrueTask对象中<br>   <br><span class="hljs-number">6.</span>调用FutrueTask对的get()方法获取返回结果<br></code></pre></td></tr></table></figure><p>代码如下：先准备一个Callable接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、让子类继承Thread线程类。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">// 2、必须重写Thread类的run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 描述线程的执行任务。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程MyThread输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个测试类，在测试类中创建线程并启动线程，还要获取返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 3、创建一个Callable的对象</span><br>        Callable&lt;String&gt; call = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">// 4、把Callable的对象封装成一个FutureTask对象（任务对象）</span><br>        <span class="hljs-comment">// 未来任务对象的作用？</span><br>        <span class="hljs-comment">// 1、是一个任务对象，实现了Runnable对象.</span><br>        <span class="hljs-comment">// 2、可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完毕后的结果。</span><br>        FutureTask&lt;String&gt; f1  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call);<br>        <span class="hljs-comment">// 5、把任务对象交给一个Thread对象</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f1).start();<br><br><br>        Callable&lt;String&gt; call2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>);<br>        FutureTask&lt;String&gt; f2  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call2);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f2).start();<br><br><br>        <span class="hljs-comment">// 6、获取线程执行完毕后返回的结果。</span><br>        <span class="hljs-comment">// 注意：如果执行到这儿，假如上面的线程还没有执行完毕</span><br>        <span class="hljs-comment">// 这里的代码会暂停，等待上面线程执行完毕后才会获取结果。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> f1.get();<br>        System.out.println(rs);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> f2.get();<br>        System.out.println(rs2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19IO流（二）</title>
    <link href="/2023/12/06/day19-IO%E6%B5%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/12/06/day19-IO%E6%B5%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="day19-IO流（二）"><a href="#day19-IO流（二）" class="headerlink" title="day19-IO流（二）"></a>day19-IO流（二）</h1><h2 id="一、字符流"><a href="#一、字符流" class="headerlink" title="一、字符流"></a>一、字符流</h2><p>同学们，前面我们学习了字节流，使用字节流可以读取文件中的字节数据。但是如果文件中有中文使用字节流来读取，就有可能读到半个汉字的情况，这样会导致乱码。虽然使用读取全部字节的方法不会出现乱码，但是如果文件过大又不太合适。</p><p>所以Java专门为我们提供了另外一种流，叫字符流，可以字符流是专门为读取文本数据而生的。</p><h3 id="1-1-FileReader类"><a href="#1-1-FileReader类" class="headerlink" title="1.1 FileReader类"></a>1.1 FileReader类</h3><p>先类学习字符流中的FileReader类，这是字符输入流，用来将文件中的字符数据读取到程序中来。</p><p><img src="/assets/1667914646397.png" alt="1667914646397"></p><p>FileReader读取文件的步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：创建FileReader对象与要读取的源文件接通<br>第二步：调用read()方法读取文件中的字符<br>第三步：调用close()方法关闭流<br></code></pre></td></tr></table></figure><p><img src="/assets/1667914727332.png" alt="1667914727332"></p><p>需要用到的方法：先通过构造器创建对象，再通过read方法读取数据（<strong>注意：两个read方法的返回值，含义不一样</strong>）</p><p><img src="/assets/1667915012716.png" alt="1667915012716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握文件字符输入流。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 1、创建一个文件字符输入流管道与源文件接通</span><br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;io-app2\\src\\itheima01.txt&quot;</span>);<br>                )&#123;<br>            <span class="hljs-comment">// 2、一个字符一个字符的读（性能较差）</span><br><span class="hljs-comment">//            int c; // 记住每次读取的字符编号。</span><br><span class="hljs-comment">//            while ((c = fr.read()) != -1)&#123;</span><br><span class="hljs-comment">//                System.out.print((char) c);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">// 每次读取一个字符的形式，性能肯定是比较差的。</span><br><br>            <span class="hljs-comment">// 3、每次读取多个字符。（性能是比较不错的！）</span><br>            <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">3</span>];<br>            <span class="hljs-type">int</span> len; <span class="hljs-comment">// 记住每次读取了多少个字符。</span><br>            <span class="hljs-keyword">while</span> ((len = fr.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 读取多少倒出多少</span><br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-FileWriter类"><a href="#1-2-FileWriter类" class="headerlink" title="1.2 FileWriter类"></a>1.2 FileWriter类</h3><p>在上节课，我们学习了FileReader，它可以将文件中的字符数据读取到程序中来。接下来，我们就要学习FileWriter了，它可以将程序中的字符数据写入文件。</p><p><img src="/assets/1667915174777.png" alt="1667915174777"></p><p>FileWriter往文件中写字符数据的步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：创建FileWirter对象与要读取的目标文件接通<br>第二步：调用write(字符数据/字符数组/字符串)方法读取文件中的字符<br>第三步：调用close()方法关闭流<br></code></pre></td></tr></table></figure><p>需要用到的方法如下：构造器是用来创建FileWriter对象的，有了对象才能调用write方法写数据到文件。</p><p><img src="/assets/1667915265102.png" alt="1667915265102"></p><p>接下来，用代码演示一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握文件字符输出流：写字符数据出去</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriterTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 0、创建一个文件字符输出流管道与目标文件接通。</span><br>                <span class="hljs-comment">// 覆盖管道</span><br>                <span class="hljs-comment">// Writer fw = new FileWriter(&quot;io-app2/src/itheima02out.txt&quot;);</span><br>                <span class="hljs-comment">// 追加数据的管道</span><br>                <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io-app2/src/itheima02out.txt&quot;</span>, <span class="hljs-literal">true</span>);<br>                )&#123;<br>            <span class="hljs-comment">// 1、public void write(int c):写一个字符出去</span><br>            fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            fw.write(<span class="hljs-number">97</span>);<br>            <span class="hljs-comment">//fw.write(&#x27;磊&#x27;); // 写一个字符出去</span><br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>); <span class="hljs-comment">// 换行</span><br><br>            <span class="hljs-comment">// 2、public void write(String c)写一个字符串出去</span><br>            fw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            <span class="hljs-comment">// 3、public void write(String c ,int pos ,int len):写字符串的一部分出去</span><br>            fw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            <span class="hljs-comment">// 4、public void write(char[] buffer):写一个字符数组出去</span><br>            <span class="hljs-type">char</span>[] buffer = &#123;<span class="hljs-string">&#x27;黑&#x27;</span>, <span class="hljs-string">&#x27;马&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>            fw.write(buffer);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            <span class="hljs-comment">// 5、public void write(char[] buffer ,int pos ,int len):写字符数组的一部分出去</span><br>            fw.write(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-FileWriter写的注意事项"><a href="#1-3-FileWriter写的注意事项" class="headerlink" title="1.3 FileWriter写的注意事项"></a>1.3 FileWriter写的注意事项</h3><p>各位同学，刚才我们已经学习了FileWriter字符输出流的基本使用。但是，这里有一个小问题需要和同学们说下一：<strong>FileWriter写完数据之后，必须刷新或者关闭，写出去的数据才能生效。</strong></p><p>比如：下面的代码只调用了写数据的方法，没有关流的方法。当你打开目标文件时，是看不到任何数据的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建FileWriter对象</span><br><span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io-app2/src/itheima03out.txt&quot;</span>);<br><br><span class="hljs-comment">//2.写字符数据出去</span><br>fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>fw.write(<span class="hljs-string">&#x27;b&#x27;</span>);<br>fw.write(<span class="hljs-string">&#x27;c&#x27;</span>);<br></code></pre></td></tr></table></figure><p>而下面的代码，加上了flush()方法之后，数据就会立即到目标文件中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建FileWriter对象</span><br><span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io-app2/src/itheima03out.txt&quot;</span>);<br><br><span class="hljs-comment">//2.写字符数据出去</span><br>fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>fw.write(<span class="hljs-string">&#x27;b&#x27;</span>);<br>fw.write(<span class="hljs-string">&#x27;c&#x27;</span>);<br><br><span class="hljs-comment">//3.刷新</span><br>fw.flush(); <br></code></pre></td></tr></table></figure><p>下面的代码，调用了close()方法，数据也会立即到文件中去。因为close()方法在关闭流之前，会将内存中缓存的数据先刷新到文件，再关流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建FileWriter对象</span><br><span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io-app2/src/itheima03out.txt&quot;</span>);<br><br><span class="hljs-comment">//2.写字符数据出去</span><br>fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>fw.write(<span class="hljs-string">&#x27;b&#x27;</span>);<br>fw.write(<span class="hljs-string">&#x27;c&#x27;</span>);<br><br><span class="hljs-comment">//3.关闭流</span><br>fw.close(); <span class="hljs-comment">//会先刷新，再关流</span><br></code></pre></td></tr></table></figure><p>但是需要注意的是，关闭流之后，就不能在对流进行操作了。否则会出异常</p><p><img src="/assets/1667915749299.png" alt="1667915749299"></p><h2 id="二、缓冲流"><a href="#二、缓冲流" class="headerlink" title="二、缓冲流"></a>二、缓冲流</h2><p>学习完字符流之后，接下来我们学习一下缓冲流。我们还是先来认识一下缓存流，再来说一下它的作用。缓冲流有四种，如下图所示</p><p><img src="/assets/1667915902693.png" alt="1667915902693"></p><p><strong>缓冲流的作用</strong>：可以对原始流进行包装，提高原始流读写数据的性能。</p><h3 id="2-1-缓冲字节流"><a href="#2-1-缓冲字节流" class="headerlink" title="2.1 缓冲字节流"></a>2.1 缓冲字节流</h3><p>我们先来学习字节缓冲流是如何提高读写数据的性能的，原理如下图所示。是因为在缓冲流的底层自己封装了一个长度为8KB（8129byte）的字节数组，但是缓冲流不能单独使用，它需要依赖于原始流。</p><ul><li><strong>读数据时：</strong>它先用原始字节输入流一次性读取8KB的数据存入缓冲流内部的数组中（ps: 先一次多囤点货），再从8KB的字节数组中读取一个字节或者多个字节（把消耗屯的货）。</li></ul><p><img src="/assets/1667916051946.png" alt="1667916051946"></p><ul><li><strong>写数据时：</strong> 它是先把数据写到缓冲流内部的8BK的数组中（ps: 先攒一车货），等数组存满了，再通过原始的字节输出流，一次性写到目标文件中去（把囤好的货，一次性运走）。</li></ul><p><img src="/assets/1667916766340.png" alt="1667916766340"></p><p>在创建缓冲字节流对象时，需要封装一个原始流对象进来。构造方法如下</p><p><img src="/assets/1667916924862.png" alt="1667916924862"></p><p>如果我们用缓冲流复制文件，代码写法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedInputStreamTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima01.txt&quot;</span>);<br>                <span class="hljs-comment">// 1、定义一个字节缓冲输入流包装原始的字节输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima01_bak.txt&quot;</span>);<br>                <span class="hljs-comment">// 2、定义一个字节缓冲输出流包装原始的字节输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        )&#123;<br><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = bis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                bos.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成！！&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-字符缓冲流"><a href="#2-2-字符缓冲流" class="headerlink" title="2.2 字符缓冲流"></a>2.2 字符缓冲流</h3><p>接下来，我们学习另外两个缓冲流——字符缓冲流。它的原理和字节缓冲流是类似的，它底层也会有一个8KB的数组，但是这里是字符数组。字符缓冲流也不能单独使用，它需要依赖于原始字符流一起使用。</p><p><img src="/assets/1667918228776.png" alt="1667918228776"></p><ul><li><strong>BufferedReader读数据时：</strong>它先原始字符输入流一次性读取8KB的数据存入缓冲流内部的数组中（ps: 先一次多囤点货），再从8KB的字符数组中读取一个字符或者多个字符（把消耗屯的货）。</li></ul><p><img src="/assets/1667918633907.png" alt="1667918633907"></p><p>创建BufferedReader对象需要用到BufferedReader的构造方法，内部需要封装一个原始的字符输入流，我们可以传入FileReader.</p><p><img src="/assets/1667919020690.png" alt="1667919020690"></p><p>而且BufferedReader还要特有的方法，一次可以读取文本文件中的一行</p><p><img src="/assets/1667919061356.png" alt="1667919061356"></p><p>使用BufferedReader读取数据的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReaderTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;io-app2\\src\\itheima04.txt&quot;</span>);<br>                <span class="hljs-comment">// 创建一个字符缓冲输入流包装原始的字符输入流</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>        )&#123;<br><span class="hljs-comment">//            char[] buffer = new char[3];</span><br><span class="hljs-comment">//            int len;</span><br><span class="hljs-comment">//            while ((len = br.read(buffer)) != -1)&#123;</span><br><span class="hljs-comment">//                System.out.print(new String(buffer, 0, len));</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            System.out.println(br.readLine());</span><br><span class="hljs-comment">//            System.out.println(br.readLine());</span><br><span class="hljs-comment">//            System.out.println(br.readLine());</span><br><span class="hljs-comment">//            System.out.println(br.readLine());</span><br><br>            String line; <span class="hljs-comment">// 记住每次读取的一行数据</span><br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>BufferedWriter写数据时：</strong> 它是先把数据写到字符缓冲流内部的8BK的数组中（ps: 先攒一车货），等数组存满了，再通过原始的字符输出流，一次性写到目标文件中去（把囤好的货，一次性运走）。如下图所示</li></ul><p><img src="/assets/1667918775445.png" alt="1667918775445"></p><p>创建BufferedWriter对象时需要用到BufferedWriter的构造方法，而且内部需要封装一个原始的字符输出流，我们这里可以传递FileWriter。</p><p><img src="/assets/1667919195054.png" alt="1667919195054"></p><p>而且BufferedWriter新增了一个功能，可以用来写一个换行符</p><p><img src="/assets/1667919243053.png" alt="1667919243053"></p><p>接下来，用代码演示一下，使用BufferedWriter往文件中写入字符数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedWriterTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io-app2/src/itheima05out.txt&quot;</span>, <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 创建一个字符缓冲输出流管道包装原始的字符输出流</span><br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br>        )&#123;<br><br>            bw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            bw.write(<span class="hljs-number">97</span>);<br>            bw.write(<span class="hljs-string">&#x27;磊&#x27;</span>);<br>            bw.newLine();<br><br>            bw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<br>            bw.newLine();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-缓冲流性能分析"><a href="#2-3-缓冲流性能分析" class="headerlink" title="2.3 缓冲流性能分析"></a>2.3 缓冲流性能分析</h3><p>我们说缓冲流内部多了一个数组，可以提高原始流的读写性能。讲到这一定有同学有这么一个疑问，它和我们使用原始流，自己加一个8BK数组不是一样的吗？ 缓冲流就一定能提高性能吗？先告诉同学们答案，<strong>缓冲流不一定能提高性能</strong>。</p><blockquote><p>下面我们用一个比较大文件（889MB）复制，做性能测试，分别使用下面四种方式来完成文件复制，并记录文件复制的时间。</p></blockquote><p>① 使用低级流一个字节一个字节的复制</p><p>② 使用低级流按照字节数组的形式复制</p><p>③ 使用缓冲流一个字节一个字节的复制</p><p>④ 使用缓冲流按照字节数组的形式复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">低级流一个字节复制: 慢得简直让人无法忍受<br>低级流按照字节数组复制(数组长度<span class="hljs-number">1024</span>): <span class="hljs-number">12.</span>117s<br>缓冲流一个字节复制: <span class="hljs-number">11.</span>058s<br>缓冲流按照字节数组复制(数组长度<span class="hljs-number">1024</span>): <span class="hljs-number">2.</span>163s<br>【注意：这里的测试只能做一个参考，和电脑性能也有直接关系】<br></code></pre></td></tr></table></figure><p>经过上面的测试，我们可以得出一个结论：<strong>默认情况下，采用一次复制1024个字节，缓冲流完胜。</strong></p><blockquote><p>但是，缓冲流就一定性能高吗？我们采用一次复制8192个字节试试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">低级流按照字节数组复制(数组长度<span class="hljs-number">8192</span>): <span class="hljs-number">2.</span>535s<br>缓冲流按照字节数组复制(数组长度<span class="hljs-number">8192</span>): <span class="hljs-number">2.</span>088s<br></code></pre></td></tr></table></figure><p>经过上面的测试，我们可以得出一个结论：<strong>一次读取8192个字节时，低级流和缓冲流性能相当。</strong>相差的那几毫秒可以忽略不计。</p><blockquote><p>继续把数组变大，看一看缓冲流就一定性能高吗？现在采用一次读取1024*32个字节数据试试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">低级流按照字节数组复制(数组长度<span class="hljs-number">8192</span>): <span class="hljs-number">1.</span>128s<br>缓冲流按照字节数组复制(数组长度<span class="hljs-number">8192</span>): <span class="hljs-number">1.</span>133s<br></code></pre></td></tr></table></figure><p>经过上面的测试，我们可以得出一个结论：<strong>数组越大性能越高，低级流和缓冲流性能相当。</strong>相差的那几秒可以忽略不计。</p><blockquote><p>继续把数组变大，看一看缓冲流就一定性能高吗？现在采用一次读取1024*6个字节数据试试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">低级流按照字节数组复制(数组长度<span class="hljs-number">8192</span>): <span class="hljs-number">1.</span>039s<br>缓冲流按照字节数组复制(数组长度<span class="hljs-number">8192</span>): <span class="hljs-number">1.</span>151s<br></code></pre></td></tr></table></figure><p>此时你会发现，当数组大到一定程度，性能已经提高了多少了，甚至缓冲流的性能还没有低级流高。</p><p>最终总结一下：<strong>缓冲流的性能不一定比低级流高，其实低级流自己加一个数组，性能其实是不差。</strong>只不过缓冲流帮你加了一个相对而言大小比较合理的数组 。</p><h2 id="三、转换流"><a href="#三、转换流" class="headerlink" title="三、转换流"></a>三、转换流</h2><p>前面我们学习过FileReader读取文件中的字符，但是同学们注意了，FileReader默认只能读取UTF-8编码格式的文件。如果使用FileReader读取GBK格式的文件，可能存在乱码，因为FileReader它遇到汉字默认是按照3个字节来读取的，而GBK格式的文件一个汉字是占2个字节，这样就会导致乱码。</p><p>Java给我们提供了另外两种流InputStreamReader，OutputStreamWriter，这两个流我们把它叫做转换流。它们可以将字节流转换为字符流，并且可以指定编码方案。</p><h3 id="3-1-InputStreamReader类"><a href="#3-1-InputStreamReader类" class="headerlink" title="3.1 InputStreamReader类"></a>3.1 InputStreamReader类</h3><p>接下来，我们先学习InputStreamReader类，你看这个类名就比较有意思，前面是InputStream表示字节输入流，后面是Reader表示字符输入流，合在一起意思就是表示可以把InputStream转换为Reader，最终InputStreamReader其实也是Reader的子类，所以也算是字符输入流。</p><p>InputStreamReader也是不能单独使用的，它内部需要封装一个InputStream的子类对象，再指定一个编码表，如果不指定编码表，默认会按照UTF-8形式进行转换。</p><blockquote><p>需求：我们可以先准备一个GBK格式的文件，然后使用下面的代码进行读取，看是是否有乱码。</p></blockquote><p><img src="/assets/1667922646132.png" alt="1667922646132"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReaderTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 1、得到文件的原始字节流（GBK的字节流形式）</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima06.txt&quot;</span>);<br>                <span class="hljs-comment">// 2、把原始的字节输入流按照指定的字符集编码转换成字符输入流</span><br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is, <span class="hljs-string">&quot;GBK&quot;</span>);<br>                <span class="hljs-comment">// 3、把字符输入流包装成缓冲字符输入流</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>                )&#123;<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(line);<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行完之后，你会发现没有乱码。</p><h3 id="3-2-OutputStreamWriter类"><a href="#3-2-OutputStreamWriter类" class="headerlink" title="3.2 OutputStreamWriter类"></a>3.2 OutputStreamWriter类</h3><p>接下来，我们先学习OutputStreamWriter类，你看这个类名也比较有意思，前面是OutputStream表示字节输出流，后面是Writer表示字符输出流，合在一起意思就是表示可以把OutputStream转换为Writer，最终OutputStreamWriter其实也是Writer的子类，所以也算是字符输出流。</p><p>OutputStreamReader也是不能单独使用的，它内部需要封装一个OutputStream的子类对象，再指定一个编码表，如果不指定编码表，默认会按照UTF-8形式进行转换。</p><blockquote><p>需求：我们可以先准备一个GBK格式的文件，使用下面代码往文件中写字符数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputStreamWriterTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 指定写出去的字符编码。</span><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 1、创建一个文件字节输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima07out.txt&quot;</span>);<br>                <span class="hljs-comment">// 2、把原始的字节输出流，按照指定的字符集编码转换成字符输出转换流。</span><br>                <span class="hljs-type">Writer</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(os, <span class="hljs-string">&quot;GBK&quot;</span>);<br>                <span class="hljs-comment">// 3、把字符输出流包装成缓冲字符输出流</span><br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(osw);<br>                )&#123;<br>            bw.write(<span class="hljs-string">&quot;我是中国人abc&quot;</span>);<br>            bw.write(<span class="hljs-string">&quot;我爱你中国123&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、打印流"><a href="#四、打印流" class="headerlink" title="四、打印流"></a>四、打印流</h2><p>接下来，我们学习打印流，其实打印流我们从开学第一天就一直再使用，只是没有学到你感受不到而已。打印流可以实现更加方便，更加高效的写数据的方式。</p><h3 id="4-1-打印流基本使用"><a href="#4-1-打印流基本使用" class="headerlink" title="4.1 打印流基本使用"></a>4.1 打印流基本使用</h3><p>打印流，这里所说的打印其实就是写数据的意思，它和普通的write方法写数据还不太一样，一般会使用打印流特有的方法叫<code>print(数据)</code>或者<code>println(数据)</code>，它打印啥就输出啥。</p><p>打印流有两个，一个是字节打印流PrintStream，一个是字符打印流PrintWriter，如下图所示</p><p><img src="/assets/1667923225787.png" alt="1667923225787"></p><p><strong>PrintStream和PrintWriter的用法是一样的，所以这里就一块演示了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 1、创建一个打印流管道</span><br><span class="hljs-comment">//                PrintStream ps =</span><br><span class="hljs-comment">//                        new PrintStream(&quot;io-app2/src/itheima08.txt&quot;, Charset.forName(&quot;GBK&quot;));</span><br><span class="hljs-comment">//                PrintStream ps =</span><br><span class="hljs-comment">//                        new PrintStream(&quot;io-app2/src/itheima08.txt&quot;);</span><br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima08.txt&quot;</span>, <span class="hljs-literal">true</span>));<br>                )&#123;<br>                ps.print(<span class="hljs-number">97</span>);<span class="hljs-comment">//文件中显示的就是:97</span><br>                ps.print(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//文件中显示的就是:a</span><br>                ps.println(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<span class="hljs-comment">//文件中显示的就是:我爱你中国abc</span><br>                ps.println(<span class="hljs-literal">true</span>);<span class="hljs-comment">//文件中显示的就是:true</span><br>                ps.println(<span class="hljs-number">99.5</span>);<span class="hljs-comment">//文件中显示的就是99.5</span><br><br>                ps.write(<span class="hljs-number">97</span>); <span class="hljs-comment">//文件中显示a，发现和前面println方法的区别了吗？</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-重定向输出语句"><a href="#4-2-重定向输出语句" class="headerlink" title="4.2 重定向输出语句"></a>4.2 重定向输出语句</h3><p>其实我们开学第一课，就给同学们讲过<code>System.out.println()</code>这句话表示打印输出，但是至于为什么能够输出，其实我们一直不清楚。</p><p>以前是因为知识储备还不够，无法解释，到现在就可以给同学们揭晓谜底了，因为System里面有一个静态变量叫out，out的数据类型就是PrintStream，它就是一个打印流，而且这个打印流的默认输出目的地是控制台，所以我们调用<code>System.out.pirnln()</code>就可以往控制台打印输出任意类型的数据，而且打印啥就输出啥。</p><p>而且System还提供了一个方法，可以修改底层的打印流，这样我们就可以重定向打印语句的输出目的地了。我们玩一下, 直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;老骥伏枥&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;志在千里&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> ( <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima09.txt&quot;</span>); )&#123;<br>            <span class="hljs-comment">// 把系统默认的打印流对象改成自己设置的打印流</span><br>            System.setOut(ps);<br><br>            System.out.println(<span class="hljs-string">&quot;烈士暮年&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;壮心不已&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时打印语句，将往文件中打印数据，而不在控制台。</p><h2 id="五、数据流"><a href="#五、数据流" class="headerlink" title="五、数据流"></a>五、数据流</h2><p>同学们，接下我们再学习一种流，这种流在开发中偶尔也会用到。比如，我们想把数据和数据的类型一并写到文件中去，读取的时候也将数据和数据类型一并读出来。这就可以用到数据流，有两个DataInputStream和DataOutputStream.</p><p><img src="/assets/1667924066920.png" alt="1667924066920"></p><h3 id="5-1-DataOutputStream类"><a href="#5-1-DataOutputStream类" class="headerlink" title="5.1 DataOutputStream类"></a>5.1 DataOutputStream类</h3><p>我们先学习DataOutputStream类，它也是一种包装流，创建DataOutputStream对象时，底层需要依赖于一个原始的OutputStream流对象。然后调用它的wirteXxx方法，写的是特定类型的数据。</p><p><img src="/assets/1667924147403.png" alt="1667924147403"></p><p>代码如下：往文件中写整数、小数、布尔类型数据、字符串数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataOutputStreamTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 1、创建一个数据输出流包装低级的字节输出流</span><br>                <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima10out.txt&quot;</span>));<br>                )&#123;<br>            dos.writeInt(<span class="hljs-number">97</span>);<br>            dos.writeDouble(<span class="hljs-number">99.5</span>);<br>            dos.writeBoolean(<span class="hljs-literal">true</span>);<br>            dos.writeUTF(<span class="hljs-string">&quot;黑马程序员666！&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-DataInputStream类"><a href="#5-2-DataInputStream类" class="headerlink" title="5.2 DataInputStream类"></a>5.2 DataInputStream类</h3><p>学习完DataOutputStream后，再学习DataIntputStream类，它也是一种包装流，创建DataInputStream对象时，底层需要依赖于一个原始的InputStream流对象。然后调用它的readXxx()方法就可以读取特定类型的数据。</p><p><img src="/assets/1667924375953.png" alt="1667924375953"></p><p>代码如下：读取文件中特定类型的数据（整数、小数、字符串等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataInputStreamTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima10out.txt&quot;</span>));<br>                )&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dis.readInt();<br>            System.out.println(i);<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> dis.readDouble();<br>            System.out.println(d);<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> dis.readBoolean();<br>            System.out.println(b);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dis.readUTF();<br>            System.out.println(rs);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、序列化流"><a href="#六、序列化流" class="headerlink" title="六、序列化流"></a>六、序列化流</h2><p>各位同学同学，还有最后一个流要学习，叫做序列化流。序列化流是干什么用的呢？ 我们知道字节流是以字节为单位来读写数据、字符流是按照字符为单位来读写数据、而对象流是以对象为单位来读写数据。也就是把对象当做一个整体，可以写一个对象到文件，也可以从文件中把对象读取出来。</p><p><img src="/assets/1667924794181.png" alt="1667924794181"></p><p>这里有一个新词 序列化，第一次听同学们可能还比较陌生，我来给同学们解释一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">序列化：意思就是把对象写到文件或者网络中去。（简单记：写对象）<br>反序列化：意思就是把对象从文件或者网络中读取出来。（简单记：读对象）<br></code></pre></td></tr></table></figure><h3 id="6-1-ObjectOutputStraem类"><a href="#6-1-ObjectOutputStraem类" class="headerlink" title="6.1 ObjectOutputStraem类"></a>6.1 ObjectOutputStraem类</h3><p>接下来，先学习ObjectOutputStream流，它也是一个包装流，不能单独使用，需要结合原始的字节输出流使用。</p><p>代码如下：将一个User对象写到文件中去</p><ul><li>第一步：先准备一个User类，必须让其实现Serializable接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注意：对象如果需要序列化，必须实现序列化接口。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String loginName;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">// transient 这个成员变量将不参与序列化。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String passWord;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String loginName, String userName, <span class="hljs-type">int</span> age, String passWord)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loginName = loginName;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;loginName=&#x27;&quot;</span> + loginName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, passWord=&#x27;&quot;</span> + passWord + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二步：再创建ObjectOutputStream流对象，调用writeObject方法对象到文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1ObjectOutputStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 2、创建一个对象字节输出流包装原始的字节 输出流。</span><br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima11out.txt&quot;</span>));<br>                )&#123;<br>            <span class="hljs-comment">// 1、创建一个Java对象。</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">32</span>, <span class="hljs-string">&quot;666888xyz&quot;</span>);<br><br>            <span class="hljs-comment">// 3、序列化对象到文件中去</span><br>            oos.writeObject(u);<br>            System.out.println(<span class="hljs-string">&quot;序列化对象成功！！&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：写到文件中的对象，是不能用记事本打开看的。因为对象本身就不是文本数据，打开是乱码</strong></p><p><img src="/assets/1667925212261.png" alt="1667925212261"></p><p>怎样才能读懂文件中的对象是什么呢？这里必须用反序列化，自己写代码读。</p><h3 id="6-2-ObjectInputStream类"><a href="#6-2-ObjectInputStream类" class="headerlink" title="6.2 ObjectInputStream类"></a>6.2 ObjectInputStream类</h3><p>接下来，学习ObjectInputStream流，它也是一个包装流，不能单独使用，需要结合原始的字节输入流使用。</p><p>接着前面的案例，文件中已经有一个Student对象，现在要使用ObjectInputStream读取出来。称之为反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2ObjectInputStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>            <span class="hljs-comment">// 1、创建一个对象字节输入流管道，包装 低级的字节输入流与源文件接通</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;io-app2/src/itheima11out.txt&quot;</span>));<br>        )&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User) ois.readObject();<br>            System.out.println(u);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、补充知识：IO框架"><a href="#七、补充知识：IO框架" class="headerlink" title="七、补充知识：IO框架"></a>七、补充知识：IO框架</h2><p>最后，再给同学们补充讲解一个知识，叫做IO框架。它有什么用呢？有同学经常问老师，我们只学习了IO流对文件复制，能不能复制文件夹呀？ </p><p>当然是可以咯，但是如果让我们自己写复制文件夹的代码需要用到递归，还是比较麻烦的。为了简化对IO操作，<strong>由apache开源基金组织提供了一组有关IO流小框架，可以提高IO流的开发效率。</strong></p><p>这个框架的名字叫commons-io：其本质是别人写好的一些字节码文件（class文件），打包成了一个jar包。我们只需要把jar包引入到我们的项目中，就可以直接用了。 </p><p>这里给同学们介绍一个jar包中提供的工具类叫FileUtils，它的部分功能如下，很方便，你一看名字就知道怎么用了。</p><p><img src="/assets/1667925627850.png" alt="1667925627850"></p><p>在写代码之前，先需要引入jar包，具体步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>在模块的目录下，新建一个lib文件夹<br><span class="hljs-number">2.</span>把jar包复制粘贴到lib文件夹下<br><span class="hljs-number">3.</span>选择lib下的jar包，右键点击Add As Library，然后就可以用了。<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsIOTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.复制文件</span><br>        FileUtils.copyFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;io-app2\\src\\itheima01.txt&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;io-app2/src/a.txt&quot;</span>));<br>        <br>        <span class="hljs-comment">//2.复制文件夹</span><br>        FileUtils.copyDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\resource\\私人珍藏&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\resource\\私人珍藏3&quot;</span>));<br>        <br>        <span class="hljs-comment">//3.删除文件夹</span><br>        FileUtils.deleteDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\resource\\私人珍藏3&quot;</span>));<br><br>        <span class="hljs-comment">// Java提供的原生的一行代码搞定很多事情</span><br>         Files.copy(Path.of(<span class="hljs-string">&quot;io-app2\\src\\itheima01.txt&quot;</span>), Path.of(<span class="hljs-string">&quot;io-app2\\src\\b.txt&quot;</span>));<br>        System.out.println(Files.readString(Path.of(<span class="hljs-string">&quot;io-app2\\src\\itheima01.txt&quot;</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18字符集、IO流（一）</title>
    <link href="/2023/12/06/day18-%E5%AD%97%E7%AC%A6%E9%9B%86%E3%80%81IO%E6%B5%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/12/06/day18-%E5%AD%97%E7%AC%A6%E9%9B%86%E3%80%81IO%E6%B5%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="day18-字符集、IO流（一）"><a href="#day18-字符集、IO流（一）" class="headerlink" title="day18-字符集、IO流（一）"></a>day18-字符集、IO流（一）</h1><p>各位同学，前面我们已经学习了File类，通过File类的对象可以对文件进行操作，但是不能操作文件中的内容。要想操作文件中的内容，我们还得学习IO流。但是在正式学习IO流之前，我们还需要学习一个前置知识叫做字符集，只有我们把字符集搞明白了，再学习IO流才会更加丝滑。</p><h2 id="一、字符集"><a href="#一、字符集" class="headerlink" title="一、字符集"></a>一、字符集</h2><h3 id="1-1-字符集的来历"><a href="#1-1-字符集的来历" class="headerlink" title="1.1 字符集的来历"></a>1.1 字符集的来历</h3><p>所以，接下来我们正式学习一下字符集。先来带着同学们，了解一下字符集的来历。</p><p>我们知道计算机是美国人发明的，由于计算机能够处理的数据只能是0和1组成的二进制数据，为了让计算机能够处理字符，于是美国人就把他们会用到的每一个字符进行了编码（<strong>所谓编码，就是为一个字符编一个二进制数据</strong>），如下图所示：</p><p><img src="/assets/1667738471094.png" alt="1667738471094"></p><p>美国人常用的字符有英文字母、标点符号、数字以及一些特殊字符，这些字符一共也不到128个，所以他们用1个字节来存储1字符就够了。 美国人把他们用到的字符和字符对应的编码总结成了一张码表，这张码表叫做ASCII码表（也叫ASCII字符集）。</p><p>其实计算机只在美国用是没有问题的，但是计算机慢慢的普及到全世界，当普及到中国的时候，在计算机中想要存储中文，那ASCII字符集就不够用了，因为中文太多了，随便数一数也有几万个字符。</p><p>于是中国人为了在计算机中存储中文，也编了一个中国人用的字符集叫做GBK字符集，这里面包含2万多个汉字字符，<strong>GBK中一个汉字采用两个字节来存储</strong>，为了能够显示英文字母，GBK字符集也兼容了ASCII字符集，<strong>在GBK字符集中一个字母还是采用一个字节来存储</strong>。</p><h3 id="1-2-汉字和字母的编码特点"><a href="#1-2-汉字和字母的编码特点" class="headerlink" title="1.2 汉字和字母的编码特点"></a>1.2 汉字和字母的编码特点</h3><p>讲到这里，可能有同学有这么一个疑问： 如果一个文件中既有中文，也有英文，那计算机怎么知道哪几个字节表示一个汉字，哪几个字节表示一个字母呢？</p><p>其实这个问题问当想当有水平，接下来，就带着同学们了解一下，计算机是怎么识别中文和英文的。</p><p>比如：在文件中存储一个<code>我a你</code>，底层其实存储的是这样的二进制数据。</p><p><strong>需要我们注意汉字和字母的编码特点：</strong></p><ul><li><ol><li>如果是存储字母，采用1个字节来存储，一共8位，其中第1位是0</li><li>如果是存储汉字，采用2个字节来存储，一共16位，其中第1位是1</li></ol></li></ul><p><img src="/assets/1667739473545.png" alt="1667739473545"></p><p><strong>当读取文件中的字符时，通过识别读取到的第1位是0还是1来判断是字母还是汉字</strong></p><ul><li>如果读取到第1位是0，就认为是一个字母，此时往后读1个字节。</li><li>如果读取到第1位是1，就认为是一个汉字，此时往后读2个字节。</li></ul><h3 id="1-3-Unicode字符集"><a href="#1-3-Unicode字符集" class="headerlink" title="1.3 Unicode字符集"></a>1.3 Unicode字符集</h3><p>同学们注意了，咱们国家可以用GBK字符集来表示中国人使用的文字，那世界上还有很多其他的国家，他们也有自己的文字，他们也想要自己国家的文字在计算机中处理，于是其他国家也在搞自己的字符集，就这样全世界搞了上百个字符集，而且各个国家的字符集互不兼容。 这样其实很不利于国际化的交流，可能一个文件在我们国家的电脑上打开好好的，但是在其他国家打开就是乱码了。</p><p>为了解决各个国家字符集互不兼容的问题，由国际化标准组织牵头，设计了一套全世界通用的字符集，叫做Unicode字符集。在Unicode字符集中包含了世界上所有国家的文字，一个字符采用4个自己才存储。</p><p>在Unicode字符集中，采用一个字符4个字节的编码方案，又造成另一个问题：如果是说英语的国家，他们只需要用到26大小写字母，加上一些标点符号就够了，本身一个字节就可以表示完，用4个字节就有点浪费。</p><p>于是又对Unicode字符集中的字符进行了重新编码，一共设计了三种编码方案。分别是UTF-32、UTF-16、UTF-8;  <strong>其中比较常用的编码方案是UTF-8</strong></p><p>下面我们详细介绍一下UTF-8这种编码方案的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>UTF-<span class="hljs-number">8</span>是一种可变长的编码方案，工分为<span class="hljs-number">4</span>个长度区<br><span class="hljs-number">2.</span>英文字母、数字占<span class="hljs-number">1</span>个字节兼容(ASCII编码)<br><span class="hljs-number">3.</span>汉字字符占<span class="hljs-number">3</span>个字节<br><span class="hljs-number">4.</span>极少数字符占<span class="hljs-number">4</span>个字节<br></code></pre></td></tr></table></figure><h3 id="1-4-字符集小结"><a href="#1-4-字符集小结" class="headerlink" title="1.4 字符集小结"></a>1.4 字符集小结</h3><p>最后，我们将前面介绍过的字符集小结一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ASCII字符集：《美国信息交换标准代码》，包含英文字母、数字、标点符号、控制字符<br>特点：<span class="hljs-number">1</span>个字符占<span class="hljs-number">1</span>个字节<br><br>GBK字符集：中国人自己的字符集，兼容ASCII字符集，还包含<span class="hljs-number">2</span>万多个汉字<br>特点：<span class="hljs-number">1</span>个字母占用<span class="hljs-number">1</span>个字节；<span class="hljs-number">1</span>个汉字占用<span class="hljs-number">2</span>个字节<br><br>Unicode字符集：包含世界上所有国家的文字，有三种编码方案，最常用的是UTF-<span class="hljs-number">8</span><br>    UTF-<span class="hljs-number">8</span>编码方案：英文字母、数字占<span class="hljs-number">1</span>个字节兼容(ASCII编码)、汉字字符占<span class="hljs-number">3</span>个字节<br></code></pre></td></tr></table></figure><h3 id="1-5-编码和解码"><a href="#1-5-编码和解码" class="headerlink" title="1.5 编码和解码"></a>1.5 编码和解码</h3><p>搞清楚字符集的知识之后，我们接下来再带着同学们使用Java代码完成编码和解码的操作。</p><p>其实String类类中就提供了相应的方法，可以完成编码和解码的操作。</p><ul><li>编码：把字符串按照指定的字符集转换为字节数组</li><li>解码：把字节数组按照指定的字符集转换为字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握如何使用Java代码完成对字符的编码和解码。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a我b&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = data.getBytes(); <span class="hljs-comment">// 默认是按照平台字符集（UTF-8）进行编码的。</span><br>        System.out.println(Arrays.toString(bytes));<br><br>        <span class="hljs-comment">// 按照指定字符集进行编码。</span><br>        <span class="hljs-type">byte</span>[] bytes1 = data.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br>        System.out.println(Arrays.toString(bytes1));<br><br>        <span class="hljs-comment">// 2、解码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes); <span class="hljs-comment">// 按照平台默认编码（UTF-8）解码</span><br>        System.out.println(s1);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes1, <span class="hljs-string">&quot;GBK&quot;</span>);<br>        System.out.println(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、IO流（字节流）"><a href="#二、IO流（字节流）" class="headerlink" title="二、IO流（字节流）"></a>二、IO流（字节流）</h2><h3 id="2-1-IO流概述"><a href="#2-1-IO流概述" class="headerlink" title="2.1 IO流概述"></a>2.1 IO流概述</h3><p>各位小伙伴，在前面我们已经学习过File类。但是我们知道File只能操作文件，但是不能操作文件中的内容。我们也学习了字符集，不同的字符集存字符数据的原理是不一样的。有了前面两个知识的基础，接下来我们再学习IO流，就可以对文件中的数据进行操作了。</p><p>IO流的作用：就是可以对文件或者网络中的数据进行读、写的操作。如下图所示</p><ul><li>把数据从磁盘、网络中读取到程序中来，用到的是输入流。</li><li>把程序中的数据写入磁盘、网络中，用到的是输出流。</li><li><strong>简单记：输入流（读数据）、输出流（写数据）</strong></li></ul><p><img src="/assets/1667822945208.png" alt="1667822945208"></p><p>IO流在Java中有很多种，不同的流来干不同的事情。Java把各种流用不同的类来表示，这些流的继承体系如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">IO流分为两大派系：<br><span class="hljs-number">1.</span>字节流：字节流又分为字节输入流、字节输出流<br><span class="hljs-number">2.</span>字符流：字符流由分为字符输入流、字符输出流<br></code></pre></td></tr></table></figure><p><img src="/assets/1667823186345.png" alt="1667823186345"></p><h3 id="2-2-FileInputStream读取一个字节"><a href="#2-2-FileInputStream读取一个字节" class="headerlink" title="2.2 FileInputStream读取一个字节"></a>2.2 FileInputStream读取一个字节</h3><p>同学们，在上节课认识了什么是IO流，接下来我们学习字节流中的字节输入流，用InputStream来表示。但是InputStream是抽象类，我们用的是它的子类，叫FileInputStream。</p><p><img src="/assets/1667823371395.png" alt="1667823371395"></p><p>需要用到的方法如下图所示：有构造方法、成员方法</p><p><img src="/assets/1667823417184.png" alt="1667823417184"></p><p>使用FileInputStream读取文件中的字节数据，步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：创建FileInputStream文件字节输入流管道，与源文件接通。<br>第二步：调用read()方法开始读取文件的字节数据。<br>第三步：调用close()方法释放资源<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握文件字节输入流，每次读取一个字节。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建文件字节输入流管道，与源文件接通。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>((<span class="hljs-string">&quot;file-io-app\\src\\itheima01.txt&quot;</span>));<br><br>        <span class="hljs-comment">// 2、开始读取文件的字节数据。</span><br>        <span class="hljs-comment">// public int read():每次读取一个字节返回，如果没有数据了，返回-1.</span><br>        <span class="hljs-type">int</span> b; <span class="hljs-comment">// 用于记住读取的字节。</span><br>        <span class="hljs-keyword">while</span> ((b = is.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>) b);<br>        &#125;<br>        <br>        <span class="hljs-comment">//3、流使用完毕之后，必须关闭！释放系统资源！</span><br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意一个问题：由于一个中文在UTF-8编码方案中是占3个字节，采用一次读取一个字节的方式，读一个字节就相当于读了1&#x2F;3个汉字，此时将这个字节转换为字符，是会有乱码的。</p><h3 id="2-3-FileInputStream读取多个字节"><a href="#2-3-FileInputStream读取多个字节" class="headerlink" title="2.3 FileInputStream读取多个字节"></a>2.3 FileInputStream读取多个字节</h3><p>各位同学，在上一节我们学习了FileInputStream调用read()方法，可以一次读取一个字节。但是这种读取方式效率太太太太慢了。 为了提高效率，我们可以使用另一个read(byte[] bytes)的重载方法，可以一次读取多个字节，至于一次读多少个字节，就在于你传递的数组有多大。</p><p>使用FileInputStream一次读取多个字节的步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：创建FileInputStream文件字节输入流管道，与源文件接通。<br>第二步：调用read(<span class="hljs-type">byte</span>[] bytes)方法开始读取文件的字节数据。<br>第三步：调用close()方法释放资源<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握使用FileInputStream每次读取多个字节。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建一个字节输入流对象代表字节输入流管道与源文件接通。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima02.txt&quot;</span>);<br><br>        <span class="hljs-comment">// 2、开始读取文件中的字节数据：每次读取多个字节。</span><br>        <span class="hljs-comment">//  public int read(byte b[]) throws IOException</span><br>        <span class="hljs-comment">//  每次读取多个字节到字节数组中去，返回读取的字节数量，读取完毕会返回-1.</span><br><br>        <span class="hljs-comment">// 3、使用循环改造。</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> len; <span class="hljs-comment">// 记住每次读取了多少个字节。  abc 66</span><br>        <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 注意：读取多少，倒出多少。</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span> , len);<br>            System.out.print(rs);<br>        &#125;<br>        <span class="hljs-comment">// 性能得到了明显的提升！！</span><br>        <span class="hljs-comment">// 这种方案也不能避免读取汉字输出乱码的问题！！</span><br><br>        is.close(); <span class="hljs-comment">// 关闭流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>需要我们注意的是：<strong>read(byte[] bytes)它的返回值，表示当前这一次读取的字节个数。</strong></li></ul><p>假设有一个a.txt文件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">abcde<br></code></pre></td></tr></table></figure><p>每次读取过程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">也就是说，并不是每次读取的时候都把数组装满，比如数组是 <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<br>第一次调用read(bytes)读取了<span class="hljs-number">3</span>个字节(分别是<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>)，并且往数组中存，此时返回值就是<span class="hljs-number">3</span><br>第二次调用read(bytes)读取了<span class="hljs-number">2</span>个字节(分别是<span class="hljs-number">99</span>,<span class="hljs-number">100</span>),并且往数组中存，此时返回值是<span class="hljs-number">2</span><br>第三次调用read(bytes)文件中后面已经没有数据了，此时返回值为-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>还需要注意一个问题：采用一次读取多个字节的方式，也是可能有乱码的。因为也有可能读取到半个汉字的情况。</li></ul><h3 id="2-4-FileInputStream读取全部字节"><a href="#2-4-FileInputStream读取全部字节" class="headerlink" title="2.4 FileInputStream读取全部字节"></a>2.4 FileInputStream读取全部字节</h3><p>同学们，前面我们到的读取方式，不管是一次读取一个字节，还是一次读取多个字节，都有可能有乱码。那么接下来我们介绍一种，不出现乱码的读取方式。</p><p>我们可以一次性读取文件中的全部字节，然后把全部字节转换为一个字符串，就不会有乱码了。</p><p><img src="/assets/1667830119965.png" alt="1667830119965"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、一次性读取完文件的全部字节到一个字节数组中去。</span><br><span class="hljs-comment">// 创建一个字节输入流管道与源文件接通</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima03.txt&quot;</span>);<br><br><span class="hljs-comment">// 2、准备一个字节数组，大小与文件的大小正好一样大。</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima03.txt&quot;</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> f.length();<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) size];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> is.read(buffer);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br><br><span class="hljs-comment">//3、关闭流</span><br>is.close(); <br></code></pre></td></tr></table></figure><p><img src="/assets/1667830186936.png" alt="1667830186936"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、一次性读取完文件的全部字节到一个字节数组中去。</span><br><span class="hljs-comment">// 创建一个字节输入流管道与源文件接通</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima03.txt&quot;</span>);<br><br><span class="hljs-comment">//2、调用方法读取所有字节，返回一个存储所有字节的字节数组。</span><br><span class="hljs-type">byte</span>[] buffer = is.readAllBytes();<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br><br><span class="hljs-comment">//3、关闭流</span><br>is.close(); <br></code></pre></td></tr></table></figure><p>最后，还是要注意一个问题：<strong>一次读取所有字节虽然可以解决乱码问题，但是文件不能过大，如果文件过大，可能导致内存溢出。</strong></p><h3 id="2-5-FileOutputStream写字节"><a href="#2-5-FileOutputStream写字节" class="headerlink" title="2.5 FileOutputStream写字节"></a>2.5 FileOutputStream写字节</h3><p>各位同学，前面我们学习了使用FIleInputStream读取文件中的字节数据。然后有同学就迫不及待的想学习往文件中写入数据了。</p><p>往文件中写数据需要用到OutputStream下面的一个子类FileOutputStream。写输入的流程如下图所示</p><p><img src="/assets/1667830581838.png" alt="1667830581838"></p><p>使用FileOutputStream往文件中写数据的步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：创建FileOutputStream文件字节输出流管道，与目标文件接通。<br>第二步：调用wirte()方法往文件中写数据<br>第三步：调用close()方法释放资源<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握文件字节输出流FileOutputStream的使用。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStreamTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、创建一个字节输出流管道与目标文件接通。</span><br>        <span class="hljs-comment">// 覆盖管道：覆盖之前的数据</span><br><span class="hljs-comment">//        OutputStream os =</span><br><span class="hljs-comment">//                new FileOutputStream(&quot;file-io-app/src/itheima04out.txt&quot;);</span><br><br>        <span class="hljs-comment">// 追加数据的管道</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;file-io-app/src/itheima04out.txt&quot;</span>, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 2、开始写字节数据出去了</span><br>        os.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 97就是一个字节，代表a</span><br>        os.write(<span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">// &#x27;b&#x27;也是一个字节</span><br>        <span class="hljs-comment">// os.write(&#x27;磊&#x27;); // [ooo] 默认只能写出去一个字节</span><br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;我爱你中国abc&quot;</span>.getBytes();<br>        os.write(bytes);<br><br>        os.write(bytes, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>);<br><br>        <span class="hljs-comment">// 换行符</span><br>        os.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br><br>        os.close(); <span class="hljs-comment">// 关闭流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-字节流复制文件"><a href="#2-6-字节流复制文件" class="headerlink" title="2.6 字节流复制文件"></a>2.6 字节流复制文件</h3><p>同学们，我们在前面已经把字节输入流和字节输出流都学习完了。现在我们就可以用这两种流配合起来使用，做一个文件复制的综合案例。</p><p>比如：我们要复制一张图片，从磁盘<code>D:/resource/meinv.png</code>的一个位置，复制到<code>C:/data/meinv.png</code>位置。</p><p>复制文件的思路如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>需要创建一个FileInputStream流与源文件接通，创建FileOutputStream与目标文件接通<br><span class="hljs-number">2.</span>然后创建一个数组，使用FileInputStream每次读取一个字节数组的数据，存如数组中<br><span class="hljs-number">3.</span>然后再使用FileOutputStream把字节数组中的有效元素，写入到目标文件中<br></code></pre></td></tr></table></figure><p><img src="/assets/1667830863144.png" alt="1667830863144"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：使用字节流完成对文件的复制操作。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 需求：复制照片。</span><br>        <span class="hljs-comment">// 1、创建一个字节输入流管道与源文件接通</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/resource/meinv.png&quot;</span>);<br>        <span class="hljs-comment">// 2、创建一个字节输出流管道与目标文件接通。</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:/data/meinv.png&quot;</span>);<br><br>        System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 3、创建一个字节数组，负责转移字节数据。</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 1KB.</span><br>        <span class="hljs-comment">// 4、从字节输入流中读取字节数据，写出去到字节输出流中。读多少写出去多少。</span><br>        <span class="hljs-type">int</span> len; <span class="hljs-comment">// 记住每次读取了多少个字节。</span><br>        <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br><br>        os.close();<br>        is.close();<br>        System.out.println(<span class="hljs-string">&quot;复制完成！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、IO流资源释放"><a href="#三、IO流资源释放" class="headerlink" title="三、IO流资源释放"></a>三、IO流资源释放</h2><p>各位同学，前面我们已经学习了字节流，也给同学们强调过，流使用完之后一定要释放资源。但是我们之前的代码并不是很专业。</p><p><img src="/assets/1667831281147.png" alt="1667831281147"></p><p>我们现在知道这个问题了，那这个问题怎么解决呢？ 在JDK7以前，和JDK7以后分别给出了不同的处理方案。</p><h3 id="3-1-JDK7以前的资源释放"><a href="#3-1-JDK7以前的资源释放" class="headerlink" title="3.1 JDK7以前的资源释放"></a>3.1 JDK7以前的资源释放</h3><p>在JDK7版本以前，我们可以使用try…catch…finally语句来处理。格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//有可能产生异常的代码</span><br>&#125;<span class="hljs-keyword">catch</span>(异常类 e)&#123;<br>    <span class="hljs-comment">//处理异常的代码</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//释放资源的代码</span><br>    <span class="hljs-comment">//finally里面的代码有一个特点，不管异常是否发生，finally里面的代码都会执行。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>改造上面的低吗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 1、创建一个字节输入流管道与源文件接通</span><br>            is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima03.txt&quot;</span>);<br>            <span class="hljs-comment">// 2、创建一个字节输出流管道与目标文件接通。</span><br>            os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima03copy.txt&quot;</span>);<br><br>            System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br><br>            <span class="hljs-comment">// 3、创建一个字节数组，负责转移字节数据。</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 1KB.</span><br>            <span class="hljs-comment">// 4、从字节输入流中读取字节数据，写出去到字节输出流中。读多少写出去多少。</span><br>            <span class="hljs-type">int</span> len; <span class="hljs-comment">// 记住每次读取了多少个字节。</span><br>            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成！！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放资源的操作</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(os != <span class="hljs-literal">null</span>) os.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(is != <span class="hljs-literal">null</span>) is.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码写到这里，有很多同学就已经看不下去了。是的，我也看不下去，本来几行代码就写完了的，加上try…catch…finally之后代码多了十几行，而且阅读性并不高。难受….</p><h3 id="3-2-JDK7以后的资源释放"><a href="#3-2-JDK7以后的资源释放" class="headerlink" title="3.2 JDK7以后的资源释放"></a>3.2 JDK7以后的资源释放</h3><p>刚才很多同学已经发现了try…catch…finally处理异常，并释放资源代码比较繁琐。Java在JDK7版本为我们提供了一种简化的是否资源的操作，它会自动是否资源。代码写起来也想当简单。</p><p>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(资源对象<span class="hljs-number">1</span>; 资源对象<span class="hljs-number">2</span>;)&#123;<br>    使用资源的代码<br>&#125;<span class="hljs-keyword">catch</span>(异常类 e)&#123;<br>    处理异常的代码<br>&#125;<br><br><span class="hljs-comment">//注意：注意到没有，这里没有释放资源的代码。它会自动是否资源</span><br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握释放资源的方式：try-with-resource</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>    <span class="hljs-keyword">try</span> (<br>          <span class="hljs-comment">// 1、创建一个字节输入流管道与源文件接通</span><br>          <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/resource/meinv.png&quot;</span>);<br>          <span class="hljs-comment">// 2、创建一个字节输出流管道与目标文件接通。</span><br>          <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:/data/meinv.png&quot;</span>);<br>        )&#123;<br>            <span class="hljs-comment">// 3、创建一个字节数组，负责转移字节数据。</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 1KB.</span><br>            <span class="hljs-comment">// 4、从字节输入流中读取字节数据，写出去到字节输出流中。读多少写出去多少。</span><br>            <span class="hljs-type">int</span> len; <span class="hljs-comment">// 记住每次读取了多少个字节。</span><br>            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(conn);<br>            System.out.println(<span class="hljs-string">&quot;复制完成！！&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17Map集合、Stream流、File类</title>
    <link href="/2023/12/06/day17-Map%E9%9B%86%E5%90%88%E3%80%81Stream%E6%B5%81%E3%80%81File%E7%B1%BB/"/>
    <url>/2023/12/06/day17-Map%E9%9B%86%E5%90%88%E3%80%81Stream%E6%B5%81%E3%80%81File%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="day17-Map集合、Stream流、File类"><a href="#day17-Map集合、Stream流、File类" class="headerlink" title="day17-Map集合、Stream流、File类"></a>day17-Map集合、Stream流、File类</h1><h2 id="一、Map集合"><a href="#一、Map集合" class="headerlink" title="一、Map集合"></a>一、Map集合</h2><p>同学们，在前面几节课我们已经学习了Map集合的常用方法，以及遍历方式。</p><p>下面我们要学习的是Map接口下面的是三个实现类HashMap、LinkedHashMap、TreeMap。实际上这三个实现类并没有什么特有方法需要我们学习，它们的方法就是前面学习Map的方法。这里我们主要学习它们的底层原理。</p><h3 id="1-1-HashMap"><a href="#1-1-HashMap" class="headerlink" title="1.1 HashMap"></a>1.1 HashMap</h3><p>首先，我们学习HashMap集合的底层原理。前面我们学习过HashSet的底层原理，实际上HashMap底层原理和HashSet是一样的。为什么这么说呢？因为我们往HashSet集合中添加元素时，实际上是把元素作为添加添加到了HashMap集合中。</p><p>下面是Map集合的体系结构，HashMap集合的特点是由键决定的： <strong>它的键是无序、不能重复，而且没有索引的</strong>。再各种Map集合中也是用得最多的一种集合。</p><p><img src="/assets/1667641305473.png" alt="1667641305473"></p><p>刚才我们说，HashSet底层就是HashMap，我们可以看源码验证这一点，如下图所示，我们可以看到，创建HashSet集合时，底层帮你创建了HashMap集合；往HashSet集合中添加添加元素时，底层却是调用了Map集合的put方法把元素作为了键来存储。所以实际上根本没有什么HashSet集合，把HashMap的集合的值忽略不看就是HashSet集合。</p><p><img src="/assets/1667641783744.png" alt="1667641783744"></p><p>HashSet的原理我们之前已经学过了，所以HashMap是一样的，底层是哈希表结构。</p><p><img src="/assets/1667644579895.png" alt="1667644579895"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap底层数据结构: 哈希表结构<br>JDK8之前的哈希表 = 数组+链表<br>JDK8之后的哈希表 = 数组+链表+红黑树<br>哈希表是一种增删改查数据，性能相对都较好的数据结构<br><br>往HashMap集合中键值对数据时，底层步骤如下<br>第<span class="hljs-number">1</span>步：当你第一次往HashMap集合中存储键值对时，底层会创建一个长度为<span class="hljs-number">16</span>的数组<br>第<span class="hljs-number">2</span>步：把键然后将键和值封装成一个对象，叫做Entry对象<br>第<span class="hljs-number">3</span>步：再根据Entry对象的键计算hashCode值（和值无关）<br>第<span class="hljs-number">4</span>步：利用hashCode值和数组的长度做一个类似求余数的算法，会得到一个索引位置<br>第<span class="hljs-number">5</span>步：判断这个索引的位置是否为<span class="hljs-literal">null</span>，如果为<span class="hljs-literal">null</span>,就直接将这个Entry对象存储到这个索引位置<br>   如果不为<span class="hljs-literal">null</span>，则还需要进行第<span class="hljs-number">6</span>步的判断<br>第<span class="hljs-number">6</span>步：继续调用equals方法判断两个对象键是否相同<br>  如果equals返回<span class="hljs-literal">false</span>，则以链表的形式往下挂<br>  如果equals方法<span class="hljs-literal">true</span>,则认为键重复，此时新的键值对会替换就的键值对。<br><br>HashMap底层需要注意这几点：<br><span class="hljs-number">1.</span>底层数组默认长度为<span class="hljs-number">16</span>，如果数组中有超过<span class="hljs-number">12</span>个位置已经存储了元素，则会对数组进行扩容<span class="hljs-number">2</span>倍<br>  数组扩容的加载因子是<span class="hljs-number">0.75</span>，意思是：<span class="hljs-number">16</span>*<span class="hljs-number">0.75</span>=<span class="hljs-number">12</span> <br>   <br>    <span class="hljs-number">2.</span>数组的同一个索引位置有多个元素、并且在<span class="hljs-number">8</span>个元素以内(包括<span class="hljs-number">8</span>)，则以链表的形式存储<br>    JDK7版本：链表采用头插法（新元素往链表的头部添加）<br>    JDK8版本：链表采用尾插法（新元素我那个链表的尾部添加）<br>    <br>    <span class="hljs-number">3.</span>数组的同一个索引位置有多个元素、并且超过了<span class="hljs-number">8</span>个，则以红黑树形式存储<br>    <br></code></pre></td></tr></table></figure><p>从HashMap底层存储键值对的过程中我们发现：决定键是否重复依赖与两个方法，一个是hashCode方法、一个是equals方法。有两个键计算得到的hashCode值相同，并且两个键使用equals比较为true，就认为键重复。</p><p><strong>所以，往Map集合中存储自定义对象作为键，为了保证键的唯一性，我们应该重写hashCode方法和equals方法。</strong></p><p>比如有如下案例：往HashMap集合中存储Student对象作为键，学生的家庭住址当做值。要求，当学生对象的姓名和年龄相同时就认为键重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br><br>    <span class="hljs-comment">// this  o</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age; <span class="hljs-comment">// 年龄升序排序</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Double.compare(student.height, height) == <span class="hljs-number">0</span> &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age, height);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br><span class="hljs-comment">//...get,set方法自己补全....</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, height=&quot;</span> + height +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个测试类，在测试类中，创建HashMap集合，键是Student类型，值是Stirng类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Map集合下的实现类：HashMap集合的底层原理。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1HashMap</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">168.5</span>), <span class="hljs-string">&quot;盘丝洞&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">168.5</span>), <span class="hljs-string">&quot;水帘洞&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">163.5</span>), <span class="hljs-string">&quot;水帘洞&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">183.5</span>), <span class="hljs-string">&quot;牛头山&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面存储的键，有两个蜘蛛精，但是打印出只会有最后一个。</p><p><img src="/assets/1667646630527.png" alt="1667646630527"></p><h3 id="1-2-LinkedHashMap"><a href="#1-2-LinkedHashMap" class="headerlink" title="1.2 LinkedHashMap"></a>1.2 LinkedHashMap</h3><p>学习完HashMap集合的特点，以及底层原理。接下来我们学习一下LinkedHashMap集合。</p><ul><li>LinkedHashMap集合的特点也是由键决定的：<strong>有序的、不重复、无索引</strong>。</li></ul><p><img src="/assets/1667646792308.png" alt="1667646792308"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握LinkedHashMap的底层原理。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2LinkedHashMap</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();    //  按照键 无序，不重复，无索引。</span><br>        LinkedHashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;(); <span class="hljs-comment">//  按照键 有序，不重复，无索引。</span><br>        map.put(<span class="hljs-string">&quot;手表&quot;</span>, <span class="hljs-number">100</span>);<br>        map.put(<span class="hljs-string">&quot;手表&quot;</span>, <span class="hljs-number">220</span>);<br>        map.put(<span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上面代码发现，如果是LinedHashMap集合键存储和取出的顺序是一样的</p><p><img src="/assets/1667647023761.png" alt="1667647023761"></p><p>如果是HashMap，键存储和取出的顺序是不一致的</p><p><img src="/assets/1667647087356.png" alt="1667647087356"></p><ul><li>LinkedHashMap的底层原理，和LinkedHashSet底层原理是一样的。底层多个一个双向链表来维护键的存储顺序。</li></ul><p>​      取元素时，先取头节点元素，然后再依次取下一个几点，一直到尾结点。所以是有序的。</p><p><img src="/assets/1667647222054.png" alt="1667647222054"></p><h3 id="1-3-TreeMap"><a href="#1-3-TreeMap" class="headerlink" title="1.3 TreeMap"></a>1.3 TreeMap</h3><p>最后，我们再学习Map集合下面的另一个子类叫TreeMap。根据我们前面学习其他Map集合的经验，我们应该可以猜出TreeMap有什么特点。</p><ul><li>TreeMap集合的特点也是由键决定的，默认按照键的升序排列，键不重复，也是无索引的。</li></ul><p><img src="/assets/1667647400490.png" alt="1667647400490"></p><ul><li><p>TreeMap集合的底层原理和TreeSet也是一样的，底层都是红黑树实现的。所以可以对键进行排序。</p><p>比如往TreeMap集合中存储Student对象作为键，排序方法有两种。直接看代码吧</p></li></ul><p><strong>排序方式1：</strong>写一个Student类，让Student类实现Comparable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一步：先让Student类，实现Comparable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br><span class="hljs-comment">//无参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//全参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> height)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>        <span class="hljs-built_in">this</span>.height=height;<br>    &#125;<br>    <span class="hljs-comment">//...get、set、toString()方法自己补上..</span><br>    <br>    <span class="hljs-comment">//按照年龄进行比较，只需要在方法中让this.age和o.age相减就可以。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    原理：</span><br><span class="hljs-comment">    在往TreeSet集合中添加元素时，add方法底层会调用compareTo方法，根据该方法的</span><br><span class="hljs-comment">    结果是正数、负数、还是零，决定元素放在后面、前面还是不存。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-comment">//this：表示将要添加进去的Student对象</span><br>        <span class="hljs-comment">//o: 表示集合中已有的Student对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age-o.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>排序方式2：</strong>在创建TreeMap集合时，直接传递Comparator比较器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握TreeMap集合的使用。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3TreeMap</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//        Map&lt;Student, String&gt; map = new TreeMap&lt;&gt;(( o1,  o2) -&gt;   Double.compare(o2.getHeight(), o1.getHeight()));</span><br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">168.5</span>), <span class="hljs-string">&quot;盘丝洞&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">168.5</span>), <span class="hljs-string">&quot;水帘洞&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">163.5</span>), <span class="hljs-string">&quot;水帘洞&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">183.5</span>), <span class="hljs-string">&quot;牛头山&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式都可以对TreeMap集合中的键排序。<strong>注意：只有TreeMap的键才能排序，HashMap键不能排序。</strong></p><h3 id="1-4-集合嵌套"><a href="#1-4-集合嵌套" class="headerlink" title="1.4 集合嵌套"></a>1.4 集合嵌套</h3><p>各位同学，到现在为止我们把Map集合和Collection集合的都已经学习完了。但是在实际开发中可能还会存在一种特殊的用法。就是把一个集合当做元素，存储到另一个集合中去，我们把这种用法称之为集合嵌套。</p><p>下面通过一个案例给大家演示一下</p><p><img src="/assets/1667648201462.png" alt="1667648201462"></p><ul><li>案例分析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>从需求中我们可以看到，有三个省份，每一个省份有多个城市<br>我们可以用一个Map集合的键表示省份名称，而值表示省份有哪些城市<br><span class="hljs-number">2.</span>而又因为一个身份有多个城市，同一个省份的多个城市可以再用一个List集合来存储。<br>所以Map集合的键是String类型，而指是List集合类型<br>HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：理解集合的嵌套。</span><br><span class="hljs-comment"> * 江苏省 = &quot;南京市&quot;,&quot;扬州市&quot;,&quot;苏州市“,&quot;无锡市&quot;,&quot;常州市&quot;</span><br><span class="hljs-comment"> * 湖北省 = &quot;武汉市&quot;,&quot;孝感市&quot;,&quot;十堰市&quot;,&quot;宜昌市&quot;,&quot;鄂州市&quot;</span><br><span class="hljs-comment"> * 河北省 = &quot;石家庄市&quot;,&quot;唐山市&quot;, &quot;邢台市&quot;, &quot;保定市&quot;, &quot;张家口市&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、定义一个Map集合存储全部的省份信息，和其对应的城市信息。</span><br>        Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        List&lt;String&gt; cities1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(cities1, <span class="hljs-string">&quot;南京市&quot;</span>,<span class="hljs-string">&quot;扬州市&quot;</span>,<span class="hljs-string">&quot;苏州市&quot;</span> ,<span class="hljs-string">&quot;无锡市&quot;</span>,<span class="hljs-string">&quot;常州市&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;江苏省&quot;</span>, cities1);<br><br>        List&lt;String&gt; cities2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(cities2, <span class="hljs-string">&quot;武汉市&quot;</span>,<span class="hljs-string">&quot;孝感市&quot;</span>,<span class="hljs-string">&quot;十堰市&quot;</span>,<span class="hljs-string">&quot;宜昌市&quot;</span>,<span class="hljs-string">&quot;鄂州市&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;湖北省&quot;</span>, cities2);<br><br>        List&lt;String&gt; cities3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(cities3, <span class="hljs-string">&quot;石家庄市&quot;</span>,<span class="hljs-string">&quot;唐山市&quot;</span>, <span class="hljs-string">&quot;邢台市&quot;</span>, <span class="hljs-string">&quot;保定市&quot;</span>, <span class="hljs-string">&quot;张家口市&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;河北省&quot;</span>, cities3);<br>        System.out.println(map);<br><br>        List&lt;String&gt; cities = map.get(<span class="hljs-string">&quot;湖北省&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String city : cities) &#123;<br>            System.out.println(city);<br>        &#125;<br><br>        map.forEach((p, c) -&gt; &#123;<br>            System.out.println(p + <span class="hljs-string">&quot;-----&gt;&quot;</span> + c);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、JDK8新特性（Stream流）"><a href="#二、JDK8新特性（Stream流）" class="headerlink" title="二、JDK8新特性（Stream流）"></a>二、JDK8新特性（Stream流）</h2><p>各位同学，接下来我们学习一个全新的知识，叫做Stream流（也叫Stream API）。它是从JDK8以后才有的一个新特性，是专业用于对集合或者数组进行便捷操作的。有多方便呢？我们用一个案例体验一下，然后再详细学习。</p><h3 id="2-1-Stream流体验"><a href="#2-1-Stream流体验" class="headerlink" title="2.1 Stream流体验"></a>2.1 Stream流体验</h3><p>案例需求：有一个List集合，元素有<code>&quot;张三丰&quot;,&quot;张无忌&quot;,&quot;周芷若&quot;,&quot;赵敏&quot;,&quot;张强&quot;</code>，找出姓张，且是3个字的名字，存入到一个新集合中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(names, <span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张强&quot;</span>);<br>System.out.println(names);<br></code></pre></td></tr></table></figure><ul><li>用传统方式来做，代码是这样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找出姓张，且是3个字的名字，存入到一个新集合中去。</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (String name : names) &#123;<br>    <span class="hljs-keyword">if</span>(name.startsWith(<span class="hljs-string">&quot;张&quot;</span>) &amp;&amp; name.length() == <span class="hljs-number">3</span>)&#123;<br>        list.add(name);<br>    &#125;<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure><ul><li>用Stream流来做，代码是这样的（ps: 是不是想流水线一样，一句话就写完了）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list2 = names.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).filter(a -&gt; a.length()==<span class="hljs-number">3</span>).collect(Collectors.toList());<br>System.out.println(list2);<br></code></pre></td></tr></table></figure><p>先不用知道这里面每一句话是什么意思，具体每一句话的含义，待会再一步步学习。现在只是体验一下。</p><p>学习Stream流我们接下来，会按照下面的步骤来学习。</p><p><img src="/assets/1667649164429.png" alt="1667649164429"></p><h3 id="2-2-Stream流的创建"><a href="#2-2-Stream流的创建" class="headerlink" title="2.2 Stream流的创建"></a>2.2 Stream流的创建</h3><p>好，接下来我们正式来学习Stream流。先来学习如何创建Stream流、或者叫获取Stream流。</p><p><img src="/assets/1667649331568.png" alt="1667649331568"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">主要掌握下面四点：<br><span class="hljs-number">1</span>、如何获取List集合的Stream流？<br><span class="hljs-number">2</span>、如何获取Set集合的Stream流？<br><span class="hljs-number">3</span>、如何获取Map集合的Stream流？<br><span class="hljs-number">4</span>、如何获取数组的Stream流？<br></code></pre></td></tr></table></figure><p>直接上代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Stream流的创建。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、如何获取List集合的Stream流？</span><br>        List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(names, <span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张强&quot;</span>);<br>        Stream&lt;String&gt; stream = names.stream();<br><br>        <span class="hljs-comment">// 2、如何获取Set集合的Stream流？</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        Collections.addAll(set, <span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-string">&quot;张曼玉&quot;</span>,<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-string">&quot;马德&quot;</span>,<span class="hljs-string">&quot;德玛西亚&quot;</span>);<br>        Stream&lt;String&gt; stream1 = set.stream();<br>        stream1.filter(s -&gt; s.contains(<span class="hljs-string">&quot;德&quot;</span>)).forEach(s -&gt; System.out.println(s));<br><br>        <span class="hljs-comment">// 3、如何获取Map集合的Stream流？</span><br>        Map&lt;String, Double&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;古力娜扎&quot;</span>, <span class="hljs-number">172.3</span>);<br>        map.put(<span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-number">168.3</span>);<br>        map.put(<span class="hljs-string">&quot;马尔扎哈&quot;</span>, <span class="hljs-number">166.3</span>);<br>        map.put(<span class="hljs-string">&quot;卡尔扎巴&quot;</span>, <span class="hljs-number">168.3</span>);<br><br>        Set&lt;String&gt; keys = map.keySet();<br>        Stream&lt;String&gt; ks = keys.stream();<br><br>        Collection&lt;Double&gt; values = map.values();<br>        Stream&lt;Double&gt; vs = values.stream();<br><br>        Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();<br>        Stream&lt;Map.Entry&lt;String, Double&gt;&gt; kvs = entries.stream();<br>        kvs.filter(e -&gt; e.getKey().contains(<span class="hljs-string">&quot;巴&quot;</span>))<br>                .forEach(e -&gt; System.out.println(e.getKey()+ <span class="hljs-string">&quot;--&gt;&quot;</span> + e.getValue()));<br><br>        <span class="hljs-comment">// 4、如何获取数组的Stream流？</span><br>        String[] names2 = &#123;<span class="hljs-string">&quot;张翠山&quot;</span>, <span class="hljs-string">&quot;东方不败&quot;</span>, <span class="hljs-string">&quot;唐大山&quot;</span>, <span class="hljs-string">&quot;独孤求败&quot;</span>&#125;;<br>        Stream&lt;String&gt; s1 = Arrays.stream(names2);<br>        Stream&lt;String&gt; s2 = Stream.of(names2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-3-Stream流中间方法"><a href="#2-3-Stream流中间方法" class="headerlink" title="2.3 Stream流中间方法"></a>2.3 Stream流中间方法</h3><p>在上一节，我们学习了创建Stream流的方法。接下来我们再来学习，Stream流中间操作的方法。</p><p><strong>中间方法指的是：调用完方法之后其结果是一个新的Stream流，于是可以继续调用方法，这样一来就可以支持链式编程</strong>（或者叫流式编程）。</p><p><img src="/assets/1667649379223.png" alt="1667649379223"></p><p><img src="/assets/1667649509262.png" alt="1667649509262"></p><p>话不多说，直接上代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Stream流提供的常见中间方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Double&gt; scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(scores, <span class="hljs-number">88.5</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">60.0</span>, <span class="hljs-number">99.0</span>, <span class="hljs-number">9.5</span>, <span class="hljs-number">99.6</span>, <span class="hljs-number">25.0</span>);<br>        <span class="hljs-comment">// 需求1：找出成绩大于等于60分的数据，并升序后，再输出。</span><br>        scores.stream().filter(s -&gt; s &gt;= <span class="hljs-number">60</span>).sorted().forEach(s -&gt; System.out.println(s));<br><br>        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">167.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;白晶晶&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">169.0</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">183.3</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛夫人&quot;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">168.5</span>);<br>        Collections.addAll(students, s1, s2, s3, s4, s5, s6);<br>        <span class="hljs-comment">// 需求2：找出年龄大于等于23,且年龄小于等于30岁的学生，并按照年龄降序输出.</span><br>        students.stream().filter(s -&gt; s.getAge() &gt;= <span class="hljs-number">23</span> &amp;&amp; s.getAge() &lt;= <span class="hljs-number">30</span>)<br>                .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())<br>                .forEach(s -&gt; System.out.println(s));<br><br>        <span class="hljs-comment">// 需求3：取出身高最高的前3名学生，并输出。</span><br>        students.stream().sorted((o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()))<br>                .limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 需求4：取出身高倒数的2名学生，并输出。   s1 s2 s3 s4 s5 s6</span><br>        students.stream().sorted((o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()))<br>                .skip(students.size() - <span class="hljs-number">2</span>).forEach(System.out::println);<br><br>        <span class="hljs-comment">// 需求5：找出身高超过168的学生叫什么名字，要求去除重复的名字，再输出。</span><br>        students.stream().filter(s -&gt; s.getHeight() &gt; <span class="hljs-number">168</span>).map(Student::getName)<br>               .distinct().forEach(System.out::println);<br><br>        <span class="hljs-comment">// distinct去重复，自定义类型的对象（希望内容一样就认为重复，重写hashCode,equals）</span><br>        students.stream().filter(s -&gt; s.getHeight() &gt; <span class="hljs-number">168</span>)<br>                .distinct().forEach(System.out::println);<br><br>        Stream&lt;String&gt; st1 = Stream.of(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>        Stream&lt;String&gt; st2 = Stream.of(<span class="hljs-string">&quot;张三2&quot;</span>, <span class="hljs-string">&quot;李四2&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>);<br>        Stream&lt;String&gt; allSt = Stream.concat(st1, st2);<br>        allSt.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-Stream流终结方法"><a href="#2-5-Stream流终结方法" class="headerlink" title="2.5 Stream流终结方法"></a>2.5 Stream流终结方法</h3><p>最后，我们再学习Stream流的终结方法。这些方法的特点是，调用完方法之后，其结果就不再是Stream流了，所以不支持链式编程。</p><p><img src="/assets/1667649788535.png" alt="1667649788535"></p><p>我列举了下面的几个终结方法，接下来用几个案例来一个一个给同学们演示。</p><p><img src="/assets/1667649867150.png" alt="1667649867150"></p><p>话不多说，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：Stream流的终结方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">167.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;白晶晶&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">169.0</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">183.3</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛夫人&quot;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">168.5</span>);<br>        Collections.addAll(students, s1, s2, s3, s4, s5, s6);<br>        <span class="hljs-comment">// 需求1：请计算出身高超过168的学生有几人。</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> students.stream().filter(s -&gt; s.getHeight() &gt; <span class="hljs-number">168</span>).count();<br>        System.out.println(size);<br><br>        <span class="hljs-comment">// 需求2：请找出身高最高的学生对象，并输出。</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> students.stream().max((o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight())).get();<br>        System.out.println(s);<br><br>        <span class="hljs-comment">// 需求3：请找出身高最矮的学生对象，并输出。</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> students.stream().min((o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight())).get();<br>        System.out.println(ss);<br><br>        <span class="hljs-comment">// 需求4：请找出身高超过170的学生对象，并放到一个新集合中去返回。</span><br>        <span class="hljs-comment">// 流只能收集一次。</span><br>        List&lt;Student&gt; students1 = students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>).collect(Collectors.toList());<br>        System.out.println(students1);<br><br>        Set&lt;Student&gt; students2 = students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>).collect(Collectors.toSet());<br>        System.out.println(students2);<br><br>        <span class="hljs-comment">// 需求5：请找出身高超过170的学生对象，并把学生对象的名字和身高，存入到一个Map集合返回。</span><br>        Map&lt;String, Double&gt; map =<br>                students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>)<br>                        .distinct().collect(Collectors.toMap(a -&gt; a.getName(), a -&gt; a.getHeight()));<br>        System.out.println(map);<br><br>        <span class="hljs-comment">// Object[] arr = students.stream().filter(a -&gt; a.getHeight() &gt; 170).toArray();</span><br>        Student[] arr = students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>).toArray(len -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[len]);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，关于Stream流的操常见操作我们就已经学习完了。当然Stream流还有一些其他的方法，同学们遇到了也可以自己再研究一下。</p><h2 id="三、File类"><a href="#三、File类" class="headerlink" title="三、File类"></a>三、File类</h2><p>接下来，我们要学习的知识是一个File类。但是在讲这个知识点之前，我想先和同学们聊点别的，聊完之后再回过来学习File你会更容易理解一些。</p><ul><li><p>先问大家一个问题，目前你写代码时存储数据，可以用哪些方案?  </p><p>答案如下图所示：可以是变量、可以是数组、可以是对象、可以是集合，但是这些数据都是存储在内存中的，只要程序执行结束，或者断点了，数据就消失了。不能永久存储。</p></li></ul><p><img src="/assets/1667650170239.png" alt="1667650170239"></p><ul><li><p>有些数据要长久保存，该怎么办呢？</p><p>答案如下图所示：可以将数据以文件的形式存在硬盘里，即使程序结束了，断点了只要硬盘没坏，数据就永久存在。</p><p><img src="/assets/1667650277680.png" alt="1667650277680"></p></li></ul><p><strong>而现在要学习的File类，它的就用来表示当前系统下的文件（也可以是文件夹）</strong>，通过File类提供的方法可以获取文件大小、判断文件是否存在、创建文件、创建文件夹等。</p><p><img src="/assets/1667650503532.png" alt="1667650503532"></p><p><strong>但是需要我们注意：</strong>File对象只能对文件进行操作，不能操作文件中的内容。</p><h3 id="3-1-File对象的创建"><a href="#3-1-File对象的创建" class="headerlink" title="3.1 File对象的创建"></a>3.1 File对象的创建</h3><p>学习File类和其他类一样，第一步是创建File类的对象。 想要创建对象，我们得看File类有哪些构造方法。</p><p><img src="/assets/1667651303731.png" alt="1667651303731"></p><p>下面我们演示一下，File类创建对象的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">需求我们注意的是：路径中<span class="hljs-string">&quot;\&quot;要写成&quot;</span>\\<span class="hljs-string">&quot;， 路径中&quot;</span>/<span class="hljs-string">&quot;可以直接用</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握File创建对象，代表具体文件的方案。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、创建一个File对象，指代某个具体的文件。</span><br>        <span class="hljs-comment">// 路径分隔符</span><br>        <span class="hljs-comment">// File f1 = new File(&quot;D:/resource/ab.txt&quot;);</span><br>        <span class="hljs-comment">// File f1 = new File(&quot;D:\\resource\\ab.txt&quot;);</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:&quot;</span> + File.separator +<span class="hljs-string">&quot;resource&quot;</span> + File.separator + <span class="hljs-string">&quot;ab.txt&quot;</span>);<br>        System.out.println(f1.length()); <span class="hljs-comment">// 文件大小</span><br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource&quot;</span>);<br>        System.out.println(f2.length());<br><br>        <span class="hljs-comment">// 注意：File对象可以指代一个不存在的文件路径</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/aaaa.txt&quot;</span>);<br>        System.out.println(f3.length());<br>        System.out.println(f3.exists()); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 我现在要定位的文件是在模块中，应该怎么定位呢？</span><br>        <span class="hljs-comment">// 绝对路径：带盘符的</span><br>        <span class="hljs-comment">// File f4 = new File(&quot;D:\\code\\javasepromax\\file-io-app\\src\\itheima.txt&quot;);</span><br>        <span class="hljs-comment">// 相对路径（重点）：不带盘符，默认是直接去工程下寻找文件的。</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima.txt&quot;</span>);<br>        System.out.println(f4.length());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-File判断和获取方法"><a href="#3-2-File判断和获取方法" class="headerlink" title="3.2 File判断和获取方法"></a>3.2 File判断和获取方法</h3><p>各位同学，刚才我们创建File对象的时候，会传递一个文件路径过来。但是File对象封装的路径是存在还是不存在，是文件还是文件夹其实是不清楚的。好在File类提供了方法可以帮我们做判断。</p><p><img src="/assets/1667659321570.png" alt="1667659321570"></p><p>话不多少，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     目标：掌握File提供的判断文件类型、获取文件信息功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        <span class="hljs-comment">// 1.创建文件对象，指代某个文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/ab.txt&quot;</span>);<br>        <span class="hljs-comment">//File f1 = new File(&quot;D:/resource/&quot;);</span><br><br>        <span class="hljs-comment">// 2、public boolean exists()：判断当前文件对象，对应的文件路径是否存在，存在返回true.</span><br>        System.out.println(f1.exists());<br><br>        <span class="hljs-comment">// 3、public boolean isFile() : 判断当前文件对象指代的是否是文件，是文件返回true，反之。</span><br>        System.out.println(f1.isFile());<br><br>        <span class="hljs-comment">// 4、public boolean isDirectory()  : 判断当前文件对象指代的是否是文件夹，是文件夹返回true，反之。</span><br>        System.out.println(f1.isDirectory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了判断功能还有一些获取功能，看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/ab.txt&quot;</span>);<br><br><span class="hljs-comment">// 5.public String getName()：获取文件的名称（包含后缀）</span><br>System.out.println(f1.getName());<br><br><span class="hljs-comment">// 6.public long length()：获取文件的大小，返回字节个数</span><br>System.out.println(f1.length());<br><br><span class="hljs-comment">// 7.public long lastModified()：获取文件的最后修改时间。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> f1.lastModified();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);<br>System.out.println(sdf.format(time));<br><br><span class="hljs-comment">// 8.public String getPath()：获取创建文件对象时，使用的路径</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\resource\\ab.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io-app\\src\\itheima.txt&quot;</span>);<br>System.out.println(f2.getPath());<br>System.out.println(f3.getPath());<br><br><span class="hljs-comment">// 9.public String getAbsolutePath()：获取绝对路径</span><br>System.out.println(f2.getAbsolutePath());<br>System.out.println(f3.getAbsolutePath());<br></code></pre></td></tr></table></figure><h3 id="3-3-创建和删除方法"><a href="#3-3-创建和删除方法" class="headerlink" title="3.3 创建和删除方法"></a>3.3 创建和删除方法</h3><p>刚才有同学问老师，我们不能不用Java代码创建一个文件或者文件夹呀？答案是有的，不光可以创建还可以删除。</p><p>File类提供了创建和删除文件的方法，话不多少，看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握File创建和删除文件相关的方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、public boolean createNewFile()：创建一个新文件（文件内容为空），创建成功返回true,反之。</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/itheima2.txt&quot;</span>);<br>        System.out.println(f1.createNewFile());<br><br>        <span class="hljs-comment">// 2、public boolean mkdir()：用于创建文件夹，注意：只能创建一级文件夹</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/aaa&quot;</span>);<br>        System.out.println(f2.mkdir());<br><br>        <span class="hljs-comment">// 3、public boolean mkdirs()：用于创建文件夹，注意：可以创建多级文件夹</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/bbb/ccc/ddd/eee/fff/ggg&quot;</span>);<br>        System.out.println(f3.mkdirs());<br><br>        <span class="hljs-comment">// 3、public boolean delete()：删除文件，或者空文件，注意：不能删除非空文件夹。</span><br>        System.out.println(f1.delete());<br>        System.out.println(f2.delete());<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource&quot;</span>);<br>        System.out.println(f4.delete());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>mkdir(): 只能创建单级文件夹、<br><span class="hljs-number">2.</span>mkdirs(): 才能创建多级文件夹<br><span class="hljs-number">3.</span>delete(): 文件可以直接删除，但是文件夹只能删除空的文件夹，文件夹有内容删除不了。<br></code></pre></td></tr></table></figure><h3 id="3-4-遍历文件夹方法"><a href="#3-4-遍历文件夹方法" class="headerlink" title="3.4 遍历文件夹方法"></a>3.4 遍历文件夹方法</h3><p>有人说，想获取到一个文件夹中的内容，有没有方法呀？也是有的，下面我们就学习两个这样的方法。</p><p><img src="/assets/1667659732559.png" alt="1667659732559"></p><p>话不多少上代码，演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握File提供的遍历文件夹的方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、public String[] list()：获取当前目录下所有的&quot;一级文件名称&quot;到一个字符串数组中去返回。</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\course\\待研发内容&quot;</span>);<br>        String[] names = f1.list();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br><br>        <span class="hljs-comment">// 2、public File[] listFiles():（重点）获取当前目录下所有的&quot;一级文件对象&quot;到一个文件对象数组中去返回（重点）</span><br>        File[] files = f1.listFiles();<br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            System.out.println(file.getAbsolutePath());<br>        &#125;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/resource/aaa&quot;</span>);<br>        File[] files1 = f.listFiles();<br>        System.out.println(Arrays.toString(files1));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意几个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>当主调是文件时，或者路径不存在时，返回<span class="hljs-literal">null</span><br><span class="hljs-number">2.</span>当主调是空文件夹时，返回一个长度为<span class="hljs-number">0</span>的数组<br><span class="hljs-number">3.</span>当主调是一个有内容的文件夹时，将里面所有一级文件和文件夹路径放在File数组中，并把数组返回<br><span class="hljs-number">4.</span>当主调是一个文件夹，且里面有隐藏文件时，将里面所有文件和文件夹的路径放在FIle数组中，包含隐藏文件<br><span class="hljs-number">5.</span>当主调是一个文件夹，但是没有权限访问时，返回<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>关于遍历文件夹的基本操作就学习完了。 但是有同学如果想要获取文件夹中子文件夹的内容，那目前还做不到。但是学习下面了下面的递归知识就，很容易做到了。</p><h2 id="四、递归"><a href="#四、递归" class="headerlink" title="四、递归"></a>四、递归</h2><p>各位同学，为了获取文件夹中子文件夹的内容，我们就需要学习递归这个知识点。但是递归是什么意思，我们需要单独讲一下。学习完递归是什么，以及递归的执行流程之后，我们再回过头来用递归来找文件夹中子文件夹的内容。</p><h3 id="4-1-递归算法引入"><a href="#4-1-递归算法引入" class="headerlink" title="4.1 递归算法引入"></a>4.1 递归算法引入</h3><ul><li><p>什么是递归？</p><p>递归是一种算法，从形式上来说，方法调用自己的形式称之为递归。</p></li><li><p>递归的形式：有直接递归、间接递归，如下面的代码。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：认识一下递归的形式。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test1();<br>    &#125;<br><br>    <span class="hljs-comment">// 直接方法递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;----test1---&quot;</span>);<br>        test1(); <span class="hljs-comment">// 直接方法递归</span><br>    &#125;<br><br>    <span class="hljs-comment">// 间接方法递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---test2---&quot;</span>);<br>        test3();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        test2(); <span class="hljs-comment">// 间接递归</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果直接执行上面的代码，会进入死循环，最终导致栈内存溢出</p><p><img src="/assets/1667660323234.png" alt="1667660323234"></p><p>以上只是用代码演示了一下，递归的形式。在下一节，在通过一个案例来给同学们讲一讲递归的执行流程。</p><h3 id="4-2-递归算法的执行流程"><a href="#4-2-递归算法的执行流程" class="headerlink" title="4.2 递归算法的执行流程"></a>4.2 递归算法的执行流程</h3><p>为了弄清楚递归的执行流程，接下来我们通过一个案例来学习一下。</p><p>案例需求：计算n的阶乘，比如5的阶乘 &#x3D; 1 * 2 * 3 * 4 * 5 ； 6 的阶乘 &#x3D;  1 * 2 * 3 * 4 * 5 * 6</p><p>分析需求用递归该怎么做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">假设f(n)表示n的阶乘，那么我们可以推导出下面的式子<br> f(<span class="hljs-number">5</span>) = <span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-number">5</span><br>    f(<span class="hljs-number">5</span>) = f(<span class="hljs-number">4</span>)+<span class="hljs-number">5</span><br>    f(<span class="hljs-number">4</span>) = f(<span class="hljs-number">3</span>)+<span class="hljs-number">4</span><br>    f(<span class="hljs-number">3</span>) = f(<span class="hljs-number">2</span>)+<span class="hljs-number">3</span><br>    f(<span class="hljs-number">2</span>) = f(<span class="hljs-number">1</span>)+<span class="hljs-number">2</span><br>    f(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span><br>总结规律：<br>除了f(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span>; 出口<br>其他的f(n) = f(n-<span class="hljs-number">1</span>)+n<br></code></pre></td></tr></table></figure><p>我们可以把f(n)当做一个方法，那么方法的写法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握递归的应用，执行流程和算法思想。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;5的阶乘是：&quot;</span> + f(<span class="hljs-number">5</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//求n个数的阶乘</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">// 终结点</span><br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> f(n - <span class="hljs-number">1</span>) * n;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码的执行流程，我们用内存图的形式来分析一下，该案例中递归调用的特点是：<strong>一层一层调用，再一层一层往回返。</strong></p><p><img src="/assets/1667661022346.png" alt="1667661022346"></p><h3 id="4-3-递归文件搜索"><a href="#4-3-递归文件搜索" class="headerlink" title="4.3 递归文件搜索"></a>4.3 递归文件搜索</h3><p>学习完递归算法执行流程后，最后我们回过头来。再来看一下，如果使用递归来遍历文件夹。</p><p>案例需求：在<code>D:\\</code>判断下搜索QQ.exe这个文件，然后直接输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先调用文件夹的listFiles方法，获取文件夹的一级内容，得到一个数组<br><span class="hljs-number">2.</span>然后再遍历数组，获取数组中的File对象<br><span class="hljs-number">3.</span>因为File对象可能是文件也可能是文件夹，所以接下来就需要判断<br>判断File对象如果是文件，就获取文件名，如果文件名是`QQ.exe`则打印，否则不打印<br>判断File对象如果是文件夹，就递归执行<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>步骤<br>所以：把<span class="hljs-number">1</span>，<span class="hljs-number">2</span>,<span class="hljs-number">3</span>步骤写成方法，递归调用即可。<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握文件搜索的实现。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>          searchFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/&quot;</span>) , <span class="hljs-string">&quot;QQ.exe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 去目录下搜索某个文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dir  目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName 要搜索的文件名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchFile</span><span class="hljs-params">(File dir, String fileName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1、把非法的情况都拦截住</span><br>        <span class="hljs-keyword">if</span>(dir == <span class="hljs-literal">null</span> || !dir.exists() || dir.isFile())&#123;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 代表无法搜索</span><br>        &#125;<br><br>        <span class="hljs-comment">// 2、dir不是null,存在，一定是目录对象。</span><br>        <span class="hljs-comment">// 获取当前目录下的全部一级文件对象。</span><br>        File[] files = dir.listFiles();<br><br>        <span class="hljs-comment">// 3、判断当前目录下是否存在一级文件对象，以及是否可以拿到一级文件对象。</span><br>        <span class="hljs-keyword">if</span>(files != <span class="hljs-literal">null</span> &amp;&amp; files.length &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 4、遍历全部一级文件对象。</span><br>            <span class="hljs-keyword">for</span> (File f : files) &#123;<br>                <span class="hljs-comment">// 5、判断文件是否是文件,还是文件夹</span><br>                <span class="hljs-keyword">if</span>(f.isFile())&#123;<br>                    <span class="hljs-comment">// 是文件，判断这个文件名是否是我们要找的</span><br>                    <span class="hljs-keyword">if</span>(f.getName().contains(fileName))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;找到了：&quot;</span> + f.getAbsolutePath());<br>                        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>                        runtime.exec(f.getAbsolutePath());<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 是文件夹，继续重复这个过程（递归）</span><br>                    searchFile(f, fileName);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16集合进阶（Set、Map集合）</title>
    <link href="/2023/12/01/day16-%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88Set%E3%80%81Map%E9%9B%86%E5%90%88%EF%BC%89/"/>
    <url>/2023/12/01/day16-%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88Set%E3%80%81Map%E9%9B%86%E5%90%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="16——集合进阶（Set、Map集合）"><a href="#16——集合进阶（Set、Map集合）" class="headerlink" title="16——集合进阶（Set、Map集合）"></a>16——集合进阶（Set、Map集合）</h3><h2 id="一、Set系列集合"><a href="#一、Set系列集合" class="headerlink" title="一、Set系列集合"></a>一、Set系列集合</h2><h3 id="1-1-认识Set集合的特点"><a href="#1-1-认识Set集合的特点" class="headerlink" title="1.1 认识Set集合的特点"></a>1.1 认识Set集合的特点</h3><p>Set集合是属于Collection体系下的另一个分支，它的特点如下图所示</p><p><img src="/assets/1666169984705-1667311908041.png" alt="1666169984705"></p><p>下面我们用代码简单演示一下，每一种Set集合的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Set&lt;Integer&gt; set = new HashSet&lt;&gt;();//无序、无索引、不重复</span><br><span class="hljs-comment">//Set&lt;Integer&gt; set = new LinkedHashSet&lt;&gt;(); //有序、无索引、不重复</span><br>Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(); <span class="hljs-comment">//可排序(升序)、无索引、不重复</span><br>set.add(<span class="hljs-number">666</span>);<br>set.add(<span class="hljs-number">555</span>);<br>set.add(<span class="hljs-number">555</span>);<br>set.add(<span class="hljs-number">888</span>);<br>set.add(<span class="hljs-number">888</span>);<br>set.add(<span class="hljs-number">777</span>);<br>set.add(<span class="hljs-number">777</span>);<br>System.out.println(set); <span class="hljs-comment">//[555, 666, 777, 888]</span><br></code></pre></td></tr></table></figure><h3 id="1-2-HashSet集合底层原理"><a href="#1-2-HashSet集合底层原理" class="headerlink" title="1.2 HashSet集合底层原理"></a>1.2 HashSet集合底层原理</h3><p>接下来，为了让同学们更加透彻的理解HashSet为什么可以去重，我们来看一下它的底层原理。</p><p>HashSet集合底层是基于哈希表实现的，哈希表根据JDK版本的不同，也是有点区别的</p><ul><li>JDK8以前：哈希表 &#x3D; 数组+链表</li><li>JDK8以后：哈希表 &#x3D; 数组+链表+红黑树</li></ul><p><img src="/assets/1666170451762-1667311904484.png" alt="1666170451762"></p><p>我们发现往HashSet集合中存储元素时，底层调用了元素的两个方法：一个是hashCode方法获取元素的hashCode值（哈希值）；另一个是调用了元素的equals方法，用来比较新添加的元素和集合中已有的元素是否相同。 </p><ul><li>只有新添加元素的hashCode值和集合中以后元素的hashCode值相同、新添加的元素调用equals方法和集合中已有元素比较结果为true, 才认为元素重复。</li><li>如果hashCode值相同，equals比较不同，则以链表的形式连接在数组的同一个索引为位置（如上图所示）</li></ul><p>在JDK8开始后，为了提高性能，当链表的长度超过8时，就会把链表转换为红黑树，如下图所示：</p><p><img src="/assets/1666171011761-1667311900100.png" alt="1666171011761"></p><h3 id="1-3-HashSet去重原理"><a href="#1-3-HashSet去重原理" class="headerlink" title="1.3 HashSet去重原理"></a>1.3 HashSet去重原理</h3><p>前面我们学习了HashSet存储元素的原理，依赖于两个方法：一个是hashCode方法用来确定在底层数组中存储的位置，另一个是用equals方法判断新添加的元素是否和集合中已有的元素相同。</p><p>要想保证在HashSet集合中没有重复元素，我们需要重写元素类的hashCode和equals方法。比如以下面的Student类为例，假设把Student类的对象作为HashSet集合的元素，想要让学生的姓名和年龄相同，就认为元素重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height; <span class="hljs-comment">//身高</span><br> <br>    <span class="hljs-comment">//无参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//全参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> height)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>        <span class="hljs-built_in">this</span>.height=height;<br>    &#125;<br>    <span class="hljs-comment">//...get、set、toString()方法自己补上..</span><br>    <br>    <span class="hljs-comment">//按快捷键生成hashCode和equals方法</span><br>    <span class="hljs-comment">//alt+insert 选择 hashCode and equals</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (Double.compare(student.height, height) != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-literal">null</span> ? name.equals(student.name) : student.name == <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> result;<br>        <span class="hljs-type">long</span> temp;<br>        result = name != <span class="hljs-literal">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        temp = Double.doubleToLongBits(height);<br>        result = <span class="hljs-number">31</span> * result + (<span class="hljs-type">int</span>) (temp ^ (temp &gt;&gt;&gt; <span class="hljs-number">32</span>));<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，写一个测试类，往HashSet集合中存储Student对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Set&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>,<span class="hljs-number">20</span>, <span class="hljs-number">169.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-number">48</span>, <span class="hljs-number">169.6</span>);<br>        <br>        students.add(s1);<br>        students.add(s2);<br>        students.add(s3);<br>        students.add(s4);<br>        <br>        <span class="hljs-keyword">for</span>(Student s : students)&#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下，我们发现存了两个蜘蛛精，当时实际打印出来只有一个，而且是无序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Student&#123;name=<span class="hljs-string">&#x27;牛魔王&#x27;</span>, age=<span class="hljs-number">48</span>, height=<span class="hljs-number">169.6</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;至尊宝&#x27;</span>, age=<span class="hljs-number">20</span>, height=<span class="hljs-number">169.6</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>, age=<span class="hljs-number">23</span>, height=<span class="hljs-number">169.6</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-LinkedHashSet底层原理"><a href="#1-4-LinkedHashSet底层原理" class="headerlink" title="1.4 LinkedHashSet底层原理"></a>1.4 LinkedHashSet底层原理</h3><p>接下来，我们再学习一个HashSet的子类LinkedHashSet类。LinkedHashSet它底层采用的是也是哈希表结构，只不过额外新增了一个双向链表来维护元素的存取顺序。如下下图所示：</p><p><img src="/assets/1666171776819-1667311894748.png" alt="1666171776819"></p><p>每次添加元素，就和上一个元素用双向链表连接一下。第一个添加的元素是双向链表的头节点，最后一个添加的元素是双向链表的尾节点。</p><p>把上个案例中的集合改成LinkedList集合，我们观察效果怎样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Set&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>,<span class="hljs-number">20</span>, <span class="hljs-number">169.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.6</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-number">48</span>, <span class="hljs-number">169.6</span>);<br>        <br>        students.add(s1);<br>        students.add(s2);<br>        students.add(s3);<br>        students.add(s4);<br>        <br>        <span class="hljs-keyword">for</span>(Student s : students)&#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Student&#123;name=<span class="hljs-string">&#x27;至尊宝&#x27;</span>, age=<span class="hljs-number">20</span>, height=<span class="hljs-number">169.6</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>, age=<span class="hljs-number">23</span>, height=<span class="hljs-number">169.6</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;牛魔王&#x27;</span>, age=<span class="hljs-number">48</span>, height=<span class="hljs-number">169.6</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-TreeSet集合"><a href="#1-5-TreeSet集合" class="headerlink" title="1.5 TreeSet集合"></a>1.5 TreeSet集合</h3><p>最后，我们学习一下TreeSet集合。TreeSet集合的特点是可以对元素进行排序，但是必须指定元素的排序规则。</p><p>如果往集合中存储String类型的元素，或者Integer类型的元素，它们本身就具备排序规则，所以直接就可以排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt; set1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>set1.add(<span class="hljs-number">8</span>);<br>set1.add(<span class="hljs-number">6</span>);<br>set1.add(<span class="hljs-number">4</span>);<br>set1.add(<span class="hljs-number">3</span>);<br>set1.add(<span class="hljs-number">7</span>);<br>set1.add(<span class="hljs-number">1</span>);<br>set1.add(<span class="hljs-number">5</span>);<br>set1.add(<span class="hljs-number">2</span>);<br>System.out.println(set1); <span class="hljs-comment">//[1,2,3,4,5,6,7,8]</span><br><br>Set&lt;Integer&gt; set2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>set2.add(<span class="hljs-string">&quot;a&quot;</span>);<br>set2.add(<span class="hljs-string">&quot;c&quot;</span>);<br>set2.add(<span class="hljs-string">&quot;e&quot;</span>);<br>set2.add(<span class="hljs-string">&quot;b&quot;</span>);<br>set2.add(<span class="hljs-string">&quot;d&quot;</span>);<br>set2.add(<span class="hljs-string">&quot;f&quot;</span>);<br>set2.add(<span class="hljs-string">&quot;g&quot;</span>);<br>System.out.println(set1); <span class="hljs-comment">//[a,b,c,d,e,f,g]</span><br></code></pre></td></tr></table></figure><p>如果往TreeSet集合中存储自定义类型的元素，比如说Student类型，则需要我们自己指定排序规则，否则会出现异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建TreeSet集合，元素为Student类型</span><br>Set&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br><br><span class="hljs-comment">//创建4个Student对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>,<span class="hljs-number">20</span>, <span class="hljs-number">169.6</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.8</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.6</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-number">48</span>, <span class="hljs-number">169.6</span>);<br><br><span class="hljs-comment">//添加Studnet对象到集合</span><br>students.add(s1);<br>students.add(s2);<br>students.add(s3);<br>students.add(s4);<br>System.out.println(students); <br></code></pre></td></tr></table></figure><p>此时运行代码，会直接报错。原因是TreeSet不知道按照什么条件对Student对象来排序。</p><p><img src="/assets/1666172629095-1667311889347.png" alt="1666172629095"></p><p>我们想要告诉TreeSet集合按照指定的规则排序，有两种办法：</p><blockquote><p>第一种：让元素的类实现Comparable接口，重写compareTo方法</p></blockquote><blockquote><p>第二种：在创建TreeSet集合时，通过构造方法传递Compartor比较器对象</p></blockquote><ul><li><strong>排序方式1：</strong>我们先来演示第一种排序方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一步：先让Student类，实现Comparable接口</span><br><span class="hljs-comment">//注意：Student类的对象是作为TreeSet集合的元素的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br><span class="hljs-comment">//无参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//全参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> height)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>        <span class="hljs-built_in">this</span>.height=height;<br>    &#125;<br>    <span class="hljs-comment">//...get、set、toString()方法自己补上..</span><br>    <br>    <span class="hljs-comment">//第二步：重写compareTo方法</span><br>    <span class="hljs-comment">//按照年龄进行比较，只需要在方法中让this.age和o.age相减就可以。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    原理：</span><br><span class="hljs-comment">    在往TreeSet集合中添加元素时，add方法底层会调用compareTo方法，根据该方法的</span><br><span class="hljs-comment">    结果是正数、负数、还是零，决定元素放在后面、前面还是不存。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-comment">//this：表示将要添加进去的Student对象</span><br>        <span class="hljs-comment">//o: 表示集合中已有的Student对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age-o.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，再运行测试类，结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Student&#123;name=<span class="hljs-string">&#x27;至尊宝&#x27;</span>, age=<span class="hljs-number">20</span>, height=<span class="hljs-number">169.6</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;紫霞&#x27;</span>, age=<span class="hljs-number">20</span>, height=<span class="hljs-number">169.8</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>, age=<span class="hljs-number">23</span>, height=<span class="hljs-number">169.6</span>&#125;<br>Student&#123;name=<span class="hljs-string">&#x27;牛魔王&#x27;</span>, age=<span class="hljs-number">48</span>, height=<span class="hljs-number">169.6</span>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>排序方式2：</strong>接下来演示第二种排序方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建TreeSet集合时，传递比较器对象排序</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">原理：当调用add方法时，底层会先用比较器，根据Comparator的compare方是正数、负数、还是零，决定谁在后，谁在前，谁不存。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//下面代码中是按照学生的年龄升序排序</span><br>Set&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span>&#123;<br>        <span class="hljs-comment">//需求：按照学生的身高排序</span><br>        <span class="hljs-keyword">return</span> Double.compare(o1,o2); <br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//创建4个Student对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>,<span class="hljs-number">20</span>, <span class="hljs-number">169.6</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.8</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>, <span class="hljs-number">169.6</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-number">48</span>, <span class="hljs-number">169.6</span>);<br><br><span class="hljs-comment">//添加Studnet对象到集合</span><br>students.add(s1);<br>students.add(s2);<br>students.add(s3);<br>students.add(s4);<br>System.out.println(students); <br></code></pre></td></tr></table></figure><h3 id="1-6-总结Collection集合"><a href="#1-6-总结Collection集合" class="headerlink" title="1.6 总结Collection集合"></a>1.6 总结Collection集合</h3><p>最后，将所有的Collection集合总结一下，要求大家掌握每一种集合的特点，以及他们的体系结构。</p><p><img src="/assets/1666174020172-1667311882030.png" alt="1666174020172"></p><p>好了，关于Collection集合，到这里就学习完了。</p><h3 id="1-7-并发修改异常"><a href="#1-7-并发修改异常" class="headerlink" title="1.7 并发修改异常"></a>1.7 并发修改异常</h3><p>学完Collection集合后，还有一个小问题需要给同学们补充说明一下，那就是在使用迭代器遍历集合时，可能存在并发修改异常。</p><p>我们先把这个异常用代码演示出来，再解释一下为什么会有这个异常产生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;王麻子&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小李子&quot;</span>);<br>list.add(<span class="hljs-string">&quot;李爱花&quot;</span>);<br>list.add(<span class="hljs-string">&quot;张全蛋&quot;</span>);<br>list.add(<span class="hljs-string">&quot;晓李&quot;</span>);<br>list.add(<span class="hljs-string">&quot;李玉刚&quot;</span>);<br>System.out.println(list); <span class="hljs-comment">// [王麻子, 小李子, 李爱花, 张全蛋, 晓李, 李玉刚]</span><br><br><span class="hljs-comment">//需求：找出集合中带&quot;李&quot;字的姓名，并从集合中删除</span><br>Iterator&lt;String&gt; it = list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(name.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>        list.remove(name);<br>    &#125;<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure><p>运行上面的代码，会出现下面的异常。这就是并发修改异常</p><p><img src="/assets/1666174432223-1667311876805.png" alt="1666174432223"></p><p>为什么会出现这个异常呢？那是因为迭代器遍历机制，规定迭代器遍历集合的同时，不允许集合自己去增删元素，否则就会出现这个异常。</p><p>怎么解决这个问题呢？不使用集合的删除方法，而是使用迭代器的删除方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;王麻子&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小李子&quot;</span>);<br>list.add(<span class="hljs-string">&quot;李爱花&quot;</span>);<br>list.add(<span class="hljs-string">&quot;张全蛋&quot;</span>);<br>list.add(<span class="hljs-string">&quot;晓李&quot;</span>);<br>list.add(<span class="hljs-string">&quot;李玉刚&quot;</span>);<br>System.out.println(list); <span class="hljs-comment">// [王麻子, 小李子, 李爱花, 张全蛋, 晓李, 李玉刚]</span><br><br><span class="hljs-comment">//需求：找出集合中带&quot;李&quot;字的姓名，并从集合中删除</span><br>Iterator&lt;String&gt; it = list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(name.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>        <span class="hljs-comment">//list.remove(name);</span><br>        it.remove(); <span class="hljs-comment">//当前迭代器指向谁，就删除谁</span><br>    &#125;<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure><h2 id="二、Collection的其他操作"><a href="#二、Collection的其他操作" class="headerlink" title="二、Collection的其他操作"></a>二、Collection的其他操作</h2><p>各位同学，前面我们已经把Collection家族的集合都学习完了。为了更加方便的对Collection集合进行操作，今天我们还要学习一个操作Collection集合的工具类，叫做Collections。但是Collections工具类中需要用到一个没有学过的小知识点，叫做可变参数，所以必须先学习这个前置知识可变参数，再学习Collections工具类，最后再利用这个工具类做一个综合案例。</p><h3 id="2-1-可变参数"><a href="#2-1-可变参数" class="headerlink" title="2.1 可变参数"></a>2.1 可变参数</h3><p>首先，我们来学习一下可变参数。关于可变参数我们首先要知道它是什么，然后要知道它的本质。搞清楚这两个问题，可变参数就算你学明白了。</p><blockquote><ul><li><p><strong>可变参数是一种特殊的形式参数，定义在方法、构造器的形参列表处，它可以让方法接收多个同类型的实际参数。</strong></p></li><li><p><strong>可变参数在方法内部，本质上是一个数组</strong></p></li></ul></blockquote><p>接下来，我们编写代码来演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//不传递参数，下面的nums长度则为0, 打印元素是[]</span><br>        test();<br>        <br>        <span class="hljs-comment">//传递3个参数，下面的nums长度为3，打印元素是[10, 20, 30]</span><br>        test(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>); <br>        <br>        <span class="hljs-comment">//传递一个数组，下面数组长度为4，打印元素是[10,20,30,40] </span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;<br>        test(arr); <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span>...nums)</span>&#123;<br>        <span class="hljs-comment">//可变参数在方法内部，本质上是一个数组</span><br>        System.out.println(nums.length);<br>        System.out.println(Arrays.toString(nums));<br>        System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后还有一些错误写法，需要让大家写代码时注意一下，不要这么写哦！！！</p><blockquote><ul><li><p><strong>一个形参列表中，只能有一个可变参数；否则会报错</strong></p></li><li><p><strong>一个形参列表中如果多个参数，可变参数需要写在最后；否则会报错</strong></p></li></ul></blockquote><p><img src="/assets/1667194652653.png" alt="1667194652653"></p><p><img src="/assets/1667194696892.png" alt="1667194696892"></p><h3 id="2-2-Collections工具类"><a href="#2-2-Collections工具类" class="headerlink" title="2.2 Collections工具类"></a>2.2 Collections工具类</h3><p>有了可变参数的基础，我们再学习Collections这个工具类就好理解了，因为这个工具类的方法中会用到可变参数。</p><p>注意Collections并不是集合，它比Collection多了一个s，一般后缀为s的类很多都是工具类。这里的Collections是用来操作Collection的工具类。它提供了一些好用的静态方法，如下</p><p><img src="/assets/1667195108724.png" alt="1667195108724"></p><p>我们把这些方法用代码来演示一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionsTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T...e)</span><br>        List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(names, <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;张麻子&quot;</span>);<br>        System.out.println(names);<br>        <br>        <span class="hljs-comment">//2.public static void shuffle(List&lt;?&gt; list)：对集合打乱顺序</span><br>        Collections.shuffle(names);<br>        System.out.println(names);<br>        <br>        <span class="hljs-comment">//3.public static &lt;T&gt; void short(List&lt;T list): 对List集合排序</span><br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">3</span>);<br>        list.add(<span class="hljs-number">5</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        Collections.sort(list);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面我们往集合中存储的元素要么是Stirng类型，要么是Integer类型，他们本来就有一种自然顺序所以可以直接排序。但是如果我们往List集合中存储Student对象，这个时候想要对List集合进行排序自定义比较规则的。指定排序规则有两种方式，如下：</p><blockquote><p><strong>排序方式1：让元素实现Comparable接口，重写compareTo方法</strong></p></blockquote><p>比如现在想要往集合中存储Studdent对象，首先需要准备一个Student类，实现Comparable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <br>     <span class="hljs-comment">//排序时：底层会自动调用此方法，this和o表示需要比较的两个对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span>&#123;<br>        <span class="hljs-comment">//需求：按照年龄升序排序</span><br>        <span class="hljs-comment">//如果返回正数：说明左边对象的年龄&gt;右边对象的年龄</span><br>        <span class="hljs-comment">//如果返回负数：说明左边对象的年龄&lt;右边对象的年龄，</span><br>        <span class="hljs-comment">//如果返回0：说明左边对象的年龄和右边对象的年龄相同</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//...getter、setter、constructor..</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后再使用<code>Collections.sort(list集合)</code>对List集合排序，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.public static &lt;T&gt; void short(List&lt;T list): 对List集合排序</span><br>List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">169.7</span>));<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">169.8</span>));<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">169.8</span>));<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>,<span class="hljs-number">26</span>,<span class="hljs-number">169.5</span>));<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">原理：sort方法底层会遍历students集合中的每一个元素，采用排序算法，将任意两个元素两两比较；</span><br><span class="hljs-comment">每次比较时，会用一个Student对象调用compareTo方法和另一个Student对象进行比较；</span><br><span class="hljs-comment">根据compareTo方法返回的结果是正数、负数，零来决定谁大，谁小，谁相等，重新排序元素的位置</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注意：这些都是sort方法底层自动完成的，想要完全理解，必须要懂排序算法才行；</span><br><span class="hljs-comment">*/</span><br>Collections.sort(students);<br>System.out.println(students);<br></code></pre></td></tr></table></figure><blockquote><p><strong>排序方式2：使用调用sort方法是，传递比较器</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">原理：sort方法底层会遍历students集合中的每一个元素，采用排序算法，将任意两个元素两两比较；</span><br><span class="hljs-comment">每次比较，会将比较的两个元素传递给Comparator比较器对象的compare方法的两个参数o1和o2,</span><br><span class="hljs-comment">根据compare方法的返回结果是正数，负数，或者0来决定谁大，谁小，谁相等，重新排序元素的位置</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注意：这些都是sort方法底层自动完成的，不需要我们完全理解，想要理解它必须要懂排序算法才行.</span><br><span class="hljs-comment">*/</span><br>Collections.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span>&#123;<br>        <span class="hljs-keyword">return</span> o1.getAge()-o2.getAge();<br>    &#125;<br>&#125;);<br>System.out.println(students);<br></code></pre></td></tr></table></figure><h3 id="2-3-斗地主案例"><a href="#2-3-斗地主案例" class="headerlink" title="2.3 斗地主案例"></a>2.3 斗地主案例</h3><p><img src="/assets/1667306432458.png" alt="1667306432458"></p><p>我们先分析一下业务需求：</p><ul><li>总共有54张牌，每一张牌有花色和点数两个属性、为了排序还可以再加一个序号</li><li>点数可以是：<code>“3”,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;,&quot;J&quot;,&quot;Q&quot;,&quot;K&quot;,&quot;A&quot;,&quot;2&quot;</code></li><li>花色可以是：<code>“♣”,&quot;♠&quot;,&quot;♥&quot;,&quot;♦&quot;</code></li><li>斗地主时：三个玩家没人手里17张牌，剩余3张牌作为底牌</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：为了表示每一张牌有哪些属性，首先应该新建一个扑克牌的类<br>第二步：启动游戏时，就应该提前准备好<span class="hljs-number">54</span>张牌<br>第三步：接着再完全洗牌、发牌、捋牌、看牌的业务逻辑<br></code></pre></td></tr></table></figure><blockquote><p><strong>先来完成第一步，定义一个扑克类Card</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span> &#123;<br>    <span class="hljs-keyword">private</span> String number;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-comment">// 每张牌是存在大小的。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">// 0 1 2 ....</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Card</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Card</span><span class="hljs-params">(String number, String color, <span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>        <span class="hljs-built_in">this</span>.color = color;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(String number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color + number ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>再完成第二步，定义一个房间类，初始化房间时准备好54张牌</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span> &#123;<br>    <span class="hljs-comment">// 必须有一副牌。</span><br>    <span class="hljs-keyword">private</span> List&lt;Card&gt; allCards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Room</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1、做出54张牌，存入到集合allCards</span><br>        <span class="hljs-comment">// a、点数：个数确定了，类型确定。</span><br>        String[] numbers = &#123;<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>&#125;;<br>        <span class="hljs-comment">// b、花色：个数确定了，类型确定。</span><br>        String[] colors = &#123;<span class="hljs-string">&quot;♠&quot;</span>, <span class="hljs-string">&quot;♥&quot;</span>, <span class="hljs-string">&quot;♣&quot;</span>, <span class="hljs-string">&quot;♦&quot;</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 表示每张牌的大小</span><br>        <span class="hljs-comment">// c、遍历点数，再遍历花色，组织牌</span><br>        <span class="hljs-keyword">for</span> (String number : numbers) &#123;<br>            <span class="hljs-comment">// number = &quot;3&quot;</span><br>            size++; <span class="hljs-comment">// 1 2 ....</span><br>            <span class="hljs-keyword">for</span> (String color : colors) &#123;<br>                <span class="hljs-comment">// 得到一张牌</span><br>                <span class="hljs-type">Card</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(number, color, size);<br>                allCards.add(c); <span class="hljs-comment">// 存入了牌</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 单独存入小大王的。</span><br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(<span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;🃏&quot;</span> , ++size);<br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;👲&quot;</span> , ++size);<br>        Collections.addAll(allCards, c1, c2);<br>        System.out.println(<span class="hljs-string">&quot;新牌：&quot;</span> + allCards);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>最后完成第三步，定义一个启动游戏的方法，完成洗牌、发牌、捋牌、看牌的业务逻辑</strong></p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 游戏启动</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1、洗牌： allCards</span><br>    Collections.shuffle(allCards);<br>    System.out.println(<span class="hljs-string">&quot;洗牌后：&quot;</span> + allCards);<br><br>    <span class="hljs-comment">// 2、发牌，首先肯定要定义 三个玩家。 List(ArrayList)  Set(TreeSet)</span><br>    List&lt;Card&gt; linHuChong = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Card&gt; jiuMoZhi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Card&gt; renYingYing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 正式发牌给这三个玩家，依次发出51张牌，剩余3张做为底牌。</span><br>    <span class="hljs-comment">// allCards = [♥3, ♣10, ♣4, ♥K, ♦Q, ♣2, 🃏, ♣8, ....</span><br>    <span class="hljs-comment">//             0     1   2   3   4   5   6 ...   % 3</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; allCards.size() - <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> allCards.get(i);<br>        <span class="hljs-comment">// 判断牌发给谁</span><br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 请啊冲接牌</span><br>            linHuChong.add(c);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 请啊鸠来接牌</span><br>            jiuMoZhi.add(c);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">// 请盈盈接牌</span><br>            renYingYing.add(c);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 3、对3个玩家的牌进行排序</span><br>    sortCards(linHuChong);<br>    sortCards(jiuMoZhi);<br>    sortCards(renYingYing);<br>    <span class="hljs-comment">// 4、看牌</span><br>    System.out.println(<span class="hljs-string">&quot;啊冲：&quot;</span> + linHuChong);<br>    System.out.println(<span class="hljs-string">&quot;啊鸠：&quot;</span> + jiuMoZhi);<br>    System.out.println(<span class="hljs-string">&quot;盈盈：&quot;</span> + renYingYing);<br>    List&lt;Card&gt; lastThreeCards = allCards.subList(allCards.size() - <span class="hljs-number">3</span>, allCards.size()); <span class="hljs-comment">// 51 52 53</span><br>    System.out.println(<span class="hljs-string">&quot;底牌：&quot;</span> + lastThreeCards);<br>    jiuMoZhi.addAll(lastThreeCards);<br>    sortCards(jiuMoZhi);<br>    System.out.println(<span class="hljs-string">&quot;啊鸠抢到地主后：&quot;</span> + jiuMoZhi);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 集中进行排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cards</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortCards</span><span class="hljs-params">(List&lt;Card&gt; cards)</span> &#123;<br>    Collections.sort(cards, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Card&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Card o1, Card o2)</span> &#123;<br>            <span class="hljs-comment">// return o1.getSize() - o2.getSize(); // 升序排序</span><br>            <span class="hljs-keyword">return</span> o2.getSize() - o1.getSize(); <span class="hljs-comment">// 降序排序</span><br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>不要忘记了写测试类了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//  1、牌类。</span><br>        <span class="hljs-comment">//  2、房间</span><br>        <span class="hljs-type">Room</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>();<br>        <span class="hljs-comment">//  3、启动游戏</span><br>        m.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、Map集合"><a href="#三、Map集合" class="headerlink" title="三、Map集合"></a>三、Map集合</h2><h3 id="3-1-Map概述体系"><a href="#3-1-Map概述体系" class="headerlink" title="3.1 Map概述体系"></a>3.1 Map概述体系</h3><p>各位同学，前面我们已经把单列集合学习完了，接下来我们要学习的是双列集合。首先我们还是先认识一下什么是双列集合。</p><p>所谓双列集合，就是说集合中的元素是一对一对的。Map集合中的每一个元素是以<code>key=value</code>的形式存在的，一个<code>key=value</code>就称之为一个键值对，而且在Java中有一个类叫Entry类，Entry的对象用来表示键值对对象。</p><p>所有的Map集合有如下的特点：<strong>键不能重复，值可以重复，每一个键只能找到自己对应的值。</strong></p><p><img src="/assets/1667308368751.png" alt="1667308368751"></p><p>下面我们先写一个Map集合，保存几个键值对，体验一下Map集合的特点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(); // 一行经典代码。 按照键 无序，不重复，无索引。</span><br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;(); <span class="hljs-comment">// 有序，不重复，无索引。</span><br>        map.put(<span class="hljs-string">&quot;手表&quot;</span>, <span class="hljs-number">100</span>);<br>        map.put(<span class="hljs-string">&quot;手表&quot;</span>, <span class="hljs-number">220</span>); <span class="hljs-comment">// 后面重复的数据会覆盖前面的数据（键）</span><br>        map.put(<span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        System.out.println(map);<br><br>        Map&lt;Integer, String&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(); <span class="hljs-comment">// 可排序，不重复，无索引</span><br>        map1.put(<span class="hljs-number">23</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br>        map1.put(<span class="hljs-number">23</span>, <span class="hljs-string">&quot;MySQL&quot;</span>);<br>        map1.put(<span class="hljs-number">19</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>        map1.put(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;王五&quot;</span>);<br>        System.out.println(map1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Map集合也有很多种，在Java中使用不同的类来表示的，每一种Map集合其键的特点是有些差异的，值是键的一个附属值，所以我们只关注键的特点就可以了。</p><p><img src="/assets/1667308506610.png" alt="1667308506610"></p><p>关于Map集合是什么，以及Map集合的体系我们先了解到这里，接下来就具体学习一下Map集合的通用方法。</p><h3 id="3-2-Map集合的常用方法"><a href="#3-2-Map集合的常用方法" class="headerlink" title="3.2 Map集合的常用方法"></a>3.2 Map集合的常用方法</h3><p>各位同学，上节课我们已经认识了Map集合，接下来我们学习一下Map集合提供了那些方法供我们使用。由于Map是所有双列集合的父接口，所以我们只需要学习Map接口中每一个方法是什么含义，那么所有的Map集合方法你就都会用了。</p><p><img src="/assets/1667308854001.png" alt="1667308854001"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.添加元素: 无序，不重复，无索引。</span><br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;手表&quot;</span>, <span class="hljs-number">100</span>);<br>        map.put(<span class="hljs-string">&quot;手表&quot;</span>, <span class="hljs-number">220</span>);<br>        map.put(<span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// map = &#123;null=null, 手表=220, Java=2, 手机=2&#125;</span><br><br>        <span class="hljs-comment">// 2.public int size():获取集合的大小</span><br>        System.out.println(map.size());<br><br>        <span class="hljs-comment">// 3、public void clear():清空集合</span><br>        <span class="hljs-comment">//map.clear();</span><br>        <span class="hljs-comment">//System.out.println(map);</span><br><br>        <span class="hljs-comment">// 4.public boolean isEmpty(): 判断集合是否为空，为空返回true ,反之！</span><br>        System.out.println(map.isEmpty());<br><br>        <span class="hljs-comment">// 5.public V get(Object key)：根据键获取对应值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;手表&quot;</span>);<br>        System.out.println(v1);<br>        System.out.println(map.get(<span class="hljs-string">&quot;手机&quot;</span>)); <span class="hljs-comment">// 2</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;张三&quot;</span>)); <span class="hljs-comment">// null</span><br><br>        <span class="hljs-comment">// 6. public V remove(Object key)：根据键删除整个元素(删除键会返回键的值)</span><br>        System.out.println(map.remove(<span class="hljs-string">&quot;手表&quot;</span>));<br>        System.out.println(map);<br><br>        <span class="hljs-comment">// 7.public  boolean containsKey(Object key): 判断是否包含某个键 ，包含返回true ,反之</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;手表&quot;</span>)); <span class="hljs-comment">// false</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;手机&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;java&quot;</span>)); <span class="hljs-comment">// false</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;Java&quot;</span>)); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 8.public boolean containsValue(Object value): 判断是否包含某个值。</span><br>        System.out.println(map.containsValue(<span class="hljs-number">2</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(map.containsValue(<span class="hljs-string">&quot;2&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 9.public Set&lt;K&gt; keySet(): 获取Map集合的全部键。</span><br>        Set&lt;String&gt; keys = map.keySet();<br>        System.out.println(keys);<br><br>        <span class="hljs-comment">// 10.public Collection&lt;V&gt; values(); 获取Map集合的全部值。</span><br>        Collection&lt;Integer&gt; values = map.values();<br>        System.out.println(values);<br><br>        <span class="hljs-comment">// 11.把其他Map集合的数据倒入到自己集合中来。(拓展)</span><br>        Map&lt;String, Integer&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map1.put(<span class="hljs-string">&quot;java1&quot;</span>,  <span class="hljs-number">10</span>);<br>        map1.put(<span class="hljs-string">&quot;java2&quot;</span>,  <span class="hljs-number">20</span>);<br>        Map&lt;String, Integer&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(<span class="hljs-string">&quot;java3&quot;</span>,  <span class="hljs-number">10</span>);<br>        map2.put(<span class="hljs-string">&quot;java2&quot;</span>,  <span class="hljs-number">222</span>);<br>        map1.putAll(map2); <span class="hljs-comment">// putAll：把map2集合中的元素全部倒入一份到map1集合中去。</span><br>        System.out.println(map1);<br>        System.out.println(map2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Map集合遍历方式1"><a href="#3-3-Map集合遍历方式1" class="headerlink" title="3.3 Map集合遍历方式1"></a>3.3 Map集合遍历方式1</h3><p>Map集合一共有三种遍历方式，我们先来学习第一种，他需要用到下面的两个方法</p><p><img src="/assets/1667308962740.png" alt="1667308962740"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：掌握Map集合的遍历方式1：键找值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 准备一个Map集合。</span><br>        Map&lt;String, Double&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">162.5</span>);<br>        map.put(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.8</span>);<br>        map.put(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">165.8</span>);<br>        map.put(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">169.5</span>);<br>        map.put(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">183.6</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// map = &#123;蜘蛛精=169.8, 牛魔王=183.6, 至尊宝=169.5, 紫霞=165.8&#125;</span><br><br>        <span class="hljs-comment">// 1、获取Map集合的全部键</span><br>        Set&lt;String&gt; keys = map.keySet();<br>        <span class="hljs-comment">// System.out.println(keys);</span><br>        <span class="hljs-comment">// [蜘蛛精, 牛魔王, 至尊宝, 紫霞]</span><br>        <span class="hljs-comment">//         key</span><br>        <span class="hljs-comment">// 2、遍历全部的键，根据键获取其对应的值</span><br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">// 根据键获取对应的值</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=====&gt;&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-Map集合遍历方式2"><a href="#3-4-Map集合遍历方式2" class="headerlink" title="3.4 Map集合遍历方式2"></a>3.4 Map集合遍历方式2</h3><p>各位同学，接下来我们学习Map集合的第二种遍历方式，这种遍历方式更加符合面向对象的思维。</p><p>前面我们给大家介绍过，Map集合是用来存储键值对的，而每一个键值对实际上是一个Entry对象。</p><p><strong>这里Map集合的第二种方式，是直接获取每一个Entry对象，把Entry存储扫Set集合中去，再通过Entry对象获取键和值。</strong></p><p><img src="/assets/1667309587178.png" alt="1667309587178"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Map集合的第二种遍历方式：键值对。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Double&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.8</span>);<br>        map.put(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">165.8</span>);<br>        map.put(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">169.5</span>);<br>        map.put(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">183.6</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// map = &#123;蜘蛛精=169.8, 牛魔王=183.6, 至尊宝=169.5, 紫霞=165.8&#125;</span><br>        <span class="hljs-comment">// entries = [(蜘蛛精=169.8), (牛魔王=183.6), (至尊宝=169.5), (紫霞=165.8)]</span><br>        <span class="hljs-comment">// entry = (蜘蛛精=169.8)</span><br>        <span class="hljs-comment">// entry = (牛魔王=183.6)</span><br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-comment">// 1、调用Map集合提供entrySet方法，把Map集合转换成键值对类型的Set集合</span><br>        Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : entries) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;----&gt;&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-Map集合遍历方式3"><a href="#3-5-Map集合遍历方式3" class="headerlink" title="3.5 Map集合遍历方式3"></a>3.5 Map集合遍历方式3</h3><p>Map集合的第三种遍历方式，需要用到下面的一个方法forEach，而这个方法是JDK8版本以后才有的。调用起来非常简单，最好是结合的lambda表达式一起使用。</p><p><img src="/assets/1667309230571.png" alt="1667309230571"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Map集合的第二种遍历方式：键值对。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Double&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.8</span>);<br>        map.put(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">165.8</span>);<br>        map.put(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">169.5</span>);<br>        map.put(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">183.6</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// map = &#123;蜘蛛精=169.8, 牛魔王=183.6, 至尊宝=169.5, 紫霞=165.8&#125;</span><br><br><br><span class="hljs-comment">//遍历map集合，传递匿名内部类</span><br>        map.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BiConsumer</span>&lt;String, Double&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String k, Double v)</span> &#123;<br>                System.out.println(k + <span class="hljs-string">&quot;----&gt;&quot;</span> + v);<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//遍历map集合，传递Lambda表达式</span><br>        map.forEach(( k,  v) -&gt; &#123;<br>            System.out.println(k + <span class="hljs-string">&quot;----&gt;&quot;</span> + v);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-Map集合案例"><a href="#3-6-Map集合案例" class="headerlink" title="3.6 Map集合案例"></a>3.6 Map集合案例</h3><p>学习完Map集合的基本用法之后，接下来我们做一个综合案例，将Map集合运用一下。</p><p><img src="/assets/1667311182716.png" alt="1667311182716"></p><p>先分析需求，再考虑怎么用代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先可以将<span class="hljs-number">80</span>个学生选择的景点放到一个集合中去（也就是说，集合中的元素是<span class="hljs-number">80</span>个任意的ABCD元素）<br><span class="hljs-number">2.</span>准备一个Map集合用来存储景点，以及景点被选择的次数<br><span class="hljs-number">3.</span>遍历<span class="hljs-number">80</span>个学生选择景点的集合，得到每一个景点，判断Map集合中是否包含该景点<br>如果不包含，则存储<span class="hljs-string">&quot;景点=1&quot;</span><br>    如果包含，则存获取该景点原先的值，再存储<span class="hljs-string">&quot;景点=原来的值+1&quot;</span>; 此时新值会覆盖旧值<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：完成Map集合的案例：统计投票人数。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、把80个学生选择的景点数据拿到程序中来。</span><br>        List&lt;String&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        String[] selects = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>&#125;;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">80</span>; i++) &#123;<br>            <span class="hljs-comment">// 每次模拟一个学生选择一个景点，存入到集合中去。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">4</span>); <span class="hljs-comment">// 0 1 2 3</span><br>            data.add(selects[index]);<br>        &#125;<br>        System.out.println(data);<br><br>        <span class="hljs-comment">// 2、开始统计每个景点的投票人数</span><br>        <span class="hljs-comment">// 准备一个Map集合用于统计最终的结果</span><br>        Map&lt;String, Integer&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 3、开始遍历80个景点数据</span><br>        <span class="hljs-keyword">for</span> (String s : data) &#123;<br>            <span class="hljs-comment">// 问问Map集合中是否存在该景点</span><br>            <span class="hljs-keyword">if</span>(result.containsKey(s))&#123;<br>                <span class="hljs-comment">// 说明这个景点之前统计过。其值+1. 存入到Map集合中去</span><br>                result.put(s, result.get(s) + <span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 说明这个景点是第一次统计，存入&quot;景点=1&quot;</span><br>                result.put(s, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15集合进阶</title>
    <link href="/2023/12/01/day15--%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%881%EF%BC%89/"/>
    <url>/2023/12/01/day15--%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="15—集合进阶（异常、集合）"><a href="#15—集合进阶（异常、集合）" class="headerlink" title="15—集合进阶（异常、集合）"></a>15—集合进阶（异常、集合）</h3><h2 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h2><h3 id="1-1-认识异常"><a href="#1-1-认识异常" class="headerlink" title="1.1 认识异常"></a>1.1 认识异常</h3><p>接下来，我们学习一下异常，学习异常有利于我们处理程序中可能出现的问题。我先带着同学们认识一下，什么是异常？</p><p>我们阅读下面的代码，通过这段代码来认识异常。 我们调用一个方法时，经常一部小心就出异常了，然后在控制台打印一些异常信息。其实打印的这些异常信息，就叫做异常。</p><p>那肯定有同学就纳闷了，我写代码天天出异常，我知道这是异常啊！我们这里学习异常，其实是为了告诉你异常是怎么产生的？只有你知道异常是如何产生的，才能避免出现异常。以及产生异常之后如何处理。</p><p><img src="/assets/1667312695257.png" alt="1667312695257"></p><p>因为写代码时经常会出现问题，Java的设计者们早就为我们写好了很多个异常类，来描述不同场景下的问题。而有些类是有共性的所以就有了异常的继承体系</p><p><img src="/assets/1667313423356.png" alt="1667313423356"></p><blockquote><p><strong>先来演示一个运行时异常产生</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;;<br><span class="hljs-comment">//5是一个不存在的索引，所以此时产生ArrayIndexOutOfBoundsExcpetion</span><br>System.out.println(arr[<span class="hljs-number">5</span>]); <br></code></pre></td></tr></table></figure><p>下图是API中对ArrayIndexOutOfBoundsExcpetion类的继承体系，以及告诉我们它在什么情况下产生。</p><p><img src="/assets/1667313567748.png" alt="1667313567748"></p><blockquote><p><strong>再来演示一个编译时异常</strong></p></blockquote><p>我们在调用SimpleDateFormat对象的parse方法时，要求传递的参数必须和指定的日期格式一致，否则就会出现异常。 Java比较贴心，它为了更加强烈的提醒方法的调用者，设计了编译时异常，它把异常的提醒提前了，你调用方法是否真的有问题，只要可能有问题就给你报出异常提示（红色波浪线）。</p><p> <strong>编译时异常的目的：意思就是告诉你，你小子注意了！！，这里小心点容易出错，仔细检查一下</strong></p><p><img src="/assets/1667313705048.png" alt="1667313705048"></p><p>有人说，我检查过了，我确认我的代码没问题，为了让它不报错，继续将代码写下去。我们这里有两种解决方案。</p><ul><li>第一种：使用throws在方法上声明，意思就是告诉下一个调用者，这里面可能有异常啊，你调用时注意一下。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：认识异常。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2028-11-11 10:24&quot;</span>);<br>        System.out.println(d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二种：使用try…catch语句块异常进行处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2028-11-11 10:24&quot;</span>);<br>            System.out.println(d);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好了，关于什么是异常，我们就先认识到这里。</p><h3 id="1-2-自定义异常"><a href="#1-2-自定义异常" class="headerlink" title="1.2 自定义异常"></a>1.2 自定义异常</h3><p>同学们经过刚才的学习已经认识了什么是异常了，但是无法为这个世界上的全部问题都提供异常类，如果企业自己的某种问题，想通过异常来表示，那就需要自己来定义异常类了。</p><p>我们通过一个实际场景，来给大家演示自定义异常。</p><blockquote><p>需求：写一个saveAge(int age)方法，在方法中对参数age进行判断，如果age&lt;0或者&gt;&#x3D;150就认为年龄不合法，如果年龄不合法，就给调用者抛出一个年龄非法异常。</p><p>分析：Java的API中是没有年龄非常这个异常的，所以我们可以自定义一个异常类，用来表示年龄非法异常，然后再方法中抛出自定义异常即可。</p></blockquote><ul><li>先写一个异常类AgeIllegalException（这是自己取的名字，名字取得很奈斯），继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、必须让这个类继承自Exception，才能成为一个编译时异常类。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeIllegalException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeIllegalException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeIllegalException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>再写一个测试类，在测试类中定义一个saveAge(int age)方法，对age判断如果年龄不在0~150之间，就抛出一个AgeIllegalException异常对象给调用者。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 需求：保存一个合法的年</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            saveAge2(<span class="hljs-number">225</span>);<br>            System.out.println(<span class="hljs-string">&quot;saveAge2底层执行是成功的！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (AgeIllegalException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;saveAge2底层执行是出现bug的！&quot;</span>);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//2、在方法中对age进行判断，不合法则抛出AgeIllegalException</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">150</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄被成功保存： &quot;</span> + age);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 用一个异常对象封装这个问题</span><br>            <span class="hljs-comment">// throw 抛出去这个异常对象</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeIllegalRuntimeException</span>(<span class="hljs-string">&quot;/age is illegal, your age is &quot;</span> + age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意咯，自定义异常可能是编译时异常，也可以是运行时异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>如果自定义异常类继承Excpetion，则是编译时异常。<br>特点：方法中抛出的是编译时异常，必须在方法上使用<span class="hljs-keyword">throws</span>声明，强制调用者处理。<br><br><span class="hljs-number">2.</span>如果自定义异常类继承RuntimeException，则运行时异常。<br>特点：方法中抛出的是运行时异常，不需要在方法上用<span class="hljs-keyword">throws</span>声明。<br></code></pre></td></tr></table></figure><h3 id="1-3-异常处理"><a href="#1-3-异常处理" class="headerlink" title="1.3 异常处理"></a>1.3 异常处理</h3><p>同学们，通过前面两小节的学习，我们已经认识了什么是异常，以及异常的产生过程。接下来就需要告诉同学们，出现异常该如何处理了。</p><p>比如有如下的场景：A调用用B，B调用C；C中有异常产生抛给B，B中有异常产生又抛给A；异常到了A这里就不建议再抛出了，因为最终抛出被JVM处理程序就会异常终止，并且给用户看异常信息，用户也看不懂，体验很不好。</p><p>此时比较好的做法就是：1.将异常捕获，将比较友好的信息显示给用户看；2.尝试重新执行，看是是否能修复这个问题。</p><p><img src="/assets/1667315686041.png" alt="1667315686041"></p><p>我们看一个代码，main方法调用test1方法，test1方法调用test2方法，test1和test2方法中多有扔异常。</p><ul><li>第一种处理方式是，在main方法中对异常进行try…catch捕获处理了，给出友好提示。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test1();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您要找的文件不存在！！&quot;</span>);<br>            e.printStackTrace(); <span class="hljs-comment">// 打印出这个异常对象的信息。记录下来。</span><br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您要解析的时间有问题了！&quot;</span>);<br>            e.printStackTrace(); <span class="hljs-comment">// 打印出这个异常对象的信息。记录下来。</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException, ParseException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2028-11-11 10:24:11&quot;</span>);<br>        System.out.println(d);<br>        test2();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">// 读取文件的。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/meinv.png&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二种处理方式是：在main方法中对异常进行捕获，并尝试修复</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握异常的处理方式：捕获异常，尝试修复。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 需求：调用一个方法，让用户输入一个合适的价格返回为止。</span><br>        <span class="hljs-comment">// 尝试修复</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(getMoney());<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请您输入合法的数字！！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请您输入合适的价格：&quot;</span>);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>            <span class="hljs-keyword">if</span>(money &gt;= <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> money;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的价格是不合适的！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好了，到此我们关于异常的知识就全部学习完了</p><h2 id="二、集合概述和分类"><a href="#二、集合概述和分类" class="headerlink" title="二、集合概述和分类"></a>二、集合概述和分类</h2><h3 id="2-1-集合的分类"><a href="#2-1-集合的分类" class="headerlink" title="2.1 集合的分类"></a>2.1 集合的分类</h3><p>同学们，前面我们已经学习过了ArrayList集合，但是除了ArrayList集合，Java还提供了很多种其他的集合，如下图所示：</p><p><img src="/assets/1666154871520.png" alt="1666154871520"></p><p>我想你的第一感觉是这些集合好多呀！但是，我们学习时会对这些集合进行分类学习，如下图所示：一类是单列集合元素是一个一个的，另一类是双列集合元素是一对一对的。</p><p><img src="/assets/1666154948620.png" alt="1666154948620"></p><p>在今天的课程中，主要学习Collection单列集合。Collection是单列集合的根接口，Collection接口下面又有两个子接口List接口、Set接口，List和Set下面分别有不同的实现类，如下图所示：</p><p><img src="/assets/1666155169359.png" alt="1666155169359"></p><p>上图中各种集合的特点如下图所示：</p><p><img src="/assets/1666155218956.png" alt="1666155218956"></p><p>可以自己写代码验证一下，各种集合的特点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//简单确认一下Collection集合的特点</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">//存取顺序一致，可以重复，有索引</span><br>list.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>System.out.println(list); <span class="hljs-comment">//[java1, java2, java1, java2] </span><br><br>HashSet&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">//存取顺序不一致，不重复，无索引</span><br>list.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>System.out.println(list); <span class="hljs-comment">//[java3, java2, java1] </span><br></code></pre></td></tr></table></figure><h3 id="2-2-Collection集合的常用方法"><a href="#2-2-Collection集合的常用方法" class="headerlink" title="2.2 Collection集合的常用方法"></a>2.2 Collection集合的常用方法</h3><p>接下来，我们学习一下Collection集合的一些常用方法，这些方法所有Collection实现类都可以使用。 这里我们以创建ArrayList为例，来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//1.public boolean add(E e): 添加元素到集合</span><br>c.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>System.out.println(c); <span class="hljs-comment">//打印: [java1, java1, java2, java2, java3]</span><br><br><span class="hljs-comment">//2.public int size(): 获取集合的大小</span><br>System.out.println(c.size()); <span class="hljs-comment">//5</span><br><br><span class="hljs-comment">//3.public boolean contains(Object obj): 判断集合中是否包含某个元素</span><br>System.out.println(c.contains(<span class="hljs-string">&quot;java1&quot;</span>)); <span class="hljs-comment">//true</span><br>System.out.println(c.contains(<span class="hljs-string">&quot;Java1&quot;</span>)); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//4.pubilc boolean remove(E e): 删除某个元素，如果有多个重复元素只能删除第一个</span><br>System.out.println(c.remove(<span class="hljs-string">&quot;java1&quot;</span>)); <span class="hljs-comment">//true</span><br>System.out.println(c); <span class="hljs-comment">//打印: [java1,java2, java2, java3]</span><br><br><span class="hljs-comment">//5.public void clear(): 清空集合的元素</span><br>c.clear(); <br>System.out.println(c); <span class="hljs-comment">//打印：[]</span><br><br><span class="hljs-comment">//6.public boolean isEmpty(): 判断集合是否为空 是空返回true 反之返回false</span><br>System.out.println(c.isEmpty()); <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//7.public Object[] toArray(): 把集合转换为数组</span><br>Object[] array = c.toArray();<br>System.out.println(Arrays.toString(array)); <span class="hljs-comment">//[java1,java2, java2, java3]</span><br><br><span class="hljs-comment">//8.如果想把集合转换为指定类型的数组，可以使用下面的代码</span><br>String[] array1 = c.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[c.size()]);<br>System.out.println(Arrays.toString(array1)); <span class="hljs-comment">//[java1,java2, java2, java3]</span><br><br><span class="hljs-comment">//9.还可以把一个集合中的元素，添加到另一个集合中</span><br>Collection&lt;String&gt; c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c1.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>c1.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>Collection&lt;String&gt; c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c2.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>c2.add(<span class="hljs-string">&quot;java4&quot;</span>);<br>c1.addAll(c2); <span class="hljs-comment">//把c2集合中的全部元素，添加到c1集合中去</span><br>System.out.println(c1); <span class="hljs-comment">//[java1, java2, java3, java4]</span><br></code></pre></td></tr></table></figure><p>最后，我们总结一下Collection集合的常用功能有哪些，ArrayList、LinkedList、HashSet、LinkedHashSet、TreeSet集合都可以调用下面的方法。</p><p><img src="/assets/1666158266534.png" alt="1666158266534"></p><h2 id="三、Collection遍历方式"><a href="#三、Collection遍历方式" class="headerlink" title="三、Collection遍历方式"></a>三、Collection遍历方式</h2><p>各位同学，接下来我们学习一下Collection集合的遍历方式。有同学说：“集合的遍历之前不是学过吗？就用普通的for循环啊? “  没错！之前是学过集合遍历，但是之前学习过的遍历方式，只能遍历List集合，不能遍历Set集合，因为以前的普通for循环遍历需要索引，只有List集合有索引，而Set集合没有索引。</p><p>所以我们需要有一种通用的遍历方式，能够遍历所有集合。</p><h3 id="3-1-迭代器遍历集合"><a href="#3-1-迭代器遍历集合" class="headerlink" title="3.1 迭代器遍历集合"></a>3.1 迭代器遍历集合</h3><p> 接下来学习的迭代器就是一种集合的通用遍历方式。</p><p>代码写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c.add(<span class="hljs-string">&quot;赵敏&quot;</span>);<br>c.add(<span class="hljs-string">&quot;小昭&quot;</span>);<br>c.add(<span class="hljs-string">&quot;素素&quot;</span>);<br>c.add(<span class="hljs-string">&quot;灭绝&quot;</span>);<br>System.out.println(c); <span class="hljs-comment">//[赵敏, 小昭, 素素, 灭绝]</span><br><br><span class="hljs-comment">//第一步：先获取迭代器对象</span><br><span class="hljs-comment">//解释：Iterator就是迭代器对象，用于遍历集合的工具)</span><br>Iterator&lt;String&gt; it = c.iterator();<br><br><span class="hljs-comment">//第二步：用于判断当前位置是否有元素可以获取</span><br><span class="hljs-comment">//解释：hasNext()方法返回true，说明有元素可以获取；反之没有</span><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-comment">//第三步：获取当前位置的元素，然后自动指向下一个元素.</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> it.next();<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>迭代器代码的原理如下：</p><ul><li>当调用iterator()方法获取迭代器时，当前指向第一个元素</li><li>hasNext()方法则判断这个位置是否有元素，如果有则返回true，进入循环</li><li>调用next()方法获取元素，并将当月元素指向下一个位置，</li><li>等下次循环时，则获取下一个元素，依此内推</li></ul><p><img src="/assets/1666162606524.png" alt="1666162606524"></p><p>最后，我们再总结一下，使用迭代器遍历集合用到哪些方法</p><p><img src="/assets/1666162899638.png" alt="1666162899638"></p><h3 id="3-2-增强for遍历集合"><a href="#3-2-增强for遍历集合" class="headerlink" title="3.2 增强for遍历集合"></a>3.2 增强for遍历集合</h3><p>同学们刚才我们学习了迭代器遍历集合，但是这个代码其实还有一种更加简化的写法，叫做增强for循环。</p><p>格式如下：</p><p><img src="/assets/1666163065998.png" alt="1666163065998"></p><p>需要注意的是，增强for不光可以遍历集合，还可以遍历数组。接下来我们用代码演示一em.o下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c.add(<span class="hljs-string">&quot;赵敏&quot;</span>);<br>c.add(<span class="hljs-string">&quot;小昭&quot;</span>);<br>c.add(<span class="hljs-string">&quot;素素&quot;</span>);<br>c.add(<span class="hljs-string">&quot;灭绝&quot;</span>);<br><br><span class="hljs-comment">//1.使用增强for遍历集合</span><br><span class="hljs-keyword">for</span>(String s: c)&#123;<br>    System.out.println(s); <br>&#125;<br><br><span class="hljs-comment">//2.再尝试使用增强for遍历数组</span><br>String[] arr = &#123;<span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;古力娜扎&quot;</span>, <span class="hljs-string">&quot;稀奇哈哈&quot;</span>&#125;;<br><span class="hljs-keyword">for</span>(String name: arr)&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-forEach遍历集合"><a href="#3-3-forEach遍历集合" class="headerlink" title="3.3 forEach遍历集合"></a>3.3 forEach遍历集合</h3><p>在JDK8版本以后还提供了一个forEach方法也可以遍历集合，如果下图所示：</p><p><img src="/assets/1666163351517.png" alt="1666163351517"></p><p>我们发现forEach方法的参数是一个Consumer接口，而Consumer是一个函数式接口，所以可以传递Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c.add(<span class="hljs-string">&quot;赵敏&quot;</span>);<br>c.add(<span class="hljs-string">&quot;小昭&quot;</span>);<br>c.add(<span class="hljs-string">&quot;素素&quot;</span>);<br>c.add(<span class="hljs-string">&quot;灭绝&quot;</span>);<br><br><span class="hljs-comment">//调用forEach方法</span><br><span class="hljs-comment">//由于参数是一个Consumer接口，所以可以传递匿名内部类</span><br>c.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span>&#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">//也可以使用lambda表达式对匿名内部类进行简化</span><br>c.forEach(s-&gt;System.out.println(s)); <span class="hljs-comment">//[赵敏, 小昭, 素素, 灭绝]</span><br></code></pre></td></tr></table></figure><h3 id="3-4-遍历集合案例"><a href="#3-4-遍历集合案例" class="headerlink" title="3.4 遍历集合案例"></a>3.4 遍历集合案例</h3><p>接下来，我们看一个案例，在集合中存储自定义的对象，并遍历。具体要求如下</p><p><img src="/assets/1666164331639.png" alt="1666164331639"></p><p>首先，我们得写一个电影类，用来描述每一步电影应该有哪些信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span>&#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//电影名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score; <span class="hljs-comment">//评分</span><br>    <span class="hljs-keyword">private</span> String actor; <span class="hljs-comment">//演员</span><br>    <span class="hljs-comment">//无参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//全参数构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> score, String actor)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.score=score;<br>        <span class="hljs-built_in">this</span>.actor=actor;<br>    &#125;<br>    <span class="hljs-comment">//...get、set、toString()方法自己补上..</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着，再创建一个测试类，完成上面的需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Collection&lt;Movie&gt; movies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        movies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MOvie</span>(<span class="hljs-string">&quot;《肖申克的救赎》&quot;</span>, <span class="hljs-number">9.7</span>, <span class="hljs-string">&quot;罗宾斯&quot;</span>));<br>        movies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MOvie</span>(<span class="hljs-string">&quot;《霸王别姬》&quot;</span>, <span class="hljs-number">9.6</span>, <span class="hljs-string">&quot;张国荣、张丰毅&quot;</span>));<br>        movies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MOvie</span>(<span class="hljs-string">&quot;《阿甘正传》&quot;</span>, <span class="hljs-number">9.5</span>, <span class="hljs-string">&quot;汤姆汉克斯&quot;</span>));<br>        <br>        <span class="hljs-keyword">for</span>(Movie movie : movies)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电影名：&quot;</span> + movie.getName());<br>            System.out.println(<span class="hljs-string">&quot;评分：&quot;</span> + movie.getScore());<br>            System.out.println(<span class="hljs-string">&quot;主演：&quot;</span> + movie.getActor());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码的内存原理如下图所示：当往集合中存对象时，实际上存储的是对象的地址值</p><p><img src="/assets/1666165033103.png" alt="1666165033103"></p><h2 id="四、List系列集合"><a href="#四、List系列集合" class="headerlink" title="四、List系列集合"></a>四、List系列集合</h2><p>前面我们已经把Collection通用的功能学习完了，接下来我们学习Collection下面的一个子体系List集合。如下图所示：</p><p><img src="/assets/1666165150752.png" alt="1666165150752"></p><h3 id="4-1-List集合的常用方法"><a href="#4-1-List集合的常用方法" class="headerlink" title="4.1 List集合的常用方法"></a>4.1 List集合的常用方法</h3><p>List集合是索引的，所以多了一些有索引操作的方法，如下图所示：</p><p><img src="/assets/1666165187815.png" alt="1666165187815"></p><p>接下来，我们用代码演示一下这几个方法的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个ArrayList集合对象（有序、有索引、可以重复）</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;蜘蛛精&quot;</span>);<br>list.add(<span class="hljs-string">&quot;至尊宝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;至尊宝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;牛夫人&quot;</span>); <br>System.out.println(list); <span class="hljs-comment">//[蜘蛛精, 至尊宝, 至尊宝, 牛夫人]</span><br><br><span class="hljs-comment">//2.public void add(int index, E element): 在某个索引位置插入元素</span><br>list.add(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;紫霞仙子&quot;</span>);<br>System.out.println(list); <span class="hljs-comment">//[蜘蛛精, 至尊宝, 紫霞仙子, 至尊宝, 牛夫人]</span><br><br><span class="hljs-comment">//3.public E remove(int index): 根据索引删除元素, 返回被删除的元素</span><br>System.out.println(list.remove(<span class="hljs-number">2</span>)); <span class="hljs-comment">//紫霞仙子</span><br>System.out.println(list);<span class="hljs-comment">//[蜘蛛精, 至尊宝, 至尊宝, 牛夫人]</span><br><br><span class="hljs-comment">//4.public E get(int index): 返回集合中指定位置的元素</span><br>System.out.println(list.get(<span class="hljs-number">3</span>));<br><br><span class="hljs-comment">//5.public E set(int index, E e): 修改索引位置处的元素，修改后，会返回原数据</span><br>System.out.println(list.set(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;牛魔王&quot;</span>)); <span class="hljs-comment">//牛夫人</span><br>System.out.println(list); <span class="hljs-comment">//[蜘蛛精, 至尊宝, 至尊宝, 牛魔王]</span><br></code></pre></td></tr></table></figure><h3 id="4-2-List集合的遍历方式"><a href="#4-2-List集合的遍历方式" class="headerlink" title="4.2 List集合的遍历方式"></a>4.2 List集合的遍历方式</h3><p>List集合相比于前面的Collection多了一种可以通过索引遍历的方式，所以List集合遍历方式一共有四种：</p><ul><li>普通for循环（只因为List有索引）</li><li>迭代器</li><li>增强for</li><li>Lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;蜘蛛精&quot;</span>);<br>list.add(<span class="hljs-string">&quot;至尊宝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;糖宝宝&quot;</span>);<br><br><span class="hljs-comment">//1.普通for循环</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; list.size(); i++)&#123;<br>    <span class="hljs-comment">//i = 0, 1, 2</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> list.get(i);<br>    System.out.println(e);<br>&#125;<br><br><span class="hljs-comment">//2.增强for遍历</span><br><span class="hljs-keyword">for</span>(String s : list)&#123;<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">//3.迭代器遍历</span><br>Iterator&lt;String&gt; it = list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> it.next();<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">//4.lambda表达式遍历</span><br>list.forEach(s-&gt;System.out.println(s));<br></code></pre></td></tr></table></figure><h3 id="4-3-ArrayList底层的原理"><a href="#4-3-ArrayList底层的原理" class="headerlink" title="4.3 ArrayList底层的原理"></a>4.3 ArrayList底层的原理</h3><p>为了让同学们更加透彻的理解ArrayList集合，接下来，学习一下ArrayList集合的底层原理。</p><p>ArrayList集合底层是基于数组结构实现的，也就是说当你往集合容器中存储元素时，底层本质上是往数组中存储元素。 特点如下：</p><p><img src="/assets/1666166151267.png" alt="1666166151267"></p><p>我们知道数组的长度是固定的，但是集合的长度是可变的，这是怎么做到的呢？原理如下：</p><p><img src="/assets/1666166661149.png" alt="1666166661149"></p><p>数组扩容，并不是在原数组上扩容（原数组是不可以扩容的），底层是创建一个新数组，然后把原数组中的元素全部复制到新数组中去。</p><p><img src="/assets/1666166956907.png" alt="1666166956907"></p><h3 id="4-4-LinkedList底层原理"><a href="#4-4-LinkedList底层原理" class="headerlink" title="4.4 LinkedList底层原理"></a>4.4 LinkedList底层原理</h3><p>学习完ArrayList底层原理之后，接下来我们看一下LinkedList集合的底层原理。</p><p>LinkedList底层是链表结构，链表结构是由一个一个的节点组成，一个节点由数据值、下一个元素的地址组成。如下图所示</p><p><img src="/assets/1666167170415.png" alt="1666167170415"></p><p>假如，现在要在B节点和D节点中间插入一个元素，只需要把B节点指向D节点的地址断掉，重新指向新的节点地址就可以了。如下图所示：</p><p><img src="/assets/1666167298885.png" alt="1666167298885"></p><p>假如，现在想要把D节点删除，只需要让C节点指向E节点的地址，然后把D节点指向E节点的地址断掉。此时D节点就会变成垃圾，会把垃圾回收器清理掉。</p><p><img src="/assets/1666167419164.png" alt="1666167419164"></p><p>上面的链表是单向链表，它的方向是从头节点指向尾节点的，只能从左往右查找元素，这样查询效率比较慢；还有一种链表叫做双向链表，不光可以从做往右找，还可以从右往左找。如下图所示：</p><p><img src="/assets/1666167523139.png" alt="1666167523139"></p><p>LinkedList集合是基于双向链表实现了，所以相对于ArrayList新增了一些可以针对头尾进行操作的方法，如下图示所示：</p><p><img src="/assets/1666167572387.png" alt="1666167572387"></p><h3 id="4-5-LinkedList集合的应用场景"><a href="#4-5-LinkedList集合的应用场景" class="headerlink" title="4.5 LinkedList集合的应用场景"></a>4.5 LinkedList集合的应用场景</h3><p>刚才我们学习了LinkedList集合，那么LInkedList集合有什么用呢？可以用它来设计栈结构、队列结构。</p><ul><li>我们先来认识一下队列结构，队列结构你可以认为是一个上端开口，下端也开口的管子的形状。元素从上端入队列，从下端出队列。</li></ul><p><img src="/assets/1666167793391.png" alt="1666167793391"></p><p>入队列可以调用LinkedList集合的addLast方法，出队列可以调用removeFirst()方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个队列：先进先出、后进后出</span><br>LinkedList&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//入对列</span><br>queue.addLast(<span class="hljs-string">&quot;第1号人&quot;</span>);<br>queue.addLast(<span class="hljs-string">&quot;第2号人&quot;</span>);<br>queue.addLast(<span class="hljs-string">&quot;第3号人&quot;</span>);<br>queue.addLast(<span class="hljs-string">&quot;第4号人&quot;</span>);<br>System.out.println(queue);<br><br><span class="hljs-comment">//出队列</span><br>System.out.println(queue.removeFirst());<span class="hljs-comment">//第4号人</span><br>System.out.println(queue.removeFirst());<span class="hljs-comment">//第3号人</span><br>System.out.println(queue.removeFirst());<span class="hljs-comment">//第2号人</span><br>System.out.println(queue.removeFirst());<span class="hljs-comment">//第1号人</span><br></code></pre></td></tr></table></figure><ul><li><p>接下来，我们再用LinkedList集合来模拟一下栈结构的效果。还是先来认识一下栈结构长什么样。栈结构可以看做是一个上端开头，下端闭口的水杯的形状。</p><p>元素永远是上端进，也从上端出，先进入的元素会压在最底下，所以<strong>栈结构的特点是先进后出，后进先出</strong></p></li></ul><p><img src="/assets/1666168222486.png" alt="1666168222486"></p><p>有没有感觉栈结构很像，手枪的子弹夹呀！！第一个压进入的子弹在最底下，最后一个才能打出来，最后一个压进入的子弹在最顶上，第一个打出来。</p><p><img src="/assets/1666168656191.png" alt="1666168656191"></p><p>接着，我们就用LinkedList来模拟下栈结构，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个栈对象</span><br>LinkedList&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//压栈(push) 等价于 addFirst()</span><br>stack.push(<span class="hljs-string">&quot;第1颗子弹&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;第2颗子弹&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;第3颗子弹&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;第4颗子弹&quot;</span>);<br>System.out.println(stack); <span class="hljs-comment">//[第4颗子弹, 第3颗子弹, 第2颗子弹,第1颗子弹]</span><br><br><span class="hljs-comment">//弹栈(pop) 等价于 removeFirst()</span><br>System.out.println(statck.pop()); <span class="hljs-comment">//第4颗子弹</span><br>System.out.println(statck.pop()); <span class="hljs-comment">//第3颗子弹</span><br>System.out.println(statck.pop()); <span class="hljs-comment">//第2颗子弹</span><br>System.out.println(statck.pop()); <span class="hljs-comment">//第1颗子弹</span><br><br><span class="hljs-comment">//弹栈完了，集合中就没有元素了</span><br>System.out.println(list); <span class="hljs-comment">//[]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14算法和数据结构</title>
    <link href="/2023/12/01/day14-Lambda%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%81%E7%AE%97%E6%B3%95%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/12/01/day14-Lambda%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%81%E7%AE%97%E6%B3%95%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="14–算法和数据结构"><a href="#14–算法和数据结构" class="headerlink" title="14–算法和数据结构"></a>14–算法和数据结构</h3><h2 id="一、Arrays类"><a href="#一、Arrays类" class="headerlink" title="一、Arrays类"></a>一、Arrays类</h2><p>接下来我们学习的类叫做Arrays，其实Arrays并不是重点，但是我们通过Arrays这个类的学习有助于我们理解下一个知识点Lambda的学习。所以我们这里先学习Arrays，再通过Arrays来学习Lamdba这样学习会更丝滑一些^_^.</p><h3 id="1-1-Arrays基本使用"><a href="#1-1-Arrays基本使用" class="headerlink" title="1.1 Arrays基本使用"></a>1.1 Arrays基本使用</h3><p>我们先认识一下Arrays是干什么用的，Arrays是操作数组的工具类，它可以很方便的对数组中的元素进行遍历、拷贝、排序等操作。</p><p>下面我们用代码来演示一下：<strong>遍历、拷贝、排序等操作</strong>。需要用到的方法如下</p><p><img src="/assets/1667458681721.png" alt="1667458681721"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Arrays类的常用方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、public static String toString(类型[] arr): 返回数组的内容</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;;<br>        System.out.println(Arrays.toString(arr));<br><br>        <span class="hljs-comment">// 2、public static 类型[] copyOfRange(类型[] arr, 起始索引, 结束索引) ：拷贝数组（指定范围，包前不包后）</span><br>        <span class="hljs-type">int</span>[] arr2 = Arrays.copyOfRange(arr, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>        System.out.println(Arrays.toString(arr2));<br><br>        <span class="hljs-comment">// 3、public static copyOf(类型[] arr, int newLength)：拷贝数组，可以指定新数组的长度。</span><br>        <span class="hljs-type">int</span>[] arr3 = Arrays.copyOf(arr, <span class="hljs-number">10</span>);<br>        System.out.println(Arrays.toString(arr3));<br><br>        <span class="hljs-comment">// 4、public static setAll(double[] array, IntToDoubleFunction generator)：把数组中的原数据改为新数据又存进去。</span><br>        <span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">99.8</span>, <span class="hljs-number">128</span>, <span class="hljs-number">100</span>&#125;;<br>        <span class="hljs-comment">//                  0     1    2</span><br>        <span class="hljs-comment">// 把所有的价格都打八折，然后又存进去。</span><br>        Arrays.setAll(prices, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>                <span class="hljs-comment">// value = 0  1  2</span><br>                <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(prices));<br><br>        <span class="hljs-comment">// 5、public static void sort(类型[] arr)：对数组进行排序(默认是升序排序)</span><br>        Arrays.sort(prices);<br>        System.out.println(Arrays.toString(prices));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Arrays操作对象数组"><a href="#1-2-Arrays操作对象数组" class="headerlink" title="1.2 Arrays操作对象数组"></a>1.2 Arrays操作对象数组</h3><p>刚才我们使用Arrays操作数组时，数组中存储存储的元素是int类型、double类型，是可以直接排序的，而且默认是升序排列。</p><p>如果数组中存储的元素类型是自定义的对象，如何排序呢？接下来，我们就学习一下Arrays如何对对象数组进行排序。</p><p>首先我们要准备一个Student类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> height, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.height = height;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, height=&quot;</span> + height +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后再写一个测试类，往数组中存储4个学生对象，代码如下。此时，运行代码你会发现是会报错的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握如何对数组中的对象进行排序。</span><br>        Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">4</span>];<br>        students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.5</span>, <span class="hljs-number">23</span>);<br>        students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">167.5</span>, <span class="hljs-number">24</span>);<br><br>        <span class="hljs-comment">// 1、public static void sort(类型[] arr)：对数组进行排序。</span><br>Arrays.sort(students);<br>System.out.println(Arrays.toString(students));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/1667459056681.png" alt="1667459056681"></p><p>上面的代码为什么会报错呢？因为Arrays根本就不知道按照什么规则进行排序。为了让Arrays知道按照什么规则排序，我们有如下的两种办法。</p><ul><li><strong>排序方式1：</strong>让Student类实现Comparable接口，同时重写compareTo方法。Arrays的sort方法底层会根据compareTo方法的返回值是正数、负数、还是0来确定谁大、谁小、谁相等。代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">//...get、set、空参数构造方法、有参数构造方法...自己补全</span><br><br>    <span class="hljs-comment">// 指定比较规则</span><br>    <span class="hljs-comment">// this  o</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-comment">// 约定1：认为左边对象 大于 右边对象 请您返回正整数</span><br>        <span class="hljs-comment">// 约定2：认为左边对象 小于 右边对象 请您返回负整数</span><br>        <span class="hljs-comment">// 约定3：认为左边对象 等于 右边对象 请您一定返回0</span><br><span class="hljs-comment">/* if(this.age &gt; o.age)&#123;</span><br><span class="hljs-comment">            return 1;</span><br><span class="hljs-comment">        &#125;else if(this.age &lt; o.age)&#123;</span><br><span class="hljs-comment">            return -1;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return 0;*/</span><br><br>        <span class="hljs-comment">//上面的if语句，也可以简化为下面的一行代码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age; <span class="hljs-comment">// 按照年龄升序排列</span><br>        <span class="hljs-comment">// return o.age - this.age; // 按照年龄降序排列</span><br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, height=&quot;</span> + height +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>排序方式2：</strong>在调用<code>Arrays.sort(数组,Comparator比较器);</code>时，除了传递数组之外，传递一个Comparator比较器对象。Arrays的sort方法底层会根据Comparator比较器对象的compare方法方法的返回值是正数、负数、还是0来确定谁大、谁小、谁相等。代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握如何对数组中的对象进行排序。</span><br>        Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">4</span>];<br>        students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.5</span>, <span class="hljs-number">23</span>);<br>        students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">167.5</span>, <span class="hljs-number">24</span>);<br><br><span class="hljs-comment">// 2、public static &lt;T&gt; void sort(T[] arr, Comparator&lt;? super T&gt; c)</span><br>        <span class="hljs-comment">// 参数一：需要排序的数组</span><br>        <span class="hljs-comment">// 参数二：Comparator比较器对象（用来制定对象的比较规则）</span><br>        Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-comment">// 制定比较规则了：左边对象 o1   右边对象 o2</span><br>                <span class="hljs-comment">// 约定1：认为左边对象 大于 右边对象 请您返回正整数</span><br>                <span class="hljs-comment">// 约定2：认为左边对象 小于 右边对象 请您返回负整数</span><br>                <span class="hljs-comment">// 约定3：认为左边对象 等于 右边对象 请您一定返回0</span><br><span class="hljs-comment">//                if(o1.getHeight() &gt; o2.getHeight())&#123;</span><br><span class="hljs-comment">//                    return 1;</span><br><span class="hljs-comment">//                &#125;else if(o1.getHeight() &lt; o2.getHeight())&#123;</span><br><span class="hljs-comment">//                    return -1;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                return 0; // 升序</span><br>                 <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight()); <span class="hljs-comment">// 升序</span><br>                <span class="hljs-comment">// return Double.compare(o2.getHeight(), o1.getHeight()); // 降序</span><br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(students));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、Lambda表达式"><a href="#二、Lambda表达式" class="headerlink" title="二、Lambda表达式"></a>二、Lambda表达式</h2><p>接下来，我们学习一个JDK8新增的一种语法形式，叫做Lambda表达式。<strong>作用：用于简化匿名内部类代码的书写。</strong></p><h3 id="2-1-Lambda表达式基本使用"><a href="#2-1-Lambda表达式基本使用" class="headerlink" title="2.1 Lambda表达式基本使用"></a>2.1 Lambda表达式基本使用</h3><p>怎么去简化呢？Lamdba是有特有的格式的，按照下面的格式来编写Lamdba。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(被重写方法的形参列表) -&gt; &#123;<br>    被重写方法的方法体代码;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要给说明一下的是，在使用Lambda表达式之前，必须先有一个接口，而且接口中只能有一个抽象方法。<strong>（注意：不能是抽象类，只能是接口）</strong></p><p>像这样的接口，我们称之为函数式接口，只有基于函数式接口的匿名内部类才能被Lambda表达式简化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有了以上的Swimming接口之后，接下来才能再演示，使用Lambda表达式，简化匿名内部类书写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识Lambda表达式.</span><br>        <span class="hljs-comment">//1.创建一个Swimming接口的匿名内部类对象</span><br><span class="hljs-type">Swimming</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>()&#123;<br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>                 System.out.println(<span class="hljs-string">&quot;学生快乐的游泳~~~~&quot;</span>);<br>             &#125;<br>         &#125;;<br>         s.swim();<br><br>        <span class="hljs-comment">//2.使用Lambda表达式对Swimming接口的匿名内部类进行简化</span><br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>              System.out.println(<span class="hljs-string">&quot;学生快乐的游泳~~~~&quot;</span>);<br>        &#125;;<br>        s1.swim();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好的，我们现在已经知道Lamdba表达式可以简化基于函数式接口的匿名内部类的书写。接下来，我们可以把刚才使用Arrays方法时的代码，使用Lambda表达式简化一下了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：使用Lambda简化函数式接口。</span><br>        <span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">99.8</span>, <span class="hljs-number">128</span>, <span class="hljs-number">100</span>&#125;;<br><span class="hljs-comment">//1.把所有元素*0.8: 先用匿名内部类写法</span><br>        Arrays.setAll(prices, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>                <span class="hljs-comment">// value = 0  1  2</span><br>                <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//2.把所有元素*0.8: 改用Lamdba表达式写法</span><br>        Arrays.setAll(prices, (<span class="hljs-type">int</span> value) -&gt; &#123;<br>                <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>        &#125;);<br><br>        System.out.println(Arrays.toString(prices));<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------------------&quot;</span>);<br><br>        Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">4</span>];<br>        students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.5</span>, <span class="hljs-number">23</span>);<br>        students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">167.5</span>, <span class="hljs-number">24</span>);<br><span class="hljs-comment">//3.对数组中的元素按照年龄升序排列: 先用匿名内部类写法</span><br>        Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight()); <span class="hljs-comment">// 升序</span><br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//4.对数组中的元素按照年龄升序排列: 改用Lambda写法</span><br>        Arrays.sort(students, (Student o1, Student o2) -&gt; &#123;<br>                <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight()); <span class="hljs-comment">// 升序</span><br>        &#125;);<br>        System.out.println(Arrays.toString(students));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好的，各位同学，恭喜大家！到这里，你已经学会了Lambda表达式的基本使用了。</p><h3 id="2-2-Lambda表达式省略规则"><a href="#2-2-Lambda表达式省略规则" class="headerlink" title="2.2 Lambda表达式省略规则"></a>2.2 Lambda表达式省略规则</h3><p>刚才我们学习了Lambda表达式的基本使用。Java觉得代码还不够简单，于是还提供了Lamdba表达式的几种简化写法。具体的简化规则如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>Lambda的标准格式<br>(参数类型<span class="hljs-number">1</span> 参数名<span class="hljs-number">1</span>, 参数类型<span class="hljs-number">2</span> 参数名<span class="hljs-number">2</span>)-&gt;&#123;<br>...方法体的代码...<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br><br><span class="hljs-number">2.</span>在标准格式的基础上()中的参数类型可以直接省略<br>(参数名<span class="hljs-number">1</span>, 参数名<span class="hljs-number">2</span>)-&gt;&#123;<br>...方法体的代码...<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br><br><span class="hljs-number">3.</span>如果&#123;&#125;总的语句只有一条语句，则&#123;&#125;可以省略、<span class="hljs-keyword">return</span>关键字、以及最后的“;”都可以省略<br>(参数名<span class="hljs-number">1</span>, 参数名<span class="hljs-number">2</span>)-&gt; 结果<br><br><span class="hljs-number">4.</span>如果()里面只有一个参数，则()可以省略<br>(参数名)-&gt;结果<br></code></pre></td></tr></table></figure><p>接下来从匿名内部类开始、到Lambda标准格式、再到Lambda简化格式，一步一步来简化一下。同学们体会一下简化的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：使用Lambda简化函数式接口。</span><br>        <span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">99.8</span>, <span class="hljs-number">128</span>, <span class="hljs-number">100</span>&#125;;<br><span class="hljs-comment">//1.对数组中的每一个元素*0.8: 匿名内部类写法</span><br>        Arrays.setAll(prices, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>                <span class="hljs-comment">// value = 0  1  2</span><br>                <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//2.需求：对数组中的每一个元素*0.8,使用Lambda表达式标准写法</span><br>        Arrays.setAll(prices, (<span class="hljs-type">int</span> value) -&gt; &#123;<br>                <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>        &#125;);<br><span class="hljs-comment">//3.使用Lambda表达式简化格式1——省略参数类型</span><br>        Arrays.setAll(prices, (value) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>        &#125;);<br><span class="hljs-comment">//4.使用Lambda表达式简化格式2——省略()</span><br>        Arrays.setAll(prices, value -&gt; &#123;<br>            <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>        &#125;);<br>        <span class="hljs-comment">//5.使用Lambda表达式简化格式3——省略&#123;&#125;</span><br>        Arrays.setAll(prices, value -&gt; prices[value] * <span class="hljs-number">0.8</span> );<br><br>        System.out.println(Arrays.toString(prices));<br>        <br>        System.out.println(<span class="hljs-string">&quot;------------------------------------</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Student[] students = new Student[4];</span><br><span class="hljs-string">        students[0] = new Student(&quot;</span>蜘蛛精<span class="hljs-string">&quot;, 169.5, 23);</span><br><span class="hljs-string">        students[1] = new Student(&quot;</span>紫霞<span class="hljs-string">&quot;, 163.8, 26);</span><br><span class="hljs-string">        students[2] = new Student(&quot;</span>紫霞<span class="hljs-string">&quot;, 163.8, 26);</span><br><span class="hljs-string">        students[3] = new Student(&quot;</span>至尊宝<span class="hljs-string">&quot;, 167.5, 24);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        //1.使用匿名内部类</span><br><span class="hljs-string">        Arrays.sort(students, new Comparator&lt;Student&gt;() &#123;</span><br><span class="hljs-string">            @Override</span><br><span class="hljs-string">            public int compare(Student o1, Student o2) &#123;</span><br><span class="hljs-string">                return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string">//2.使用Lambda表达式表达式——标准格式</span><br><span class="hljs-string">        Arrays.sort(students, (Student o1, Student o2) -&gt; &#123;</span><br><span class="hljs-string">                return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string">//3.使用Lambda表达式表达式——省略参数类型</span><br><span class="hljs-string">        Arrays.sort(students, ( o1,  o2) -&gt; &#123;</span><br><span class="hljs-string">            return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string">//4.使用Lambda表达式表达式——省略&#123;&#125;</span><br><span class="hljs-string">        Arrays.sort(students, ( o1,  o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight()));</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">        System.out.println(Arrays.toString(students));</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>到这里，恭喜你，对Lamdba表达式的所有写法，就学习完毕了。</p><h2 id="三、JDK8新特性（方法引用）"><a href="#三、JDK8新特性（方法引用）" class="headerlink" title="三、JDK8新特性（方法引用）"></a>三、JDK8新特性（方法引用）</h2><p>各位小伙伴，接下来我们学习JDK8的另一个新特性，叫做方法引用。我们知道Lambda是用来简化匿名代码的书写格式的，而方法引用是用来进一步简化Lambda表达式的，它简化的更加过分。</p><p>到这里有小伙伴可能就想慰问Java爸爸了：“之前的代码挺好的呀！好不容易学会，你又来搞这些，把我都搞晕了。“    说句大实话，确实有这样的问题，学习新的东西肯定会增加我们的学习成本，从心理上来说多少是有写抗拒的。但是从另一个角度想，一旦我们学会了，会大大简化我们的代码书写，提高我们编写代码的效率，而且这些新的语法都是有前提条件的，遇到的时候就简化得了。再退一步想，就算你没有学会，还是用以前的办法一点问题也没有。</p><p>给大家交代清楚了，学习方法引用可能存在的一些心理特点之后，接下来我们再正式学习方法引用的代码怎么编写。</p><h3 id="3-1-静态方法引用"><a href="#3-1-静态方法引用" class="headerlink" title="3.1 静态方法引用"></a>3.1 静态方法引用</h3><p>我们先学习静态方法的引用，还是用之前Arrays代码来做演示。现在准备好下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">4</span>];<br>        students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">169.5</span>, <span class="hljs-number">23</span>);<br>        students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">163.8</span>, <span class="hljs-number">26</span>);<br>        students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-number">167.5</span>, <span class="hljs-number">24</span>);<br><br>        <span class="hljs-comment">// 原始写法：对数组中的学生对象，按照年龄升序排序</span><br>        Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge(); <span class="hljs-comment">// 按照年龄升序排序</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 使用Lambda简化后的形式</span><br>        Arrays.sort(students, (o1, o2) -&gt; o1.getAge() - o2.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我想要把下图中Lambda表达式的方法体，用一个静态方法代替</p><p><img src="/assets/1667464274934.png" alt="1667464274934"></p><p>准备另外一个类CompareByData类，用于封装Lambda表达式的方法体代码；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareByData</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareByAge</span><span class="hljs-params">(Student o1, Student o2)</span>&#123;<br>        <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge(); <span class="hljs-comment">// 升序排序的规则</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们就可以把Lambda表达式的方法体代码，改为下面的样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, (o1, o2) -&gt; CompareByData.compareByAge(o1, o2));<br></code></pre></td></tr></table></figure><p>Java为了简化上面Lambda表达式的写法，利用方法引用可以改进为下面的样子。<strong>实际上就是用类名调用方法，但是把参数给省略了。</strong>这就是静态方法引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态方法引用：类名::方法名</span><br>Arrays.sort(students, CompareByData::compareByAge);<br></code></pre></td></tr></table></figure><h3 id="3-2-实例方法引用"><a href="#3-2-实例方法引用" class="headerlink" title="3.2 实例方法引用"></a>3.2 实例方法引用</h3><p>还是基于上面的案例，我们现在来学习一下实例方法的引用。现在，我想要把下图中Lambda表达式的方法体，用一个实例方法代替。</p><p><img src="/assets/1667464274934.png" alt="1667464274934"></p><p>在CompareByData类中，再添加一个实例方法，用于封装Lambda表达式的方法体</p><p><img src="/assets/1667464896645.png" alt="1667464896645"></p><p>接下来，我们把Lambda表达式的方法体，改用对象调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CompareByData</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompareByData</span>();<br>Arrays.sort(students, (o1, o2) -&gt; compare.compareByAgeDesc(o1, o2)); <span class="hljs-comment">// 降序</span><br></code></pre></td></tr></table></figure><p>最后，再将Lambda表达式的方法体，直接改成方法引用写法。<strong>实际上就是用类名调用方法，但是省略的参数</strong>。这就是实例方法引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CompareByData</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompareByData</span>();<br>Arrays.sort(students, compare::compareByAgeDesc); <span class="hljs-comment">// 降序</span><br></code></pre></td></tr></table></figure><blockquote><p>给小伙伴的寄语：一定要按照老师写的步骤，一步一步来做，你一定能学会的！！！ </p></blockquote><h3 id="3-2-特定类型的方法引用"><a href="#3-2-特定类型的方法引用" class="headerlink" title="3.2 特定类型的方法引用"></a>3.2 特定类型的方法引用</h3><p>各位小伙伴，我们继续学习特定类型的方法引用。在学习之前还是需要给大家说明一下，这种特定类型的方法引用是没有什么道理的，只是语法的一种约定，遇到这种场景，就可以这样用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Java约定：<br>    如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数作为方法的主调，后面的所有参数都是作为该实例方法的入参时，则就可以使用特定类型的方法引用。<br>格式：<br>类型::方法名<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] names = &#123;<span class="hljs-string">&quot;boby&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span> ,<span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>        <br>        <span class="hljs-comment">// 要求忽略首字符大小写进行排序。</span><br>        Arrays.sort(names, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>                <span class="hljs-comment">// 制定比较规则。o1 = &quot;Andy&quot;  o2 = &quot;angela&quot;</span><br>                <span class="hljs-keyword">return</span> o1.compareToIgnoreCase(o2);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//lambda表达式写法</span><br>        Arrays.sort(names, ( o1,  o2) -&gt; o1.compareToIgnoreCase(o2) );<br>        <span class="hljs-comment">//特定类型的方法引用！</span><br>        Arrays.sort(names, String::compareToIgnoreCase);<br><br>        System.out.println(Arrays.toString(names));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-构造器引用"><a href="#3-3-构造器引用" class="headerlink" title="3.3 构造器引用"></a>3.3 构造器引用</h3><p>各位小伙伴，我们学习最后一种方法引用的形式，叫做构造器引用。还是先说明一下，构造器引用在实际开发中应用的并不多，目前还没有找到构造器的应用场景。所以大家在学习的时候，也只是关注语法就可以了。</p><p>现在，我们准备一个JavaBean类，Car类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为方法引用是基于Lamdba表达式简化的，所以也要按照Lamdba表达式的使用前提来用，需要一个函数式接口，接口中代码的返回值类型是Car类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CreateCar</span>&#123;<br>    Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，再准备一个测试类，在测试类中创建CreateCar接口的实现类对象，先用匿名内部类创建、再用Lambda表达式创建，最后改用方法引用创建。同学们只关注格式就可以，不要去想为什么（语法就是这么设计的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、创建这个接口的匿名内部类对象。</span><br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">cc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCar</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price);<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//2、使用匿名内部类改进</span><br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">cc2</span> <span class="hljs-operator">=</span> (name,  price) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price);<br><br>        <span class="hljs-comment">//3、使用方法引用改进：构造器引用</span><br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">cc3</span> <span class="hljs-operator">=</span> Car::<span class="hljs-keyword">new</span>;<br>        <br>        <span class="hljs-comment">//注意：以上是创建CreateCar接口实现类对象的几种形式而已，语法一步一步简化。</span><br>        <br>        <span class="hljs-comment">//4、对象调用方法</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> cc3.create(<span class="hljs-string">&quot;奔驰&quot;</span>, <span class="hljs-number">49.9</span>);<br>        System.out.println(car);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、常见算法"><a href="#四、常见算法" class="headerlink" title="四、常见算法"></a>四、常见算法</h2><h3 id="1-1-认识算法"><a href="#1-1-认识算法" class="headerlink" title="1.1 认识算法"></a>1.1 认识算法</h3><p>接下来，我们认识一下什么是算法。算法其实是解决某个实际问题的过程和方法。比如百度地图给你规划路径，计算最优路径的过程就需要用到算法。再比如你在抖音上刷视频时，它会根据你的喜好给你推荐你喜欢看的视频，这里也需要用到算法。</p><p>我们为什么要学习算法呢？主要目的是训练我们的编程思维，还有就是面试的时候，面试官也喜欢问一下算法的问题来考察你的技术水平。最后一点，学习算法是成为一个高级程序员的必经之路。</p><p>当然我们现在并不会学习非常复杂的算法，万丈高楼平地起，我们现在只需要学习几种常见的基础算法就可以了。而且Java语言本身就内置了一些基础算法给我们使用，实际上自己也不会去写这些算法。</p><p><img src="/assets/1667402734025.png" alt="1667402734025"></p><h3 id="1-2-冒泡排序"><a href="#1-2-冒泡排序" class="headerlink" title="1.2 冒泡排序"></a>1.2 冒泡排序</h3><p>接下来，我们学习一种算法叫排序算法，它可以价格无序的整数，排列成从小到大的形式（升序），或者从大到小的形式（降序）</p><p>排序算法有很多种，我们这里只学习比较简单的两种，一种是冒泡排序，一种是选择排序。学习算法我们先要搞清楚算法的流程，然后再去“推敲“如何写代码。（<strong>注意，我这里用的次是推敲，也就是说算法这样的代码并不是一次成型的，是需要反复修改才能写好的</strong>）。</p><p><img src="/assets/1667403334232.png" alt="1667403334232"></p><p>先来学习冒泡排序，先来介绍一下，冒泡排序的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">冒泡排序核心思路：每次将相邻的两个元素继续比较<br>如下图所示：<br>   第一轮比较 <span class="hljs-number">3</span>次<br>   第二轮比较 <span class="hljs-number">2</span>次<br>   第三轮比较 <span class="hljs-number">1</span>次<br></code></pre></td></tr></table></figure><p><img src="/assets/1667403618904.png" alt="1667403618904"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、准备一个数组</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">// 2、定义一个循环控制排几轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// i = 0  1  2           【5， 2， 3， 1】    次数</span><br>            <span class="hljs-comment">// i = 0 第一轮            0   1   2         3</span><br>            <span class="hljs-comment">// i = 1 第二轮            0   1             2</span><br>            <span class="hljs-comment">// i = 2 第三轮            0                 1</span><br><br>            <span class="hljs-comment">// 3、定义一个循环控制每轮比较几次。</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-comment">// 判断当前位置的元素值，是否大于后一个位置处的元素值，如果大则交换。</span><br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = arr[j];<br>                    arr[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-选择排序"><a href="#1-2-选择排序" class="headerlink" title="1.2 选择排序"></a>1.2 选择排序</h3><p>刚才我们学习了冒泡排序，接下来我们学习了另一种排序方法，叫做选择排序。按照我们刚才给大家介绍的算法的学习方式。先要搞清楚算法的流程，再去推敲代码怎么写。</p><p>所以我们先分析选择排序算法的流程：选择排序的核心思路是，每一轮选定一个固定的元素，和其他的每一个元素进行比较；经过几轮比较之后，每一个元素都能比较到了。</p><p><img src="/assets/1667467347586.png" alt="1667467347586"></p><p>接下来，按照选择排序的流程编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">ublic <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、准备好一个数组</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-comment">//           0  1  2  3</span><br><br>        <span class="hljs-comment">// 2、控制选择几轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// i = 0 第一轮    j = 1 2 3</span><br>            <span class="hljs-comment">// i = 1 第二轮    j = 2 3</span><br>            <span class="hljs-comment">// i = 2 第三轮    j = 3</span><br>            <span class="hljs-comment">// 3、控制每轮选择几次。</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-comment">// 判断当前位置是否大于后面位置处的元素值，若大于则交换。</span><br>                <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>                    arr[i] = arr[j];<br>                    arr[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-查找算法"><a href="#1-3-查找算法" class="headerlink" title="1.3 查找算法"></a>1.3 查找算法</h3><p>接下来，我们学习一个查找算法叫做二分查找。在学习二分查找之前，我们先来说一下基本查找，从基本查找的弊端，我们再引入二分查找，这样我们的学习也会更加丝滑一下。</p><p><strong>先聊一聊基本查找：</strong>假设我们要查找的元素是81，如果是基本查找的话，只能从0索引开始一个一个往后找，但是如果元素比较多，你要查找的元素比较靠后的话，这样查找的此处就比较多。性能比较差。</p><p><img src="/assets/1667467611576.png" alt="1667467611576"></p><p><strong>再讲二分查找</strong>：二分查找的主要特点是，每次查找能排除一般元素，这样效率明显提高。<strong>但是二分查找要求比较苛刻，它要求元素必须是有序的，否则不能进行二分查找。</strong></p><ul><li>二分查找的核心思路</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">第<span class="hljs-number">1</span>步：先定义两个变量，分别记录开始索引(left)和结束索引(right)<br>第<span class="hljs-number">2</span>步：计算中间位置的索引，mid = (left+right)/<span class="hljs-number">2</span>;<br>第<span class="hljs-number">3</span>步：每次查找中间mid位置的元素，和目标元素key进行比较<br>如果中间位置元素比目标元素小，那就说明mid前面的元素都比目标元素小<br>此时：left = mid+<span class="hljs-number">1</span><br>    如果中间位置元素比目标元素大，那说明mid后面的元素都比目标元素大<br>    此时：right = mid-<span class="hljs-number">1</span><br>如果中间位置元素和目标元素相等，那说明mid就是我们要找的位置<br>此时：把mid返回<br>注意：一搬查找一次肯定是不够的，所以需要把第<span class="hljs-number">1</span>步和第<span class="hljs-number">2</span>步循环来做，只到left&gt;end就结束，如果最后还没有找到目标元素，就返回-<span class="hljs-number">1.</span><br></code></pre></td></tr></table></figure><p><img src="/assets/1667468412882.png" alt="1667468412882"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握二分查找算法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、准备好一个数组。</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">79</span>, <span class="hljs-number">81</span>, <span class="hljs-number">103</span>, <span class="hljs-number">127</span>, <span class="hljs-number">131</span>, <span class="hljs-number">147</span>&#125;;<br><br>        System.out.println(binarySearch(arr, <span class="hljs-number">150</span>));<br><br>        System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">81</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> data)</span>&#123;<br>        <span class="hljs-comment">// 1、定义两个变量，一个站在左边位置，一个站在右边位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 2、定义一个循环控制折半。</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right)&#123;<br>            <span class="hljs-comment">// 3、每次折半，都算出中间位置处的索引</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 4、判断当前要找的元素值，与中间位置处的元素值的大小情况。</span><br>            <span class="hljs-keyword">if</span>(data &lt; arr[middle])&#123;<br>                <span class="hljs-comment">// 往左边找，截止位置（右边位置） = 中间位置 - 1</span><br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data &gt; arr[middle])&#123;<br>                <span class="hljs-comment">// 往右边找，起始位置（左边位置） = 中间位置 + 1</span><br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 中间位置处的元素值，正好等于我们要找的元素值</span><br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// -1特殊结果，就代表没有找到数据！数组中不存在该数据！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、正则表达式"><a href="#五、正则表达式" class="headerlink" title="五、正则表达式"></a>五、正则表达式</h2><p>接下来，我们学习一个全新的知识，叫做正则表达式。<strong>正则表达式其实是由一些特殊的符号组成的，它代表的是某种规则。</strong></p><blockquote><p>正则表达式的作用1：用来校验字符串数据是否合法</p><p>正则表达式的作用2：可以从一段文本中查找满足要求的内容</p></blockquote><p><img src="/assets/1667468712516.png" alt="1667468712516"></p><h3 id="5-1-正则表达式初体验"><a href="#5-1-正则表达式初体验" class="headerlink" title="5.1 正则表达式初体验"></a>5.1 正则表达式初体验</h3><p>现在，我们就以QQ号码为例，来体验一下正则表达式的用法。注意：现在仅仅只是体验而已，我们还没有讲正则表达式的具体写法。</p><ul><li>不使用正则表达式，校验QQ号码代码是这样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkQQ</span><span class="hljs-params">(String qq)</span>&#123;<br>        <span class="hljs-comment">// 1、判断qq号码是否为null</span><br>        <span class="hljs-keyword">if</span>(qq == <span class="hljs-literal">null</span> || qq.startsWith(<span class="hljs-string">&quot;0&quot;</span>) || qq.length() &lt; <span class="hljs-number">6</span> || qq.length() &gt; <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2、qq至少是不是null,不是以0开头的，满足6-20之间的长度。</span><br>        <span class="hljs-comment">// 判断qq号码中是否都是数字。</span><br>        <span class="hljs-comment">// qq = 2514ghd234</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; qq.length(); i++) &#123;<br>            <span class="hljs-comment">// 根据索引提取当前位置处的字符。</span><br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> qq.charAt(i);<br>            <span class="hljs-comment">// 判断ch记住的字符，如果不是数字，qq号码不合法。</span><br>            <span class="hljs-keyword">if</span>(ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 3、说明qq号码肯定是合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>用正则表达式代码是这样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkQQ1</span><span class="hljs-params">(String qq)</span>&#123;<br>    <span class="hljs-keyword">return</span> qq != <span class="hljs-literal">null</span> &amp;&amp; qq.matches(<span class="hljs-string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，使用正则表达式，大大简化的了代码的写法。这个代码现在不用写，体验到正则表达式的优势就可以了。</p><h3 id="5-2-正则表达式书写规则"><a href="#5-2-正则表达式书写规则" class="headerlink" title="5.2 正则表达式书写规则"></a>5.2 正则表达式书写规则</h3><p>前面我们已经体验到了正则表达式，可以简化校验数据的代码书写。这里需要用到一个方法叫<code>matches(String regex)</code>。这个方法时属于String类的方法。</p><p><img src="/assets/1667469085970.png" alt="1667469085970"></p><p>这个方法是用来匹配一个字符串是否匹配正则表达式的规则，参数需要调用者传递一个正则表达式。但是正则表达式不能乱写，是有特定的规则的。</p><p>下面我们就学习一下，正则表达式的规则。从哪里学呢？在API中有一个类叫做Pattern，我们可以到API文档中搜索，关于正则表达式的规则，这个类都告诉我们了。我这里把常用的已经给大家整理好了。</p><p><img src="/assets/1667469259345.png" alt="1667469259345"></p><p>我们将这些规则，在代码中演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握正则表达式的书写规则</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、字符类(只能匹配单个字符)</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));    <span class="hljs-comment">// [abc]只能匹配a、b、c</span><br>        System.out.println(<span class="hljs-string">&quot;e&quot;</span>.matches(<span class="hljs-string">&quot;[abcd]&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;d&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>));   <span class="hljs-comment">// [^abc] 不能是abc</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>));  <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>.matches(<span class="hljs-string">&quot;[a-zA-Z]&quot;</span>)); <span class="hljs-comment">// [a-zA-Z] 只能是a-z A-Z的字符</span><br>        System.out.println(<span class="hljs-string">&quot;2&quot;</span>.matches(<span class="hljs-string">&quot;[a-zA-Z]&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;k&quot;</span>.matches(<span class="hljs-string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="hljs-comment">// ： a到z，除了b和c</span><br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>.matches(<span class="hljs-string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;ab&quot;</span>.matches(<span class="hljs-string">&quot;[a-zA-Z0-9]&quot;</span>)); <span class="hljs-comment">// false 注意：以上带 [内容] 的规则都只能用于匹配单个字符</span><br><br>        <span class="hljs-comment">// 2、预定义字符(只能匹配单个字符)  .  \d  \D   \s  \S  \w  \W</span><br>        System.out.println(<span class="hljs-string">&quot;徐&quot;</span>.matches(<span class="hljs-string">&quot;.&quot;</span>)); <span class="hljs-comment">// .可以匹配任意字符</span><br>        System.out.println(<span class="hljs-string">&quot;徐徐&quot;</span>.matches(<span class="hljs-string">&quot;.&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// \转义</span><br>        System.out.println(<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>        <span class="hljs-comment">// \n \t</span><br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">// \d: 0-9</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">//false</span><br><br>        System.out.println(<span class="hljs-string">&quot; &quot;</span>.matches(<span class="hljs-string">&quot;\\s&quot;</span>));   <span class="hljs-comment">// \s: 代表一个空白字符</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\s&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\S&quot;</span>));  <span class="hljs-comment">// \S: 代表一个非空白字符</span><br>        System.out.println(<span class="hljs-string">&quot; &quot;</span>.matches(<span class="hljs-string">&quot;\\S&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>));  <span class="hljs-comment">// \w: [a-zA-Z_0-9]</span><br>        System.out.println(<span class="hljs-string">&quot;_&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;徐&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;徐&quot;</span>.matches(<span class="hljs-string">&quot;\\W&quot;</span>));  <span class="hljs-comment">// [^\w]不能是a-zA-Z_0-9</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\W&quot;</span>));  <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;23232&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>)); <span class="hljs-comment">// false 注意：以上预定义字符都只能匹配单个字符。</span><br><br>        <span class="hljs-comment">// 3、数量词： ?   *   +   &#123;n&#125;   &#123;n, &#125;  &#123;n, m&#125;</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>));   <span class="hljs-comment">// ? 代表0次或1次</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>));    <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;abc12&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>));   <span class="hljs-comment">// * 代表0次或多次</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>));        <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;abc12张&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;abc12&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>));   <span class="hljs-comment">// + 代表1次或多次</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>));       <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abc12张&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;a3c&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3&#125;&quot;</span>));   <span class="hljs-comment">// &#123;3&#125; 代表要正好是n次</span><br>        System.out.println(<span class="hljs-string">&quot;abcd&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3&#125;&quot;</span>));  <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abcd&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,&#125;&quot;</span>));     <span class="hljs-comment">// &#123;3,&#125; 代表是&gt;=3次</span><br>        System.out.println(<span class="hljs-string">&quot;ab&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,&#125;&quot;</span>));     <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abcde徐&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,&#125;&quot;</span>));     <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abc232d&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,9&#125;&quot;</span>));     <span class="hljs-comment">// &#123;3, 9&#125; 代表是  大于等于3次，小于等于9次</span><br><br>        <span class="hljs-comment">// 4、其他几个常用的符号：(?i)忽略大小写 、 或：| 、  分组：()</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;(?i)abc&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;ABC&quot;</span>.matches(<span class="hljs-string">&quot;(?i)abc&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;aBc&quot;</span>.matches(<span class="hljs-string">&quot;a((?i)b)c&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;ABc&quot;</span>.matches(<span class="hljs-string">&quot;a((?i)b)c&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 需求1：要求要么是3个小写字母，要么是3个数字。</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;ABC&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;A12&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 需求2：必须是”我爱“开头，中间可以是至少一个”编程“，最后至少是1个”666“</span><br>        System.out.println(<span class="hljs-string">&quot;我爱编程编程666666&quot;</span>.matches(<span class="hljs-string">&quot;我爱(编程)+(666)+&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;我爱编程编程66666&quot;</span>.matches(<span class="hljs-string">&quot;我爱(编程)+(666)+&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-正则表达式应用案例"><a href="#5-3-正则表达式应用案例" class="headerlink" title="5.3 正则表达式应用案例"></a>5.3 正则表达式应用案例</h3><p>学习完正则表达式的规则之后，接下来我们再利用正则表达式，去校验几个实际案例。</p><ul><li>正则表达式校验手机号码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：校验用户输入的电话、邮箱、时间是否合法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        checkPhone();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPhone</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请您输入您的电话号码(手机|座机): &quot;</span>);<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-comment">// 18676769999  010-3424242424 0104644535</span><br>            <span class="hljs-keyword">if</span>(phone.matches(<span class="hljs-string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,7&#125;-?[1-9]\\d&#123;4,19&#125;)&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的号码格式正确~~~&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的号码格式不正确~~~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用正则表达式校验邮箱是否正确</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        checkEmail();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkEmail</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请您输入您的邮箱： &quot;</span>);<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * dlei0009@163.com</span><br><span class="hljs-comment">             * 25143242@qq.com</span><br><span class="hljs-comment">             * itheima@itcast.com.cn</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span>(email.matches(<span class="hljs-string">&quot;\\w&#123;2,&#125;@\\w&#123;2,20&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的邮箱格式正确~~~&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的邮箱格式不正确~~~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-4-正则表达式信息爬取"><a href="#5-4-正则表达式信息爬取" class="headerlink" title="5.4 正则表达式信息爬取"></a>5.4 正则表达式信息爬取</h3><p>各位小伙伴，在前面的课程中，我们学习了正则表达式的作用之一，用来校验数据格式的正确性。接下来我们学习<strong>正则表达式的第二个作用：在一段文本中查找满足要求的内容</strong></p><p>我们还是通过一个案例给大家做演示：案例需求如下</p><p><img src="/assets/1667469722842.png" alt="1667469722842"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握使用正则表达式查找内容。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        method1();<br>    &#125;<br><br>    <span class="hljs-comment">// 需求1：从以下内容中爬取出，手机，邮箱，座机、400电话等信息。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; 来黑马程序员学习Java，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        电话：1866668888，18699997777\n&quot;</span> +<br>                <span class="hljs-string">&quot;        或者联系邮箱：boniu@itcast.cn，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        座机电话：01036517895，010-98951256\n&quot;</span> +<br>                <span class="hljs-string">&quot;        邮箱：bozai@itcast.cn，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        邮箱：dlei0009@163.com，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;<br>        <span class="hljs-comment">// 1、定义爬取规则</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,7&#125;-?[1-9]\\d&#123;4,19&#125;)|(\\w&#123;2,&#125;@\\w&#123;2,20&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;)&quot;</span><br>                + <span class="hljs-string">&quot;|(400-?\\d&#123;3,7&#125;-?\\d&#123;3,7&#125;)&quot;</span>;<br>        <span class="hljs-comment">// 2、把正则表达式封装成一个Pattern对象</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br>        <span class="hljs-comment">// 3、通过pattern对象去获取查找内容的匹配器对象。</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(data);<br>        <span class="hljs-comment">// 4、定义一个循环开始爬取信息</span><br>        <span class="hljs-keyword">while</span> (matcher.find())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> matcher.group(); <span class="hljs-comment">// 获取到了找到的内容了。</span><br>            System.out.println(rs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-正则表达式搜索、替换"><a href="#5-5-正则表达式搜索、替换" class="headerlink" title="5.5 正则表达式搜索、替换"></a>5.5 正则表达式搜索、替换</h3><p>接下来，我们学习一下正则表达式的另外两个功能，替换、分割的功能。需要注意的是这几个功能需要用到Stirng类中的方法。这两个方法其实我们之前学过，只是当时没有学正则表达式而已。</p><p><img src="/assets/1667469943451.png" alt="1667469943451"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握使用正则表达式做搜索替换，内容分割。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、public String replaceAll(String regex , String newStr)：按照正则表达式匹配的内容进行替换</span><br>        <span class="hljs-comment">// 需求1：请把下面字符串中的不是汉字的部分替换为 “-”</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span>;<br>        System.out.println(s1.replaceAll(<span class="hljs-string">&quot;\\w+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>));<br>        <br>        <span class="hljs-comment">// 需求2(拓展)：某语音系统，收到一个口吃的人说的“我我我喜欢编编编编编编编编编编编编程程程！”，需要优化成“我喜欢编程！”。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我我我喜欢编编编编编编编编编编编编程程程&quot;</span>;<br>        System.out.println(s2.replaceAll(<span class="hljs-string">&quot;(.)\\1+&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>));<br><br>        <span class="hljs-comment">// 2、public String[] split(String regex)：按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。</span><br>        <span class="hljs-comment">// 需求1：请把下面字符串中的人名取出来，使用切割来做</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span>;<br>        String[] names = s3.split(<span class="hljs-string">&quot;\\w+&quot;</span>);<br>        System.out.println(Arrays.toString(names));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13常用API</title>
    <link href="/2023/12/01/day13-%E5%B8%B8%E7%94%A8API/"/>
    <url>/2023/12/01/day13-%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h3 id="13——常用API"><a href="#13——常用API" class="headerlink" title="13——常用API"></a>13——常用API</h3><h2 id="一、-StringBuilder类"><a href="#一、-StringBuilder类" class="headerlink" title="一、 StringBuilder类"></a>一、 StringBuilder类</h2><ul><li>StringBuilder代表可变字符串对象，相当于是一个容器，它里面的字符串是可以改变的，就是用来操作字符串的。</li><li>好处：StringBuilder比String更合适做字符串的修改操作，效率更高，代码也更加简洁。</li></ul><p><strong>1.1 StringBuilder方法演示</strong></p><p>接下来我们用代码演示一下StringBuilder的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;itehima&quot;</span>);<br>        <br>        <span class="hljs-comment">//1.拼接内容</span><br>        sb.append(<span class="hljs-number">12</span>);<br>        sb.append(<span class="hljs-string">&quot;黑马&quot;</span>);<br>        sb.append(<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-comment">//2.append方法，支持临时编程</span><br>        sb.append(<span class="hljs-number">666</span>).append(<span class="hljs-string">&quot;黑马2&quot;</span>).append(<span class="hljs-number">666</span>);<br>        System.out.println(sb); <span class="hljs-comment">//打印：12黑马666黑马2666</span><br>        <br>        <span class="hljs-comment">//3.反转操作</span><br>        sb.reverse();<br>        System.out.println(sb); <span class="hljs-comment">//打印：6662马黑666马黑21</span><br>        <br>        <span class="hljs-comment">//4.返回字符串的长度</span><br>        System.out.println(sb.length());<br>        <br>        <span class="hljs-comment">//5.StringBuilder还可以转换为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sb.toString();<br>        System.out.println(s); <span class="hljs-comment">//打印：6662马黑666马黑21</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么要用StringBuilder对字符串进行操作呢？因为它的效率比String更高，我们可以下面两段代码验证一下。</p><p><img src="/assets/1667402173587.png" alt="1667402173587"></p><p>经过我的验证，直接使用Stirng拼接100万次，等了1分钟，还没结束，我等不下去了；但是使用StringBuilder做拼接，不到1秒钟出结果了。</p><p><strong>1.2 StringBuilder应用案例</strong></p><p>接下来，我们通过一个案例把StringBuilder运用下，案例需求如下图所示</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> getArrayData( <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;);<br>        System.out.println(str);<br>    &#125;<br>    <br>    <span class="hljs-comment">//方法作用：将int数组转换为指定格式的字符串</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getArrayData</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-comment">//1.判断数组是否为null</span><br>        <span class="hljs-keyword">if</span>(arr==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//2.如果数组不为null，再遍历，并拼接数组中的元素</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i==arr.legnth-<span class="hljs-number">1</span>)&#123;<br>                sb.append(arr[i]).append(<span class="hljs-string">&quot;]&quot;</span>);;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sb.append(arr[i]).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//3、把StirngBuilder转换为String，并返回。</span><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、StringJoiner类"><a href="#二、StringJoiner类" class="headerlink" title="二、StringJoiner类"></a>二、StringJoiner类</h2><p>接下来，我们学习一个类叫做StringJoiner，学习这个类干嘛用呢？是因为我们前面使用StringBuilder拼接字符串的时，代码写起来还是有一点麻烦，而StringJoiner号称是拼接神器，不仅效率高，而且代码简洁。</p><p>下面演示一下StringJoiner的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>        s.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>        s.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>        s.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>        System.out.println(s); <span class="hljs-comment">//结果为： java1,java2,java3</span><br>        <br>        <span class="hljs-comment">//参数1：间隔符</span><br>        <span class="hljs-comment">//参数2：开头</span><br>        <span class="hljs-comment">//参数3：结尾</span><br>        <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>        s1.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>        s1.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>        s1.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>        System.out.println(s1); <span class="hljs-comment">//结果为： [java1,java2,java3]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用StirngJoiner改写前面把数组转换为字符串的案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> getArrayData( <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;);<br>        System.out.println(str);<br>    &#125;<br>    <br>    <span class="hljs-comment">//方法作用：将int数组转换为指定格式的字符串</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getArrayData</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-comment">//1.判断数组是否为null</span><br>        <span class="hljs-keyword">if</span>(arr==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//2.如果数组不为null，再遍历，并拼接数组中的元素</span><br>        <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-comment">//加&quot;&quot;是因为add方法的参数要的是String类型</span><br>            s.add(String.valueOf(arr[i]));<br>        &#125;<br>        <span class="hljs-comment">//3、把StringJoiner转换为String，并返回。</span><br>        <span class="hljs-keyword">return</span> s.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、Math类"><a href="#三、Math类" class="headerlink" title="三、Math类"></a>三、Math类</h2><p>Math是数学的意思，该类提供了很多个进行数学运算的方法，如求绝对值，求最大值，四舍五入等，话不多说，直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：了解下Math类提供的常见方法。</span><br>        <span class="hljs-comment">// 1、public static int abs(int a)：取绝对值（拿到的结果一定是正数）</span><br>        <span class="hljs-comment">//    public static double abs(double a)</span><br>        System.out.println(Math.abs(-<span class="hljs-number">12</span>)); <span class="hljs-comment">// 12</span><br>        System.out.println(Math.abs(<span class="hljs-number">123</span>)); <span class="hljs-comment">// 123</span><br>        System.out.println(Math.abs(-<span class="hljs-number">3.14</span>)); <span class="hljs-comment">// 3.14</span><br><br>        <span class="hljs-comment">// 2、public static double ceil(double a): 向上取整</span><br>        System.out.println(Math.ceil(<span class="hljs-number">4.0000001</span>)); <span class="hljs-comment">// 5.0</span><br>        System.out.println(Math.ceil(<span class="hljs-number">4.0</span>)); <span class="hljs-comment">// 4.0</span><br><br>        <span class="hljs-comment">// 3、public static double floor(double a): 向下取整</span><br>        System.out.println(Math.floor(<span class="hljs-number">4.999999</span>)); <span class="hljs-comment">// 4.0</span><br>        System.out.println(Math.floor(<span class="hljs-number">4.0</span>)); <span class="hljs-comment">// 4.0</span><br><br>        <span class="hljs-comment">// 4、public static long round(double a)：四舍五入</span><br>        System.out.println(Math.round(<span class="hljs-number">3.4999</span>)); <span class="hljs-comment">// 3</span><br>        System.out.println(Math.round(<span class="hljs-number">3.50001</span>)); <span class="hljs-comment">// 4</span><br><br>        <span class="hljs-comment">// 5、public static int max(int a, int b)：取较大值</span><br>        <span class="hljs-comment">//   public static int min(int a, int b)：取较小值</span><br>        System.out.println(Math.max(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)); <span class="hljs-comment">// 20</span><br>        System.out.println(Math.min(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)); <span class="hljs-comment">// 10</span><br><br>        <span class="hljs-comment">// 6、 public static double pow(double a, double b)：取次方</span><br>        System.out.println(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 2的3次方   8.0</span><br>        System.out.println(Math.pow(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 3的2次方   9.0</span><br><br>        <span class="hljs-comment">// 7、public static double random()： 取随机数 [0.0 , 1.0) (包前不包后)</span><br>        System.out.println(Math.random());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、-System类"><a href="#四、-System类" class="headerlink" title="四、 System类"></a>四、 System类</h2><p>接下来，学习一个System类，这是系统类，提供了一些获取获取系统数据的方法。比如获取系统时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：了解下System类的常见方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 1、public static void exit(int status):</span><br>        <span class="hljs-comment">//   终止当前运行的Java虚拟机。</span><br>        <span class="hljs-comment">//   该参数用作状态代码; 按照惯例，非零状态代码表示异常终止。</span><br>        System.exit(<span class="hljs-number">0</span>); <span class="hljs-comment">// 人为的终止虚拟机。(不要使用)</span><br><br>        <span class="hljs-comment">// 2、public static long currentTimeMillis():</span><br>        <span class="hljs-comment">//    获取当前系统的时间</span><br>        <span class="hljs-comment">//    返回的是long类型的时间毫秒值：指的是从1970-1-1 0:0:0开始走到此刻的总的毫秒值，1s = 1000ms</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(time);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;输出了：&quot;</span> + i);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println((time2 - time) / <span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、Runtime类"><a href="#五、Runtime类" class="headerlink" title="五、Runtime类"></a>五、Runtime类</h2><p>接下来，我们再学习一个Java的运行时类，叫Runtime类。这个类可以用来获取JVM的一些信息，也可以用这个类去执行其他的程序。话不多少，上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：了解下Runtime的几个常见方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br><br>        <span class="hljs-comment">// 1、public static Runtime getRuntime() 返回与当前Java应用程序关联的运行时对象。</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><br>        <span class="hljs-comment">// 2、public void exit(int status) 终止当前运行的虚拟机,该参数用作状态代码; 按照惯例，非零状态代码表示异常终止。</span><br>        <span class="hljs-comment">// r.exit(0);</span><br><br>        <span class="hljs-comment">// 3、public int availableProcessors(): 获取虚拟机能够使用的处理器数。</span><br>        System.out.println(r.availableProcessors());<br><br>        <span class="hljs-comment">// 4、public long totalMemory() 返回Java虚拟机中的内存总量。</span><br>        System.out.println(r.totalMemory()/<span class="hljs-number">1024.0</span>/<span class="hljs-number">1024.0</span> + <span class="hljs-string">&quot;MB&quot;</span>); <span class="hljs-comment">// 1024 = 1K     1024 * 1024 = 1M</span><br><br>        <span class="hljs-comment">// 5、public long freeMemory() 返回Java虚拟机中的可用内存量</span><br>        System.out.println(r.freeMemory()/<span class="hljs-number">1024.0</span>/<span class="hljs-number">1024.0</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br><br>        <span class="hljs-comment">// 6、public Process exec(String command) 启动某个程序，并返回代表该程序的对象。</span><br>        <span class="hljs-comment">// r.exec(&quot;D:\\soft\\XMind\\XMind.exe&quot;);</span><br>        <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> r.exec(<span class="hljs-string">&quot;QQ&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 让程序在这里暂停5s后继续往下走！！</span><br>        p.destroy(); <span class="hljs-comment">// 销毁！关闭程序！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、BigDecimal类"><a href="#六、BigDecimal类" class="headerlink" title="六、BigDecimal类"></a>六、BigDecimal类</h2><p>各位同学，接下来我们学习的这个类叫BigDecimal，至于它是干什么用的，我们先不说。我们先看一段代码，看这个代码有什么问题？再说BigDeimal这个类是干什么用的，这样会更好理解一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>);<br>        System.out.println(<span class="hljs-number">1.0</span> - <span class="hljs-number">0.32</span>);<br>        System.out.println(<span class="hljs-number">1.015</span> * <span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-number">1.301</span> / <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行以上代码，我们会发现，结果并和我们想看到的不太一样。如下图所示</p><p><img src="/assets/1667398959905.png" alt="1667398959905"></p><p>为了解决计算精度损失的问题，Java给我们提供了BigDecimal类，它提供了一些方法可以对数据进行四则运算，而且不丢失精度，同时还可以保留指定的小数位。下面看代码，演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握BigDecimal进行精确运算的方案。</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br><br>        <span class="hljs-comment">// 1、把浮点型数据封装成BigDecimal对象，再来参与运算。</span><br>        <span class="hljs-comment">// a、public BigDecimal(double val) 得到的BigDecimal对象是无法精确计算浮点型数据的。 注意：不推荐使用这个，</span><br>        <span class="hljs-comment">// b、public BigDecimal(String val)  得到的BigDecimal对象是可以精确计算浮点型数据的。 可以使用。</span><br>        <span class="hljs-comment">// c、public static BigDecimal valueOf(double val): 通过这个静态方法得到的BigDecimal对象是可以精确运算的。是最好的方案。</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(a);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(b);<br><br>        <span class="hljs-comment">// 2、public BigDecimal add(BigDecimal augend): 加法</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> a1.add(b1);<br>        System.out.println(c1);<br><br>        <span class="hljs-comment">// 3、public BigDecimal subtract(BigDecimal augend): 减法</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> a1.subtract(b1);<br>        System.out.println(c2);<br><br>        <span class="hljs-comment">// 4、public BigDecimal multiply(BigDecimal augend): 乘法</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> a1.multiply(b1);<br>        System.out.println(c3);<br><br>        <span class="hljs-comment">// 5、public BigDecimal divide(BigDecimal b): 除法</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> a1.divide(b1);<br>        System.out.println(c4);<br><br><span class="hljs-comment">//        BigDecimal d1 = BigDecimal.valueOf(0.1);</span><br><span class="hljs-comment">//        BigDecimal d2 = BigDecimal.valueOf(0.3);</span><br><span class="hljs-comment">//        BigDecimal d3 = d1.divide(d2);</span><br><span class="hljs-comment">//        System.out.println(d3);</span><br><br>        <span class="hljs-comment">// 6、public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式) : 除法，可以设置精确几位。</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.1</span>);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.3</span>);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> d1.divide(d2,  <span class="hljs-number">2</span>, RoundingMode.HALF_UP); <span class="hljs-comment">// 0.33</span><br>        System.out.println(d3);<br><br>        <span class="hljs-comment">// 7、public double doubleValue() : 把BigDecimal对象又转换成double类型的数据。</span><br>        <span class="hljs-comment">//print(d3);</span><br>        <span class="hljs-comment">//print(c1);</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">db1</span> <span class="hljs-operator">=</span> d3.doubleValue();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">db2</span> <span class="hljs-operator">=</span> c1.doubleValue();<br>        print(db1);<br>        print(db2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="五、Date类"><a href="#五、Date类" class="headerlink" title="五、Date类"></a>五、Date类</h2><p>接下来，我们学习一下Date类，Java中是由这个类的对象用来表示日期或者时间。</p><p>Date对象记录的时间是用毫秒值来表示的。Java语言规定，1970年1月1日0时0分0秒认为是时间的起点，此时记作0，那么1000（1秒&#x3D;1000毫秒）就表示1970年1月1日0时0分1秒，依次内推。</p><p><img src="/assets/1667399304240.png" alt="1667399304240"></p><p>下面是Date类的构造方法，和常见的成员方法，利用这些API写代码尝试一下</p><p><img src="/assets/1667399443159.png" alt="1667399443159"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1Date</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握Date日期类的使用。</span><br>        <span class="hljs-comment">// 1、创建一个Date的对象：代表系统当前时间信息的。</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(d);<br><br>        <span class="hljs-comment">// 2、拿到时间毫秒值。</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d.getTime();<br>        System.out.println(time);<br><br>        <span class="hljs-comment">// 3、把时间毫秒值转换成日期对象： 2s之后的时间是多少。</span><br>        time += <span class="hljs-number">2</span> * <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>        System.out.println(d2);<br><br>        <span class="hljs-comment">// 4、直接把日期对象的时间通过setTime方法进行修改</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        d3.setTime(time);<br>        System.out.println(d3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、SimpleDateFormat类"><a href="#六、SimpleDateFormat类" class="headerlink" title="六、SimpleDateFormat类"></a>六、SimpleDateFormat类</h2><p>各位同学，前面我们打印Date对象时，发现打印输出的日期格式我们并不喜欢，是不是？你们喜欢那种格式呢？是不是像下面页面中这种格式啊？接下来我们学习的SimpleDateFormat类就可以转换Date对象表示日期时间的显示格式。</p><ul><li><p>我们把Date对象转换为指定格式的日期字符串这个操作，叫做<strong>日期格式化，</strong></p></li><li><p>反过来把指定格式的日期符串转换为Date对象的操作，叫做<strong>日期解析。</strong></p></li></ul><p><img src="/assets/1667399510543.png" alt="1667399510543"></p><p>接下来，我们先演示一下日期格式化，需要用到如下的几个方法</p><p><img src="/assets/1667399804244.png" alt="1667399804244"></p><p>注意：创建SimpleDateFormat对象时，在构造方法的参数位置传递日期格式，而日期格式是由一些特定的字母拼接而来的。我们需要记住常用的几种日期&#x2F;时间格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">字母   表示含义<br>yyyy年<br>MM月<br>dd日<br>HH时<br>mm分<br>ss秒<br>SSS毫秒<br><br><span class="hljs-string">&quot;2022年12月12日&quot;</span> 的格式是 <span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span><br><span class="hljs-string">&quot;2022-12-12 12:12:12&quot;</span> 的格式是 <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br>按照上面的格式可以任意拼接，但是字母不能写错<br></code></pre></td></tr></table></figure><p>最后，上代码演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2SimpleDateFormat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">// 目标：掌握SimpleDateFormat的使用。</span><br>        <span class="hljs-comment">// 1、准备一些时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(d);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d.getTime();<br>        System.out.println(time);<br><br>        <span class="hljs-comment">// 2、格式化日期对象，和时间 毫秒值。</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sdf.format(d);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> sdf.format(time);<br>        System.out.println(rs);<br>        System.out.println(rs2);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 目标：掌握SimpleDateFormat解析字符串时间 成为日期对象。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2022-12-12 12:12:11&quot;</span>;<br>        <span class="hljs-comment">// 1、创建简单日期格式化对象 , 指定的时间格式必须与被解析的时间格式一模一样，否则程序会出bug.</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> sdf2.parse(dateStr);<br>        System.out.println(d2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>日期格式化&amp;解析案例</strong></p><p><img src="/assets/1667400116263.png" alt="1667400116263"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">// 目标：完成秒杀案例。</span><br>        <span class="hljs-comment">// 1、把开始时间、结束时间、小贾下单时间、小皮下单时间拿到程序中来。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年11月11日 0:0:0&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年11月11日 0:10:0&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年11月11日 0:01:18&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年11月11日 0:10:57&quot;</span>;<br><br>        <span class="hljs-comment">// 2、把字符串的时间解析成日期对象。</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">startDt</span> <span class="hljs-operator">=</span> sdf.parse(start);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">endDt</span> <span class="hljs-operator">=</span> sdf.parse(end);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">xjDt</span> <span class="hljs-operator">=</span> sdf.parse(xj);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">xpDt</span> <span class="hljs-operator">=</span> sdf.parse(xp);<br><br>        <span class="hljs-comment">// 3、开始判断小皮和小贾是否秒杀成功了。</span><br>        <span class="hljs-comment">// 把日期对象转换成时间毫秒值来判断</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> startDt.getTime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> endDt.getTime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">xjTime</span> <span class="hljs-operator">=</span> xjDt.getTime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">xpTime</span> <span class="hljs-operator">=</span> xpDt.getTime();<br><br>        <span class="hljs-keyword">if</span>(xjTime &gt;= startTime &amp;&amp; xjTime &lt;= endTime)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾您秒杀成功了~~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾您秒杀失败了~~&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(xpTime &gt;= startTime &amp;&amp; xpTime &lt;= endTime)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮您秒杀成功了~~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮您秒杀失败了~~&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、Calendar类"><a href="#七、Calendar类" class="headerlink" title="七、Calendar类"></a>七、Calendar类</h2><p>学完Date类和SimpleDateFormat类之后，我们再学习一个和日期相关的类，它是Calendar类。Calendar类表示日历，它提供了一些比Date类更好用的方法。</p><p>比如下面的案例，用Date类就不太好做，而用Calendar就特别方便。因为Calendar类提供了方法可以直接对日历中的年、月、日、时、分、秒等进行运算。</p><p><img src="/assets/1667400242406.png" alt="1667400242406"></p><p><img src="/assets/1667400365583.png" alt="1667400365583"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4Calendar</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握Calendar的使用和特点。</span><br>        <span class="hljs-comment">// 1、得到系统此刻时间对应的日历对象。</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        System.out.println(now);<br><br>        <span class="hljs-comment">// 2、获取日历中的某个信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> now.get(Calendar.YEAR);<br>        System.out.println(year);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">days</span> <span class="hljs-operator">=</span> now.get(Calendar.DAY_OF_YEAR);<br>        System.out.println(days);<br><br>        <span class="hljs-comment">// 3、拿到日历中记录的日期对象。</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> now.getTime();<br>        System.out.println(d);<br><br>        <span class="hljs-comment">// 4、拿到时间毫秒值</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> now.getTimeInMillis();<br>        System.out.println(time);<br><br>        <span class="hljs-comment">// 5、修改日历中的某个信息</span><br>        now.set(Calendar.MONTH, <span class="hljs-number">9</span>); <span class="hljs-comment">// 修改月份成为10月份。</span><br>        now.set(Calendar.DAY_OF_YEAR, <span class="hljs-number">125</span>); <span class="hljs-comment">// 修改成一年中的第125天。</span><br>        System.out.println(now);<br><br>        <span class="hljs-comment">// 6、为某个信息增加或者减少多少</span><br>        now.add(Calendar.DAY_OF_YEAR, <span class="hljs-number">100</span>);<br>        now.add(Calendar.DAY_OF_YEAR, -<span class="hljs-number">10</span>);<br>        now.add(Calendar.DAY_OF_MONTH, <span class="hljs-number">6</span>);<br>        now.add(Calendar.HOUR, <span class="hljs-number">12</span>);<br>        now.set(<span class="hljs-number">2026</span>, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>);<br>        System.out.println(now);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、为什么JDK8要新增日期类"><a href="#八、为什么JDK8要新增日期类" class="headerlink" title="八、为什么JDK8要新增日期类"></a>八、为什么JDK8要新增日期类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：搞清楚为什么要用JDK 8开始新增的时间类。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 传统的时间类（Date、SimpleDateFormat、Calendar）存在如下问题：</span><br>        <span class="hljs-comment">// 1、设计不合理，使用不方便，很多都被淘汰了。</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-comment">//System.out.println(d.getYear() + 1900);</span><br><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> c.get(Calendar.YEAR);<br>        System.out.println(year);<br><br>        <span class="hljs-comment">// 2、都是可变对象，修改后会丢失最开始的时间信息。</span><br><br>        <span class="hljs-comment">// 3、线程不安全。</span><br><br>        <span class="hljs-comment">// 4、不能精确到纳秒，只能精确到毫秒。</span><br>        <span class="hljs-comment">// 1秒 = 1000毫秒</span><br>        <span class="hljs-comment">// 1毫秒 = 1000微妙</span><br>        <span class="hljs-comment">// 1微妙 = 1000纳秒</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九、JDK8日期、时间、日期时间"><a href="#九、JDK8日期、时间、日期时间" class="headerlink" title="九、JDK8日期、时间、日期时间"></a>九、JDK8日期、时间、日期时间</h2><p>接下来，我们学习一下JDK8新增的日期类。为什么以前的Date类就可以表示日期，为什么要有新增的日期类呢？原因如下</p><p><img src="/assets/1667400465054.png" alt="1667400465054"></p><p>JDK8新增的日期类分得更细致一些，比如表示年月日用LocalDate类、表示时间秒用LocalTime类、而表示年月日时分秒用LocalDateTime类等；除了这些类还提供了对时区、时间间隔进行操作的类等。它们几乎把对日期&#x2F;时间的所有操作都通过了API方法，用起来特别方便。</p><p><img src="/assets/1667400655334.png" alt="1667400655334"></p><p>先学习表示日期、时间、日期时间的类；有LocalDate、LocalTime、以及LocalDateTime类。仔细阅读代码，你会发现这三个类的用法套路都是一样的。</p><ul><li>LocalDate类的基本使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1_LocalDate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 0、获取本地日期对象(不可变对象)</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> LocalDate.now(); <span class="hljs-comment">// 年 月 日</span><br>        System.out.println(ld);<br><br>        <span class="hljs-comment">// 1、获取日期对象中的信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> ld.getYear(); <span class="hljs-comment">// 年</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> ld.getMonthValue(); <span class="hljs-comment">// 月(1-12)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> ld.getDayOfMonth(); <span class="hljs-comment">// 日</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> ld.getDayOfYear();  <span class="hljs-comment">// 一年中的第几天</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfWeek</span> <span class="hljs-operator">=</span> ld.getDayOfWeek().getValue(); <span class="hljs-comment">// 星期几</span><br>        System.out.println(year);<br>        System.out.println(day);<br>        System.out.println(dayOfWeek);<br><br>        <span class="hljs-comment">// 2、直接修改某个信息: withYear、withMonth、withDayOfMonth、withDayOfYear</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld2</span> <span class="hljs-operator">=</span> ld.withYear(<span class="hljs-number">2099</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld3</span> <span class="hljs-operator">=</span> ld.withMonth(<span class="hljs-number">12</span>);<br>        System.out.println(ld2);<br>        System.out.println(ld3);<br>        System.out.println(ld);<br><br>        <span class="hljs-comment">// 3、把某个信息加多少: plusYears、plusMonths、plusDays、plusWeeks</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld4</span> <span class="hljs-operator">=</span> ld.plusYears(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld5</span> <span class="hljs-operator">=</span> ld.plusMonths(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 4、把某个信息减多少：minusYears、minusMonths、minusDays、minusWeeks</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld6</span> <span class="hljs-operator">=</span> ld.minusYears(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld7</span> <span class="hljs-operator">=</span> ld.minusMonths(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 5、获取指定日期的LocalDate对象： public static LocalDate of(int year, int month, int dayOfMonth)</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld8</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2099</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld9</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2099</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>);<br><br>        <span class="hljs-comment">// 6、判断2个日期对象，是否相等，在前还是在后： equals isBefore isAfter</span><br>        System.out.println(ld8.equals(ld9));<span class="hljs-comment">// true</span><br>        System.out.println(ld8.isAfter(ld)); <span class="hljs-comment">// true</span><br>        System.out.println(ld8.isBefore(ld)); <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>LocalTime类的基本使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2_LocalTime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 0、获取本地时间对象</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> LocalTime.now(); <span class="hljs-comment">// 时 分 秒 纳秒 不可变的</span><br>        System.out.println(lt);<br><br>        <span class="hljs-comment">// 1、获取时间中的信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> lt.getHour(); <span class="hljs-comment">//时</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> lt.getMinute(); <span class="hljs-comment">//分</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> lt.getSecond(); <span class="hljs-comment">//秒</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nano</span> <span class="hljs-operator">=</span> lt.getNano(); <span class="hljs-comment">//纳秒</span><br><br>        <span class="hljs-comment">// 2、修改时间：withHour、withMinute、withSecond、withNano</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt3</span> <span class="hljs-operator">=</span> lt.withHour(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt4</span> <span class="hljs-operator">=</span> lt.withMinute(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt5</span> <span class="hljs-operator">=</span> lt.withSecond(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt6</span> <span class="hljs-operator">=</span> lt.withNano(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// 3、加多少：plusHours、plusMinutes、plusSeconds、plusNanos</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt7</span> <span class="hljs-operator">=</span> lt.plusHours(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt8</span> <span class="hljs-operator">=</span> lt.plusMinutes(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt9</span> <span class="hljs-operator">=</span> lt.plusSeconds(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt10</span> <span class="hljs-operator">=</span> lt.plusNanos(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// 4、减多少：minusHours、minusMinutes、minusSeconds、minusNanos</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt11</span> <span class="hljs-operator">=</span> lt.minusHours(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt12</span> <span class="hljs-operator">=</span> lt.minusMinutes(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt13</span> <span class="hljs-operator">=</span> lt.minusSeconds(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt14</span> <span class="hljs-operator">=</span> lt.minusNanos(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// 5、获取指定时间的LocalTime对象：</span><br>        <span class="hljs-comment">// public static LocalTime of(int hour, int minute, int second)</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt15</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt16</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>);<br><br>        <span class="hljs-comment">// 6、判断2个时间对象，是否相等，在前还是在后： equals isBefore isAfter</span><br>        System.out.println(lt15.equals(lt16)); <span class="hljs-comment">// true</span><br>        System.out.println(lt15.isAfter(lt)); <span class="hljs-comment">// false</span><br>        System.out.println(lt15.isBefore(lt)); <span class="hljs-comment">// true</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>LocalDateTime类的基本使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3_LocalDateTime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 0、获取本地日期和时间对象。</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now(); <span class="hljs-comment">// 年 月 日 时 分 秒 纳秒</span><br>        System.out.println(ldt);<br><br>        <span class="hljs-comment">// 1、可以获取日期和时间的全部信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> ldt.getYear(); <span class="hljs-comment">// 年</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> ldt.getMonthValue(); <span class="hljs-comment">// 月</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> ldt.getDayOfMonth(); <span class="hljs-comment">// 日</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> ldt.getDayOfYear();  <span class="hljs-comment">// 一年中的第几天</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfWeek</span> <span class="hljs-operator">=</span> ldt.getDayOfWeek().getValue();  <span class="hljs-comment">// 获取是周几</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> ldt.getHour(); <span class="hljs-comment">//时</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> ldt.getMinute(); <span class="hljs-comment">//分</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> ldt.getSecond(); <span class="hljs-comment">//秒</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nano</span> <span class="hljs-operator">=</span> ldt.getNano(); <span class="hljs-comment">//纳秒</span><br><br>        <span class="hljs-comment">// 2、修改时间信息：</span><br>        <span class="hljs-comment">// withYear withMonth withDayOfMonth withDayOfYear withHour</span><br>        <span class="hljs-comment">// withMinute withSecond withNano</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt2</span> <span class="hljs-operator">=</span> ldt.withYear(<span class="hljs-number">2029</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt3</span> <span class="hljs-operator">=</span> ldt.withMinute(<span class="hljs-number">59</span>);<br><br>        <span class="hljs-comment">// 3、加多少:</span><br>        <span class="hljs-comment">// plusYears  plusMonths plusDays plusWeeks plusHours plusMinutes plusSeconds plusNanos</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt4</span> <span class="hljs-operator">=</span> ldt.plusYears(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt5</span> <span class="hljs-operator">=</span> ldt.plusMinutes(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">// 4、减多少：</span><br>        <span class="hljs-comment">// minusDays minusYears minusMonths minusWeeks minusHours minusMinutes minusSeconds minusNanos</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt6</span> <span class="hljs-operator">=</span> ldt.minusYears(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt7</span> <span class="hljs-operator">=</span> ldt.minusMinutes(<span class="hljs-number">3</span>);<br><br><br>        <span class="hljs-comment">// 5、获取指定日期和时间的LocalDateTime对象：</span><br>        <span class="hljs-comment">// public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour,</span><br>        <span class="hljs-comment">//                                  int minute, int second, int nanoOfSecond)</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt8</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2029</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1222</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt9</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2029</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1222</span>);<br><br>        <span class="hljs-comment">// 6、 判断2个日期、时间对象，是否相等，在前还是在后： equals、isBefore、isAfter</span><br>        System.out.println(ldt9.equals(ldt8));<br>        System.out.println(ldt9.isAfter(ldt));<br>        System.out.println(ldt9.isBefore(ldt));<br><br>        <span class="hljs-comment">// 7、可以把LocalDateTime转换成LocalDate和LocalTime</span><br>        <span class="hljs-comment">// public LocalDate toLocalDate()</span><br>        <span class="hljs-comment">// public LocalTime toLocalTime()</span><br>        <span class="hljs-comment">// public static LocalDateTime of(LocalDate date, LocalTime time)</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> ldt.toLocalDate();<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> ldt.toLocalTime();<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt10</span> <span class="hljs-operator">=</span> LocalDateTime.of(ld, lt);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十、JDK8日期（时区）"><a href="#十、JDK8日期（时区）" class="headerlink" title="十、JDK8日期（时区）"></a>十、JDK8日期（时区）</h2><p>接着，我们学习代表时区的两个类。由于世界各个国家与地区的经度不同，各地区的时间也有所不同，因此会划分为不同的时区。每一个时区的时间也不太一样。</p><p><img src="/assets/1667400888534.png" alt="1667400888534"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4_ZoneId_ZonedDateTime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：了解时区和带时区的时间。</span><br>        <span class="hljs-comment">// 1、ZoneId的常见方法：</span><br>        <span class="hljs-comment">// public static ZoneId systemDefault(): 获取系统默认的时区</span><br>        <span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId</span> <span class="hljs-operator">=</span> ZoneId.systemDefault();<br>        System.out.println(zoneId.getId());<br>        System.out.println(zoneId);<br><br>        <span class="hljs-comment">// public static Set&lt;String&gt; getAvailableZoneIds(): 获取Java支持的全部时区Id</span><br>        System.out.println(ZoneId.getAvailableZoneIds());<br><br>        <span class="hljs-comment">// public static ZoneId of(String zoneId) : 把某个时区id封装成ZoneId对象。</span><br>        <span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId1</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;America/New_York&quot;</span>);<br><br>        <span class="hljs-comment">// 2、ZonedDateTime：带时区的时间。</span><br>        <span class="hljs-comment">// public static ZonedDateTime now(ZoneId zone): 获取某个时区的ZonedDateTime对象。</span><br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> ZonedDateTime.now(zoneId1);<br>        System.out.println(now);<br><br>        <span class="hljs-comment">// 世界标准时间了</span><br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now1</span> <span class="hljs-operator">=</span> ZonedDateTime.now(Clock.systemUTC());<br>        System.out.println(now1);<br><br>        <span class="hljs-comment">// public static ZonedDateTime now()：获取系统默认时区的ZonedDateTime对象</span><br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<br>        System.out.println(now2);<br><br>        <span class="hljs-comment">// Calendar instance = Calendar.getInstance(TimeZone.getTimeZone(zoneId1));</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十一、JDK8日期（Instant类）"><a href="#十一、JDK8日期（Instant类）" class="headerlink" title="十一、JDK8日期（Instant类）"></a>十一、JDK8日期（Instant类）</h2><p>接下来，我们来学习Instant这个类。通过获取Instant的对象可以拿到此刻的时间，该时间由两部分组成：从1970-01-01 00:00:00 开始走到此刻的总秒数+不够1秒的纳秒数。</p><p><img src="/assets/1667401284295.png" alt="1667401284295"></p><p>该类提供的方法如下图所示，可以用来获取当前时间，也可以对时间进行加、减、获取等操作。</p><p><img src="/assets/1667401373923.png" alt="1667401373923"></p><p><strong>作用：可以用来记录代码的执行时间，或用于记录用户操作某个事件的时间点。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Instant的使用。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5_Instant</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">// 1、创建Instant的对象，获取此刻时间信息</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now(); <span class="hljs-comment">// 不可变对象</span><br><br>        <span class="hljs-comment">// 2、获取总秒数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> now.getEpochSecond();<br>        System.out.println(second);<br><br>        <span class="hljs-comment">// 3、不够1秒的纳秒数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nano</span> <span class="hljs-operator">=</span> now.getNano();<br>        System.out.println(nano);<br><br>        System.out.println(now);<br><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> now.plusNanos(<span class="hljs-number">111</span>);<br><br>        <span class="hljs-comment">// Instant对象的作用：做代码的性能分析，或者记录用户的操作时间点</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now1</span> <span class="hljs-operator">=</span> Instant.now();<br>        <span class="hljs-comment">// 代码执行。。。。</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> Instant.now();<br><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十二、JDK8日期（格式化器）"><a href="#十二、JDK8日期（格式化器）" class="headerlink" title="十二、JDK8日期（格式化器）"></a>十二、JDK8日期（格式化器）</h2><p>接下来，我们学习一个新增的日期格式化类，叫DateTimeFormater。它可以从来对日期进行格式化和解析。它代替了原来的SimpleDateFormat类。</p><p><img src="/assets/1667401511710.png" alt="1667401511710"></p><p>需要用到的方法，如下图所示</p><p><img src="/assets/1667401564173.png" alt="1667401564173"></p><p>接下来，将上面的方法用代码来演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  目标：掌握JDK 8新增的DateTimeFormatter格式化器的用法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6_DateTimeFormatter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、创建一个日期时间格式化器对象出来。</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br><br>        <span class="hljs-comment">// 2、对时间进行格式化</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        System.out.println(now);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> formatter.format(now); <span class="hljs-comment">// 正向格式化</span><br>        System.out.println(rs);<br><br>        <span class="hljs-comment">// 3、格式化时间，其实还有一种方案。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> now.format(formatter); <span class="hljs-comment">// 反向格式化</span><br>        System.out.println(rs2);<br><br>        <span class="hljs-comment">// 4、解析时间：解析时间一般使用LocalDateTime提供的解析方法来解析。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2029年12月12日 12:12:11&quot;</span>;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.parse(dateStr, formatter);<br>        System.out.println(ldt);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十三、JDK8日期（Period类）"><a href="#十三、JDK8日期（Period类）" class="headerlink" title="十三、JDK8日期（Period类）"></a>十三、JDK8日期（Period类）</h2><p>除以了上新增的类，JDK8还补充了两个类，一个叫Period类、一个叫Duration类；这两个类可以用来对计算两个时间点的时间间隔。</p><p>其中Period用来计算日期间隔（年、月、日），Duration用来计算时间间隔（时、分、秒、纳秒）</p><p><img src="/assets/1667401637360.png" alt="1667401637360"></p><p>先来演示Period类的用法，它的方法如下图所示。可以用来计算两个日期之间相隔的年、相隔的月、相隔的日。<strong>只能两个计算LocalDate对象之间的间隔</strong></p><p><img src="/assets/1667401886743.png" alt="1667401886743"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Period的作用：计算机两个日期相差的年数，月数、天数。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test7_Period</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2029</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2029</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br><br>        <span class="hljs-comment">// 1、创建Period对象，封装两个日期对象。</span><br>        <span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(start, end);<br><br>        <span class="hljs-comment">// 2、通过period对象获取两个日期对象相差的信息。</span><br>        System.out.println(period.getYears());<br>        System.out.println(period.getMonths());<br>        System.out.println(period.getDays());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十四、JDK8日期（Duration类）"><a href="#十四、JDK8日期（Duration类）" class="headerlink" title="十四、JDK8日期（Duration类）"></a>十四、JDK8日期（Duration类）</h2><p>接下来，我们学习Duration类。它是用来表示两个时间对象的时间间隔。<strong>可以用于计算两个时间对象相差的天数、小时数、分数、秒数、纳秒数；支持LocalTime、LocalDateTime、Instant等时间</strong></p><p><img src="/assets/1667401938724.png" alt="1667401938724"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8_Duration</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2025</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2025</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>);<br>        <span class="hljs-comment">// 1、得到Duration对象</span><br>        <span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(start, end);<br><br>        <span class="hljs-comment">// 2、获取两个时间对象间隔的信息</span><br>        System.out.println(duration.toDays());<span class="hljs-comment">// 间隔多少天</span><br>        System.out.println(duration.toHours());<span class="hljs-comment">// 间隔多少小时</span><br>        System.out.println(duration.toMinutes());<span class="hljs-comment">// 间隔多少分</span><br>        System.out.println(duration.toSeconds());<span class="hljs-comment">// 间隔多少秒</span><br>        System.out.println(duration.toMillis());<span class="hljs-comment">// 间隔多少毫秒</span><br>        System.out.println(duration.toNanos());<span class="hljs-comment">// 间隔多少纳秒</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12面向对象实用类</title>
    <link href="/2023/12/01/day12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/12/01/day12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="12——面向对象实用类"><a href="#12——面向对象实用类" class="headerlink" title="12——面向对象实用类"></a>12——面向对象实用类</h3><p>各位同学，前面两天我们已经把面向对象最主要的内容学习完了，剩下的这些语法知识学完，那么Java语法知识就算全齐活了。</p><p>今天学习的内容同学们学习起来会更轻松一些，有一些语法知识只需要了解一下就可以了，因为实际工作用得并不多。</p><p>我们先来了解第一个语法知识，内部类。</p><h2 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h2><p> 内部类是类中的五大成分之一（成员变量、方法、构造器、内部类、代码块），如果一个类定义在另一个类的内部，这个类就是内部类。</p><p>当一个类的内部，包含一个完整的事物，且这个事物没有必要单独设计时，就可以把这个事物设计成内部类。</p><p>比如：汽车、的内部有发动机，发动机是包含在汽车内部的一个完整事物，可以把发动机设计成内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br><span class="hljs-comment">//内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部类有四种形式，分别是成员内部类、静态内部类、局部内部类、匿名内部类。</p><p>我们先来学习成员内部类</p><h3 id="1-1-成员内部类"><a href="#1-1-成员内部类" class="headerlink" title="1.1 成员内部类"></a>1.1 成员内部类</h3><p>成员内部类就是类中的一个普通成员，类似于成员变量、成员方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String a=<span class="hljs-string">&quot;黑马&quot;</span>;<br><br>    <span class="hljs-comment">// 成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br><br>        <span class="hljs-comment">//在内部类中既可以访问自己类的成员，也可以访问外部类的成员</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(age); <span class="hljs-comment">//88</span><br>            System.out.println(a);   <span class="hljs-comment">//黑马</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">77</span>;<br>            System.out.println(age); <span class="hljs-comment">//77</span><br>            System.out.println(<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//88</span><br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//99</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成员内部类如何创建对象，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部类.内部类 变量名 = new 外部类().new 内部类();</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br><span class="hljs-comment">//调用内部类的方法</span><br>in.test();<br></code></pre></td></tr></table></figure><p>总结一下内部类访问成员的特点</p><ul><li>既可以访问内部类成员、也可以访问外部类成员</li><li>如果内部类成员和外部类成员同名，可以使用**<code>类名.this.成员</code>**区分</li></ul><h3 id="1-2-静态内部类"><a href="#1-2-静态内部类" class="headerlink" title="1.2 静态内部类"></a>1.2 静态内部类</h3><p>静态内部类，其实就是在成员内部类的前面加了一个static关键字。静态内部类属于外部类自己持有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String schoolName=<span class="hljs-string">&quot;黑马&quot;</span>;<br><br>    <span class="hljs-comment">// 静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-comment">//静态内部类访问外部类的静态变量，是可以的；</span><br>        <span class="hljs-comment">//静态内部类访问外部类的实例变量，是不行的</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(schoolName); <span class="hljs-comment">//99</span><br>            <span class="hljs-comment">//System.out.println(age);   //报错</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态内部类创建对象时，需要使用外部类的类名调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//格式：外部类.内部类 变量名 = new 外部类.内部类();</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br>in.test();<br></code></pre></td></tr></table></figure><h3 id="1-3-局部内部类"><a href="#1-3-局部内部类" class="headerlink" title="1.3 局部内部类"></a>1.3 局部内部类</h3><p>局部内部类是定义在方法中的类，和局部变量一样，只能在方法中有效。所以局部内部类的局限性很强，一般在开发中是不会使用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Inner...show&quot;</span>);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//局部内部类只能在方法中创建对象，并使用</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        in.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-匿名内部类"><a href="#1-4-匿名内部类" class="headerlink" title="1.4 匿名内部类"></a>1.4 匿名内部类</h3><blockquote><p><strong>1.4.1 认识匿名内部类，基本使用</strong></p></blockquote><p>各位同学，接下来学习一种再实际开发中用得最多的一种内部类，叫匿名内部类。相比于前面几种内部类，匿名内部类就比较重要的。</p><p>我们还是先认识一下什么是匿名内部类？</p><p>匿名内部类是一种特殊的局部内部类；所谓匿名，指的是程序员不需要为这个类声明名字。</p><p>下面就是匿名内部类的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父类/接口(参数值)&#123;<br>    <span class="hljs-meta">@Override</span><br>    重写父类/接口的方法;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类本质上是一个没有名字的子类对象、或者接口的实现类对象。</p><p>比如，先定义一个Animal抽象类，里面定义一个cry()方法，表示所有的动物有叫的行为，但是因为动物还不具体，cry()这个行为并不能具体化，所以写成抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我想要在不定义子类的情况下创建Animal的子类对象，就可以使用匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//这里后面new 的部分，其实就是一个Animal的子类对象</span><br>        <span class="hljs-comment">//这里隐含的有多态的特性： Animal a = Animal子类对象;</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;猫喵喵喵的叫~~~&quot;</span>);<br>            &#125;<br>        &#125;<br>        a.eat(); <span class="hljs-comment">//直线上面重写的cry()方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，匿名内部类在编写代码时没有名字，编译后系统会为自动为匿名内部类生产字节码，字节码的名称会以<code>外部类$1.class</code>的方法命名</p><p><img src="/assets/1665658585267.png" alt="1665658585267"></p><p><strong>匿名内部类的作用：简化了创建子类对象、实现类对象的书写格式。</strong></p><blockquote><p><strong>1.4.2 匿名内部类的应用场景</strong></p></blockquote><p>学习完匿名内部类的基本使用之后，我们再来看一下匿名内部类在实际中的应用场景。其实一般我们会主动的使用匿名内部类。</p><p><strong>只有在调用方法时，当方法的形参是一个接口或者抽象类，为了简化代码书写，而直接传递匿名内部类对象给方法。</strong>这样就可以少写一个类。比如，看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;狗刨飞快&quot;</span>);<br>            &#125;<br>        &#125;;<br>        go(s1);<br>        <br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;猴子游泳也还行&quot;</span>);<br>            &#125;<br>        &#125;;<br>        go(s1);<br>    &#125;<br>    <span class="hljs-comment">//形参是Swimming接口，实参可以接收任意Swimming接口的实现类对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(Swimming s)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始~~~~~~~~&quot;</span>);<br>        s.swim();<br>        System.out.println(<span class="hljs-string">&quot;结束~~~~~~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h2><h3 id="2-1-认识枚举"><a href="#2-1-认识枚举" class="headerlink" title="2.1 认识枚举"></a>2.1 认识枚举</h3><blockquote><p><strong>2.1.1 认识枚举、枚举的原理</strong></p></blockquote><p>同学们，接下来我们学习一个新的知识点，枚举。枚举是我们以后在项目开发中偶尔会用到的知识。话不多说，我们还是先来认识一下枚举。</p><p>枚举是一种特殊的类，它的格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> 枚举类名&#123;<br>    枚举项<span class="hljs-number">1</span>,枚举项<span class="hljs-number">2</span>,枚举项<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实枚举项就表示枚举类的对象，只是这些对象在定义枚举类时就预先写好了，以后就只能用这几个固定的对象。</p><p>我们用代码演示一下，定义一个枚举类A，在枚举类中定义三个枚举项X, Y, Z</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span>&#123;<br>    X,Y,Z;<br>&#125;<br></code></pre></td></tr></table></figure><p>想要获取枚举类中的枚举项，只需要用类名调用就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//获取枚举A类的，枚举项</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> A.X;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> A.Y;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> A.Z;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>刚才说，枚举项实际上是枚举类的对象，这一点其实可以通过反编译的形式来验证（需要用到反编译的命令，这里不能直接将字节码拖进idea反编译）</p><p><img src="/assets/1665669996020.png" alt="1665669996020"></p><p>我们会看到，枚举类A是用class定义的，说明枚举确实是一个类，而且X，Y，Z都是A类的对象；而且每一个枚举项都是被<code>public static final </code>修饰，所以被可以类名调用，而且不能更改。</p><blockquote><p><strong>2.1.2 枚举深入</strong></p></blockquote><p>既然枚举是一个类的话，我们能不能在枚举类中定义构造器、成员变量、成员方法呢？答案是可以的。来看一下代码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//定义枚举项</span><br>    X,Y,Z(<span class="hljs-string">&quot;张三&quot;</span>); <span class="hljs-comment">//枚举项后面加括号，就是在执行枚举类的带参数构造方法。</span><br>    <br>    <span class="hljs-comment">//定义空构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//定义带参数构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>    <br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然枚举类中可以像类一样，写一些类的其他成员，但是一般不会这么写，如果你真要这么干的话，到不如直接写普通类来的直接。</p><h3 id="2-2-枚举的应用场景"><a href="#2-2-枚举的应用场景" class="headerlink" title="2.2 枚举的应用场景"></a>2.2 枚举的应用场景</h3><p>刚才我们认识了一下什么是枚举，接下来我们看一下枚举在实际中的运用，枚举的应用场景是这样的：<strong>枚举一般表示一组信息，然后作为参数进行传输。</strong></p><p>我们来看一个案例。比如我们现在有这么一个应用，用户进入应用时，需要让用户选择是女生、还是男生，然后系统会根据用户选择的是男生，还是女生推荐不同的信息给用户观看。</p><p><img src="/assets/1665670887179.png" alt="1665670887179"></p><p>这里我们就可以先定义一个枚举类，用来表示男生、或者女生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constant</span>&#123;<br>    BOY,GRIL<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个测试类，完成用户进入系统后的选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//调用方法，传递男生</span><br>        provideInfo(Constant.BOY);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">provideInfo</span><span class="hljs-params">(Constant c)</span>&#123;<br>        <span class="hljs-keyword">switch</span>(c)&#123;<br>            <span class="hljs-keyword">case</span> BOY:<br>                System.out.println(<span class="hljs-string">&quot;展示一些信息给男生看&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GRIL:<br>                System.out.println(<span class="hljs-string">&quot;展示一些信息给女生看&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终再总结一下枚举的应用场景：<strong>枚举一般表示几个固定的值，然后作为参数进行传输</strong>。</p><h2 id="三、泛型"><a href="#三、泛型" class="headerlink" title="三、泛型"></a>三、泛型</h2><h3 id="3-1-认识泛型"><a href="#3-1-认识泛型" class="headerlink" title="3.1 认识泛型"></a>3.1 认识泛型</h3><p>所谓泛型指的是，在定义类、接口、方法时，同时声明了一个或者多个类型变量（如：<E>），称为泛型类、泛型接口、泛型方法、它们统称为泛型。</p><p>比如我们前面学过的ArrayList类就是一个泛型类，我们可以打开API文档看一下ArrayList类的声明。</p><p><img src="/assets/1665671616852.png" alt="1665671616852"></p><p>ArrayList集合的设计者在定义ArrayList集合时，就已经明确ArrayList集合时给别人装数据用的，但是别人用ArrayList集合时候，装什么类型的数据他不知道，所以就用一个<code>&lt;E&gt;</code>表示元素的数据类型。</p><p>当别人使用ArrayList集合创建对象时，<code>new ArrayList&lt;String&gt; </code>就表示元素为String类型，<code>new ArrayList&lt;Integer&gt;</code>表示元素为Integer类型。</p><p><img src="/assets/1665671987771.png" alt="1665671987771"></p><p>我们总结一下泛型的作用、本质：</p><ul><li><p><strong>泛型的好处：在编译阶段可以避免出现一些非法的数据。</strong></p></li><li><p><strong>泛型的本质：把具体的数据类型传递给类型变量。</strong></p></li></ul><h3 id="3-2-自定义泛型类"><a href="#3-2-自定义泛型类" class="headerlink" title="3.2 自定义泛型类"></a>3.2 自定义泛型类</h3><p>接下来我们学习一下自定义泛型类，但是有一些话需要给大家提前交代一下：泛型类，在实际工作中一般都是源代码中写好，我们直接用的，就是ArrayList<E>这样的，自己定义泛型类是非常少的。</p><p>自定义泛型类的格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里的&lt;T,W&gt;其实指的就是类型变量，可以是一个，也可以是多个。</span><br><span class="hljs-keyword">public</span> class 类名&lt;T,W&gt;&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们自己定义一个MyArrayList<E>泛型类，模拟一下自定义泛型类的使用。注意这里重点仅仅只是模拟泛型类的使用，所以方法中的一些逻辑是次要的，也不会写得太严谨。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个泛型类，用来表示一个容器</span><br><span class="hljs-comment">//容器中存储的数据，它的类型用&lt;E&gt;先代替用着，等调用者来确认&lt;E&gt;的具体类型。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayList</span>&lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> Object[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//定一个索引，方便对数组进行操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<br>    <br>    <span class="hljs-comment">//添加元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>&#123;<br>        array[index]=e;<br>        index++;<br>    &#125;<br>    <br>    <span class="hljs-comment">//获取元素</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">return</span> (E)array[index];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们写一个测试类，来测试自定义的泛型类MyArrayList是否能够正常使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.确定MyArrayList集合中，元素类型为String类型</span><br>        MyArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//此时添加元素时，只能添加String类型</span><br>        list.add(<span class="hljs-string">&quot;张三&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>        <br>         <span class="hljs-comment">//2.确定MyArrayList集合中，元素类型为Integer类型</span><br>        MyArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//此时添加元素时，只能添加String类型</span><br>        list.add(<span class="hljs-number">100</span>);<br>        list.add(<span class="hljs-number">200</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于自定义泛型类，你们把这个案例理解，对于初学者来说，就已经非常好了。</p><h3 id="3-3-自定义泛型接口"><a href="#3-3-自定义泛型接口" class="headerlink" title="3.3 自定义泛型接口"></a>3.3 自定义泛型接口</h3><p>在上一节中，我们已经学习了自定义泛型类，接下来我们学习一下泛型接口。泛型接口其实指的是在接口中把不确定的数据类型用<code>&lt;类型变量&gt;</code>表示。定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里的类型变量，一般是一个字母，比如&lt;E&gt;</span><br><span class="hljs-keyword">public</span> interface 接口名&lt;类型变量&gt;&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>比如，我们现在要做一个系统要处理学生和老师的数据，需要提供2个功能，保存对象数据、根据名称查询数据，要求：这两个功能处理的数据既能是老师对象，也能是学生对象。</p><p>首先我们得有一个学生类和老师类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义一个<code>Data&lt;T&gt;</code>泛型接口，T表示接口中要处理数据的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>;<br>    <br>    <span class="hljs-keyword">public</span> ArrayList&lt;T&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们写一个处理Teacher对象的接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此时确定Data&lt;E&gt;中的E为Teacher类型，</span><br><span class="hljs-comment">//接口中add和getByName方法上的T也都会变成Teacher类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span>&lt;Teacher&gt;&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Teacher t)</span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> ArrayList&lt;Teacher&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们写一个处理Student对象的接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此时确定Data&lt;E&gt;中的E为Student类型，</span><br><span class="hljs-comment">//接口中add和getByName方法上的T也都会变成Student类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span>&lt;Student&gt;&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Student t)</span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再啰嗦几句，在实际工作中，一般也都是框架底层源代码把泛型接口写好，我们实现泛型接口就可以了。</p><h3 id="3-4-泛型方法"><a href="#3-4-泛型方法" class="headerlink" title="3.4 泛型方法"></a>3.4 泛型方法</h3><p>同学们，接下来我们学习一下泛型方法。下面就是泛型方法的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;泛型变量,泛型变量&gt; 返回值类型 方法名(形参列表)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>下图中在返回值类型和修饰符之间有<T>定义的才是泛型方法。</p><p><img src="/assets/1665750638693.png" alt="1665750638693"></p><p>接下我们看一个泛型方法的案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//调用test方法，传递字符串数据，那么test方法的泛型就是String类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;test&quot;</span>);<br>    <br>        <span class="hljs-comment">//调用test方法，传递Dog对象，那么test方法的泛型就是Dog类型</span><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>()); <br>    &#125;<br>    <br>    <span class="hljs-comment">//这是一个泛型方法&lt;T&gt;表示一个不确定的数据类型，由调用者确定</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; test(T t)&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-泛型限定"><a href="#3-5-泛型限定" class="headerlink" title="3.5 泛型限定"></a>3.5 泛型限定</h3><p>接着，我们来学习一个泛型的特殊用法，叫做泛型限定。泛型限定的意思是对泛型的数据类型进行范围的限制。有如下的三种格式</p><ul><li><?> 表示任意类型</li><li><? extends 数据类型> 表示指定类型或者指定类型的子类</li><li><? super 数据类型> 表示指定类型或者指定类型的父类</li></ul><p>下面我们演示一下，假设有Car作为父类，BENZ，BWM两个类作为Car的子类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BENZ</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BWN</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.集合中的元素不管是什么类型，test1方法都能接收</span><br>        ArrayList&lt;BWM&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;Benz&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        test1(list1);<br>        test1(list2);<br>        test1(list3);<br>        <br>        <span class="hljs-comment">//2.集合中的元素只能是Car或者Car的子类类型，才能被test2方法接收</span><br>        ArrayList&lt;Car&gt; list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;BWM&gt; list5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        test2(list4);<br>        test2(list5);<br>        <br>        <span class="hljs-comment">//2.集合中的元素只能是Car或者Car的父类类型，才能被test3方法接收</span><br>        ArrayList&lt;Car&gt; list6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;Object&gt; list7 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        test3(list6);<br>        test3(list7);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(ArrayList&lt;?&gt; list)</span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(ArrayList&lt;? extends Car&gt; list)</span>&#123;<br>        <br>    &#125;<br>    <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-built_in">super</span> Car&gt; list)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-泛型擦除"><a href="#3-6-泛型擦除" class="headerlink" title="3.6 泛型擦除"></a>3.6 泛型擦除</h3><p>最后，关于泛型还有一个特点需要给同学们介绍一下，就是泛型擦除。什么意思呢？<strong>也就是说泛型只能编译阶段有效，一旦编译成字节码，字节码中是不包含泛型的</strong>。而且泛型只支持引用数据类型，不支持基本数据类型。</p><p>把下面的代码的字节码进行反编译</p><p><img src="/assets/1665752105271.png" alt="1665752105271"></p><p>下面是反编译之后的代码，我们发现ArrayList后面没有泛型</p><p><img src="/assets/1665752037764.png" alt="1665752037764"></p><h2 id="四、常用API"><a href="#四、常用API" class="headerlink" title="四、常用API"></a>四、常用API</h2><p>各位同学，恭喜大家，到目前位置我们关于面向对象的语法知识就全部学习完了。接下来我们就可以拿着这些语法知识，去学习一个一个的API方法，掌握的API方法越多，那么Java的编程能力就越强。</p><p> API（Application Programming interface）意思是应用程序编程接口，说人话就是Java帮我们写好的一些程序，如：类、方法等，我们直接拿过来用就可以解决一些问题。</p><p><img src="/assets/1665752705389.png" alt="1665752705389"></p><p>我们要学习那些API呢？把下面一种图中的所有类的常用方法学会了，那我们JavaSE进阶的课程就算你全学会了。</p><p><img src="/assets/1665752813753.png" alt="1665752813753"></p><p>很多初学者给我反应的问题是，这些API一听就会，但是就是记住不！送同学们一句话<strong>，</strong></p><p><strong>“千里之行始于足下，多记、多查、多些代码、孰能生巧！”</strong></p><p><img src="/assets/1665752883617.png" alt="1665752883617"></p><h3 id="4-1-Object类"><a href="#4-1-Object类" class="headerlink" title="4.1 Object类"></a>4.1 Object类</h3><p>各位小伙伴，我们要学习的第一个API就是Object类。Object类是Java中所有类的祖宗类，因此，Java中所有类的对象都可以直接使用Object类中提供的一些方法。</p><p>按照下图的提示，可以搜索到你想要找的类</p><p><img src="/assets/1665753230409.png" alt="1665753230409"></p><p>我们找到Object类的下面两个方法</p><p><img src="/assets/1665753282718.png" alt="1665753282718"></p><ul><li><strong>4.1.1 toString()方法</strong></li></ul><p>我们先来学习toString()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>    调用toString()方法可以返回对象的字符串表示形式。<br>    默认的格式是：“包名.类名@哈希值<span class="hljs-number">16</span>进制”<br></code></pre></td></tr></table></figure><p>假设有一个学生类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-number">23</span>);<br>        System.out.println(s1.toString()); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下</p><p><img src="/assets/1665753662732.png" alt="1665753662732"></p><p>如果，在Student类重写toString()方法，那么我们可以返回对象的属性值，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name=‘&quot;</span>+name+<span class="hljs-string">&quot;’, age=&quot;</span>+age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试类，结果如下</p><p><img src="/assets/1665754067446.png" alt="1665754067446"></p><blockquote><p><strong>4.1.2 equals(Object o)方法</strong></p></blockquote><p>接下来，我们学习一下Object类的equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span><br>    判断此对象与参数对象是否<span class="hljs-string">&quot;相等&quot;</span><br></code></pre></td></tr></table></figure><p>我们写一个测试类，测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵薇&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵薇&quot;</span>,<span class="hljs-number">23</span>);<br>        <br>        <span class="hljs-comment">//equals本身也是比较对象的地址，和&quot;==&quot;没有区别</span><br>        System.out.println(s1.equals(s2)); <span class="hljs-comment">//false</span><br>         <span class="hljs-comment">//&quot;==&quot;比较对象的地址</span><br>        System.out.println(s1==s2); <span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果我们在Student类中，把equals方法重写了，就按照对象的属性值进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name=‘&quot;</span>+name+<span class="hljs-string">&quot;’, age=&quot;</span>+age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//重写equals方法，按照对象的属性值进行比较</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-literal">null</span> ? name.equals(student.name) : student.name == <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再运行测试类，效果如下</p><p><img src="/assets/1665754859931.png" alt="1665754859931"></p><p>总结一下Object的toString方法和equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>   返回对象的字符串表示形式。默认的格式是：“包名.类名@哈希值<span class="hljs-number">16</span>进制”<br>   【子类重写后，返回对象的属性值】<br>   <br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span><br>    判断此对象与参数对象是否<span class="hljs-string">&quot;相等&quot;</span>。默认比较对象的地址值，和<span class="hljs-string">&quot;==&quot;</span>没有区别<br>    【子类重写后，比较对象的属性值】<br></code></pre></td></tr></table></figure><blockquote><p><strong>4.1.3 clone() 方法</strong></p></blockquote><p>接下来，我们学习Object类的clone()方法，克隆。意思就是某一个对象调用这个方法，这个方法会复制一个一模一样的新对象，并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span><br>    克隆当前对象，返回一个新对象<br></code></pre></td></tr></table></figure><p>想要调用clone()方法，必须让被克隆的类实现Cloneable接口。如我们准备克隆User类的对象，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> String id; <span class="hljs-comment">//编号</span><br>    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] scores; <span class="hljs-comment">//分数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String id, String username, String password, <span class="hljs-type">double</span>[] scores)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.scores = scores;<br>    &#125;<br><br>    <span class="hljs-comment">//...get和set...方法自己加上</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，我们写一个测试类，克隆User类的对象。并观察打印的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;wo666&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">99.0</span>,<span class="hljs-number">99.5</span>&#125;);<br><span class="hljs-comment">//调用方法克隆得到一个新对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> (User) u1.clone();<br>        System.out.println(u2.getId());<br>        System.out.println(u2.getUsername());<br>        System.out.println(u2.getPassword());<br>        System.out.println(u2.getScores()); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，克隆得到的对象u2它的属性值和原来u1对象的属性值是一样的。</p><p><img src="/assets/1665757008178.png" alt="1665757008178"></p><p>上面演示的克隆方式，是一种浅克隆的方法，浅克隆的意思：<strong>拷贝出来的对象封装的数据与原对象封装的数据一模一样（引用类型拷贝的是地址值）</strong>。如下图所示</p><p><img src="/assets/1665757187877.png" alt="1665757187877"></p><p>还有一种拷贝方式，称之为深拷贝，拷贝原理如下图所示</p><p><img src="/assets/1665757265609.png" alt="1665757265609"></p><p>下面演示一下深拷贝User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> String id; <span class="hljs-comment">//编号</span><br>    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] scores; <span class="hljs-comment">//分数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String id, String username, String password, <span class="hljs-type">double</span>[] scores)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.scores = scores;<br>    &#125;<br><br>    <span class="hljs-comment">//...get和set...方法自己加上</span><br><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-comment">//先克隆得到一个新对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User) <span class="hljs-built_in">super</span>.clone();<br>        <span class="hljs-comment">//再将新对象中的引用类型数据，再次克隆</span><br>        u.scores = u.scores.clone();<br>        <span class="hljs-keyword">return</span> u;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/1665757536274.png" alt="1665757536274"></p><h3 id="4-2-Objects类"><a href="#4-2-Objects类" class="headerlink" title="4.2 Objects类"></a>4.2 Objects类</h3><p>Objects是一个工具类，提供了一些方法可以对任意对象进行操作。主要方法如下</p><p><img src="/assets/1665760840329.png" alt="1665760840329"></p><p>下面写代码演示一下这几个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itheima&quot;</span>;<br>        <br>        <span class="hljs-comment">//这里会出现NullPointerException异常，调用者不能为null</span><br>        System.out.println(s1.equals(s2));<br>        <span class="hljs-comment">//此时不会有NullPointerException异常，底层会自动先判断空</span><br>        System.out.println(Objects.equals(s1,s2));<br>        <br>        <span class="hljs-comment">//判断对象是否为null，等价于==</span><br>        System.out.println(Objects.isNull(s1)); <span class="hljs-comment">//true</span><br>        System.out.println(s1==<span class="hljs-literal">null</span>); <span class="hljs-comment">//true</span><br>        <br>        <span class="hljs-comment">//判断对象是否不为null，等价于!=</span><br>        System.out.println(Objects.nonNull(s2)); <span class="hljs-comment">//true</span><br>        System.out.println(s2!=<span class="hljs-literal">null</span>); <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-基本类型包装类"><a href="#4-3-基本类型包装类" class="headerlink" title="4.3 基本类型包装类"></a>4.3 基本类型包装类</h3><p>同学们，接下来我们学习一下包装类。为什么要学习包装类呢？因为在Java中有一句很经典的话，万物皆对象。Java中的8种基本数据类型还不是对象，所以要把它们变成对象，变成对象之后，可以提供一些方法对数据进行操作。</p><p>Java中8种基本数据类型都用一个包装类与之对一个，如下图所示</p><p><img src="/assets/1665758797003.png" alt="1665758797003"></p><p>我们学习包装类，主要学习两点：</p><ul><li><ol><li>创建包装类的对象方式、自动装箱和拆箱的特性；</li></ol></li><li><ol start="2"><li>利用包装类提供的方法对字符串和基本类型数据进行相互转换</li></ol></li></ul><blockquote><p><strong>4.2.1 创建包装类对象</strong></p></blockquote><p>我们先来学习，创建包装类对象的方法，以及包装类的一个特性叫自动装箱和自动拆箱。我们以Integer为例，其他的可以自己学，都是类似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Integer对象，封装基本类型数据10</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">//2.使用Integer类的静态方法valueOf(数据)</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">//3.还有一种自动装箱的写法（意思就是自动将基本类型转换为引用类型）</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//4.有装箱肯定还有拆箱（意思就是自动将引用类型转换为基本类型）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c;<br><br><span class="hljs-comment">//5.装箱和拆箱在使用集合时就有体现</span><br>ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//添加的元素是基本类型，实际上会自动装箱为Integer类型</span><br>list.add(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//获取元素时，会将Integer类型自动拆箱为int类型</span><br><span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><blockquote><p><strong>4.2.2 包装类数据类型转换</strong></p></blockquote><p>在开发中，经常使用包装类对字符串和基本类型数据进行相互转换。</p><ul><li>把字符串转换为数值型数据：包装类.parseXxx(字符串)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String s)</span><br>    把字符串转换为基本数据类型<br></code></pre></td></tr></table></figure><ul><li>将数值型数据转换为字符串：包装类.valueOf(数据);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>    把基本类型数据转换为<br></code></pre></td></tr></table></figure><ul><li>写一个测试类演示一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.字符串转换为数值型数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ageStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;29&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">age1</span> <span class="hljs-operator">=</span> Integer.parseInt(ageStr);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">scoreStr</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> Double.prarseDouble(scoreStr);<br><br><span class="hljs-comment">//2.整数转换为字符串，以下几种方式都可以（挑中你喜欢的记一下）</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Integer.toString(a);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> a.toString();<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> a+<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> String.valueOf(a);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11面向对象语法</title>
    <link href="/2023/12/01/day11-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/12/01/day11-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="11——面向对象语法"><a href="#11——面向对象语法" class="headerlink" title="11——面向对象语法"></a>11——面向对象语法</h3><p>今天我们继续学习面向对象的语法知识，我们今天学习的主要内容是：多态、抽象、接口。</p><p>学会这些语法知识，可以让我们编写代码更灵活，代码的复用性更高。</p><h2 id="一、多态"><a href="#一、多态" class="headerlink" title="一、多态"></a>一、多态</h2><p>接下来，我们学习面向对象三大特征的的最后一个特征——多态。</p><h3 id="1-1-多态概述"><a href="#1-1-多态概述" class="headerlink" title="1.1 多态概述"></a>1.1 多态概述</h3><blockquote><p><strong>什么是多态？</strong></p><p>多态是在继承、实现情况下的一种现象，表现为：对象多态、行为多态。</p></blockquote><p>比如：Teacher和Student都是People的子类，代码可以写成下面的样子</p><p><img src="/assets/16642789439056.png" alt="1664278943905"></p><p><img src="/assets/1664278943905.png" alt="1664278943905"></p><h3 id="1-2-多态的好处"><a href="#1-2-多态的好处" class="headerlink" title="1.2 多态的好处"></a>1.2 多态的好处</h3><p>各位同学，刚才我们认识了什么是多态。那么多态的写法有什么好处呢？</p><blockquote><p>在多态形式下，右边的代码是解耦合的，更便于扩展和维护。</p></blockquote><ul><li>怎么理解这句话呢？比如刚开始p1指向Student对象，run方法执行的就是Student对象的业务；假如p1指向Student对象 ，run方法执行的自然是Student对象的业务。</li></ul><p><img src="/assets/1665018279234.png" alt="1665018279234"></p><blockquote><p>定义方法时，使用父类类型作为形参，可以接收一切子类对象，扩展行更强，更便利。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握使用多态的好处</span><br><span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>go(t);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        go(s);<br>    &#125;<br><br>    <span class="hljs-comment">//参数People p既可以接收Student对象，也能接收Teacher对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(People p)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始------------------------&quot;</span>);<br>        p.run();<br>        System.out.println(<span class="hljs-string">&quot;结束------------------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h3><p>虽然多态形式下有一些好处，但是也有一些弊端。在多态形式下，不能调用子类特有的方法，比如在Teacher类中多了一个teach方法，在Student类中多了一个study方法，这两个方法在多态形式下是不能直接调用的。</p><p><img src="/assets/1665018661860.png" alt="1665018661860"></p><p>多态形式下不能直接调用子类特有方法，但是转型后是可以调用的。这里所说的转型就是把父类变量转换为子类类型。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果p接收的是子类对象</span><br><span class="hljs-keyword">if</span>(父类变量 instance 子类)&#123;<br>    <span class="hljs-comment">//则可以将p转换为子类类型</span><br>    子类 变量名 = (子类)父类变量;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/1665018905475.png" alt="1665018905475"></p><p>如果类型转换错了，就会出现类型转换异常ClassCastException，比如把Teacher类型转换成了Student类型.</p><p><img src="/assets/1665019335142.png" alt="1665019335142"></p><p>关于多态转型问题，我们最终记住一句话：<strong>原本是什么类型，才能还原成什么类型</strong></p><h2 id="二、final关键字"><a href="#二、final关键字" class="headerlink" title="二、final关键字"></a>二、final关键字</h2><p>各位同学，接下来我们学习一个在面向对象编程中偶尔会用到的一个关键字叫final，也是为后面学习抽象类和接口做准备的。</p><h3 id="2-1-final修饰符的特点"><a href="#2-1-final修饰符的特点" class="headerlink" title="2.1 final修饰符的特点"></a>2.1 final修饰符的特点</h3><p>我们先来认识一下final的特点，final关键字是最终的意思，可以修饰类、修饰方法、修饰变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-keyword">final</span>修饰类：该类称为最终类，特点是不能被继承<br>- <span class="hljs-keyword">final</span>修饰方法：该方法称之为最终方法，特点是不能被重写。<br>- <span class="hljs-keyword">final</span>修饰变量：该变量只能被赋值一次。<br></code></pre></td></tr></table></figure><ul><li>接下来我们分别演示一下，先看final修饰类的特点</li></ul><p><img src="/assets/1665020107661.png" alt="1665020107661"></p><ul><li><p>再来演示一下final修饰方法的特点</p><p><img src="/assets/1665020283101.png" alt="1665020283101"></p></li><li><p>再演示一下final修饰变量的特点</p><ul><li>情况一</li></ul><p><img src="/assets/1665020419364.png" alt="1665020419364"></p><ul><li>情况二</li></ul><p><img src="/assets/1665020580223.png" alt="1665020580223"></p><ul><li>情况三</li></ul><p><img src="/assets/1665020721501.png" alt="1665020721501"></p><p><img src="/assets/1665020951170.png" alt="1665020951170"></p></li></ul><h3 id="2-2-补充知识：常量"><a href="#2-2-补充知识：常量" class="headerlink" title="2.2 补充知识：常量"></a>2.2 补充知识：常量</h3><p>刚刚我们学习了final修饰符的特点，在实际运用当中经常使用final来定义常量。先说一下什么是Java中的常量？</p><ul><li>被 static final 修饰的成员变量，称之为常量。</li><li>通常用于记录系统的配置信息</li></ul><p>接下来我们用代码来演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constant</span> &#123;<br>    <span class="hljs-comment">//常量: 定义一个常量表示学校名称</span><br>    <span class="hljs-comment">//为了方便在其他类中被访问所以一般还会加上public修饰符</span><br>    <span class="hljs-comment">//常量命名规范：建议都采用大写字母命名，多个单词之前有_隔开</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;传智教育&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//由于常量是static的所以，在使用时直接用类名就可以调用</span><br>        System.out.println(Constant.SCHOOL_NAME);<br>        System.out.println(Constant.SCHOOL_NAME);<br>        System.out.println(Constant.SCHOOL_NAME);<br>        System.out.println(Constant.SCHOOL_NAME);<br>        System.out.println(Constant.SCHOOL_NAME);<br>        System.out.println(Constant.SCHOOL_NAME);<br>        System.out.println(Constant.SCHOOL_NAME);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>关于常量的原理，同学们也可以了解一下：在程序编译后，常量会“宏替换”，出现常量的地方，全都会被替换为其记住的字面量。把代码反编译后，其实代码是下面的样子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>E);<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;传智教育&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、抽象"><a href="#三、抽象" class="headerlink" title="三、抽象"></a>三、抽象</h2><p>同学们，接下来我们学习Java中一种特殊的类，叫抽象类。为了让同学们掌握抽象类，会先让同学们认识一下什么是抽象类以及抽象类的特点，再学习一个抽象类的常见应用场景。</p><h3 id="3-1-认识抽象类"><a href="#3-1-认识抽象类" class="headerlink" title="3.1 认识抽象类"></a>3.1 认识抽象类</h3><p>我们先来认识一下什么是抽象类，以及抽象类有什么特点。</p><ul><li>在Java中有一个关键字叫abstract，它就是抽象的意思，它可以修饰类也可以修饰方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">- 被<span class="hljs-keyword">abstract</span>修饰的类，就是抽象类<br>- 被<span class="hljs-keyword">abstract</span>修饰的方法，就是抽象方法（不允许有方法体）<br></code></pre></td></tr></table></figure><p>接下来用代码来演示一下抽象类和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//abstract修饰类，这个类就是抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//abstract修饰方法，这个方法就是抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类的成员（成员变量、成员方法、构造器），类的成员都可以有。如下面代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">static</span> String schoolName;<br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//实例方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>抽象类是不能创建对象的，如果抽象类的对象就会报错</li></ul><p><img src="/assets/1665026273870.png" alt="1665026273870"></p><ul><li>抽象类虽然不能创建对象，但是它可以作为父类让子类继承。而且子类继承父类必须重写父类的所有抽象方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//B类继承A类，必须复写test方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类继承父类如果不复写父类的抽象方法，要想不出错，这个子类也必须是抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//B类基础A类，此时B类也是抽象类，这个时候就可以不重写A类的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-抽象类的好处"><a href="#3-2-抽象类的好处" class="headerlink" title="3.2 抽象类的好处"></a>3.2 抽象类的好处</h3><p>接下来我们用一个案例来说一下抽象类的应用场景和好处。需求如下图所示</p><p><img src="/assets/1665028790780.png" alt="1665028790780"></p><p>分析需求发现，该案例中猫和狗都有名字这个属性，也都有叫这个行为，所以我们可以将共性的内容抽取成一个父类，Animal类，但是由于猫和狗叫的声音不一样，于是我们在Animal类中将叫的行为写成抽象的。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//动物叫的行为：不具体，是抽象的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着写一个Animal的子类，Dog类。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;汪汪汪的叫~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，再写一个Animal的子类，Cat类。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;喵喵喵的叫~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，再写一个测试类，Test类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握抽象类的使用场景和好处.</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        a.cry();<span class="hljs-comment">//这时执行的是Dog类的cry方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再学一招，假设现在系统有需要加一个Pig类，也有叫的行为，这时候也很容易原有功能扩展。只需要让Pig类继承Animal，复写cry方法就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;嚯嚯嚯~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，创建对象时，让Animal接收Pig，就可以执行Pig的cry方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握抽象类的使用场景和好处.</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>();<br>        a.cry();<span class="hljs-comment">//这时执行的是Pig类的cry方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上所述，我们总结一下抽象类的使用场景和好处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>用抽象类可以把父类中相同的代码，包括方法声明都抽取到父类，这样能更好的支持多态，一提高代码的灵活性。<br><br><span class="hljs-number">2.</span>反过来用，我们不知道系统未来具体的业务实现时，我们可以先定义抽象类，将来让子类去实现，以方便系统的扩展。<br></code></pre></td></tr></table></figure><h3 id="3-3-模板方法模式"><a href="#3-3-模板方法模式" class="headerlink" title="3.3 模板方法模式"></a>3.3 模板方法模式</h3><p>学习完抽象类的语法之后，接下来，我们学习一种利用抽象类实现的一种设计模式。先解释下一什么是设计模式？<strong>设计模式是解决某一类问题的最优方案</strong>。</p><p>设计模式在一些源码中经常会出现，还有以后面试的时候偶尔也会被问到，所以在合适的机会，就会给同学们介绍一下设计模式的知识。</p><p>那模板方法设计模式解决什么问题呢？<strong>模板方法模式主要解决方法中存在重复代码的问题</strong></p><p>比如A类和B类都有sing()方法，sing()方法的开头和结尾都是一样的，只是中间一段内容不一样。此时A类和B类的sing()方法中就存在一些相同的代码。</p><p><img src="/assets/1665058597483.png" alt="1665058597483"></p><p>怎么解决上面的重复代码问题呢？ 我们可以写一个抽象类C类，在C类中写一个doSing()的抽象方法。再写一个sing()方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模板方法设计模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>    <span class="hljs-comment">// 模板方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;唱一首你喜欢的歌：&quot;</span>);<br><br>        doSing();<br><br>        System.out.println(<span class="hljs-string">&quot;唱完了!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSing</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，写一个A类继承C类，复写doSing()方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是一只小小小小鸟，想要飞就能飞的高~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，再写一个B类继承C类，也复写doSing()方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我们一起学猫叫，喵喵喵喵喵喵喵~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，再写一个测试类Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：搞清楚模板方法设计模式能解决什么问题，以及怎么写。</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.sing();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上所述：模板方法模式解决了多个子类中有相同代码的问题。具体实现步骤如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第<span class="hljs-number">1</span>步：定义一个抽象类，把子类中相同的代码写成一个模板方法。<br>第<span class="hljs-number">2</span>步：把模板方法中不能确定的代码写成抽象方法，并在模板方法中调用。<br>第<span class="hljs-number">3</span>步：子类继承抽象类，只需要父类抽象方法就可以了。<br></code></pre></td></tr></table></figure><h2 id="四、接口"><a href="#四、接口" class="headerlink" title="四、接口"></a>四、接口</h2><p>同学们，接下来我们学习一个比抽象类抽象得更加彻底的一种特殊结构，叫做接口。在学习接口是什么之前，有一些事情需要给大家交代一下：Java已经发展了20多年了，在发展的过程中不同JDK版本的接口也有一些变化，所以我们在学习接口时，先以老版本为基础，学习完老版本接口的特性之后，再顺带着了解一些新版本接口的特性就可以了。</p><h3 id="4-1-认识接口"><a href="#4-1-认识接口" class="headerlink" title="4.1 认识接口"></a>4.1 认识接口</h3><p>我们先来认识一下接口？Java提供了一个关键字interface，用这个关键字来定义接口这种特殊结构。格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> interface 接口名&#123;<br>    <span class="hljs-comment">//成员变量（常量）</span><br>    <span class="hljs-comment">//成员方法（抽象方法）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>按照接口的格式，我们定义一个接口看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//这里public static final可以加，可以不加。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马程序员&quot;</span>;<br>    <br>    <span class="hljs-comment">//这里的public abstract可以加，可以不加。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好A接口之后，在写一个测试类，用一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//打印A接口中的常量</span><br>        System.out.println(A.SCHOOL_NAME);<br>        <br>        <span class="hljs-comment">//接口是不能创建对象的</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现定义好接口之后，是不能创建对象的。那接口到底什么使用呢？需要我注意下面两点</p><ul><li><strong>接口是用来被类实现（implements）的，我们称之为实现类。</strong></li><li><strong>一个类是可以实现多个接口的（接口可以理解成干爹），类实现接口必须重写所有接口的全部抽象方法，否则这个类也必须是抽象类</strong></li></ul><p>比如，再定义一个B接口，里面有两个方法testb1()，testb2()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testb1</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testb2</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，再定义一个C接口，里面有两个方法testc1(), testc2()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testc1</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testc2</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，再写一个实现类D，同时实现B接口和C接口，此时就需要复写四个方法，如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">B</span>, C&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testb1</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testb2</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testc1</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testc2</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，定义一个测试类Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识接口。</span><br>        System.out.println(A.SCHOOL_NAME);<br><br>        <span class="hljs-comment">// A a = new A();</span><br>        <span class="hljs-type">D</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-接口的好处"><a href="#4-2-接口的好处" class="headerlink" title="4.2 接口的好处"></a>4.2 接口的好处</h3><p>同学们，刚刚上面我们学习了什么是接口，以及接口的基本特点。那使用接口到底有什么好处呢？主要有下面的两点</p><ul><li>弥补了类单继承的不足，一个类同时可以实现多个接口。</li><li>让程序可以面向接口编程，这样程序员可以灵活方便的切换各种业务实现。</li></ul><p>我们看一个案例演示，假设有一个Studnet学生类，还有一个Driver司机的接口，还有一个Singer歌手的接口。</p><p>现在要写一个A类，想让他既是学生，偶然也是司机能够开车，偶尔也是歌手能够唱歌。那我们代码就可以这样设计，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Driver</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Singer</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//A类是Student的子类，同时也实现了Dirver接口和Singer接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Driver</span>, Singer&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//想唱歌的时候，A类对象就表现为Singer类型</span><br>        <span class="hljs-type">Singer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        s.sing();<br><br>        <span class="hljs-comment">//想开车的时候，A类对象就表现为Driver类型</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        d.drive();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上所述：接口弥补了单继承的不足，同时可以轻松实现在多种业务场景之间的切换。</p><h3 id="4-3-接口的案例"><a href="#4-3-接口的案例" class="headerlink" title="4.3 接口的案例"></a>4.3 接口的案例</h3><p>各位同学，关于接口的特点以及接口的好处我们都已经学习完了。接下来我们做一个案例，先来看一下案例需求.</p><p><img src="/assets/1665102202635.png" alt="1665102202635"></p><p>首先我们写一个学生类，用来描述学生的相关信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，写一个StudentOperator接口，表示学生信息管理系统的两个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentOperator</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllInfo</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAverageScore</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，写一个StudentOperator接口的实现类StudentOperatorImpl1，采用第1套方案对业务进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentOperatorImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentOperator</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllInfo</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;----------全班全部学生信息如下--------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> students.get(i);<br>            System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + s.getName() + <span class="hljs-string">&quot;, 性别：&quot;</span> + s.getSex() + <span class="hljs-string">&quot;, 成绩：&quot;</span> + s.getScore());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAverageScore</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">allScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> students.get(i);<br>            allScore += s.getScore();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;平均分：&quot;</span> + (allScore) / students.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，再写一个StudentOperator接口的实现类StudentOperatorImpl2，采用第2套方案对业务进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentOperatorImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentOperator</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllInfo</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;----------全班全部学生信息如下--------------&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> students.get(i);<br>            System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + s.getName() + <span class="hljs-string">&quot;, 性别：&quot;</span> + s.getSex() + <span class="hljs-string">&quot;, 成绩：&quot;</span> + s.getScore());<br>            <span class="hljs-keyword">if</span>(s.getSex() == <span class="hljs-string">&#x27;男&#x27;</span>)&#123;<br>                count1++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                count2 ++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;男生人数是：&quot;</span> + count1  + <span class="hljs-string">&quot;, 女士人数是：&quot;</span> + count2);<br>        System.out.println(<span class="hljs-string">&quot;班级总人数是：&quot;</span> + students.size());<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAverageScore</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">allScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> students.get(<span class="hljs-number">0</span>).getScore();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> students.get(<span class="hljs-number">0</span>).getScore();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> students.get(i);<br>            <span class="hljs-keyword">if</span>(s.getScore() &gt; max) max = s.getScore();<br>            <span class="hljs-keyword">if</span>(s.getScore() &lt; min) min = s.getScore();<br>            allScore += s.getScore();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;学生的最高分是：&quot;</span> + max);<br>        System.out.println(<span class="hljs-string">&quot;学生的最低分是：&quot;</span> + min);<br>        System.out.println(<span class="hljs-string">&quot;平均分：&quot;</span> + (allScore - max - min) / (students.size() - <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再写一个班级管理类ClassManager，在班级管理类中使用StudentOperator的实现类StudentOperatorImpl1对学生进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassManager</span> &#123;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">StudentOperator</span> <span class="hljs-variable">studentOperator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentOperatorImpl1</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassManager</span><span class="hljs-params">()</span>&#123;<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">99</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;古力娜扎&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">100</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马尔扎哈&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">80</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;卡尔扎巴&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">60</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 打印全班全部学生的信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        studentOperator.printAllInfo(students);<br>    &#125;<br><br>    <span class="hljs-comment">// 打印全班全部学生的平均分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printScore</span><span class="hljs-params">()</span>&#123;<br>        studentOperator.printAverageScore(students);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，再写一个测试类Test，在测试类中使用ClassMananger完成班级学生信息的管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成班级学生信息管理的案例。</span><br>        <span class="hljs-type">ClassManager</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassManager</span>();<br>        clazz.printInfo();<br>        clazz.printScore();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果想切换班级管理系统的业务功能，随时可以将StudentOperatorImpl1切换为StudentOperatorImpl2。自己试试</p><h3 id="4-4-接口JDK8的新特性"><a href="#4-4-接口JDK8的新特性" class="headerlink" title="4.4 接口JDK8的新特性"></a>4.4 接口JDK8的新特性</h3><p>各位同学，对于接口最常见的特性我们都学习完了。随着JDK版本的升级，在JDK8版本以后接口中能够定义的成员也做了一些更新，从JDK8开始，接口中新增的三种方法形式。</p><p>我们看一下这三种方法分别有什么特点？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、默认方法：必须使用default修饰，默认会被public修饰</span><br><span class="hljs-comment">     * 实例方法：对象的方法，必须使用实现类的对象来访问。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===默认方法==&quot;</span>);<br>        test2();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2、私有方法：必须使用private修饰。(JDK 9开始才支持的)</span><br><span class="hljs-comment">     *   实例方法：对象的方法。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===私有方法==&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3、静态方法：必须使用static修饰，默认会被public修饰</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==静态方法==&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>;<br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>;<br>     <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br><br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们写一个B类，实现A接口。B类作为A接口的实现类，只需要重写抽象方法就尅了，对于默认方法不需要子类重写。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，写一个测试类，观察接口中的三种方法，是如何调用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握接口新增的三种方法形式</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.test1();<span class="hljs-comment">//默认方法使用对象调用</span><br>        <span class="hljs-comment">// b.test2();//A接口中的私有方法，B类调用不了</span><br>        A.test3();<span class="hljs-comment">//静态方法，使用接口名调用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上所述：JDK8对接口新增的特性，有利于对程序进行扩展。</p><h3 id="4-5-接口的其他细节"><a href="#4-5-接口的其他细节" class="headerlink" title="4.5 接口的其他细节"></a>4.5 接口的其他细节</h3><p>最后，给同学们介绍一下使用接口的其他细节，或者说注意事项：</p><ul><li>一个接口可以继承多个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：理解接口的多继承。</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span>&#123;&#125;<br><br><span class="hljs-comment">//比如：D接口继承C、B、A</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C</span>, B, A&#123;<br><br>&#125;<br><br><span class="hljs-comment">//E类在实现D接口时，必须重写D接口、以及其父类中的所有抽象方法。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">D</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口除了上面的多继承特点之外，在多实现、继承和实现并存时，有可能出现方法名冲突的问题，需要了解怎么解决（仅仅只是了解一下，实际上工作中几乎不会出现这种情况）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>一个接口继承多个接口，如果多个接口中存在相同的方法声明，则此时不支持多继承<br><span class="hljs-number">2.</span>一个类实现多个接口，如果多个接口中存在相同的方法声明，则此时不支持多实现<br><span class="hljs-number">3.</span>一个类继承了父类，又同时实现了接口，父类中和接口中有同名的默认方法，实现类会有限使用父类的方法<br><span class="hljs-number">4.</span>一个类实现类多个接口，多个接口中有同名的默认方法，则这个类必须重写该方法。<br></code></pre></td></tr></table></figure><p>综上所述：一个接口可以继承多个接口，接口同时也可以被类实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10面型对象高级</title>
    <link href="/2023/12/01/day10-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/12/01/day10-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="10——面向对象高级"><a href="#10——面向对象高级" class="headerlink" title="10——面向对象高级"></a>10——面向对象高级</h3><p>各位同学，接下来的三天课程中，我们继续学习面向对象的相关课程。面向对象是写Java程序的核心套路，如何你不懂面向对象，那就相当于Java你白学了。所以在接下来的三天时间里，各位同学也需要克服重重困难好好学习。</p><p>前面我们说过面向对象最核心的套路是：<strong>设计对象来处理数据，解决问题。</strong> 如果你把面向对象高级这一部分课程学好，你设计出来的对象将更加好用。</p><p>在正式学习面向对象高级课程之前，我给大家提一些学习上的建议。目前我们学习的面向对象高级部分的知识点，就像一个一个的螺丝钉，在学习过程中你可能并不知道这些螺丝钉是用在哪里的，解决的什么问题。必须等这些内容都学习完之后，才能知道用这些螺丝钉可以用来搞飞机、造航母、造火箭。</p><p><img src="/assets/1663976726206.png" alt="1663976726206"></p><p>所以，现阶段我们在学习过程中，主要关注下面几点就可以了。等整个基础课程学习完之后，再慢慢感在到哪里用。</p><p><img src="/assets/1663976889900.png" alt="1663976889900"></p><h2 id="一、静态"><a href="#一、静态" class="headerlink" title="一、静态"></a>一、静态</h2><p>接下来，我们学习一下面向对象编程中很常见的一个关键字static.</p><p>static读作静态，可以用来修饰成员变量，也能修饰成员方法。我们先来学习static修饰成员变量。</p><h3 id="1-1-static修饰成员变量"><a href="#1-1-static修饰成员变量" class="headerlink" title="1.1 static修饰成员变量"></a>1.1 static修饰成员变量</h3><p>Java中的成员变量按照有无static修饰分为两种：<strong>类变量、实例变量</strong>。它们的区别如下图所示：</p><p><img src="/assets/1663977705413.png" alt="1663977705413"></p><p>由于静态变量是属于类的，只需要通过类名就可以调用：**<code>类名.静态变量</code>**</p><p>实例变量是属于对象的，需要通过对象才能调用：**<code>对象.实例变量</code>**</p><ul><li>下面是代码演示（注意静态变量，和实例变量是如何调用的）</li></ul><p><img src="/assets/1663978511018.png" alt="1663978511018"></p><p>为了让大家对于这两种成员变量的执行过程理解更清楚一点，在这里给大家在啰嗦几句，我们来看一下上面代码的内存原理。</p><p><img src="/assets/1663978808670.png" alt="1663978808670"></p><ul><li><strong>最后总结一下</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-number">1.</span>类变量：属于类，在内存中只有一份，用类名调用<br>- <span class="hljs-number">2.</span>实例变量：属于对象，每一个对象都有一份，用对象调用<br></code></pre></td></tr></table></figure><h3 id="1-2-static修饰成员变量的应用场景"><a href="#1-2-static修饰成员变量的应用场景" class="headerlink" title="1.2 static修饰成员变量的应用场景"></a>1.2 static修饰成员变量的应用场景</h3><p>学习完static修饰成员变量的基本使用之后，接下来我们学习一下static修饰成员变量在实际工作中的应用。</p><p>在实际开发中，如果某个数据只需要一份，且希望能够被共享（访问、修改），则该数据可以定义成类变量来记住。</p><blockquote><p><strong>我们看一个案例</strong>**</p><p>需求：系统启动后，要求用于类可以记住自己创建了多少个用户对象。**</p></blockquote><ul><li>第一步：先定义一个<code>User</code>类，在用户类中定义一个static修饰的变量，用来表示在线人数；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-comment">//每次创建对象时，number自增一下</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        User.number++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二步：再写一个测试类，再测试类中创建4个User对象，再打印number的值，观察number的值是否再自增。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建4个对象</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(); <br>        <br>        <span class="hljs-comment">//查看系统创建了多少个User对象</span><br>        System.out.println(<span class="hljs-string">&quot;系统创建的User对象个数：&quot;</span>+User.number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上面的代码，查看执行结果是：**<code>系统创建的User对象个数：4</code>**</p><h3 id="1-3-static修饰成员方法"><a href="#1-3-static修饰成员方法" class="headerlink" title="1.3 static修饰成员方法"></a>1.3 static修饰成员方法</h3><p>各位同学，学习完static修饰成员变量之后，接下来我们学习static修饰成员方法。成员方法根据有无static也分为两类：<strong>类方法、实例方法</strong></p><p><img src="/assets/1664004813041.png" alt="1664004813041"></p><blockquote><p>有static修饰的方法，是属于类的，称为<strong>类方法</strong>；调用时直接用类名调用即可。</p></blockquote><blockquote><p>无static修饰的方法，是属于对象的，称为实例方法；调用时，需要使用对象调用。</p></blockquote><p>我们看一个案例，演示类方法、实例方法的基本使用</p><ul><li>先定义一个Student类，在类中定义一个类方法、定义一个实例方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-type">double</span> score;<br>    <br>    <span class="hljs-comment">//类方法：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> printHelloWorld&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//实例方法（对象的方法）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPass</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//打印成绩是否合格</span><br>        System.out.println(score&gt;=<span class="hljs-number">60</span>?<span class="hljs-string">&quot;成绩合格&quot;</span>:<span class="hljs-string">&quot;成绩不合格&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在定义一个测试类，注意类方法、对象方法调用的区别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.调用Student类中的类方法</span><br>        Student.printHelloWorld();<br>        <br>        <span class="hljs-comment">//2.调用Student类中的实例方法</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();        <br>        s.printPass();<br>        <br>        <span class="hljs-comment">//使用对象也能调用类方法【不推荐，IDEA连提示都不给你，你就别这么用了】</span><br>        s.printHelloWorld();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>搞清楚类方法和实例方法如何调用之后，接下来再啰嗦几句，和同学们聊一聊static修饰成员方法的内存原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>类方法：<span class="hljs-keyword">static</span>修饰的方法，可以被类名调用，是因为它是随着类的加载而加载的；<br> 所以类名直接就可以找到<span class="hljs-keyword">static</span>修饰的方法<br> <br><span class="hljs-number">2.</span>实例方法：非<span class="hljs-keyword">static</span>修饰的方法，需要创建对象后才能调用，是因为实例方法中可能会访问实例变量，而实例变量需要创建对象后才存在。<br>  所以实例方法，必须创建对象后才能调用。<br></code></pre></td></tr></table></figure><p><img src="/assets/1664005554987.png" alt="1664005554987"></p><p>关于static修饰成员变量、和静态修饰成员方法这两种用法，到这里就学习完了。</p><h3 id="1-4-工具类"><a href="#1-4-工具类" class="headerlink" title="1.4 工具类"></a>1.4 工具类</h3><p>学习完static修饰方法之后，我们讲一个有关类方法的应用知识，叫做工具类。</p><p>如果一个类中的方法全都是静态的，那么这个类中的方法就全都可以被类名直接调用，由于调用起来非常方便，就像一个工具一下，所以把这样的类就叫做工具类。</p><ul><li>我们写一个生成验证码的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUtils</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">//1.定义一个字符串，用来记录产生的验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <br>        <span class="hljs-comment">//2.验证码是由所有的大写字母、小写字母或者数字字符组成</span><br>        <span class="hljs-comment">//这里先把所有的字符写成一个字符串，一会从字符串中随机找字符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKMNOPQRSTUVWXYZ&quot;</span>;<br>        <br>        <span class="hljs-comment">//3.循环n次，产生n个索引,再通过索引获取字符</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(data.length());<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> data.charAt(index);<br>            <span class="hljs-comment">//4.把获取到的字符，拼接到code验证码字符串上。</span><br>            code+=ch;<br>        &#125;<br>        <br>        <span class="hljs-comment">//最后返回code,code的值就是验证码</span><br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接着可以在任何位置调用<code>MyUtils</code>的<code>createCOde()方法</code>产生任意个数的验证码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//比如这是一个登录界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(MyUtils.createCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//比如这是一个注册界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">registerDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(MyUtils.createCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具类的使用就是这样子的，学会了吗？</p><blockquote><p>在补充一点，工具类里的方法全都是静态的，推荐用类名调用为了防止使用者用对象调用。我们可以把工具类的构造方法私有化。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUtils</span>&#123;<br>    <span class="hljs-comment">//私有化构造方法：这样别人就不能使用构造方法new对象了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MyUtils</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">//类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>       ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-static的注意事项"><a href="#1-5-static的注意事项" class="headerlink" title="1.5 static的注意事项"></a>1.5 static的注意事项</h3><p>各位同学，到现在在我们已经学会了static修饰的变量、方法如何调用了。但是有一些注意事项还是需要给大家说明一下，目的是让大家知道，使用static写代码时，如果出错了，要知道为什么错、如何改正。</p><p><img src="/assets/1664007168869.png" alt="1664007168869"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">static</span> String schoolName; <span class="hljs-comment">// 类变量</span><br>    <span class="hljs-type">double</span> score; <span class="hljs-comment">// 实例变量</span><br><br>    <span class="hljs-comment">// 1、类方法中可以直接访问类的成员，不可以直接访问实例成员。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHelloWorld</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 注意：同一个类中，访问类成员，可以省略类名不写。</span><br>        schoolName = <span class="hljs-string">&quot;黑马&quot;</span>;<br>        printHelloWorld2();<br><br>        System.out.println(score); <span class="hljs-comment">// 报错的</span><br>        printPass(); <span class="hljs-comment">// 报错的</span><br><br>        ystem.out.println(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 报错的</span><br>    &#125;<br>    <br><span class="hljs-comment">// 类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHelloWorld2</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">// 实例方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPass2</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">// 实例方法</span><br>    <span class="hljs-comment">// 2、实例方法中既可以直接访问类成员，也可以直接访问实例成员。</span><br>    <span class="hljs-comment">// 3、实例方法中可以出现this关键字，类方法中不可以出现this关键字的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPass</span><span class="hljs-params">()</span>&#123;<br>        schoolName = <span class="hljs-string">&quot;黑马2&quot;</span>; <span class="hljs-comment">//对的</span><br>        printHelloWorld2(); <span class="hljs-comment">//对的</span><br><br>        System.out.println(score); <span class="hljs-comment">//对的</span><br>        printPass2(); <span class="hljs-comment">//对的</span><br><br>        System.out.println(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//对的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-static应用（代码块）"><a href="#1-6-static应用（代码块）" class="headerlink" title="1.6 static应用（代码块）"></a>1.6 static应用（代码块）</h3><p>各位同学，接下来我们再补充讲解一个知识点，叫代码块；代码块根据有无static修饰分为两种：静态代码块、实例代码块</p><blockquote><p><strong>我们先类学习静态代码块：</strong></p></blockquote><p><img src="/assets/1664007549583.png" alt="1664007549583"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">schoolName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马&quot;</span>;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块执行了~~&quot;</span>);<br>        schoolName = <span class="hljs-string">&quot;黑马&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代码块不需要创建对象就能够执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识两种代码块，了解他们的特点和基本作用。</span><br>        System.out.println(Student.number);<br>        System.out.println(Student.number);<br>        System.out.println(Student.number);<br><br>        System.out.println(Student.schoolName); <span class="hljs-comment">// 黑马</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面代码时，发现没有创建对象，静态代码块就已经执行了。</p><p><img src="/assets/1664007747151.png" alt="1664007747151"></p><p>关于静态代码块重点注意：<strong>静态代码块，随着类的加载而执行，而且只执行一次。</strong></p><blockquote><p><strong>再来学习一下实例代码块</strong></p></blockquote><p><img src="/assets/1664008215853.png" alt="1664008215853"></p><p>实例代码块的作用和构造器的作用是一样的，用来给对象初始化值；而且每次创建对象之前都会先执行实例代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">//实例变量</span><br><span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//实例代码块：实例代码块会执行在每一个构造方法之前</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;实例代码块执行了~~&quot;</span>);<br>        age = <span class="hljs-number">18</span>;<br>        System.out.println(<span class="hljs-string">&quot;有人创建了对象：&quot;</span> + <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参数构造器执行了~~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;有参数构造器执行了~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来在测试类中进行测试，观察创建对象时，实例代码块是否先执行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(s1.age);<br>        System.out.println(s2.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于实例代码块重点注意：<strong>实例代码块每次创建对象之前都会执行一次</strong></p><h3 id="1-7-static应用（单例设计模式）"><a href="#1-7-static应用（单例设计模式）" class="headerlink" title="1.7 static应用（单例设计模式）"></a>1.7 static应用（单例设计模式）</h3><p>各位同学，关于static的应用我们再补充一个使用的技巧，叫做单例设计模式。</p><p>所谓设计模式指的是，一类问题可能会有多种解决方案，而设计模式是在编程实践中，多种方案中的一种最优方案。</p><p>关于静态的使用到这里，我们就学习完了。</p><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h3 id="2-1-继承快速入门"><a href="#2-1-继承快速入门" class="headerlink" title="2.1 继承快速入门"></a>2.1 继承快速入门</h3><p>各位同学，我们继续学习面向对象相关内容。面向对象编程之所以能够能够被广大开发者认可，有一个非常重要的原因，是因为它有三大特征，继承、封装和多态。封装我们在基础班已经学过了，接下来我们学习一下继承。</p><p><img src="/assets/1664009338913.png" alt="1664009338913"></p><p>接下来，我们演示一下使用继承来编写代码，注意观察继承的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//公开的成员</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===print1===&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//私有的成员</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===print2===&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，写一个B类，让B类继承A类。在继承A类的同时，B类中新增一个方法print3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//由于i和print1是属于父类A的公有成员，在子类中可以直接被使用</span><br>        System.out.println(i); <span class="hljs-comment">//正确</span><br>        print1(); <span class="hljs-comment">//正确</span><br>        <br>        <span class="hljs-comment">//由于j和print2是属于父类A的私有成员，在子类中不可以被使用</span><br>        System.out.println(j); <span class="hljs-comment">//错误</span><br>        print2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们再演示一下，创建B类对象，能否调用父类A的成员。再写一个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//父类公有成员，子类对象是可以调用的</span><br>        System.out.println(i); <span class="hljs-comment">//正确</span><br>        b.print1();<br>        <br>        <span class="hljs-comment">//父类私有成员，子类对象时不可以调用的</span><br>        System.out.println(j); <span class="hljs-comment">//错误</span><br>        b.print2(); <span class="hljs-comment">//错误</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，关于继承的基本使用我们就算学会了。为了让大家对继承有更深入的认识，我们来看看继承的内存原理。</p><p>这里我们只需要关注一点：<strong>子类对象实际上是由子、父类两张设计图共同创建出来的。</strong></p><p>所以，在子类对象的空间中，既有本类的成员，也有父类的成员。但是子类只能调用父类公有的成员。</p><p><img src="/assets/1664010590126.png" alt="1664010590126"></p><h3 id="2-2-继承的好处"><a href="#2-2-继承的好处" class="headerlink" title="2.2 继承的好处"></a>2.2 继承的好处</h3><p>各位同学，学习完继承的快速入门之后，接下来我们学习一下继承的好处，以及它的应用场景。</p><p>我们通过一个案例来学习</p><p><img src="/assets/1664010915416.png" alt="1664010915416"></p><p>观察代码发现，我们会发现Teacher类中和Consultant类中有相同的代码；其实像这种两个类中有相同代码时，没必要重复写。</p><p>我们可以把重复的代码提取出来，作为父类，然后让其他类继承父类就可以了，这样可以提高代码的复用性。改造后的代码如下：</p><p><img src="/assets/1664011136599.png" alt="1664011136599"></p><p>接下来使用继承来完成上面的案例，这里只演示People类和Teacher类，然后你尝试自己完成Consultant类。</p><ul><li>先写一个父类 People，用来设计Teacher和Consultant公有的成员。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>再写两个子类Teacher继承People类，同时在子类中加上自己特有的成员。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">private</span> String skill; <span class="hljs-comment">//技能</span><br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSkill</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> skill;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSkill</span><span class="hljs-params">(String skill)</span>&#123;<br>        <span class="hljs-built_in">this</span>.skill=skill;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(getName()+<span class="hljs-string">&quot;具备的技能：&quot;</span>+skill);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最后再写一个测试类，再测试类中创建Teacher、Consultant对象，并调用方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：搞清楚继承的好处。</span><br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        t.setName(<span class="hljs-string">&quot;播仔&quot;</span>);<br>        t.setSkill(<span class="hljs-string">&quot;Java、Spring&quot;</span>);<br>        System.out.println(t.getName());<br>        System.out.println(t.getSkill());<br>        t.printInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行代码，打印结果如下：</p><p><img src="/assets/1664011737379.png" alt="1664011737379"></p><p>关于继承的好处我们只需要记住：<strong>继承可以提高代码的复用性</strong></p><h3 id="2-3-权限修饰符"><a href="#2-3-权限修饰符" class="headerlink" title="2.3 权限修饰符"></a>2.3 权限修饰符</h3><p>各位同学，在刚才使用继承编写的代码中我们有用到两个权限修饰符，一个是public（公有的）、一个是private（私有的），实际上还有两个权限修饰符，一个是protected（受保护的）、一个是缺省的（不写任何修饰符）。</p><p>接下来我们就学习一下这四个权限修饰符分别有什么作用。</p><blockquote><p><strong>什么是权限修饰符呢？</strong></p><p>权限修饰符是用来限制类的成员（成员变量、成员方法、构造器…）能够被访问的范围。</p></blockquote><p>每一种权限修饰符能够被访问的范围如下</p><p><img src="/assets/1664012151488.png" alt="1664012151488"></p><p>下面我们用代码演示一下，在本类中可以访问到哪些权限修饰的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-comment">// 1、私有:只能在本类中访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==private==&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2、缺省：本类，同一个包下的类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==缺省==&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3、protected: 本类，同一个包下的类，任意包下的子类</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">protectedMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==protected==&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 4、public： 本类，同一个包下的类，任意包下的子类，任意包下的任意类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publicMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==public==&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//在本类中，所有权限都可以被访问到</span><br>        privateMethod(); <span class="hljs-comment">//正确</span><br>        method(); <span class="hljs-comment">//正确</span><br>        protectedMethod(); <span class="hljs-comment">//正确</span><br>        publicMethod(); <span class="hljs-comment">//正确</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，在和Fu类同一个包下，创建一个测试类Demo，演示同一个包下可以访问到哪些权限修饰的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>();<br>        <span class="hljs-comment">// f.privateMethod();//私有方法无法使用</span><br>        f.method();<br>        f.protectedMethod();<br>        f.publicMethod();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，在另一个包下创建一个Fu类的子类，演示不同包下的子类中可以访问哪些权限修饰的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-comment">//在不同包下的子类中，只能访问到public、protected修饰的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// privateMethod(); // 报错</span><br>        <span class="hljs-comment">// method(); // 报错</span><br>        protectedMethod();<span class="hljs-comment">//正确</span><br>        publicMethod();<span class="hljs-comment">//正确</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，在和Fu类不同的包下，创建一个测试类Demo2，演示一下不同包的无关类，能访问到哪些权限修饰的方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>();<br>        <span class="hljs-comment">// f.privateMethod(); // 报错</span><br>        <span class="hljs-comment">// f.method();  //报错</span><br>        <span class="hljs-comment">// f.protecedMethod();//报错</span><br>        f.publicMethod();<span class="hljs-comment">//正确</span><br><br>        <span class="hljs-type">Zi</span> <span class="hljs-variable">zi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>        <span class="hljs-comment">// zi.protectedMethod();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-单继承、Object"><a href="#2-4-单继承、Object" class="headerlink" title="2.4 单继承、Object"></a>2.4 单继承、Object</h3><p>刚才我们写的代码中，都是一个子类继承一个父类，那么有同学问到，一个子类可以继承多个父类吗？ </p><p><strong>Java语言只支持单继承，不支持多继承，但是可以多层继承</strong>。就像家族里儿子、爸爸和爷爷的关系一样：一个儿子只能有一个爸爸，不能有多个爸爸，但是爸爸也是有爸爸的。</p><p><img src="/assets/1664016601977.png" alt="1664016601977"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握继承的两个注意事项事项。</span><br>        <span class="hljs-comment">// 1、Java是单继承的：一个类只能继承一个直接父类；</span><br>        <span class="hljs-comment">// 2、Object类是Java中所有类的祖宗。</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        System.out.println(list.toString());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125; <span class="hljs-comment">//extends Object&#123;&#125;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-comment">// class C extends B , A&#123;&#125; // 报错</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-方法重写"><a href="#2-5-方法重写" class="headerlink" title="2.5 方法重写"></a>2.5 方法重写</h3><p>各位同学，学习完继承之后，在继承的基础之上还有一个很重要的现象需要给大家说一下。</p><p>叫做方法重写。为了让大家能够掌握方法重写，我们先认识什么是方法重写，再说一下方法的应用场景。</p><blockquote><p><strong>什么是方法重写</strong></p></blockquote><p>当子类觉得父类方法不好用，或者无法满足父类需求时，子类可以重写一个方法名称、参数列表一样的方法，去覆盖父类的这个方法，这就是方法重写。</p><p><strong>注意：重写后，方法的访问遵循就近原则</strong>。下面我们看一个代码演示</p><p>写一个A类作为父类，定义两个方法print1和print2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;111111&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再写一个B类作为A类的子类，重写print1和print2方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">// 方法重写</span><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 安全，可读性好</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;666&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 方法重写</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;666666&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，在测试类中创建B类对象，调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识方法重写，掌握方法重写的常见应用场景。</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.print1();<br>        b.print2(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行代码，我们发现真正执行的是B类中的print1和print2方法</p><p><img src="/assets/1664149862001.png" alt="1664149862001"></p><p>知道什么是方法重写之后，还有一些注意事项，需要和大家分享一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-number">1.</span>重写的方法上面，可以加一个注解<span class="hljs-meta">@Override</span>,用于标注这个方法是复写的父类方法<br>- <span class="hljs-number">2.</span>子类复写父类方法时，访问权限必须大于或者等于父类方法的权限<br><span class="hljs-keyword">public</span> &gt; <span class="hljs-keyword">protected</span> &gt; 缺省<br>- <span class="hljs-number">3.</span> 重写的方法返回值类型，必须与被重写的方法返回值类型一样，或者范围更小<br>- <span class="hljs-number">4.</span> 私有方法、静态方法不能被重写，如果重写会报错。<br></code></pre></td></tr></table></figure><p>关于这些注意事项，同学们其实只需要了解一下就可以了。实际上我们实际写代码时，只要和父类写的一样就可以（ 总结起来就8个字：<strong>声明不变，重新实现</strong>）</p><blockquote><p><strong>方法重写的应用场景</strong></p></blockquote><p>学习完方法重写之后，接下来，我们还需要大家掌握方法重写，在实际中的应用场景。方法重写的应用场景之一就是：<strong>子类重写Object的toString()方法，以便返回对象的内容。</strong></p><p>比如：有一个Student类，这个类会默认继承Object类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实Object类中有一个toString()方法，直接通过Student对象调用Object的toString()方法，会得到对象的地址值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;播妞&quot;</span>, <span class="hljs-number">19</span>);<br>        <span class="hljs-comment">// System.out.println(s.toString());</span><br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/1664150713665.png" alt="1664150713665"></p><p>但是，此时不想调用父类Object的toString()方法，那就可以在Student类中重新写一个toSting()方法，用于返回对象的属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d12_extends_override;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新运行测试类，结果如下</p><p><img src="/assets/1664150752636.png" alt="1664150752636"></p><p>好了，到这里方法什么是方法重写，以及方法重写的应用场景我们就学习完了。</p><h3 id="2-6-子类中访问成员的特点"><a href="#2-6-子类中访问成员的特点" class="headerlink" title="2.6 子类中访问成员的特点"></a>2.6 子类中访问成员的特点</h3><p>各位同学，刚才我们已经学习了继承，我们发现继承至少涉及到两个类，而每一个类中都可能有各自的成员（成员变量、成员方法），就有可能出现子类和父类有相同成员的情况，那么在子类中访问其他成员有什么特点呢？</p><ul><li><strong>原则：在子类中访问其他成员（成员变量、成员方法），是依据就近原则的</strong></li></ul><p>定义一个父类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;父类名字&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==父类的print1方法执行==&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个子类，代码如下。有一个同名的name成员变量，有一个同名的print1成员方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Z</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">F</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;子类名称&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部名称&quot;</span>;<br>        System.out.println(name); <span class="hljs-comment">// 局部名称</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==子类的print1方法执行了=&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMethod</span><span class="hljs-params">()</span>&#123;<br>        print1(); <span class="hljs-comment">// 子类的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来写一个测试类，观察运行结果，我们发现都是调用的子类变量、子类方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握子类中访问其他成员的特点：就近原则。</span><br>        <span class="hljs-type">Z</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Z</span>();<br>        z.showName();<br>        z.showMethod();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果子类和父类出现同名变量或者方法，优先使用子类的；此时如果一定要在子类中使用父类的成员，可以加this或者super进行区分。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Z</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">F</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;子类名称&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部名称&quot;</span>;<br>        System.out.println(name); <span class="hljs-comment">// 局部名称</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">// 子类成员变量</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">// 父类的成员变量</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==子类的print1方法执行了=&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMethod</span><span class="hljs-params">()</span>&#123;<br>        print1(); <span class="hljs-comment">// 子类的</span><br>        <span class="hljs-built_in">super</span>.print1(); <span class="hljs-comment">// 父类的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-子类中访问构造器的特点"><a href="#2-7-子类中访问构造器的特点" class="headerlink" title="2.7 子类中访问构造器的特点"></a>2.7 子类中访问构造器的特点</h3><p>各位同学，我们知道一个类中可以写成员变量、成员方法，还有构造器。在继承关系下，子类访问成员变量和成员方法的特点我们已经学过了；接下来再学习子类中访问构造器的特点。</p><p>我们先认识子类构造器的语法特点，再讲一下子类构造器的应用场景</p><blockquote><p><strong>子类中访问构造器的语法规则</strong></p></blockquote><ul><li><p>首先，子类全部构造器，都会先调用父类构造器，再执行自己。</p><p>执行顺序，如下图按照① ② ③ 步骤执行：</p></li></ul><p><img src="/assets/1664160225526.png" alt="1664160225526"></p><blockquote><p><strong>子类访问构造器的应用场景</strong></p></blockquote><ul><li>如果不想使用默认的<code>super()</code>方式调用父类构造器，还可以手动使用<code>super(参数)</code>调用父类有参数构造器。</li></ul><p><img src="/assets/1664163881728.png" alt="1664163881728"></p><blockquote><p><strong>在本类中访问自己的构造方法</strong></p></blockquote><p>刚才我们学习了通过<code>super()</code>和<code>super(参数)</code>可以访问父类的构造器。有时候我们也需要访问自己类的构造器。语法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>(): 调用本类的空参数构造器<br><span class="hljs-built_in">this</span>(参数): 调用本类有参数的构造器<br></code></pre></td></tr></table></figure><p><img src="/assets/1664170865036.png" alt="1664170865036"></p><blockquote><p><strong>最后我们被this和super的用法在总结一下</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">访问本类成员：<br><span class="hljs-built_in">this</span>.成员变量<span class="hljs-comment">//访问本类成员变量</span><br><span class="hljs-built_in">this</span>.成员方法<span class="hljs-comment">//调用本类成员方法</span><br><span class="hljs-built_in">this</span>()   <span class="hljs-comment">//调用本类空参数构造器</span><br>    <span class="hljs-built_in">this</span>(参数)  <span class="hljs-comment">//调用本类有参数构造器</span><br><br>访问父类成员：<br><span class="hljs-built_in">super</span>.成员变量<span class="hljs-comment">//访问父类成员变量</span><br><span class="hljs-built_in">super</span>.成员方法<span class="hljs-comment">//调用父类成员方法</span><br><span class="hljs-built_in">super</span>()   <span class="hljs-comment">//调用父类空参数构造器</span><br>    <span class="hljs-built_in">super</span>(参数)  <span class="hljs-comment">//调用父类有参数构造器</span><br>    <br>注意：<span class="hljs-built_in">this</span>和<span class="hljs-built_in">super</span>访问构造方法，只能用到构造方法的第一句，否则会报错。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09Java基础项目</title>
    <link href="/2023/12/01/day09-Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE%EF%BC%88ATM%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
    <url>/2023/12/01/day09-Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE%EF%BC%88ATM%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="09——Java基础项目（ATM系统）"><a href="#09——Java基础项目（ATM系统）" class="headerlink" title="09——Java基础项目（ATM系统）"></a>09——Java基础项目（ATM系统）</h3><p>各位同学，恭喜大家，学完前面的课程内容之后，就算对Java语言开发程序成功入门了。接下来我们就可以使用Java语言开发一个小项目了——ATM系统。</p><h2 id="一、ATM项目介绍"><a href="#一、ATM项目介绍" class="headerlink" title="一、ATM项目介绍"></a>一、ATM项目介绍</h2><p><strong>1. ATM系统功能介绍</strong></p><p>大家都应该去过银行的ATM机上取过钱，每次取钱的时候，首先需要用户把卡插入机器，然后机器会自动读取你的卡号，由用户输入密码，如果密码校验通过，就会进入ATM机的主操作界面：<strong>有查询、取款、存款、转账等业务功能</strong>，用户选择哪个功能就执行对应预先设定好的程序。</p><p><img src="/assets/1662625958924.png" alt="1662625958924"></p><p>由于没有图形化界面编程，所以我们是做不出界面效果的，但是我们可以在控制台模拟ATM机的各项功能。</p><p>如下图所示：运行程序时，进入登录界面，在此界面可以登录、或者开户。</p><p><img src="/assets/1662626798467.png" alt="1662626798467"></p><ul><li>在登录界面，如果用户录入2就进入<strong>用户开户</strong>的功能：如下图所示</li></ul><p><img src="/assets/1662626997850.png" alt="1662626997850"></p><ul><li>在登录界面，如果用户录入1就进入<strong>用户登录</strong>的功能：如下图所示：</li></ul><p><img src="/assets/1662627257875.png" alt="1662627257875"></p><p>各位同学，你可能会觉得这个案例功能怎么这么多啊！ 太复杂了，其实也没你想得那么复杂。接下来，我将手把手带领大家把这个ATM系统完成。</p><p><strong>2. ATM系统中我们会用到哪些技术呢？</strong></p><p>如下图所示：该项目涵盖了我们前面所学习的所有知识点，包括面向对象编程、集合容器的使用、流程控制、常用的API（比如String的运用）等。</p><p><img src="/assets/1662627473765.png" alt="1662627473765"></p><p><strong>3. 完成ATM系统，我们能收获什么</strong></p><p><img src="/assets/1662628227117.png" alt="1662628227117"></p><h2 id="二、项目架构搭建、欢迎界面设计"><a href="#二、项目架构搭建、欢迎界面设计" class="headerlink" title="二、项目架构搭建、欢迎界面设计"></a>二、项目架构搭建、欢迎界面设计</h2><p>接下来，我们带着大家开始开发这个ATM系统。首先我们来完成项目的架构搭建、和欢迎界面的设计。</p><p>首先我们来分析一下，开发这个ATM系统的流程：</p><ul><li><p>由于每一个账户都包含一些个人信息，比如：卡号、姓名、性别、密码、余额、每次取现额度等等。所以，首先可以设计一个Account类，用来描述账户对象需要封装那些数据。</p></li><li><p>紧接着，定义一个ATM类，用来表示ATM系统，负责提供所有的业务需求。</p><p>比如：展示ATM系统的欢迎页面、开户、登录、转账等功能。</p></li><li><p>最后，定义一个测试类Test，负责启动我们开发好的ATM系统，进行测试。</p></li></ul><blockquote><p>第一步：先来完成Account类的编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先可以设计一个Account类，来描述账户对象需要封装哪些数据。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId; <span class="hljs-comment">//卡号</span><br>    <span class="hljs-keyword">private</span> String userName; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex; <span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> String passWord;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money; <span class="hljs-comment">//余额</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> limit; <span class="hljs-comment">// 限额</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCardId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCardId</span><span class="hljs-params">(String cardId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName + ( sex  == <span class="hljs-string">&#x27;男&#x27;</span> ? <span class="hljs-string">&quot;先生&quot;</span> : <span class="hljs-string">&quot;女士&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassWord</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassWord</span><span class="hljs-params">(String passWord)</span> &#123;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getLimit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> limit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLimit</span><span class="hljs-params">(<span class="hljs-type">double</span> limit)</span> &#123;<br>        <span class="hljs-built_in">this</span>.limit = limit;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>第二步：编写一个ATM类，负责对每一个账户对象进行管理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATM</span> &#123;<br>    <span class="hljs-comment">//创建一个存储账户对象的集合；后面每开一个账户，就往集合中添加一个账户对象</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Account&gt; accounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>第三步：在ATM类中，编写欢迎界面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATM</span> &#123;<br>    <span class="hljs-comment">//创建一个存储账户对象的集合；后面每开一个账户，就往集合中添加一个账户对象</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Account&gt; accounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br>    <span class="hljs-comment">//为了后面键盘录入方便一点，先创建好一个Scanner对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <br>    <span class="hljs-comment">/**启动ATM系统 展示欢迎界面 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;===欢迎您进入到了ATM系统===&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1、用户登录&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2、用户开户&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请选择：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (command)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">// 用户登录</span><br>                    System.out.println(<span class="hljs-string">&quot;进入登录功能&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-comment">// 用户开户</span><br>                   System.out.println(<span class="hljs-string">&quot;进入开户功能&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;没有该操作~~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、开户功能实现"><a href="#三、开户功能实现" class="headerlink" title="三、开户功能实现"></a>三、开户功能实现</h2><p>接下来，我们完成<strong>开户功能</strong>的实现。需求如下：</p><p><img src="/assets/1662629404170.png" alt="1662629404170"></p><p>为了系统的代码结构更加清晰，在ATM类中，写一个开户的方法。</p><p>步骤如下：</p><blockquote><ul><li>1、创建一个账户对象，用于封装用户的开户信息</li><li>2、需要用户输入自己的开户信息，赋值给账户对象</li><li>输入账户名，设置给账户对象</li><li>输入性别，如果性别是<code>&#39;男&#39;</code>或者<code>&#39;女&#39;</code>，将性别设置给账户对象；否则重新录入性别知道录入正确为止。</li><li>输入账户、并且输入两次密码，只有两次密码相同，才将账户和密码设置给账户对象。</li><li>输入提现限额，并且设置给账户对象</li><li>3、输出开户成功，的提示语句。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 完成用户开户操作  */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createAccount</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;==系统开户操作==&quot;</span>);<br>    <span class="hljs-comment">// 1、创建一个账户对象，用于封装用户的开户信息</span><br>    <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br><br>    <span class="hljs-comment">// 2、需要用户输入自己的开户信息，赋值给账户对象</span><br>    System.out.println(<span class="hljs-string">&quot;请您输入您的账户名称：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>    acc.setUserName(name);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请您输入您的性别：&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> sc.next().charAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// &quot;男&quot;</span><br>        <span class="hljs-keyword">if</span>(sex == <span class="hljs-string">&#x27;男&#x27;</span> || sex == <span class="hljs-string">&#x27;女&#x27;</span>)&#123;<br>            acc.setSex(sex);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的性别有误~只能是男或者女~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请您输入您的账户密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span>  <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请您输入您的确认密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">okPassWord</span>  <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">// 判断2次密码是否一样。</span><br>        <span class="hljs-keyword">if</span>(okPassWord.equals(passWord))&#123;<br>            acc.setPassWord(okPassWord);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的2次密码不一致，请您确认~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;请您输入您的取现额度：&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>    acc.setLimit(limit);<br><br>    <span class="hljs-comment">// 重点：我们需要为这个账户生成一个卡号（由系统自动生成。8位数字表示，不能与其他账户的卡号重复：会在下节课详细讲解）</span><br>    <span class="hljs-comment">//TODO 这里先留着，待会把生成卡号的功能写好，再到这里调用</span><br><br>    <span class="hljs-comment">// 3、把这个账户对象，存入到账户集合中去</span><br>    accounts.add(acc);<br>    System.out.println(<span class="hljs-string">&quot;恭喜您，&quot;</span> + acc.getUserName() + <span class="hljs-string">&quot;开户成功，您的卡号是：&quot;</span> + acc.getCardId());<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，开户功能其实只完成的一大半。如果细心的同学可能会发现，开户功能中并没有给账户设置卡号。</p><p>因为生成卡号比较麻烦，所以在下一节，我们单独来写一个方法用于生成卡号。</p><h2 id="四、生成卡号"><a href="#四、生成卡号" class="headerlink" title="四、生成卡号"></a>四、生成卡号</h2><p>各位同学，刚才在完成开户功能的时候，并没有生成卡号，所以我们接着把生成卡号的功能完成。</p><blockquote><p>第一步：先在ATM类中，写一个判断卡号是否存在的功能。</p><ul><li><p>遍历存储Account对象的集合，得到每一个Account对象，获取对象的卡号</p></li><li><p>如果卡号存在，返回该卡号对应的Account对象</p></li><li><p>如果卡号不存在，返回null</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 根据卡号查询账户对象返回 accounts = [c1, c2, c3 ...]*/</span><br><span class="hljs-keyword">private</span> Account <span class="hljs-title function_">getAccountByCardId</span><span class="hljs-params">(String cardId)</span>&#123;<br>    <span class="hljs-comment">// 遍历全部的账户对象</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; accounts.size(); i++) &#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> accounts.get(i);<br>        <span class="hljs-comment">// 判断这个账户对象acc中的卡号是否是我们要找的卡号</span><br>        <span class="hljs-keyword">if</span>(acc.getCardId().equals(cardId))&#123;<br>            <span class="hljs-keyword">return</span> acc;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 查无此账户，这个卡号不存在的</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>第二步：再在ATM类中，写一个生成卡号的功能</p><ul><li>1、先随机产生8个[0,9]范围内的随机数，拼接成一个字符串</li><li>2、然后再调用getAccountByCardId方法，判断这个卡号字符串是否存在</li><li>3、判断生成的卡号是否存在</li><li>如果生成的卡号不存在，说明生成的卡号是有效的，把卡号返回，</li><li>如果生成的卡号存在，说明生成的卡号无效，循环继续生产卡号。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 返回一个8位 数字的卡号，而且这个卡号不能与其他账户的卡号重复 */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">createCardId</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 1、定义一个String类型的变量记住8位数字作为一个卡号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cardId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 2、使用循环，循环8次，每次产生一个随机数给cardId连接起来</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 0 - 9</span><br>            cardId += data;<br>        &#125;<br>        <span class="hljs-comment">// 3、判断cardId中记住的卡号，是否与其他账户的卡号重复了，没有重复，才可以做为一个新卡号返回。</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> getAccountByCardId(cardId);<br>        <span class="hljs-keyword">if</span>(acc == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 说明cardId没有找到账户对象，因此cardId没有与其他账户的卡号重复，可以返回它做为一个新卡号</span><br>            <span class="hljs-keyword">return</span> cardId;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写完生成卡号的功能后，在开户功能的<code>TODO</code>位置，调用生成卡号的功能，并且将生成的卡号设置到账户对象中。</p><p><img src="/assets/1662643802111.png" alt="1662643802111"></p><h2 id="五、登录功能"><a href="#五、登录功能" class="headerlink" title="五、登录功能"></a>五、登录功能</h2><p>各位同学，在上面我们已经完成了开户功能。接下来我们来编写登录功能，编写登录功能的时候我们要满足一下需求：</p><p>① 如果系统没有任何账户对象，则不允许登录。</p><p>② 让用户输入登录的卡号，先判断卡号是否正确，如果不正确要给出提示。</p><p>③ 如果卡号正确，再让用户输入账户密码，如果密码不正确要给出提示，如果密码也正确，则给出登录成功的提示。</p><blockquote><p>登录功能具体实现步骤如下：</p><ul><li>1、判断系统中是否存在账户对象，存在才能登录，如果不存在，我们直接结束登录操作</li><li>2、输入登录的卡号，并判断卡号是否存在</li><li>3、如果卡号不存在，直接给出提示</li><li>4、如果卡号存在，接着输入用户密码，并判断密码是否正确</li><li>5、如果密码也正确，则登录成功，并且记录当前的登录账户</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 完成用户的登录操作 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;==系统登录==&quot;</span>);<br>    <span class="hljs-comment">// 1、判断系统中是否存在账户对象，存在才能登录，如果不存在，我们直接结束登录操作</span><br>    <span class="hljs-keyword">if</span>(accounts.size() == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;当前系统中无任何账户，请先开户再来登录~~&quot;</span>);<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出登录操作。</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2、系统中存在账户对象，可以开始进行登录操作了</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请您输入您的登录卡号：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cardId</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">// 3、判断这个卡号是否存在啊？</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> getAccountByCardId(cardId);<br>        <span class="hljs-keyword">if</span>(acc == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 说明这个卡号不存在。</span><br>            System.out.println(<span class="hljs-string">&quot;您输入的登录卡号不存在，请确认~~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 卡号存在了，接着让用户输入密码</span><br>                System.out.println(<span class="hljs-string">&quot;请您输入登录密码：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> sc.next();<br>                <span class="hljs-comment">// 4、判断密码是否正确</span><br>                <span class="hljs-keyword">if</span>(acc.getPassWord().equals(passWord))&#123;<br>                    loginAcc = acc;<br>                    <span class="hljs-comment">// 密码正确了，登录成功了</span><br>                    System.out.println(<span class="hljs-string">&quot;恭喜您，&quot;</span> + acc.getUserName() + <span class="hljs-string">&quot;成功登录了系统，您的卡号是：&quot;</span> + acc.getCardId());<br>                    <span class="hljs-comment">//TODO 把展示登录界面的功能写成一个方法，写好了再回来调用。                   </span><br>                    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出并结束当前登录方法</span><br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;您输入的密码不正确，请确认~~&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、展示用户操作界面"><a href="#六、展示用户操作界面" class="headerlink" title="六、展示用户操作界面"></a>六、展示用户操作界面</h2><p>登录成功之后，需要显示登录后的用户操作界面。效果如下</p><p><img src="/assets/1662627257875.png" alt="1662627257875"></p><p>写成一个方法，用来展示登录成功的操作界面，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 展示登录后的操作界面的 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showUserCommand</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(loginAcc.getUserName() + <span class="hljs-string">&quot;您可以选择如下功能进行账户的处理====&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;1、查询账户&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;2、存款&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;3、取款&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;4、转账&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5、密码修改&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;6、退出&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;7、注销当前账户&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请选择：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-keyword">switch</span> (command)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-comment">//TODO 查询当前账户</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-comment">//TODO 存款</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-comment">//TODO取款</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-comment">//TOD 转账</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-comment">//TODO 密码修改</span><br>                <span class="hljs-keyword">return</span>;<span class="hljs-comment">// 跳出并结束当前方法</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-comment">//TODO 退出</span><br>                System.out.println(loginAcc.getUserName() + <span class="hljs-string">&quot;您退出系统成功！&quot;</span>);<br>                <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出并结束当前方法</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                <span class="hljs-comment">// 注销当前登录的账户</span><br>                <span class="hljs-keyword">if</span>(deleteAccount())&#123;<br>                    <span class="hljs-comment">// 销户成功了，回到欢迎界面</span><br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;您当前选择的操作是不存在的，请确认~~&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好用户操作界面的方法之后，再到登录成功的位置调用，登录成功后，马上显示用户操作界面。刚才在哪里打了一个<code>TODO</code>标记的，回去找找。</p><p><img src="/assets/1662644255745.png" alt="1662644255745"></p><p>到这里，登录功能就写好了。</p><h2 id="六、查询账户、退出"><a href="#六、查询账户、退出" class="headerlink" title="六、查询账户、退出"></a>六、查询账户、退出</h2><ul><li>查询账户：在用户操作界面，选择1查询当前账户信息。效果如下：</li></ul><p><img src="/assets/1662645452619.png" alt="1662645452619"></p><p>登录成功的时候，已经把当前账户对象用一个成员变量存储了 ，所以直接按照如下格式打印账户对象的属性信息即可。</p><p>这里也写成一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">展示当前登录的账户信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showLoginAccount</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;==当前您的账户信息如下：==&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;卡号：&quot;</span> + loginAcc.getCardId());<br>    System.out.println(<span class="hljs-string">&quot;户主：&quot;</span> + loginAcc.getUserName());<br>    System.out.println(<span class="hljs-string">&quot;性别：&quot;</span> + loginAcc.getSex());<br>    System.out.println(<span class="hljs-string">&quot;余额：&quot;</span> + loginAcc.getMoney());<br>    System.out.println(<span class="hljs-string">&quot;每次取现额度：&quot;</span> + loginAcc.getLimit());<br>&#125;<br></code></pre></td></tr></table></figure><p>写好方法之后，到用户操作界面调用。如下图所示</p><p><img src="/assets/1662645669483.png" alt="1662645669483"></p><ul><li>退出功能：其实就是将ATM系统中，在用户界面选择6时，直接结束程序。</li></ul><p><img src="/assets/1662645798025.png" alt="1662645798025"></p><h2 id="七、存款"><a href="#七、存款" class="headerlink" title="七、存款"></a>七、存款</h2><p>各位同学，接下来来完成存款操作。</p><blockquote><p>我们把存款功能也写成一个方法，具体步骤如下：</p><ul><li><ol><li>键盘录入要存入的金额</li></ol></li><li><ol start="2"><li>在原有余额的基础上，加上存入金额，得到新的余额</li></ol></li><li><ol start="3"><li>再将新的余额设置给当前账户对象</li></ol></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 存钱 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depositMoney</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;==存钱操作==&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;请您输入存款金额：&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<br><br>    <span class="hljs-comment">// 更新当前登录的账户的余额。</span><br>    loginAcc.setMoney(loginAcc.getMoney() + money);<br>    System.out.println(<span class="hljs-string">&quot;恭喜您，您存钱：&quot;</span> + money + <span class="hljs-string">&quot;成功，存钱后余额是：&quot;</span> + loginAcc.getMoney());<br>&#125;<br></code></pre></td></tr></table></figure><p>写好存款的方法之后，在<code>case 2:</code>的下面调用<code>depositMoney()</code>方法</p><p><img src="/assets/1662779078001.png" alt="1662779078001"></p><p>到这里，存款功能就写好了。</p><h2 id="八、取款"><a href="#八、取款" class="headerlink" title="八、取款"></a>八、取款</h2><p>各位同学，接下来我们写一下取款的功能。</p><blockquote><p>把取款的功能也写成一个方法，具体步骤如下</p><ul><li><p>1、判断账户余额是否达到了100元，如果不够100元，就不让用户取钱了</p></li><li><p>2、让用户输入取款金额</p></li><li><p>3、判断账户余额是否足够</p><ul><li><p>如果余额足够， 继续判断当前取款金额是否超过了每次限额</p><ul><li><p>如果超过限额，提示“每次只能取xxx限额的钱”</p></li><li><p>如果不超过限额，则在当前余额上减去取钱的金额，得到新的余额</p><p>并将新的余额设置给账户对象。</p></li></ul></li><li><p>如果余额不足，提示“你的余额不足，你的账户余额是xxx元”</p></li></ul></li></ul></blockquote><p>按照上面分析的步骤，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 取钱 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;==取钱操作==&quot;</span>);<br>    <span class="hljs-comment">// 1、判断账户余额是否达到了100元，如果不够100元，就不让用户取钱了</span><br>    <span class="hljs-keyword">if</span>(loginAcc.getMoney() &lt; <span class="hljs-number">100</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您的账户余额不足100元，不允许取钱~~&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、让用户输入取款金额</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请您输入取款金额：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<br><br>        <span class="hljs-comment">// 3、判断账户余额是否足够</span><br>        <span class="hljs-keyword">if</span>(loginAcc.getMoney() &gt;= money)&#123;<br>            <span class="hljs-comment">// 账户中的余额是足够的</span><br>            <span class="hljs-comment">// 4、判断当前取款金额是否超过了每次限额</span><br>            <span class="hljs-keyword">if</span>(money &gt; loginAcc.getLimit())&#123;<br>                System.out.println(<span class="hljs-string">&quot;您当前取款金额超过了每次限额，您每次最多可取：&quot;</span> + loginAcc.getLimit());<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 代表可以开始取钱了。更新当前账户的余额即可</span><br>                loginAcc.setMoney(loginAcc.getMoney() - money);<br>                System.out.println(<span class="hljs-string">&quot;您取款：&quot;</span> + money + <span class="hljs-string">&quot;成功，取款后您剩余：&quot;</span> + loginAcc.getMoney());<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;余额不足，您的账户中的余额是：&quot;</span> + loginAcc.getMoney());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好取钱方法之后，在<code>case 3:</code>的位置调用<code>drawMoney()</code>方法</p><p><img src="/assets/1662779472588.png" alt="1662779472588"></p><h2 id="九、转账"><a href="#九、转账" class="headerlink" title="九、转账"></a>九、转账</h2><p>各位同学，接下来我们来编写转账的功能。转账的意思就是，将一个账户的钱转入另一个账，具体的转账逻辑如下：</p><blockquote><p>我们把转账功能也写成一个方法</p><ul><li><p>1、判断系统中是否存在其他账户</p></li><li><p>2、判断自己的账户中是否有钱</p></li><li><p>3、真正开始转账了，输入对方卡号</p></li><li><p>4、判断对方卡号是否正确啊？</p></li><li><p>5、如果卡号正确，就继续让用户输入姓氏， 并判断这个姓氏是否正确？</p><ul><li>如果姓氏不正确，给出提示“对不起，您姓氏有问题，转账失败！”</li></ul></li><li><p>6、如果姓氏正确，继续判断这个转账金额是否超过自己的余额。</p><ul><li>如果转账金额超过余额，给出提示“对不起，余额不足，转账失败！”</li></ul></li><li><p>7、如果对方卡号存在、姓氏匹配、余额足够，就完成真正的转账操作</p><ul><li><p>获取当前自己账户的余额，减去转账金额，就可以得到自己账户新的余额，</p><p>并将新的余额，设置给当前账户</p></li><li><p>并且获取对方的账户余额，加上转账金额，就可以得到对方账户新的余额，</p><p>并将新的余额，设置给对方账户</p></li><li><p>给出提示：“您转账成功了~~~”</p></li></ul></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 转账 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transferMoney</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;==用户转账==&quot;</span>);<br>    <span class="hljs-comment">// 1、判断系统中是否存在其他账户。</span><br>    <span class="hljs-keyword">if</span>(accounts.size() &lt; <span class="hljs-number">2</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;当前系统中只有你一个账户，无法为其他账户转账~~&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 2、判断自己的账户中是否有钱</span><br>    <span class="hljs-keyword">if</span>(loginAcc.getMoney() == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您自己都没钱，就别转了~~&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 3、真正开始转账了</span><br>        System.out.println(<span class="hljs-string">&quot;请您输入对方的卡号：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cardId</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-comment">// 4、判断这个卡号是否正确啊？？</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> getAccountByCardId(cardId);<br>        <span class="hljs-keyword">if</span>(acc == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的对方的卡号不存在~~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 对方的账户存在，继续让用户认证姓氏。</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*&quot;</span> + acc.getUserName().substring(<span class="hljs-number">1</span>); <span class="hljs-comment">// * + 马刘德华</span><br>            System.out.println(<span class="hljs-string">&quot;请您输入【&quot;</span> + name + <span class="hljs-string">&quot;】的姓氏：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">preName</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-comment">// 5、判断这个姓氏是否正确啊</span><br>            <span class="hljs-keyword">if</span>(acc.getUserName().startsWith(preName)) &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-comment">// 认证通过了：真正转账了</span><br>                    System.out.println(<span class="hljs-string">&quot;请您输入转账给对方的金额：&quot;</span>);<br>                    <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>                    <span class="hljs-comment">// 6、判断这个金额是否没有超过自己的余额。</span><br>                    <span class="hljs-keyword">if</span>(loginAcc.getMoney() &gt;= money)&#123;<br>                        <span class="hljs-comment">// 7、转给对方了</span><br>                        <span class="hljs-comment">// 更新自己的账户余额</span><br>                        loginAcc.setMoney(loginAcc.getMoney() - money);<br>                        <span class="hljs-comment">// 更新对方的账户余额</span><br>                        acc.setMoney(acc.getMoney() + money);<br>                        System.out.println(<span class="hljs-string">&quot;您转账成功了~~~&quot;</span>);<br>                        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出转账方法。。</span><br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;您余额不足，无法给对方转这么多钱，最多可转：&quot;</span> + loginAcc.getMoney());<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;对不起，您认证的姓氏有问题~~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好修改转账功能之后，在<code>case 4:</code>这里调用。如下：</p><p><img src="/assets/1662780740132.png" alt="1662780740132"></p><p>到这里，转账功能就写好了。</p><h2 id="十、修改密码"><a href="#十、修改密码" class="headerlink" title="十、修改密码"></a>十、修改密码</h2><p>各位同学，接下来我们完成修改密码的功能。</p><blockquote><p>把修改密码的功能也是写成一个方法，具体步骤如下</p><ul><li><p>1、提醒用户输入当前密码</p></li><li><p>2、认证当前密码是否正确</p><ul><li>如果认证密码错误，提示“您当前输入的密码不正确~~”；重新输入密码，再次认证密码是否正确。</li></ul></li><li><p>3、如果认证密码正确，开始修改密码，修改密码时需要用户输入2次新密码</p></li><li><p>4、判断2次 密码是否一致</p><ul><li>如果两次密码一致，就将新密码设置给当前账户对象，密码修改成功</li><li>如果两次密码不一直，则给出提示“您输入的2次密码不一致~~”；重新输入新密码，并确认密码。</li></ul></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 账户密码修改 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassWord</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;==账户密码修改操作==&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 1、提醒用户认证当前密码</span><br>        System.out.println(<span class="hljs-string">&quot;请您输入当前账户的密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-comment">// 2、认证当前密码是否正确啊</span><br>        <span class="hljs-keyword">if</span>(loginAcc.getPassWord().equals(passWord))&#123;<br>            <span class="hljs-comment">// 认证通过</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 3、真正开始修改密码了</span><br>                System.out.println(<span class="hljs-string">&quot;请您输入新密码：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">newPassWord</span> <span class="hljs-operator">=</span> sc.next();<br><br>                System.out.println(<span class="hljs-string">&quot;请您再次输入密码：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">okPassWord</span> <span class="hljs-operator">=</span> sc.next();<br><br>                <span class="hljs-comment">// 4、判断2次 密码是否一致</span><br>                <span class="hljs-keyword">if</span>(okPassWord.equals(newPassWord))&#123;<br>                    <span class="hljs-comment">// 可以真正开始修改密码了</span><br>                    loginAcc.setPassWord(okPassWord);<br>                    System.out.println(<span class="hljs-string">&quot;恭喜您，您的密码修改成功~~~&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;您输入的2次密码不一致~~&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您当前输入的密码不正确~~&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好修改密码的功能之后。在<code>case 5:</code>的位置调用<code>updatePassWord()</code>方法。如下图所示</p><p><img src="/assets/1662781272258.png" alt="1662781272258"></p><p>好了，到这里修改密码的功能就写好了。</p><h2 id="十一、注销"><a href="#十一、注销" class="headerlink" title="十一、注销"></a>十一、注销</h2><p>各位同学，接下来我们完成最后一个功能，注销功能。</p><blockquote><p>这里把注销功能也写成一个方法，具体步骤如下</p><ul><li>1、先确认是否需要注销账户，让用户输入y或者n<ul><li>如果输入y，表示确认</li><li>如果输入n，表示取消注销操作</li></ul></li><li>2、输入y后，继续判断当前用户的账户是否有钱<ul><li>如果账户有钱，提示：“对不起，您的账户中存钱金额，不允许销”</li><li>如果账户没有钱，则把当前账户对象，从系统的集合中删除，完成注销。</li></ul></li></ul></blockquote><p>按照上面的步骤代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 销户操作 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteAccount</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;==进行销户操作==&quot;</span>);<br>    <span class="hljs-comment">// 1、问问用户是否确定要销户啊</span><br>    System.out.println(<span class="hljs-string">&quot;请问您确认销户吗？y/n&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-keyword">switch</span> (command) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>            <span class="hljs-comment">// 确实要销户</span><br>            <span class="hljs-comment">// 2、判断用户的账户中是否有钱：loginAcc</span><br>            <span class="hljs-keyword">if</span>(loginAcc.getMoney() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 真的销户了</span><br>                accounts.remove(loginAcc);<br>                System.out.println(<span class="hljs-string">&quot;您好，您的账户已经成功销户~~&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;对不起，您的账户中存钱金额，不允许销户~~&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        <span class="hljs-keyword">default</span>:<br>            System.out.println(<span class="hljs-string">&quot;好的，您的账户保留！！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注销功能写好之后，在用户操作界面的<code>case 7:</code>位置调用<code>deleteAccount()</code>的方法。</p><p>代码如下</p><p><img src="/assets/1662792538291.png" alt="1662792538291"></p><hr><p>到这里注销账户的功能就写好了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08Java常用API</title>
    <link href="/2023/12/01/day08-Java%E5%B8%B8%E7%94%A8API/"/>
    <url>/2023/12/01/day08-Java%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h3 id="08——Java常用API"><a href="#08——Java常用API" class="headerlink" title="08——Java常用API"></a>08——Java常用API</h3><h2 id="一、今日内容介绍、API概述"><a href="#一、今日内容介绍、API概述" class="headerlink" title="一、今日内容介绍、API概述"></a>一、今日内容介绍、API概述</h2><p>各位同学，我们前面已经学习了面向对象编程，使用面向编程这个套路，我们需要自己写类，然后创建对象来解决问题。但是在以后的实际开发中，更多的时候，我们是利用面向编程这种套路，使用别人已经写好的类来编程的。</p><p>这就是我们今天要学习的内容——常用API（全称是Application Program Interface 应用程序接口），说人话就是：<strong>别人写好的一些程序，给咱们程序员直接拿去调用。</strong></p><p>Java官方其实已经给我们写好了很多很多类，每一个类中又提供了一系列方法来解决与这个类相关的问题。</p><ul><li>比如String类，表示字符串，提供的方法全都是对字符串操作的。</li><li>比如ArrayList类，表示一个容器，提供的方法都是对容器中的数据进行操作的。</li></ul><p>像这样的类还有很多，Java把这些类是干什么用的、类中的每一个方法是什么含义，编写成了文档，我们把这个文档称之为API文档。</p><p><img src="/assets/1662602386634.png" alt="1662602386634"></p><p><strong>1. 我们为什么要学习别人写好的程序呢？</strong></p><p>​在行业中有这么一句话：“不要重复造轮子”。这里所说的轮子就是别人已经写过的程序。意思就是不要写重复的程序，因为程序是用来解决问题的，如果这个问题别人已经解决过，并且这个解决方案也得到了市场认可，那就不用再自己重复写这个程序了。</p><p>​Java已经发展了20多年，在这20多年里，已经积累类了很多问题的解决方案，基本上现在我们遇到的问题，在这20多年里，早就有人解决过。</p><p>​所以我们把面向对象的高级知识学习完之后，Java语言的语法知识就已经学习完了。剩下的所有内容都是是学习一个一个的API，通过调用API提供的方法来解决实际问题。</p><p><strong>2. 我们要学习哪些API</strong></p><p>Java的API文档中，有那么多的类，是所有的类都要学习吗？并不是 ，虽然Java提供了很多个类，但是并不是所有类都得到了市场认可，我们只学习一些在工作中常用的就行。</p><p>除了Java官方提供的API，还一些第三方的公司或者组织也会提供一些API，甚至比Java官方提供的API更好用，在需要的时候我们也会告诉大家怎么用。</p><p><strong>3. 今天我们主要学习两个类，一个是String类、还有一个是ArrayList类。</strong></p><p><img src="/assets/1662605214383.png" alt="1662605214383"></p><p>字符串的应用场景是非常多的，可以说是无处不在。</p><p>比如，在用户登录时，需要对用户名和密码进行校验，这里的用户名和密码都是String</p><p><img src="/assets/1662605347797.png" alt="1662605347797"></p><p>再比如，在和网友聊天时，其实输入的文字就是一个一个字符串</p><p><img src="/assets/1662605396550.png" alt="1662605396550"></p><p>再比如，在百度上搜索时，搜素的关键词，也是字符串</p><p><img src="/assets/1662605442842.png" alt="1662605442842"></p><p>学习完String类之后，还会学习一个类ArrayList</p><p><img src="/assets/1662605519698.png" alt="1662605519698"></p><p>大家知道数组是一个容器，有数组干嘛还要集合呢？因为数字的长度是固定的，一旦创建不可改变。</p><p>比如数组的长度为3，想要存储第4个元素就存不进去了。</p><p><img src="/assets/1662605575865.png" alt="1662605575865"></p><p>使用集合就可以解决上面的问题，集合可以根据需要想存多少个元素就存多少个元素。</p><h2 id="二、包"><a href="#二、包" class="headerlink" title="二、包"></a>二、包</h2><p><strong>1. 什么是包</strong></p><p>在学习API类之前，我们先要学习包。因为Java官方提供的类有很多，为了对这些类进行分门别类的管理，别人把写好的类都是放在不同的包里的。</p><p>包其实类似于文件夹，一个包中可以放多个类文件。如下图所示</p><p><img src="/assets/1662605881879.png" alt="1662605881879"></p><p>建包的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类文件的第一行定义包</span><br><span class="hljs-keyword">package</span> com.itheima.javabean;<br><br><span class="hljs-keyword">public</span> class 类名&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 在自己的程序中，调用其他包中的程序，需要注意下面一个问题</strong></p><ul><li><p>如果当前程序中，要调用自己所在包下的其他程序，可以直接调用。（同一个包下的类，互相可以直接调用）</p></li><li><p>如果当前程序中，要调用其他包下的程序，则必须在当前程序中导包, 才可以访问！</p><p>导包格式：<code> import 包名.类名</code></p></li><li><p>如果当前程序中，要调用Java.lang包下的程序，不需要我们导包的，可以直接使用。</p></li><li><p>如果当前程序中，要调用多个不同包下的程序，而这些程序名正好一样，此时默认只能导入一个程序，另一个程序必须带包名访问。</p></li></ul><h2 id="三、String类"><a href="#三、String类" class="headerlink" title="三、String类"></a>三、String类</h2><h3 id="1-String类概述"><a href="#1-String类概述" class="headerlink" title="1. String类概述"></a>1. String类概述</h3><p>各位同学，接下来我们学习String这个类，也就是学对字符串进行处理。为什么要学习字符串处理呢？因为在开发中对于字符串的处理还是非常常见的。</p><p>比如：在用户登录时，用户输入的用户名和密码送到后台，需要和正确的用户名和密码进行校验，这就需要用到String类提供的比较功能。</p><p><img src="/assets/1662605347797.png" alt="1662605347797"></p><p>再比如：同学们在直播留言时，有些小伙伴可能不太文明说了一些脏话，后台检测到你输入的是脏话，就会用<code>***</code>把脏话屏蔽掉。这也需要用到String类提供的替换功能</p><p><img src="/assets/1662605396550.png" alt="1662605396550"></p><p>Java为了方便我们处理字符串，所以给我们提供了一个String类来代表字符串，这个类就是<code>java.lang</code>包下。</p><p>按照面向对象的编程思想，对于字符串的操作，只需要创建字符串对象，用字符串对象封装字符串数据，然后调用String类的方法就可以了。</p><p><img src="/assets/1662607669465.png" alt="1662607669465"></p><hr><h3 id="2-String创建对象"><a href="#2-String创建对象" class="headerlink" title="2. String创建对象"></a>2. String创建对象</h3><p>接下来我们打开String类的API，看一下String类的对象如何创建。如下图所示</p><p><img src="/assets/1662607801186.png" alt="1662607801186"></p><p>String类的API中，有这么一句话：“Java程序中的所有字符串字面值（如”abc”）都是字符串的实例实现”。这里所说的实例实现，其实指的就是字符串对象。</p><p>意思就是：<strong>所有Java的字符串字面值，都是字符串对象。</strong></p><ul><li>所以创建String对象的第一种方式就有了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">//这里&quot;abc&quot;就是一个字符串对象，用s1变量接收</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马程序员&quot;</span>; <span class="hljs-comment">//这里的“黑马程序员”也是一个字符串对象，用s2变量接收</span><br></code></pre></td></tr></table></figure><ul><li>创建String对象还有第二种方式，就是利用String类的构造方法创建String类的对象。</li></ul><p><img src="/assets/1662608166502.png" alt="1662608166502"></p><p>我们前面学习过类的构造方法，执行构造方法需要用到new关键字。<code>new String(参数)</code>就是在执行String类的构造方法。 </p><p>下面我们演示通过String类的构造方法，创建String类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、直接双引号得到字符串对象，封装字符串数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马666&quot;</span>;<br>System.out.println(name);<br><br><span class="hljs-comment">// 2、new String创建字符串对象，并调用构造器初始化字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>System.out.println(rs1); <span class="hljs-comment">// &quot;&quot;</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;itheima&quot;</span>);<br>System.out.println(rs2);<br><br><span class="hljs-type">char</span>[] chars = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;黑&#x27;</span>, <span class="hljs-string">&#x27;马&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">rs3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>System.out.println(rs3);<br><br><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">rs4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br>System.out.println(rs4);<br></code></pre></td></tr></table></figure><p>关于String类是用来干什么的，以及String类对象的创建我们就学习到这里。最后总结一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> String是什么，可以做什么？<br>答：String代表字符串，可以用来创建对象封装字符串数据，并对其进行处理。<br><br><span class="hljs-number">2.</span>String类创建对象封装字符串数据的方式有几种？<br>方式一： 直接使用双引号“...” 。<br>方式二：<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>类，调用构造器初始化字符串对象。<br></code></pre></td></tr></table></figure><h3 id="3-String类的常用方法"><a href="#3-String类的常用方法" class="headerlink" title="3. String类的常用方法"></a>3. String类的常用方法</h3><p>各位同学，在上一节课中，我们学习了如何通过字符串对象封装数据，接下来我们学习调用String类的方法对象字符串数据进行处理。</p><p>这里已经将String类的常用方法，给同学们挑出来了，我们先快速的认识一下。为什么是快速认识一下呢？因为API真正的作用是来解决业务需求的，如果不解决业务需求，只是记API是很难记住的。</p><p><img src="/assets/1662609378727.png" alt="1662609378727"></p><p>所以API的正确打开方式是，先找到这个类，把这个类中的方法先用代码快速过一遍，有一个大概印象就行。然后再具体的案例中，选择你需要的方法来用就行。</p><p>下面我们就把String类中的方法，按照方法的调用规则，先快速过一遍。（注意：第一次调用API方法，都是看着API方法来调用用的，不是背的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：快速熟悉String提供的处理字符串的常用方法。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马Java&quot;</span>;<br>        <span class="hljs-comment">// 1、获取字符串的长度</span><br>        System.out.println(s.length());<br><br>        <span class="hljs-comment">// 2、提取字符串中某个索引位置处的字符</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(<span class="hljs-number">1</span>);<br>        System.out.println(c);<br><br>        <span class="hljs-comment">// 字符串的遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            System.out.println(ch);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 3、把字符串转换成字符数组，再进行遍历</span><br>        <span class="hljs-type">char</span>[] chars = s.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>            System.out.println(chars[i]);<br>        &#125;<br><br>        <span class="hljs-comment">// 4、判断字符串内容，内容一样就返回true</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;黑马&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;黑马&quot;</span>);<br>        System.out.println(s1 == s2); <span class="hljs-comment">// false</span><br>        System.out.println(s1.equals(s2)); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 5、忽略大小写比较字符串内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;34AeFG&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;34aEfg&quot;</span>;<br>        System.out.println(c1.equals(c2)); <span class="hljs-comment">// false</span><br>        System.out.println(c1.equalsIgnoreCase(c2)); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 6、截取字符串内容 (包前不包后的)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java是最好的编程语言之一&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> s3.substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>        System.out.println(rs);<br><br>        <span class="hljs-comment">// 7、从当前索引位置一直截取到字符串的末尾</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> s3.substring(<span class="hljs-number">5</span>);<br>        System.out.println(rs2);<br><br>        <span class="hljs-comment">// 8、把字符串中的某个内容替换成新内容，并返回新的字符串对象给我们</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这个电影简直是个垃圾，垃圾电影！！&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs3</span> <span class="hljs-operator">=</span> info.replace(<span class="hljs-string">&quot;垃圾&quot;</span>, <span class="hljs-string">&quot;**&quot;</span>);<br>        System.out.println(rs3);<br><br>        <span class="hljs-comment">// 9、判断字符串中是否包含某个关键字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">info2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java是最好的编程语言之一，我爱Java,Java不爱我！&quot;</span>;<br>        System.out.println(info2.contains(<span class="hljs-string">&quot;Java&quot;</span>));<br>        System.out.println(info2.contains(<span class="hljs-string">&quot;java&quot;</span>));<br>        System.out.println(info2.contains(<span class="hljs-string">&quot;Java2&quot;</span>));<br><br>        <span class="hljs-comment">// 10、判断字符串是否以某个字符串开头。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三丰&quot;</span>;<br>        System.out.println(rs4.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br>        System.out.println(rs4.startsWith(<span class="hljs-string">&quot;张三&quot;</span>));<br>        System.out.println(rs4.startsWith(<span class="hljs-string">&quot;张三2&quot;</span>));<br><br>        <span class="hljs-comment">// 11、把字符串按照某个指定内容分割成多个字符串，放到一个字符串数组中返回给我们</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张无忌,周芷若,殷素素,赵敏&quot;</span>;<br>        String[] names = rs5.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; names.length; i++) &#123;<br>            System.out.println(names[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>演示完String类的这些方法之后，我们对字符串有哪些方法，就已经有一个大致印象了。至少知道String字符串能干哪些事情。</p><p>至于String类的这些方法是否都记住了，这个还需要通过一些案例训练，在用的过程中去找哪个方法能够解决你的实际需求，就用哪个方法。同一个方法用的次数多个，自然就记住了。</p><h3 id="4-String的注意事项"><a href="#4-String的注意事项" class="headerlink" title="4. String的注意事项"></a>4. String的注意事项</h3><p>在上一节，我们学习了字符串的一些常用方法，在实际工作中用这些方法解决字符串的常见问题是完全足够的，但是在面试时可能会问一些原理性的东西。</p><p>所以把字符串原理性的内容，就当做注意事项来学习一下。一共有下面的2点：</p><p><img src="/assets/1662610060051.png" alt="1662610060051"></p><ul><li><strong>注意事项1：String类的对象是不可变的对象</strong></li></ul><p>我们先看一段代码，分析这段代码的结果</p><p><img src="/assets/1662610347618.png" alt="1662610347618"></p><p>以上代码中，先定义了一个String变量 name第一次赋值为<code>“黑马”;</code> 然后对<code>name</code>变量记录的字符串进行两次拼接，第一次拼接<code>“程序员”</code>，第二次拼接<code>“播妞”</code>；我们发现得到的结果是：<code>黑马程序员播妞</code></p><p>这里问题就来了，你不是是说：<strong>String类的对象是不可变的字符串对象吗？</strong>我看name的值变了呀！！！<img src="/assets/1662610591674.png" alt="1662610591674"></p><p>下面我们就解释一下，String是不可变对象到底是什么含义。</p><p>需要注意的是：只要是以<code>“”</code>方式写出的字符串对象，会在堆内存中的<strong>字符串常量池</strong>中存储。</p><p>执行第一句话时，会在堆内存的常量池中，创建一个字符串对象<code>“黑马”</code>，然后把<code>“黑马”</code>的地址赋值给<code>String name</code></p><p><img src="/assets/1662610697641.png" alt="1662610697641"></p><p>当执行第二句话时，又会再堆内存的常量池中创建一个字符串<code>“程序员”</code>，和<code>“黑马”</code>拼接，拼接之后还会产生一个新的字符串对象<code>”黑马程序员“</code>，然后将新产生的<code>“黑马程序员”</code>对象的地址赋值给<code>String name</code>变量。</p><p><img src="/assets/1662610978351.png" alt="1662610978351"></p><p>此时你会发现，之前创建的字符串对象<code>“黑马”</code>内容确实是没有改变的。所以说String的对象是不可变的。</p><ul><li><strong>注意事项2：字符串字面量和new出来字符串的区别</strong><ol><li>只要是以<code>“...”</code>方式写出的字符串对象，会存储到字符串常量池，且相同内容的字符串只存储一份。如下图一所示</li><li>但通过<code>new</code>方式创建字符串对象，每new一次都会产生一个新的对象放在堆内存中。如下图二所示</li></ol></li></ul><p><img src="/assets/1662618688215.png" alt="1662618688215"></p><p><img src="/assets/1662618651517.png" alt="1662618651517"></p><ul><li>总结一下，字符串的注意事项。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> String是不可变字符串对象<br><span class="hljs-number">2.</span> 只要是以“...”方式写出的字符串对象，会存储到字符串常量池，且相同内容的字符串只存储一份；<br><span class="hljs-number">3.</span> 但通过<span class="hljs-keyword">new</span>方式创建字符串对象，每<span class="hljs-keyword">new</span>一次都会产生一个新的对象放在堆内存中。<br></code></pre></td></tr></table></figure><h3 id="5-String案例一：用户登录案例"><a href="#5-String案例一：用户登录案例" class="headerlink" title="5. String案例一：用户登录案例"></a>5. String案例一：用户登录案例</h3><p>接下来给大家做一个案例，使用字符串的功能完成登录案例。案例需求如下：</p><p><img src="/assets/1662618819077.png" alt="1662618819077"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">分析一下完成案例的步骤：<br><span class="hljs-number">1.</span>首先，从登录界面上可以得出，需要让用户输入登录名和密码<br><span class="hljs-number">2.</span>设计一个登录方法，对用户名和密码进行校验<br><span class="hljs-number">3.</span>调用登录方法，根据方法的返回结果，判断登录是否成功。<br><span class="hljs-number">4.</span>如果登录失败，循环登录<span class="hljs-number">3</span>次，结束循环；如果登录成功，跳出循环;<br></code></pre></td></tr></table></figure><p>案例分析的步骤完成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   目标：完成用户的登录案例。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、开发一个登录界面</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请您输入登录名称：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请您输入登录密码：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> sc.next();<br><br>            <span class="hljs-comment">// 5、开始调用登录方法，判断是否登录成功</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> login(loginName, passWord);<br>            <span class="hljs-keyword">if</span>(rs)&#123;<br>                System.out.println(<span class="hljs-string">&quot;恭喜您，欢迎进入系统~~&quot;</span>);<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出for循环，代表登录完成</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;登录名或者密码错误，请您确认~~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">      2、开发一个登录方法，接收用户的登录名和密码，返回认证的结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName, String passWord)</span>&#123;<br>        <span class="hljs-comment">// 3、准备一份系统正确的登录名和密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">okLoginName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itheima&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">okPassWord</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">// 4、开始正式判断用户是否登录成功</span><br>        <span class="hljs-comment">/*if(okLoginName.equals(loginName) &amp;&amp; okPassWord.equals(passWord))&#123;</span><br><span class="hljs-comment">            // 登录成功的</span><br><span class="hljs-comment">            return true;</span><br><span class="hljs-comment">        &#125;else &#123;</span><br><span class="hljs-comment">            return false;</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-keyword">return</span> okLoginName.equals(loginName) &amp;&amp; okPassWord.equals(passWord);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-String案例二：随机产生验证码"><a href="#6-String案例二：随机产生验证码" class="headerlink" title="6. String案例二：随机产生验证码"></a>6. String案例二：随机产生验证码</h3><p>接下来学习一个再工作中也比较常见的案例，使用String来开发验证码。需求如下：</p><p><img src="/assets/1662619371060.png" alt="1662619371060"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">根据需求分析，步骤如下：<br><span class="hljs-number">1.</span>首先，设计一个方法，该方法接收一个整型参数，最终要返回对应位数的随机验证码。<br><span class="hljs-number">2.</span>方法内定义<span class="hljs-number">2</span>个字符串变量：<br><span class="hljs-number">1</span>个用来记住生成的验证码，<span class="hljs-number">1</span>个用来记住要用到的全部字符。<br><span class="hljs-number">3.</span>定义<span class="hljs-keyword">for</span>循环控制生成多少位随机字符<br><span class="hljs-number">4.</span>每次得到一个字符范围内的随机索引<br><span class="hljs-number">5.</span>根据索引提取该字符，把该字符交给code变量连接起<br><span class="hljs-number">6.</span>循环结束后，在循环外返回code即可。<br><span class="hljs-number">7.</span>在主方法中调用生成验证码的方法<br></code></pre></td></tr></table></figure><p>根据步骤完成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    目标：完成随机产生验证码，验证码的每位可能是数字、大写字母、小写字母</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(createCode(<span class="hljs-number">4</span>));<br>        System.out.println(createCode(<span class="hljs-number">6</span>));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       1、设计一个方法，返回指定位数的验证码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">// 2、定义2个变量 </span><br>        <span class="hljs-comment">//一个是记住最终产生的随机验证码 </span><br>        <span class="hljs-comment">//一个是记住可能用到的全部字符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">// 3、开始定义一个循环产生每位随机字符</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// 4、随机一个字符范围内的索引。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(data.length());<br>            <span class="hljs-comment">// 5、根据索引去全部字符中提取该字符</span><br>            code += data.charAt(index); <span class="hljs-comment">// code = code + 字符</span><br>        &#125;<br>        <span class="hljs-comment">// 6、返回code即可</span><br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于String的案例，我们先练习到这里。以后遇到对字符串进行操作的需求，优先找String类有没有提供对应的方法。</p><h2 id="四、ArrayList类"><a href="#四、ArrayList类" class="headerlink" title="四、ArrayList类"></a>四、ArrayList类</h2><h3 id="1-ArrayList快速入门"><a href="#1-ArrayList快速入门" class="headerlink" title="1. ArrayList快速入门"></a>1. ArrayList快速入门</h3><p>学习完String类之后，接下来再学习一个类——叫ArrayList。 </p><p>ArrayList表示一种集合，它是一个容器，用来装数据的，类似于数组。那有了数组，为什么要有集合呢？</p><p>因为数组一旦创建大小不变，比如创建一个长度为3的数组，就只能存储3个元素，想要存储第4个元素就不行。而集合是大小可变的，想要存储几个元素就存储几个元素，在实际工作中用得更多。</p><p>然后集合有很多种，而ArrayList只是众多集合中的一种，跟多的集合我们在就业班的课程中再学习。如下图所示：</p><p><img src="/assets/1662620084702.png" alt="1662620084702"></p><p>集合该怎么学呢？1. 首先你要会创建集合对象，2. 然后能够调用集合提供的方法对容器中的数据进行增删改查，3. 最后知道集合的一些特点就可以了。</p><p><img src="/assets/1662620152564.png" alt="1662620152564"></p><h3 id="2-ArrayList常用方法"><a href="#2-ArrayList常用方法" class="headerlink" title="2. ArrayList常用方法"></a>2. ArrayList常用方法</h3><p>想要使用ArrayList存储数据，并对数据进行操作：</p><ul><li><p>第一步：创建ArrayList容器对象。一般使用空参数构造方法，如下图所示：</p></li><li><p>第二步：调用ArrayList类的常用方法对容器中的数据进行操作。常用方法如下：</p></li></ul><p><img src="/assets/1662620389155.png" alt="1662620389155"></p><p>接下来我们把ArrayList集合的这些方法快速的熟悉一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">目标：要求同学们掌握如何创建ArrayList集合的对象，并熟悉ArrayList提供的常用方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、创建一个ArrayList的集合对象</span><br>        <span class="hljs-comment">// ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br>        <span class="hljs-comment">// 从jdk 1.7开始才支持的</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        list.add(<span class="hljs-string">&quot;黑马&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;黑马&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Java&quot;</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 2、往集合中的某个索引位置处添加一个数据</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;MySQL&quot;</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 3、根据索引获取集合中某个索引位置处的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">1</span>);<br>        System.out.println(rs);<br><br>        <span class="hljs-comment">// 4、获取集合的大小（返回集合中存储的元素个数）</span><br>        System.out.println(list.size());<br><br>        <span class="hljs-comment">// 5、根据索引删除集合中的某个元素值，会返回被删除的元素值给我们</span><br>        System.out.println(list.remove(<span class="hljs-number">1</span>));<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 6、直接删除某个元素值，删除成功会返回true，反之</span><br>        System.out.println(list.remove(<span class="hljs-string">&quot;Java&quot;</span>));<br>        System.out.println(list);<br><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;html&quot;</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 默认删除的是第一次出现的这个黑马的数据的</span><br>        System.out.println(list.remove(<span class="hljs-string">&quot;黑马&quot;</span>));<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 7、修改某个索引位置处的数据，修改后会返回原来的值给我们</span><br>        System.out.println(list.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;黑马程序员&quot;</span>));<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-ArrayList应用案例1"><a href="#3-ArrayList应用案例1" class="headerlink" title="3. ArrayList应用案例1"></a>3. ArrayList应用案例1</h3><p>接下来，我们学习一个ArrayList的应用案例，需求如下：</p><p><img src="/assets/1662620686208.png" alt="1662620686208"></p><p>我们分析一下这个案例的步骤该如何实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>用户可以选购多个商品，可以创建一个ArrayList集合，存储这些商品<br><span class="hljs-number">2.</span>按照需求，如果用户选择了<span class="hljs-string">&quot;枸杞&quot;</span>批量删除，应该删除包含<span class="hljs-string">&quot;枸杞&quot;</span>的所有元素<br><span class="hljs-number">1</span>)这时应该遍历集合中每一个String类型的元素<br><span class="hljs-number">2</span>)使用String类的方法contains判断字符串中是否包含<span class="hljs-string">&quot;枸杞&quot;</span><br>    <span class="hljs-number">3</span>)包含就把元素删除<br><span class="hljs-number">3.</span>输出集合中的元素，看是否包含<span class="hljs-string">&quot;枸杞&quot;</span>的元素全部删除<br></code></pre></td></tr></table></figure><p>按照分析的步骤，完成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、创建一个ArrayList集合对象</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;枸杞&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Java入门&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;宁夏枸杞&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;黑枸杞&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;人字拖&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;特级枸杞&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;枸杞子&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//运行结果如下： [Java入门, 宁夏枸杞, 黑枸杞, 人字拖, 特级枸杞, 枸杞子]</span><br>       <br>        <span class="hljs-comment">// 2、开始完成需求：从集合中找出包含枸杞的数据并删除它</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>            <span class="hljs-comment">// 取出当前遍历到的数据</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> list.get(i);<br>            <span class="hljs-comment">// 判断这个数据中包含枸杞</span><br>            <span class="hljs-keyword">if</span>(ele.contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>                <span class="hljs-comment">// 直接从集合中删除该数据</span><br>                list.remove(ele);<br>            &#125;<br>        &#125;<br>        System.out.println(list);<br>        <span class="hljs-comment">//删除后结果如下：[Java入门, 黑枸杞, 人字拖, 枸杞子]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行完上面代码，我们会发现，删除后的集合中，竟然还有<code>黑枸杞</code>，<code>枸杞子</code>在集合中。这是为什么呢？</p><p><img src="/assets/1662621705234.png" alt="1662621705234"></p><p>枸杞子被保留下来，原理是一样的。可以自行分析。</p><p>那如何解决这个问题呢？这里打算给大家提供两种解决方案：</p><ul><li><strong>集合删除元素方式一</strong>：每次删除完元素后，让控制循环的变量<code>i--</code>就可以了；如下图所示</li></ul><p><img src="/assets/1662622656784.png" alt="1662622656784"></p><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式一：每次删除一个数据后，就让i往左边退一步</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>    <span class="hljs-comment">// 取出当前遍历到的数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-comment">// 判断这个数据中包含枸杞</span><br>    <span class="hljs-keyword">if</span>(ele.contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>        <span class="hljs-comment">// 直接从集合中删除该数据</span><br>        list.remove(ele);<br>        i--;<br>    &#125;<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure><ul><li><strong>集合删除元素方式二</strong>：我们只需要倒着遍历集合，在遍历过程中删除元素就可以了</li></ul><p><img src="/assets/1662623052476.png" alt="1662623052476"></p><p><img src="/assets/1662623321970.png" alt="1662623321970"></p><p><img src="/assets/1662623468659.png" alt="1662623468659"></p><p><img src="/assets/1662623624269.png" alt="1662623624269"></p><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式二：从集合的后面倒着遍历并删除</span><br><span class="hljs-comment">// [Java入门, 人字拖]</span><br><span class="hljs-comment">//   i</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-comment">// 取出当前遍历到的数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-comment">// 判断这个数据中包含枸杞</span><br>    <span class="hljs-keyword">if</span>(ele.contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>        <span class="hljs-comment">// 直接从集合中删除该数据</span><br>        list.remove(ele);<br>    &#125;<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure><h3 id="4-ArrayList应用案例2"><a href="#4-ArrayList应用案例2" class="headerlink" title="4. ArrayList应用案例2"></a>4. ArrayList应用案例2</h3><p>各位同学，上一个ArrayList应用案例中，我们往集合存储的元素是String类型的元素，实际上在工作中我们经常往集合中自定义存储对象。</p><p>接下来我们做个案例，用来往集合中存储自定义的对象，先阅读下面的案例需求：</p><p><img src="/assets/1662623794937.png" alt="1662623794937"></p><p>分析需求发现：</p><ol><li>在外卖系统中，每一份菜都包含，菜品的名称、菜品的原价、菜品的优惠价、菜品的其他信息。那我们就可以定义一个菜品类（Food类），用来描述每一个菜品对象要封装那些数据。</li><li>接着再写一个菜品管理类（FoodManager类），提供展示操作界面、上架菜品、浏览菜品的功能。</li></ol><ul><li>首先我们先定义一个菜品类（Food类），用来描述每一个菜品对象要封装那些数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//菜品名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> originalPrice; <span class="hljs-comment">//菜品原价</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> specialPrice; <span class="hljs-comment">//菜品优惠价</span><br>    <span class="hljs-keyword">private</span> String info; <span class="hljs-comment">//菜品其他信息</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> originalPrice, <span class="hljs-type">double</span> specialPrice, String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.originalPrice = originalPrice;<br>        <span class="hljs-built_in">this</span>.specialPrice = specialPrice;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getOriginalPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> originalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOriginalPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> originalPrice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.originalPrice = originalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSpecialPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> specialPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpecialPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> specialPrice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.specialPrice = specialPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接下来写一个菜品管理类，提供<strong>上架菜品的功能、浏览菜品的功能、展示操作界面的功能。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FoodManager</span>&#123;<br>    <span class="hljs-comment">//为了存储多个菜品，预先创建一个ArrayList集合；</span><br>    <span class="hljs-comment">//上架菜品时，其实就是往集合中添加菜品对象</span><br>    <span class="hljs-comment">//浏览菜品时，其实就是遍历集合中的菜品对象，并打印菜品对象的属性信息。</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Food&gt; foods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br>    <span class="hljs-comment">//为了在下面的多个方法中，能够使用键盘录入，提前把Scanner对象创建好；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>   <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     1、商家上架菜品</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===菜品上架==&quot;</span>);<br>        <span class="hljs-comment">// 2、提前创建一个菜品对象，用于封装用户上架的菜品信息</span><br>        <span class="hljs-type">Food</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>();<br>        System.out.println(<span class="hljs-string">&quot;请您输入上架菜品的名称：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>        food.setName(name);<br><br>        System.out.println(<span class="hljs-string">&quot;请您输入上架菜品的原价：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">originalPrice</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        food.setOriginalPrice(originalPrice);<br><br>        System.out.println(<span class="hljs-string">&quot;请您输入上架菜品的优惠价：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">specialPrice</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        food.setSpecialPrice(specialPrice);<br><br>        System.out.println(<span class="hljs-string">&quot;请您输入上架菜品的其他信息：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> sc.next();<br>        food.setInfo(info);<br><br>        <span class="hljs-comment">// 3、把菜品对象添加到集合容器中去</span><br>        foods.add(food);<br>        System.out.println(<span class="hljs-string">&quot;恭喜您，上架成功~~~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       2、菜品；浏览功能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllFoods</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==当前菜品信息如下：==&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; foods.size(); i++) &#123;<br>            <span class="hljs-type">Food</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> foods.get(i);<br>            System.out.println(<span class="hljs-string">&quot;菜品名称：&quot;</span> + food.getName());<br>            System.out.println(<span class="hljs-string">&quot;菜品原价：&quot;</span> + food.getOriginalPrice());<br>            System.out.println(<span class="hljs-string">&quot;菜品优惠价：&quot;</span> + food.getSpecialPrice());<br>            System.out.println(<span class="hljs-string">&quot;其他描述信息：&quot;</span> + food.getInfo());<br>            System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    3、专门负责展示系统界面的</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;====欢迎进入商家后台管理系统=====&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1、上架菜品（add）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2、浏览菜品（query）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3、退出系统（exit）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请您选择操作命令：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">switch</span> (command) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>                    add();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;query&quot;</span>:<br>                    printAllFoods();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 结束当前方法！</span><br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;您输入的操作命令有误~~&quot;</span>);<br>            &#125;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最后在写一个测试类Test，在测试类中进行测试。其实测试类，只起到一个启动程序的作用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FoodManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoodManager</span>();<br>        manager.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：需要用户输入add、query或者exit，选择进入不同的功能。</p><p><img src="/assets/1662624841469.png" alt="1662624841469"></p><p>好了，如果你能够把这个案例写出来，说明你对面向对象的思维封装数据，以及使用ArrayList容器存储数据，并对数据进行处理这方面的知识已经运用的很熟悉了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07面向对象基础</title>
    <link href="/2023/12/01/day07-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/12/01/day07-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="07——面向对象基础"><a href="#07——面向对象基础" class="headerlink" title="07——面向对象基础"></a>07——面向对象基础</h3><p>各位同学，恭喜大家！！！大家学习完前面的课程后，说明Java的基础语法就全掌握了。</p><p>接下来，我们要学习的是Java中最核心的课程——<strong>面向对象编程</strong>。</p><h2 id="一、面向对象入门"><a href="#一、面向对象入门" class="headerlink" title="一、面向对象入门"></a>一、面向对象入门</h2><p>各位同学，为什么说面向对象是Java最核心的课程呢？因为写Java程序是有套路的，而面向对象就是写Java程序的套路；你如果不知道面向对象编程，那么你Java语言就算白学了。</p><p>那这种编程套路是咋回事呢？ 接下来，我们通过一个案例快速的认识一下。</p><p>现在假设我们需要处理的是学生的姓名、语文成绩、数学成绩这三个数据，要求打印输出这个学生的总成绩，和平均成绩。</p><p><img src="/assets/1662209848898.png" alt="1662209848898"></p><p>遇到这样的需求，我们以前都会定义方法来做，如下图所示</p><p>注意：这里每一个方法有<strong>三个参数</strong></p><p><img src="/assets/1662209886046.png" alt="1662209886046"></p><p><img src="/assets/1662209899008.png" alt="1662209899008"></p><p>定义好方法之后，我们调用方法的时候，需要给每一个方法<strong>传递三个实际参数</strong></p><p><img src="/assets/1662210110729.png" alt="1662210110729"></p><p>在上面案例中，这种编程方式是一种面向过程的编程方式。所谓面向过程，就是编写一个的方法，有数据要进行处理就交给方法来处理。</p><p>但是实际上<strong>姓名、语文成绩、数学成绩三个数据可以放在一起，组合成一个对象</strong>，然后让对象提供方法对自己的数据进行处理。这种方式称之为面向对象编程。</p><p><img src="/assets/1662210587156.png" alt="1662210587156"></p><p><strong>总结一些：所谓编写对象编程，就是把要处理的数据交给对象，让对象来处理。</strong></p><h2 id="二、深刻认识面向对象"><a href="#二、深刻认识面向对象" class="headerlink" title="二、深刻认识面向对象"></a>二、深刻认识面向对象</h2><p>好的各位同学，在上一节课我们已经用面向对象的编程套路，处理了学生数据。接下来我们就要搞清楚，面向对象的几个最核心问题了。</p><p><img src="/assets/1662211382446.png" alt="1662211382446"></p><p>我们把这三个问题搞明白，那么你对面向对象的理解就很到位。 </p><h3 id="2-1-面向对象编程有什么好处？"><a href="#2-1-面向对象编程有什么好处？" class="headerlink" title="2.1 面向对象编程有什么好处？"></a>2.1 面向对象编程有什么好处？</h3><p>先来看第一个问题，面向对象编程到底有什么好处呢？ 那就不得不谈，Java的祖师爷对这个世界的理解了。</p><p>Java的祖师爷，詹姆斯高斯林认为，在这个世界中 <strong>万物皆对象！</strong>任何一个对象都可以包含一些数据，数据属于哪个对象，就由哪个对象来处理。</p><p>这样的话，只要我们找到了对象，其实就找到了对数据的处理方式。</p><p><img src="/assets/1662211620054.png" alt="1662211620054"></p><p>所以面向对象编程的好处，用一句话总结就是：面向对象的开发更符合人类的思维习惯，让编程变得更加简单、更加直观。</p><h3 id="2-2-程序中对象到底是个啥？"><a href="#2-2-程序中对象到底是个啥？" class="headerlink" title="2.2 程序中对象到底是个啥？"></a>2.2 程序中对象到底是个啥？</h3><p>说完面向对象编程有什么好处之后，这里有同学可能会有问题了，你刚才举的例子中，“汽车”、“手机”、“蔡徐坤”是一个实实在在的东西，你说是一个对象好理解。那我们程序中的对象到底是个啥呢？</p><p><strong>对象实质上是一种特殊的数据结构</strong>。这种结构怎么理解呢？</p><p>你可以把对象理解成一张表格，表当中记录的数据，就是对象拥有的数据。</p><p><img src="/assets/1662212402342.png" alt="1662212402342"></p><p>这就是程序中的对象到底是个啥！ <strong>一句话总结，对象其实就是一张数据表，表当中记录什么数据，对象就处理什么数据。</strong></p><h3 id="2-3-对象是怎么出来的？"><a href="#2-3-对象是怎么出来的？" class="headerlink" title="2.3 对象是怎么出来的？"></a>2.3 对象是怎么出来的？</h3><p>刚刚我们讲到对象就是一张数据表，那么这个数据表是怎么来的呢？这张表是不会无缘无故存在的，因为Java也不知道你这个对象要处理哪些数据，所以这张表需要我们设计出来。</p><p>用什么来设计这张表呢？就是类（class），<strong>类可以理解成对象的设计图</strong>，或者对象的模板。</p><p><img src="/assets/1662213156309.png" alt="1662213156309"></p><p>我们需要按照对象的设计图创造一个对象。<strong>设计图中规定有哪些数据，对象中就只能有哪些数据。</strong></p><p><img src="/assets/1662213268590.png" alt="1662213268590"></p><p><strong>一句话总结：对象可以理解成一张数据表，而数据表中可以有哪些数据，是有类来设计的。</strong></p><h2 id="三、对象在计算机中的执行原理"><a href="#三、对象在计算机中的执行原理" class="headerlink" title="三、对象在计算机中的执行原理"></a>三、对象在计算机中的执行原理</h2><p>各位同学，前面我们已经带同学写了面向对象的代码，也知道对象到底是咋回事。如果我们再搞清楚对象在计算机中的执行原理，那我们对面向对象的理解就更加专业了。</p><p>按照我们之前讲的数组的执行原理，数组变量记录的其实数数组在堆内存中的地址。其实面向对象的代码执行原理和数组的执行原理是非常类似的。</p><p>其实<code>Student s1 = new Student();</code>这句话中的原理如下</p><ul><li><p><code>Student s1</code>表示的是在栈内存中，创建了一个Student类型的变量，变量名为s1</p></li><li><p>而<code>new Student()</code>会在堆内存中创建一个对象，而对象中包含学生的属性名和属性值</p><p>同时系统会为这个Student对象分配一个地址值0x4f3f5b24</p></li><li><p>接着把对象的地址赋值给栈内存中的变量s1，通过s1记录的地址就可以找到这个对象</p></li><li><p>当执行<code>s1.name=“播妞”</code>时，其实就是通过s1找到对象的地址，再通过对象找到对象的name属性，再给对象的name属性赋值为<code>播妞</code>;</p></li></ul><p>搞明白<code>Student s1 = new Student();</code>的原理之后，<code>Student s2 = new Student();</code>原理完全一样，只是在堆内存中重新创建了一个对象，又有一个新的地址。<code>s2.name</code>是访问另对象的属性。</p><p><img src="/assets/1662213744520.png" alt="1662213744520"></p><h2 id="四、类和对象的一些注意事项"><a href="#四、类和对象的一些注意事项" class="headerlink" title="四、类和对象的一些注意事项"></a>四、类和对象的一些注意事项</h2><p>各位同学，前面几节课我们已经入门了。接下来，关于面向对象有一些细枝末节的东西需要给大家交代一下。</p><p>我把这些注意事项已经列举在下面了，我们把几个不好理解的解释一下就可以了（标记方框），其他的大大家一看就能理解。</p><p><img src="/assets/1662213891968.png" alt="1662213891968"></p><blockquote><p><strong>第一条</strong>：一个代码文件中，可以写多个class类，但是只能有一个是public修饰，且public修饰的类必须和文件名相同。</p></blockquote><p>假设文件名为<code>Demo1.java</code>，这个文件中假设有两个类<code>Demo1类和Student类</code>，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//public修饰的类Demo1，和文件名Demo1相同</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>第二条：</strong>对象与对象之间的数据不会相互影响，但是多个变量指向同一个对象会相互影响。</p></blockquote><p>如下图所示，s1和s2两个变量分别记录的是两个对象的地址值，各自修改各自属性值，是互不影响的。</p><p><img src="/assets/1662214650611.png" alt="1662214650611"></p><p>如下图所示，s1和s2两个变量记录的是同一个对象的地址值，s1修改对象的属性值，再用s2访问这个属性，会发现已经被修改了。</p><p><img src="/assets/1662215061486.png" alt="1662215061486"></p><h2 id="五、this关键字"><a href="#五、this关键字" class="headerlink" title="五、this关键字"></a>五、this关键字</h2><p>各位同学，接下来我们学习几个面向对象的小知识点，这里我们先认识一下this关键字是什么含义，再说一下this的应用场景。</p><p><strong>this是什么呢？</strong></p><p>this就是一个变量，用在方法中，可以拿到当前类的对象。</p><p>我们看下图所示代码，通过代码来体会这句话到底是什么意思。<strong>哪一个对象调用方法方法中的this就是哪一个对象</strong></p><p><img src="/assets/1662301823320.png" alt="1662301823320"></p><p>上面代码运行结果如下</p><p><img src="/assets/1662302089326.png" alt="1662302089326"></p><p><strong>this有什么用呢？</strong></p><p>通过this在方法中可以访问本类对象的成员变量。我们看下图代码，分析打印结果是多少</p><p><img src="/assets/1662303254161.png" alt="1662303254161"></p><p>分析上面的代码<code>s3.score=325</code>，调用方法printPass方法时，方法中的<code>this.score</code>也是325； 而方法中的参数score接收的是250。执行结果是</p><p><img src="/assets/1662303676092.png" alt="1662303676092"></p><p>关于this关键字我们就学习到这里，重点记住这句话：<strong>哪一个对象调用方法方法中的this就是哪一个对象</strong></p><h2 id="六、构造器"><a href="#六、构造器" class="headerlink" title="六、构造器"></a>六、构造器</h2><p>好同学们，接下来我们学习一个非常实用的语法知识——叫做构造器。</p><p>关于构造器，我们掌握下面几个问题就可以了：</p><ol><li>什么是构造器？</li><li>掌握构造器的特点？</li><li>构造器的应用场景？</li><li>构造器有哪些注意事项？</li></ol><p>我们一个问题一个问题的来学习，先来学习什么是构造器？</p><ul><li><p><strong>什么是构造器？</strong></p><p>构造器其实是一种特殊的方法，但是这个方法没有返回值类型，方法名必须和类名相同。</p><p>如下图所示：下面有一个Student类，构造器名称也必须叫Student；也有空参数构造器，也可以有有参数构造器。</p></li></ul><p><img src="/assets/1662304435504.png" alt="1662304435504"></p><p>认识了构造器之后，接着我们看一下构造器有什么特点。</p><ul><li><p><strong>构造器的特点？</strong></p><p>在创建对象时，会调用构造器。</p><p>也就是说 <code>new Student()</code>就是在执行构造器，当构造器执行完了，也就意味着对象创建成功。 </p><p><img src="/assets/1662304779863.png" alt="1662304779863"></p><p>当执行<code>new Student(&quot;播仔&quot;,99)</code>创建对象时，就是在执行有参数构造器，当有参数构造器执行完，就意味着对象创建完毕了。</p><p><img src="/assets/1662304859276.png" alt="1662304859276"></p></li></ul><p>关于构造器的特点，我们记住一句话：<strong>new 对象就是在执行构造方法</strong></p><ul><li><p><strong>构造器的应用场景？</strong></p><p>其实构造器就是用来创建对象的。可以在创建对象时给对象的属性做一些初始化操作。如下图所示：</p></li></ul><p><img src="/assets/1662305406056.png" alt="1662305406056"></p><ul><li><p><strong>构造器的注意事项？</strong></p><p>学习完构造器的应用场景之后，接下来我们再看一下构造器有哪些注意事项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>在设计一个类时，如果不写构造器，Java会自动生成一个无参数构造器。<br><span class="hljs-number">2.</span>一定定义了有参数构造器，Java就不再提供空参数构造器，此时建议自己加一个无参数构造器。<br></code></pre></td></tr></table></figure></li></ul><p>关于构造器的这几个问题我们再总结一下。掌握这几个问题，构造方法就算完全明白了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>什么是构造器？<br>答：构造器其实是一种特殊的方法，但是这个方法没有返回值类型，方法名必须和类名相同。<br><br><span class="hljs-number">2.</span>构造器什么时候执行？<br>答：<span class="hljs-keyword">new</span> 对象就是在执行构造方法；<br><br><span class="hljs-number">3.</span>构造方法的应用场景是什么？<br>答：在创建对象时，可以用构造方法给成员变量赋值<br><br><span class="hljs-number">4.</span>构造方法有哪些注意事项？<br><span class="hljs-number">1</span>)在设计一个类时，如果不写构造器，Java会自动生成一个无参数构造器。<br><span class="hljs-number">2</span>)一定定义了有参数构造器，Java就不再提供空参数构造器，此时建议自己加一个无参数构造器。<br></code></pre></td></tr></table></figure><h2 id="七、封装性"><a href="#七、封装性" class="headerlink" title="七、封装性"></a>七、封装性</h2><p>各位同学，接下来我们再学习一个面向对象很重要的特征叫做——封装性。</p><p><strong>1. 什么是封装呢？</strong></p><p>所谓封装，就是用类设计对象处理某一个事物的数据时，应该把要处理的数据，以及处理数据的方法，都设计到一个对象中去。</p><p>比如：在设计学生类时，把学生对象的姓名、语文成绩、数学成绩三个属性，以及求学生总分、平均分的方法，都封装到学生对象中来。</p><p><img src="/assets/1662305928023.png" alt="1662305928023"></p><p>现在我们已经知道什么是封装了。那我们学习封装，学习个啥呢？  其实在实际开发中，在用类设计对事处理的数据，以及对数据处理的方法时，是有一些设计规范的。</p><p>封装的设计规范用8个字总结，就是：<strong>合理隐藏、合理暴露</strong></p><p>比如，设计一辆汽车时，汽车的发动机、变速箱等一些零件并不需要让每一个开车的知道，所以就把它们隐藏到了汽车的内部。</p><p>把发动机、变速箱等这些零件隐藏起来，这样做其实更加安全，因为并不是所有人都很懂发动机、变速箱，如果暴露在外面很可能会被不懂的人弄坏。</p><p><img src="/assets/1662306602412.png" alt="1662306602412"></p><p>在设计汽车时，除了隐藏部分零件，但是还是得合理的暴露一些东西出来，让司机能够操纵汽车，让汽车跑起来。比如：点火按钮啊、方向盘啊、刹车啊、油门啊、档把啊… 这些就是故意暴露出来让司机操纵汽车的。</p><p><img src="/assets/1662306879230.png" alt="1662306879230"></p><p>好了，到现在我们已经理解什么是封装的一些规范了。就是：<strong>合理暴露、合理隐藏</strong></p><p><strong>2. 封装在代码中的体现</strong></p><p>知道什么是封装之后，那封装在代码中如何体现呢？一般我们在设计一个类时，会将成员变量隐藏，然后把操作成员变量的方法对外暴露。</p><p>这里需要用到一个修饰符，叫private，<strong>被private修饰的变量或者方法，只能在本类中被访问。</strong></p><p>如下图所示，<code>private double score;</code> 就相当于把score变量封装在了Student对象的内部，且不对外暴露，你想要在其他类中访问score这个变量就，就不能直接访问了；</p><p>如果你想给Student对象的score属性赋值，得调用对外暴露的方法<code>setScore(int score)</code>，在这个方法中可以对调用者传递过来的数据进行一些控制，更加安全。</p><p><img src="/assets/1662307191295.png" alt="1662307191295"></p><p>当你想获取socre变量的值时，就得调用对外暴露的另一个方法 <code>getScore()</code> </p><p>关于封装我们就学习到这里了。</p><h2 id="八、实体JavaBean"><a href="#八、实体JavaBean" class="headerlink" title="八、实体JavaBean"></a>八、实体JavaBean</h2><p>接下来，我们学习一个面向对象编程中，经常写的一种类——叫实体JavaBean类。我们先来看什么是实体类？</p><p><strong>1. 什么是实体类？</strong></p><p>实体类就是一种特殊的类，它需要满足下面的要求：</p><p><img src="/assets/1662335204398.png" alt="1662335204398"></p><p>接下来我们按照要求，写一个Student实体类；</p><p><img src="/assets/1662335451401.png" alt="1662335451401"></p><p>写完实体类之后，我们看一看它有什么特点？ 其实我们会发现实体类中除了有给对象存、取值的方法就没有提供其他方法了。所以实体类仅仅只是用来封装数据用的。</p><p>知道实体类有什么特点之后，接着我们看一下它有哪些应用场景？</p><p><strong>2. 实体类的应用场景</strong></p><p>在实际开发中，实体类仅仅只用来封装数据，而对数据的处理交给其他类来完成，以实现数据和数据业务处理相分离。如下图所示</p><p><img src="/assets/1662336287570.png" alt="1662336287570"></p><p>在实际应用中，会将类作为一种数据类型使用。如下图所示，在StudentOperator类中，定义一个Student类型的成员变量student，然后使用构造器给student成员变量赋值。</p><p>然后在Student的printPass()方法中，使用student调用Student对象的方法，对Student对象的数据进行处理。</p><p><img src="/assets/1662337507608.png" alt="1662337507608"></p><p>到这里，我们已经学习了JavaBean实体类的是什么，以及它的应用场景，我们总结一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>JavaBean实体类是什么？有啥特点<br>JavaBean实体类，是一种特殊的；它需要私有化成员变量，有空参数构造方法、同时提供getXxx和setXxx方法；<br><br>JavaBean实体类仅仅只用来封装数据，只提供对数据进行存和取的方法<br> <br><span class="hljs-number">2.</span>JavaBean的应用场景？<br>JavaBean实体类，只负责封装数据，而把数据处理的操作放在其他类中，以实现数据和数据处理相分离。<br></code></pre></td></tr></table></figure><h2 id="九、面向对象综合案例"><a href="#九、面向对象综合案例" class="headerlink" title="九、面向对象综合案例"></a>九、面向对象综合案例</h2><p>学习完面向对象的语法知识之后。接下来，我们做一个面向对象的综合案例——模仿电影信息系统。</p><p>需求如下图所示</p><pre><code class="hljs">1. 想要展示系统中全部的电影信息（每部电影：编号、名称、价格）2. 允许用户根据电影的编号（id），查询出某个电影的详细信息。</code></pre><p><img src="/assets/1662351774659.png" alt="1662351774659"></p><p>运行程序时，能够根据用户的选择，执行不同的功能，如下图所示</p><p><img src="/assets/1662351990387.png" alt="1662351990387"></p><p>按照下面的步骤来完成需求</p><h3 id="1-第一步：定义电影类"><a href="#1-第一步：定义电影类" class="headerlink" title="1. 第一步：定义电影类"></a>1. 第一步：定义电影类</h3><p>首先每一部电影，都包含这部电影的相关信息，比如：电影的编号（id）、电影的名称（name）、电影的价格（price）、电影的分数（score）、电影的导演（director）、电影的主演（actor）、电影的简介（info）。 </p><p>为了去描述每一部电影，有哪些信息，我们可以设计一个电影类（Movie），电影类仅仅只是为了封装电影的信息，所以按照JavaBean类的标准写法来写就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br>    <span class="hljs-keyword">private</span> String director;<br>    <span class="hljs-keyword">private</span> String actor;<br>    <span class="hljs-keyword">private</span> String info;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, <span class="hljs-type">double</span> price, <span class="hljs-type">double</span> score, String director, String actor, String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.director = director;<br>        <span class="hljs-built_in">this</span>.actor = actor;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDirector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirector</span><span class="hljs-params">(String director)</span> &#123;<br>        <span class="hljs-built_in">this</span>.director = director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> actor;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setActor</span><span class="hljs-params">(String actor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actor = actor;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-第二步：定义电影操作类"><a href="#2-第二步：定义电影操作类" class="headerlink" title="2. 第二步：定义电影操作类"></a>2. 第二步：定义电影操作类</h3><p>前面我们定义的Movie类，仅仅只是用来封装每一部电影的信息。为了让电影数据和电影数据的操作相分离，我们还得有一个电影操作类（MovieOperator）。</p><p>因为系统中有多部电影，所以电影操作类中MovieOperator，需要有一个<code>Movie[] movies;</code> 用来存储多部电影对象；</p><p>同时在MovieOperator类中，提供对外提供，对电影数组进行操作的方法。如<code>printAllMovies()</code>用于打印数组中所有的电影信息，<code>searchMovieById(int id)</code>方法根据id查找一个电影的信息并打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieOperator</span> &#123;<br>    <span class="hljs-comment">//因为系统中有多部电影，所以电影操作类中，需要有一个Movie的数组</span><br>    <span class="hljs-keyword">private</span> Movie[] movies;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MovieOperator</span><span class="hljs-params">(Movie[] movies)</span>&#123;<br>        <span class="hljs-built_in">this</span>.movies = movies;<br>    &#125;<br><br>    <span class="hljs-comment">/** 1、展示系统全部电影信息 movies = [m1, m2, m3, ...]*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllMovies</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----系统全部电影信息如下：-------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> movies[i];<br>            System.out.println(<span class="hljs-string">&quot;编号：&quot;</span> + m.getId());<br>            System.out.println(<span class="hljs-string">&quot;名称：&quot;</span> + m.getName());<br>            System.out.println(<span class="hljs-string">&quot;价格：&quot;</span> + m.getPrice());<br>            System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/** 2、根据电影的编号查询出该电影的详细信息并展示 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchMovieById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-keyword">if</span>(m.getId() == id)&#123;<br>                System.out.println(<span class="hljs-string">&quot;该电影详情如下：&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;编号：&quot;</span> + m.getId());<br>                System.out.println(<span class="hljs-string">&quot;名称：&quot;</span> + m.getName());<br>                System.out.println(<span class="hljs-string">&quot;价格：&quot;</span> + m.getPrice());<br>                System.out.println(<span class="hljs-string">&quot;得分：&quot;</span> + m.getScore());<br>                System.out.println(<span class="hljs-string">&quot;导演：&quot;</span> + m.getDirector());<br>                System.out.println(<span class="hljs-string">&quot;主演：&quot;</span> + m.getActor());<br>                System.out.println(<span class="hljs-string">&quot;其他信息：&quot;</span> + m.getInfo());<br>                <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 已经找到了电影信息，没有必要再执行了</span><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;没有该电影信息~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-第三步：定义测试类"><a href="#3-第三步：定义测试类" class="headerlink" title="3. 第三步：定义测试类"></a>3. 第三步：定义测试类</h3><p>最后，我们需要在测试类中，准备好所有的电影数据，并用一个数组保存起来。每一部电影的数据可以封装成一个对象。然后把对象用数组存起来即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个Movie类型的数组</span><br>        Movie[] movies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-comment">//创建4个电影对象，分别存储到movies数组中</span><br>        movies[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;水门桥&quot;</span>, <span class="hljs-number">38.9</span>, <span class="hljs-number">9.8</span>, <span class="hljs-string">&quot;徐克&quot;</span>, <span class="hljs-string">&quot;吴京&quot;</span>,<span class="hljs-string">&quot;12万人想看&quot;</span>);<br>        movies[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;出拳吧&quot;</span>, <span class="hljs-number">39</span>, <span class="hljs-number">7.8</span>, <span class="hljs-string">&quot;唐晓白&quot;</span>, <span class="hljs-string">&quot;田雨&quot;</span>,<span class="hljs-string">&quot;3.5万人想看&quot;</span>);<br>        movies[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;月球陨落&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">7.9</span>, <span class="hljs-string">&quot;罗兰&quot;</span>, <span class="hljs-string">&quot;贝瑞&quot;</span>,<span class="hljs-string">&quot;17.9万人想看&quot;</span>);<br>        movies[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;一点就到家&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">8.7</span>, <span class="hljs-string">&quot;许宏宇&quot;</span>, <span class="hljs-string">&quot;刘昊然&quot;</span>,<span class="hljs-string">&quot;10.8万人想看&quot;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>准备好测试数据之后，接下来就需要对电影数据进行操作。我们已经把对电影操作先关的功能写到了MovieOperator类中，所以接下来，创建MovieOperator类对象，调用方法就可以完成相关功能。</p><p>继续再main方法中，接着写下面的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4、创建一个电影操作类的对象，接收电影数据，并对其进行业务处理</span><br><span class="hljs-type">MovieOperator</span> <span class="hljs-variable">operator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MovieOperator</span>(movies);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;==电影信息系统==&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;1、查询全部电影信息&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;2、根据id查询某个电影的详细信息展示&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;请您输入操作命令：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> sc.nextInt();<br>    <span class="hljs-keyword">switch</span> (command) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-comment">// 展示全部电影信息</span><br>            operator.printAllMovies();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-comment">// 根据id查询某个电影的详细信息展示</span><br>            System.out.println(<span class="hljs-string">&quot;请您输入查询的电影id:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            operator.searchMovieById(id);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            System.out.println(<span class="hljs-string">&quot;您输入的命令有问题~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，电影信息系统就完成了。 小伙伴们，自己尝试写一下吧！！</p><h2 id="十、成员变量和局部变量的区别"><a href="#十、成员变量和局部变量的区别" class="headerlink" title="十、成员变量和局部变量的区别"></a>十、成员变量和局部变量的区别</h2><p>各位同学，面向对象的基础内容咱们已经学习完了。同学们在面向对象代码时，经常会把成员变量和局部变量搞混。所以现在我们讲一讲他们的区别。</p><p><img src="/assets/1662371089114.png" alt="1662371089114"></p><p>如下图所示，成员变量在类中方法外，而局部变量在方法中。</p><p><img src="/assets/1662353340190.png" alt="1662353340190"></p><hr><p>到这里，我们关于面向对象的基础知识就学习完了。<strong>面向对象的核心点就是封装，将数据和数据的处理方式，都封装到对象中； 至于对象要封装哪些数据？对数据进行怎样的处理？ 需要通过类来设计。</strong></p><p>需要注意的是，不同的人，对同一个对象进行设计，对象封装那些数据，提供哪些方法，可能会有所不同；只要能够完成需求，符合设计规范，都是合理的设计。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06Java编程案例</title>
    <link href="/2023/12/01/day06-Java%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%93%E9%A2%98%EF%BC%89/"/>
    <url>/2023/12/01/day06-Java%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%93%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="06——Java编程案例（专题）"><a href="#06——Java编程案例（专题）" class="headerlink" title="06——Java编程案例（专题）"></a>06——Java编程案例（专题）</h3><p>各位同学，前面我们已经学习过很多Java的基础知识了，主要有<strong>变量、数组、运算符、流程控制、方法等</strong>。但是对于这些知识点的运用，掌握得还不是很熟练，所以今天我们专门花一天时间，给同学们讲几个专项练习题，把前面所学习的知识巩固一下。</p><p>同时通过这些专项练习题，<strong>积攒大家的代码量，以便提升大家的编程能力和编程思维</strong>。这里所说的编程思维就是使用Java技术解决问题的思维方式；编程能力就是按照编程思维编写代码的能力。</p><p>想要提升编程思维和编程能力，在这里给同学们一些学习上的建议：</p><ul><li>编程思维、编程能力不是一朝一夕形成的，需要大量思考，练习和时间的沉淀。</li><li>具体措施：前期，建议先模仿；后期，自然就能创新了；<br>勤于练习代码，勤于思考，孰能生巧。</li></ul><p>中国的航空母舰、战斗机，这些技术都是先模仿，再创新的，而且的模仿的周期是非常长的。所以同学们在使用Java技术解决问题时，也是先模仿一些特定问题的解决思路，以后遇到同类型的问题，就采用同一种思维模式来做就行。</p><p><img src="/assets/1661995636689.png" alt="1661995636689"></p><h2 id="案例一：买飞机票"><a href="#案例一：买飞机票" class="headerlink" title="案例一：买飞机票"></a>案例一：买飞机票</h2><p>各位同学，我们先来学习第一个案例《飞机买票》，先仔细阅读一下案例需求</p><p><img src="/assets/1661996140214.png" alt="1661996140214"></p><p>我们来分析一下，这个需求该如何实现。前面我跟同学们讲过，将来我们去做一些需求，都是一个一个方法来实现的，所以在这里我们也采用方法来编写。</p><p>这个方法如何编写呢？采用下面的方式来思考</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>阅读需求我们会发现，不同月份、不同原价、不同舱位类型优惠方案都不一样；<br>所以，可以将原价、月份、舱位类型写成参数<br><br><span class="hljs-number">2.</span>接着，考虑方法是否有返回值？<br>阅读需求我们发现，最终结果是求当前用户的优惠票价<br>所以，可以将优惠票价作为方法的返回值。<br><br><span class="hljs-number">3.</span>最后，再考虑方法内部的业务逻辑<br>先使用<span class="hljs-keyword">if</span>判断月份是旺季还是淡季，然后使用<span class="hljs-keyword">switch</span>分支判断是头等舱还是经济舱，计算票价<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成买飞机票的案例。</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> calculate(<span class="hljs-number">1000</span>, <span class="hljs-number">11</span>, <span class="hljs-string">&quot;头等舱&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;优惠价是：&quot;</span> + price);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">double</span> price,<span class="hljs-type">int</span> month,String type)</span>&#123;<br>        <span class="hljs-comment">// 1、判断当前月份是淡季还是旺季</span><br>        <span class="hljs-keyword">if</span>(month &gt;= <span class="hljs-number">5</span> &amp;&amp; month &lt;= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 旺季</span><br>            <span class="hljs-comment">// 2、判断仓位类型。</span><br>            <span class="hljs-keyword">switch</span> (type)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;头等舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.9</span>; <span class="hljs-comment">// price = price * 0.9;</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;经济舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.85</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 淡季</span><br>            <span class="hljs-keyword">switch</span> (type)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;头等舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.7</span>; <span class="hljs-comment">// price = price * 0.7;</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;经济舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.65</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例二：开发验证码"><a href="#案例二：开发验证码" class="headerlink" title="案例二：开发验证码"></a>案例二：开发验证码</h2><p>各位同学，接下来，我们学习第二个案例《开发验证码》，同样先阅读一下案例需求</p><p><img src="/assets/1661996187012.png" alt="1661996187012"></p><p>分析一下，需求是要我们开发一个程序，生成指定位数的验证码。考虑到实际工作中生成验证码的功能很多地方都会用到，为了提高代码的复用性，我们还是把生成验证码的功能写成方法比较好。</p><p>那生成验证码的方法该怎么写呢？按照下面的三个步骤进行思考</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>要求生成指定位数的验证码，到底多少位呢？让调用者传递即可<br>所以，需要一个参数，用来表示验证码的位数<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要有返回值？<br>该方法的结果，就是为了得到验证码<br>所以，返回值就是验证码；<br><br><span class="hljs-number">3.</span>最后，再考虑方法内部的业务逻辑<br><span class="hljs-number">1</span>)先按照方法接收的验证码位数n,循环n次<br><span class="hljs-number">2</span>)每次循环，产生一个字符，可以是数字字符、或者大小写字母字符<br><span class="hljs-number">3</span>)定义一个String类型的变量用于记住产生的每位随机字符<br></code></pre></td></tr></table></figure><p>按照思路，编写代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成生成随机验证码。</span><br>        System.out.println(createCode(<span class="hljs-number">8</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">//1)先按照方法接收的验证码位数n,循环n次</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">//3)定义一个String类型的变量用于记住产生的每位随机字符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// i = 1 2 3 4 5</span><br>            <span class="hljs-comment">//2)每次循环，产生一个字符，可以是数字字符、或者大小写字母字符</span><br>            <span class="hljs-comment">// 思路：随机一个0 1 2之间的数字出来，0代表随机一个数字字符，1、2代表随机大写字母，小写字母。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">3</span>); <span class="hljs-comment">// 0 1 2</span><br>            <span class="hljs-keyword">switch</span> (type) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment">// 随机一个数字字符</span><br>                    code += r.nextInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 0 - 9  code = code + 8</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">// 随机一个大写字符 A 65   Z 65+25    (0 - 25) + 65</span><br>                    <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (r.nextInt(<span class="hljs-number">26</span>) + <span class="hljs-number">65</span>);<br>                    code += ch1;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-comment">// 随机一个小写字符 a 97   z 97+25    (0 - 25) + 97</span><br>                    <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (r.nextInt(<span class="hljs-number">26</span>) + <span class="hljs-number">97</span>);<br>                    code += ch2;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例三：评委打分"><a href="#案例三：评委打分" class="headerlink" title="案例三：评委打分"></a>案例三：评委打分</h2><p>各位同学，接下来，我们学习第三个案例《评委打分》，同样先阅读一下案例需求</p><p><img src="/assets/1661996204673.png" alt="1661996204673">我们把上面的需求还是用方法来编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据来处理？<br>需求中说，有多个评委的打分，但是到底多少个评委呢？ 可以由调用者传递<br>所以，我们可以把评委的个数写成参数；<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要有返回值？<br>需求中，想要的最终结果是平均分<br>所以，返回值就是平均分；<br><br><span class="hljs-number">3.</span>最后，再考虑方法内部的业务逻辑<br><span class="hljs-number">1</span>)假设评委的个位为n个，那么就需要n个评委的分数，首先可以新建一个长度为n的数组，用来存储每一个评委的分数<br><br><span class="hljs-number">2</span>)循环n次，使用Scanner键盘录入n个<span class="hljs-number">1</span>~<span class="hljs-number">100</span>范围内的整数，并把整数存储到数组中<br><br><span class="hljs-number">3</span>)求数组中元素的总和、最大值、最小值<br><br><span class="hljs-number">4</span>)最后再计算平均值； 平均值 = (和-最大值-最小值)/(数组.length-<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成评委打分案例。</span><br>        System.out.println(<span class="hljs-string">&quot;当前选手得分是：&quot;</span> + getAverageScore(<span class="hljs-number">6</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAverageScore</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">// 1、定义一个动态初始化的数组，负责后期存入评委的打分</span><br>        <span class="hljs-type">int</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n]; <span class="hljs-comment">// 6</span><br>        <span class="hljs-comment">// scores = [0, 0, 0, 0, 0, 0]</span><br><br>        <span class="hljs-comment">// 2、遍历数组的每个位置，依次录入评委的分数</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>            System.out.println(<span class="hljs-string">&quot;请您录入第&quot;</span>+ (i + <span class="hljs-number">1</span>) +<span class="hljs-string">&quot;个评委的分数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            scores[i] = score;<br>        &#125;<br><br>        <span class="hljs-comment">// 3、从数组中计算出总分，找出最高分，最低分。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 求总分用的变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> scores[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 求最大值的</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> scores[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 求最小值的。</span><br><br>        <span class="hljs-comment">// 遍历数组找出这些数据的。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scores[i];<br>            <span class="hljs-comment">// 求和</span><br>            sum += score;<br>            <span class="hljs-comment">// 求最大值</span><br>            <span class="hljs-keyword">if</span>(score &gt; max)&#123;<br>                max = score;<br>            &#125;<br>            <span class="hljs-comment">// 求最小值</span><br>            <span class="hljs-keyword">if</span>(score &lt; min)&#123;<br>                min = score;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 4、计算出平均分并返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> * (sum - min - max) / (number - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例四：数字加密"><a href="#案例四：数字加密" class="headerlink" title="案例四：数字加密"></a>案例四：数字加密</h2><p>各位同学，接下来我们学习第四个案例《数字加密》，我们还是先阅读一下案例需求</p><p><img src="/assets/1661996239984.png" alt="1661996239984"></p><p>仔细阅读需求后发现，简答来说该需求要做的事情，就是把一个4位数的整数，经过一系列的加密运算（至于怎么运算，待会再详细分析），得到一个新的整数。</p><p>我们还是把这个需求用方法来实现，按照下面的思维模式进行分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>需要一个<span class="hljs-number">4</span>位数，至于是哪一个数，让方法的调用者传递。<br>所以，方法的参数，就是这个需要加密的四位数<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要有返回值？<br>方法最终的结果是一个加密后的数据<br>所以，返回值就表示为加密后的数据。<br><br><span class="hljs-number">3.</span>最后，再考虑方法内部的业务逻辑，这里的业务逻辑就是那一系列的加密运算<br><span class="hljs-number">1</span>)先要把<span class="hljs-number">4</span>位数整数拆分为，<span class="hljs-number">4</span>个数字，用一个数组保存起来<br><span class="hljs-number">2</span>)再将数组中的每一个元素加<span class="hljs-number">5</span>，再对<span class="hljs-number">10</span>取余<br><span class="hljs-number">3</span>)最后将数组中的元素反转，<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成数字加密程序的开发。</span><br>        System.out.println(<span class="hljs-string">&quot;加密后的结果是：&quot;</span> + encrypt(<span class="hljs-number">8346</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>        <span class="hljs-comment">// number = 1983</span><br>        <span class="hljs-comment">// 1、把这个密码拆分成一个一个的数字，才可以对其进行加密啊。</span><br>        <span class="hljs-type">int</span>[] numbers = split(number);<br>        <span class="hljs-comment">// numbers = [1, 9, 8, 3]</span><br><br>        <span class="hljs-comment">// 2、遍历这个数组中的每个数字，对其进行加密处理。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2 3</span><br>            numbers[i] = (numbers[i] + <span class="hljs-number">5</span>) % <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-comment">// numbers = [6, 4, 3, 8]</span><br><br>        <span class="hljs-comment">// 3、对数组反转，把对数组进行反转的操作交给一个独立的方法来完成</span><br>        reverse(numbers);<br>        <span class="hljs-comment">// numbers = [8, 3, 4, 6]</span><br><br>        <span class="hljs-comment">// 4、把这些加密的数字拼接起来做为加密后的结果返回即可。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>            data += numbers[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numbers)</span> &#123;<br>        <span class="hljs-comment">// 反转数组的</span><br>        <span class="hljs-comment">// numbers = [6, 4, 3, 8]</span><br>        <span class="hljs-comment">//            i        j</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = numbers.length - <span class="hljs-number">1</span>; i &lt; j; i++,j--) &#123;<br>            <span class="hljs-comment">// 交换i和j位置处的值。</span><br>            <span class="hljs-comment">// 1、把后一个位置处的值交给一个临时变量先存起来</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> numbers[j];<br>            <span class="hljs-comment">// 2、把前一个位置处的值赋值给后一个位置处</span><br>            numbers[j] = numbers[i];<br>            <span class="hljs-comment">// 3、把后一个位置处原来的值（由临时变量记住着）赋值给前一个位置</span><br>            numbers[i] = temp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] split(<span class="hljs-type">int</span> number) &#123;<br>        <span class="hljs-comment">// number = 1983</span><br>        <span class="hljs-type">int</span>[] numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>        numbers[<span class="hljs-number">0</span>] = number / <span class="hljs-number">1000</span>;<br>        numbers[<span class="hljs-number">1</span>] = (number / <span class="hljs-number">100</span>) % <span class="hljs-number">10</span>;<br>        numbers[<span class="hljs-number">2</span>] = (number / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>;<br>        numbers[<span class="hljs-number">3</span>] = number % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">return</span> numbers;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例五：数组拷贝"><a href="#案例五：数组拷贝" class="headerlink" title="案例五：数组拷贝"></a>案例五：数组拷贝</h2><p>各位同学，接下来我们学习第五个案例《数组拷贝》，我们还是先阅读一下案例需求</p><p><img src="/assets/1661996258614.png" alt="1661996258614"></p><p>仔细阅读需求发现，想要实现的效果就是：给定一个数组，然后经过我们编写的程序，得到一个和原数组一模一样的数组。</p><p>我们也采用一个方法来编写，按照下面的思维模式来思考</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>该方法的目的是拷贝数组，拷贝哪一个数组呢？ 需要调用者传递<br>所以，参数应该是一个数组<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要有返回值？<br>该方法最终想要得到一个新数组<br>所以，返回值是拷贝得到的新数组<br><br><span class="hljs-number">3.</span>最后，考虑方法内部的业务逻辑？<br><span class="hljs-number">1</span>)创建一个新的数组，新数组的长度和元素数组一样<br><span class="hljs-number">2</span>)遍历原数组，将原数组中的元素赋值给新数组<br><span class="hljs-number">3</span>)最终将新数组返回<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握数组拷贝。</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr2 = copy(arr);<br>        printArray(arr2);<br><br>        <span class="hljs-comment">// 注意：这个不是拷贝数组，叫把数组变量赋值给另一个数组变量。</span><br>        <span class="hljs-comment">//        int[] arr3 = arr;</span><br>        <span class="hljs-comment">//        arr3[1] = 666;</span><br>        <span class="hljs-comment">//        System.out.println(arr[1]);</span><br><br>        arr2[<span class="hljs-number">1</span>] = <span class="hljs-number">666</span>;<br>        System.out.println(arr[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] copy(<span class="hljs-type">int</span>[] arr)&#123;<br>        <span class="hljs-comment">// arr = [11, 22, 33]</span><br>        <span class="hljs-comment">//        0    1   2</span><br><br>        <span class="hljs-comment">// 1、创建一个长度一样的整型数组出来。</span><br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        <span class="hljs-comment">// arr2 = [0, 0, 0]</span><br>        <span class="hljs-comment">//         0  1  2</span><br><br>        <span class="hljs-comment">// 2、把原数组的元素值对应位置赋值给新数组。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2</span><br>            arr2[i] = arr[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> arr2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(i==arr.length-<span class="hljs-number">1</span> ? arr[i] : arr[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例六：抢红包"><a href="#案例六：抢红包" class="headerlink" title="案例六：抢红包"></a>案例六：抢红包</h2><p>各位同学，接下来我们学习第六个案例《抢红包》，我们还是先阅读一下案例需求</p><p><img src="/assets/1661996292796.png" alt="1661996292796"></p><p><img src="/assets/1662022389872.png" alt="1662022389872"></p><p>我们还是把这个案例用一个方法来编写，同样按照下面的模式来分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>需要接收<span class="hljs-number">5</span>个红包，至于是哪<span class="hljs-number">5</span>个红包，可以有调用者传递；把<span class="hljs-number">5</span>个红包的数值，用数组来存 储。<br>所以，参数就是一个数组<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要有返回值？<br>按照需求的效果，抢完红包就直接打印了，不需要返回值<br><br><span class="hljs-number">3.</span>最后，考虑方法内部的业务逻辑是怎么的？<br>思考：红包实际上是数组中的元素，抢红包实际上随机获取数组中的元素；而且一个红包只能抢一次，怎么做呢？我们可以把数组中获取到元素的位置，置为<span class="hljs-number">0</span>,下次再或者这个位置的元素一判断为<span class="hljs-number">0</span>，再重新获取新的元素，依次内推，直到把数组中所有的元素都获取完。<br><br>我们我们把抽红包的思路再整理一下：<br><span class="hljs-number">1</span>)首先，写一个循环，循环次数为数组的长度<br><span class="hljs-number">2</span>)每次循环，键盘录入，提示<span class="hljs-string">&quot;用户录入任意键抽奖：&quot;</span><br>    <span class="hljs-number">3</span>)随机从数组中产生一个索引，获取索引位置的元素，这个元素就表示抽的红包<br>如果值不为<span class="hljs-number">0</span>，则打印如：<span class="hljs-string">&quot;恭喜您，您抽中了520元&quot;</span>,把这个位置元素置为<span class="hljs-number">0</span><br>    如果值为<span class="hljs-number">0</span>，则说明这个红包被抽过，重新循环到第<span class="hljs-number">2</span>步，重新抽奖<br>    【注意：如果当前这一次没有抽中，这一次抽奖机会被浪费掉了，我们可以把控制循环的次数自减一下】<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] moneys = &#123;<span class="hljs-number">100</span>,<span class="hljs-number">999</span>,<span class="hljs-number">50</span>,<span class="hljs-number">520</span>,<span class="hljs-number">1314</span>&#125;;<br>        start(moneys);<br>    &#125;<br>    <span class="hljs-comment">//开始抽奖</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span>[] moneys)</span>&#123;<br>        <span class="hljs-comment">//1)首先，写一个循环，循环次数为数组的长度</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; moneys.length; i++) &#123;<br>            <span class="hljs-comment">//2)每次循环，键盘录入，提示&quot;用户录入任意键抽奖：&quot;</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                System.out.print(<span class="hljs-string">&quot;用户录入任意键抽奖：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.next();<br>                <span class="hljs-comment">//3)随机从数组中产生一个索引，获取索引位置的元素，这个元素就表示抽的红包</span><br>                <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(moneys.length);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> moneys[index];<br>                <span class="hljs-keyword">if</span>(money!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//如果值不为0，则打印如：&quot;恭喜您，您抽中了520元&quot;</span><br>                    System.out.println(<span class="hljs-string">&quot;恭喜您，您抽中了&quot;</span>+money+<span class="hljs-string">&quot;元&quot;</span>);<br>                    moneys[index] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//如果值为0，则说明这个红包被抽过，重新循环到第2步，重新抽奖</span><br>                    <span class="hljs-comment">//此时这一次抽奖机会被浪费掉了，可以把控制循环的次数自减一下</span><br>                    i--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例七：找素数"><a href="#案例七：找素数" class="headerlink" title="案例七：找素数"></a>案例七：找素数</h2><p>各位同学，接下来我们学习第七个案例《找素数》，我们还是先阅读一下案例需求</p><p><img src="/assets/1661996325454.png" alt="1661996325454"></p><p>首先我们得统一认识一下什么是素数：<strong>只能被1和本身整除的数是素数</strong>，比如：3、7是素数，9,21不是素数（因为9可以被3整除，21可以被3和7整除）</p><p>再思考题目需求该怎么做？<strong>打印输出101~200之间的素数，并求有多少个？</strong>，我们也是把这个需求写成一个方法，还是按照三个步骤分析方法如何编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>该方法是求一个范围内的素数，一个范围需要两个数据来确定，比如：<span class="hljs-number">101</span>~<span class="hljs-number">200</span><br>所以，方法需要两个参数来接收范围的开始值start，和范围的结束值end<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要返回值？<br>该方法需要求一个范围内的素数的个数<br>所以，返回值就是素数的个数<br><br><span class="hljs-number">3.</span>最后，考虑方法内部的业务逻辑<br>思考：怎么判断一个数是素数呢？要仅仅抓住，素数的要求:“只能被<span class="hljs-number">1</span>和本身整除的数是素数”。我们可以从反向思考，如果这个数只要能被除了<span class="hljs-number">1</span>和本身以外的数整除，那么这个数就不是素数。<br><span class="hljs-comment">//比如1：判断9是否为素数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//规定flag等于true表示num是素数；否则表示num不是素数</span><br><span class="hljs-comment">//如果这个数num只要能被除了1和本身以外的数整除，那么这个数就不是素数。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>; j&lt;<span class="hljs-number">9</span>-<span class="hljs-number">1</span>; j++)&#123;<br>        <span class="hljs-comment">//当j=3时，num%j == 9%3 == 0; </span><br><span class="hljs-keyword">if</span>(num%j==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//说明num=9; 表示一个素数。把flag改为false; </span><br>            flag = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br>把上面的代码循环执行，每次循环然后把num换成start~end之间的整数即可。<br></code></pre></td></tr></table></figure><p>编写代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成找素数。</span><br>        System.out.println(<span class="hljs-string">&quot;当前素数的个数是：&quot;</span> + search(<span class="hljs-number">101</span>, <span class="hljs-number">200</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// start = 101   end = 200</span><br>        <span class="hljs-comment">// 1、定义一个for循环找到101到200之间的每个数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end ; i++) &#123;<br>            <span class="hljs-comment">// i = 101 102 103 ... 199 200</span><br><br>            <span class="hljs-comment">// 信号位思想</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 假设的意思：默认当前i记住的数据是素数。</span><br>            <span class="hljs-comment">// 2、判断当前i记住的这个数据是否是素数。</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= i / <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// i当前记住的这个数据不是素数了</span><br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 3、根据判定的结果决定是否输出i当前记住的数据：是素数才输出展示。</span><br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                System.out.println(i);<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例八：模拟双色球-拓展案例"><a href="#案例八：模拟双色球-拓展案例" class="headerlink" title="案例八：模拟双色球[拓展案例]"></a>案例八：模拟双色球[拓展案例]</h2><p>各位同学，接下来我们学习第八个案例《模拟双色球》，我们还是先阅读一下案例需求</p><p><img src="/assets/1661996916834.png" alt="1661996916834"></p><p>这个案例我们可以采用方法方法来完成</p><ol><li>第一个方法，让用户手动投注，产生一注双色球彩票</li></ol><p><img src="/assets/1662026373775.png" alt="1662026373775"></p><ol start="2"><li>第二个方法，由系统随机产生一注双色球彩票开奖号码</li></ol><p><img src="/assets/1662026388626.png" alt="1662026388626"></p><ol start="3"><li>第三个方法，判断传入两组号码，用于判断彩票的中奖情况</li></ol><p><img src="/assets/1662026410363.png" alt="1662026410363"></p><h3 id="8-1-手动投注"><a href="#8-1-手动投注" class="headerlink" title="8.1 手动投注"></a>8.1 手动投注</h3><p>编写一个方法，让用户手动投注，产生一注双色球彩票，思路分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>双色球彩票的规则非常明确，没有什么数据需要传递给方法。<br>所以，不需要参数<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要返回值？<br>方法最终的结果是需要一注双色球彩票的号码，一注彩票有<span class="hljs-number">7</span>个号码，可以用一个数组来存<br>所以，返回值是一个数组<br><br><span class="hljs-number">3.</span>最后，考虑方法内部的业务逻辑怎么编写？<br><span class="hljs-number">1</span>)首先需要准备一个<span class="hljs-type">int</span>类型数组，长度为<span class="hljs-number">7</span>; 用于存储产生的投注号码<br><span class="hljs-number">2</span>)循环遍历数组的前<span class="hljs-number">6</span>个元素，采用键盘录入的方式，给前区<span class="hljs-number">6</span>个红球赋值<br>要求录入的整数在<span class="hljs-number">1</span>~<span class="hljs-number">33</span>范围内，同时录入的整数在数组中不能已存在，否则重新录入<br><span class="hljs-number">3</span>)最后再录入一个整数，给后区一个蓝球赋值<br>要求整数必须在<span class="hljs-number">1</span>~<span class="hljs-number">16</span>范围内<br></code></pre></td></tr></table></figure><ul><li>手动投注代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 1、设计一个方法，用于让用户投注一组号码并返回（前6个是红球号码，最后1个是蓝球号码 ）*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] userSelectNumbers()&#123;<br>    <span class="hljs-comment">// 2、创建一个整型数组，用于存储用户投注的7个号码（前6个是红球号码，最后1个是蓝球号码 ）</span><br>    <span class="hljs-type">int</span>[] numbers =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">7</span>];<br>    <span class="hljs-comment">// numbers = [0, 0, 0, 0, 0, 0, 0]</span><br>    <span class="hljs-comment">//            0  1  2  3  4  5  6</span><br><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-comment">// 3、遍历前6个位置，让用户依次投注6个红球号码，存入</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 4、开始让用户为当前位置投注一个红球号码（1-33之间，不能重复）</span><br>            System.out.println(<span class="hljs-string">&quot;请您输入第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个红球号码（1-33之间，不能重复）：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">// 5、先判断用户输入的红球号码是否在1-33之间</span><br>            <span class="hljs-keyword">if</span>(number &lt; <span class="hljs-number">1</span> || number &gt; <span class="hljs-number">33</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;对不起，您输入的红球号码不在1-33之间，请确认！&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 号码是在1-33之间了，接着还要继续判断这个号码是否重复，不重复才可以使用。</span><br>                <span class="hljs-keyword">if</span>(exist(numbers, number))&#123;<br>                    <span class="hljs-comment">// number当前这个红球号码是重复了。</span><br>                    System.out.println(<span class="hljs-string">&quot;对不起，您当前输入的红球号码前面选择过，重复了，请确认！&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// number记住的这个号码没有重复了，就可以使用了。</span><br>                    numbers[i] = number;<br>                    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 结束当次投注，结束了当前死循环。</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 6、投注最后一个蓝球号码。</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请您输入最后1个蓝球号码（1-16）：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-keyword">if</span>(number &lt; <span class="hljs-number">1</span> || number &gt; <span class="hljs-number">16</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;对不起，您输入的蓝球号码范围不对！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            numbers[<span class="hljs-number">6</span>] = number;<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 蓝球号码录入成功，结束死循环</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> numbers;<br>&#125;<br></code></pre></td></tr></table></figure><p>每键盘录入一个号码，需要判断这个号码在数组中是否存在，存在返回true；不存在返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exist</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numbers, <span class="hljs-type">int</span> number)</span> &#123;<br>    <span class="hljs-comment">// 需求：判断number这个数字是否在numbers数组中存在。</span><br>    <span class="hljs-comment">// numbers = [12, 25, 18, 0, 0, 0, 0]</span><br>    <span class="hljs-comment">// number = 12</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(numbers[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(numbers[i] == number)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了打印一注彩票的号码（数组中的元素），把打印数组中的元素也写成方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(i == arr.length - <span class="hljs-number">1</span> ? arr[i] : arr[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在main方法中测试，运行看能不能产生一注彩票号码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成双色球系统的开发。</span><br>        <span class="hljs-type">int</span>[] userNumbers = userSelectNumbers();<br>        System.out.println(<span class="hljs-string">&quot;您投注的号码：&quot;</span>);<br>        printArray(userNumbers);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-随机开奖号码"><a href="#8-2-随机开奖号码" class="headerlink" title="8.2 随机开奖号码"></a>8.2 随机开奖号码</h3><p>编写一个方法，让用户自动机选投注，产生一注双色球彩票，思路分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>双色球彩票的规则非常明确，没有什么数据需要传递给方法。<br>所以，不需要参数<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要返回值？<br>方法最终的结果是需要一注双色球彩票的号码，一注彩票有<span class="hljs-number">7</span>个号码，可以用一个数组来存<br>所以，返回值是一个数组<br><br><span class="hljs-number">3.</span>最后，考虑方法内部的业务逻辑怎么编写？<br><span class="hljs-number">1</span>)首先需要准备一个<span class="hljs-type">int</span>类型数组，长度为<span class="hljs-number">7</span>; 用于存储产生的投注号码<br><span class="hljs-number">2</span>)循环遍历数组的前<span class="hljs-number">6</span>个元素，采用生成随机数的的方式，给前区<span class="hljs-number">6</span>个红球赋值<br>要求生成的随机数在<span class="hljs-number">1</span>~<span class="hljs-number">33</span>范围内，同时随机的整数数组中不能已存在，否则重新生产<br><span class="hljs-number">3</span>)最后再随机一个整数，给后区一个蓝球赋值<br>要求随机整数必须在<span class="hljs-number">1</span>~<span class="hljs-number">16</span>范围内<br></code></pre></td></tr></table></figure><p>机选号码，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 2、设计一个方法：随机一组中奖号码出来（6个红球号码，1个蓝球号码 ）*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] createLuckNumbers()&#123;<br>    <span class="hljs-comment">// 1、创建一个整型数组，用于存储这7个号码</span><br>    <span class="hljs-type">int</span>[] numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">7</span>];<br><br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-comment">// 2、遍历前6个位置处，依次随机一个红球号码存入（1-33 不重复）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 3、为当前这个位置随机一个红球号码出来存入。</span><br>            <span class="hljs-comment">//1 - 33 ==&gt; -1 ===&gt; (0 , 32) + 1</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">33</span>) + <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 4、判断这个号码是否之前出现过（红球号码不能重复）。</span><br>            <span class="hljs-keyword">if</span>(!exist(numbers, number))&#123;<br>                <span class="hljs-comment">// number不重复。</span><br>                numbers[i] = number;<br>                <span class="hljs-comment">//结束死循环，代表找到了当前这个位置的一个不重复的红球号码了。</span><br>                <span class="hljs-keyword">break</span>; <br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 3、录入一个蓝球号码。 1-16</span><br>    numbers[<span class="hljs-number">6</span>] = r.nextInt(<span class="hljs-number">16</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> numbers;<br>&#125;<br></code></pre></td></tr></table></figure><p>在main方法中测试，看是否能够产生一注彩票</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成双色球系统的开发。</span><br>        <span class="hljs-comment">//用户手动投注</span><br>        <span class="hljs-type">int</span>[] userNumbers = userSelectNumbers();<br>        System.out.println(<span class="hljs-string">&quot;您投注的号码：&quot;</span>);<br>        printArray(userNumbers);<br>        <br>        <span class="hljs-comment">//生成中奖号码</span><br>        <span class="hljs-type">int</span>[] luckNumbers = createLuckNumbers();<br>        System.out.println(<span class="hljs-string">&quot;中奖的号码：&quot;</span>);<br>        printArray(luckNumbers);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-判断是否中奖"><a href="#8-3-判断是否中奖" class="headerlink" title="8.3 判断是否中奖"></a>8.3 判断是否中奖</h3><p>编写一个方法，判断用户的彩票号码是否中奖，具体中奖规则如下</p><ul><li><p>6个红球+1个蓝球 ，奖金1000万</p></li><li><p>6个红球+0个蓝球，奖金500万</p></li><li><p>5个红球+1个蓝球，奖金3000块</p></li><li><p>5个红球+0个蓝球，或者4个红球+1个蓝球，奖金200块</p></li><li><p>4个红球+0个蓝球，或者3个红球+1个蓝球，奖金10块</p></li><li><p>小于3个红球+1个蓝球，奖金5块</p></li><li><p>如果前面的都不成立，就中奖，算你为福利事业做贡献了。</p></li></ul><p>编写方法的思路如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>首先，考虑方法是否需要接收数据处理？<br>判断彩票是否中奖，需要有两组号码；一组号码是彩票号码，一组号码是开奖号码<br>所以，参数需要有两个数组<br><br><span class="hljs-number">2.</span>接着，考虑方法是否需要返回值？<br>方法不需要返回结果，中了奖，直接将奖项打印输出就行了。<br>【注意：这只是提供一种代码的编写方案，你将中奖的金额返回也行】<br><br><span class="hljs-number">3.</span>最后，考虑方法内部的业务逻辑怎么编写？<br><span class="hljs-number">1</span>)定义两个变量redCount和blueCount用来记录，红球的个数和蓝球的个数<br><span class="hljs-number">2</span>)遍历两个数组中前<span class="hljs-number">6</span>个元素(红球)，判断两个数组中有没有相同元素<br>如果找到一个相同元素，则redCount++<br>    <span class="hljs-number">3</span>)比较两个数组中最后一个元素(蓝球)是否相同<br>    如果相同，则blueCount++<br><span class="hljs-number">4</span>)根据红球和蓝球的命中个数，打印输出对应的奖项<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 3、设计一个方法，用于判断用户的中奖情况 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] userNumbers,<span class="hljs-type">int</span>[] luckNumbers)</span>&#123;<br>    <span class="hljs-comment">// userNumbers = [12, 14, 16, 18, 23, 26, 8]</span><br>    <span class="hljs-comment">// luckNumbers = [16, 17, 18, 19, 26, 32, 8]</span><br><br>    <span class="hljs-comment">// 2、分别定义2个变量用于记住红球命中了几个以及蓝球命中了几个</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">redCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">blueCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 先判断红球命中的数量。</span><br>    <span class="hljs-comment">// 遍历用户投注的号码的前6个红球</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; userNumbers.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// userNumbers[i]</span><br>        <span class="hljs-comment">// 开始遍历中奖号码的前6个红球号码，看用户当前选择的这个号码是否命中了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; luckNumbers.length - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span>(userNumbers[i] == luckNumbers[j])&#123;<br>                redCount++;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 3、判断蓝球是否命中了</span><br>    blueCount = userNumbers[<span class="hljs-number">6</span>] == luckNumbers[<span class="hljs-number">6</span>] ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br>    System.out.println(<span class="hljs-string">&quot;您命中的红球数量是：&quot;</span> + redCount);<br>    System.out.println(<span class="hljs-string">&quot;您命中的蓝球数量是：&quot;</span> + blueCount);<br><br>    <span class="hljs-comment">// 4、判断中奖详情，并输出结果</span><br>    <span class="hljs-keyword">if</span>(redCount == <span class="hljs-number">6</span> &amp;&amp; blueCount == <span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;恭喜您，中奖1000万，可以开始享受人生了~~~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(redCount == <span class="hljs-number">6</span> &amp;&amp; blueCount == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;恭喜您，中奖500万，可以稍微开始享受人生了~~~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(redCount == <span class="hljs-number">5</span> &amp;&amp; blueCount == <span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;恭喜您，中奖3000元，可以出去吃顿小龙虾了~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(redCount == <span class="hljs-number">5</span> &amp;&amp; blueCount == <span class="hljs-number">0</span> || redCount == <span class="hljs-number">4</span> &amp;&amp; blueCount == <span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;恭喜您，中了小奖：200元~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(redCount == <span class="hljs-number">4</span> &amp;&amp; blueCount == <span class="hljs-number">0</span> || redCount == <span class="hljs-number">3</span> &amp;&amp; blueCount == <span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;中了10元~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( redCount &lt; <span class="hljs-number">3</span> &amp;&amp; blueCount == <span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;中了5元~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;感谢您对福利事业做出的巨大贡献~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在main方法中测试，检测是否中奖的方法是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成双色球系统的开发。</span><br>        <span class="hljs-comment">//用户投注</span><br>        <span class="hljs-type">int</span>[] userNumbers = userSelectNumbers();<br>        System.out.println(<span class="hljs-string">&quot;您投注的号码：&quot;</span>);<br>        printArray(userNumbers);<br><br>        <span class="hljs-comment">//随机产生一个中奖号码</span><br>        <span class="hljs-type">int</span>[] luckNumbers = createLuckNumbers();<br>        System.out.println(<span class="hljs-string">&quot;中奖的号码：&quot;</span>);<br>        printArray(luckNumbers);<br><br>        <span class="hljs-comment">//判断用户投注的号码是否中奖</span><br>        judge(userNumbers, luckNumbers);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05方法</title>
    <link href="/2023/12/01/day05-%E6%96%B9%E6%B3%95/"/>
    <url>/2023/12/01/day05-%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="05——方法"><a href="#05——方法" class="headerlink" title="05——方法"></a>05——方法</h3><p>各位同学，今天我们学习的内容是方法。方法也是Java语言中一个很重要的组成部分，在实际开发中几乎每时每刻都在使用方法。所以对于今天的课程一定要搞清楚。</p><p>我们先来学习一下方法是什么</p><h2 id="一、方法概述"><a href="#一、方法概述" class="headerlink" title="一、方法概述"></a>一、方法概述</h2><p><strong>1.1 方法是什么</strong></p><p><strong>方法是一种语法结构，它可以把一段代码封装成一个功能，以便重复调用。</strong>这句话什么意思呢？意思是，把一段功能代码围在一起，别人都可以来调用它。</p><p>下图是方法的完整格式</p><p><img src="/assets/1661667297650.png" alt="1661667297650"></p><p>我们看一个需求，比如现在张工、李工两个人都需要求两个整数的和。不使用方法，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、李工。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a+b;<br>System.out.println(<span class="hljs-string">&quot;和是：&quot;</span> + c);<br><br><br><span class="hljs-comment">// 2、张工。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> a1+b1;<br>System.out.println(<span class="hljs-string">&quot;和是：&quot;</span> + c1);<br></code></pre></td></tr></table></figure><p>阅读上面的代码，我们不难发现。两次求和的代码中，除了求和的数据不一样，代码的组织结构完全一样。</p><p><strong>像这种做相同事情的代码，就可以用方法进行封装</strong>。需要用到这段代码功能时，让别人调用方法就行。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//目标：掌握定义方法的完整格式，搞清楚使用方法的好处。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 需求：假如现在很多程序员都要进行2个整数求和的操作。</span><br>        <span class="hljs-comment">// 1、李工。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        System.out.println(<span class="hljs-string">&quot;和是：&quot;</span> + rs);<br><br>        <span class="hljs-comment">// 2、张工。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> sum(<span class="hljs-number">30</span>, <span class="hljs-number">20</span>);<br>        System.out.println(<span class="hljs-string">&quot;和是：&quot;</span> + rs2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.2 方法的执行流程</strong></p><p>当调用一个方法时，执行流程，按照下图中标注的序号执行。</p><p>​① 通过sum方法名找到sum方法</p><p>​② 把10传递给方法中的参数a</p><p>​③ 把20传递给方法中的参数b；</p><p>​④  执行方法中的代码，此时<code>int c=a+b;</code>; 相当于 <code>int c = 10+20</code>; c的值为30</p><p>​ <code>return c</code> 的含义是，把c的结果返回给调用处。 也就是调用sum方法的结果为30,</p><p><img src="/assets/1661668878007.png" alt="1661668878007"></p><p>学习完方法的执行流程之后，下面有几个注意事项需要我们写代码时注意一下。</p><p><strong>1.3 定义方法的注意点</strong></p><p><img src="/assets/1661680196574.png" alt="1661680196574"></p><ol><li><p>方法的修饰符：暂时都使用public static 修饰。（目前看做是固定写法，后面是可以改动的）</p></li><li><p>方法申明了具体的返回值类型，内部必须使用return返回对应类型的数据。</p></li><li><p>形参列表可以有多个，甚至可以没有； 如果有多个形参，多个形参必须用“，”隔开，且不能给初始化值。</p></li></ol><p><strong>1.4 使用方法的好处</strong></p><p>最好，我们总结一下，用方法有什么好处，可以归纳为下面2点：</p><ol><li>提高了代码的复用性，提高了开发效率。</li><li>让程序的逻辑更清晰。</li></ol><p>如下图所示：写好一个方法之后，每一个人都可以直接调用，而不用再重复写相同的代码。所以是提高了代码的复用性，不用写重复代码，自然也提高了开发效率。</p><p><img src="/assets/1661680445407.png" alt="1661680445407"></p><p>那么让程序的逻辑更加清晰，是如何体现的呢？ 比如，我们后期会用所学习的技术，做一个ATM系统，ATM系统中有查看账户、存钱、取钱、修改密码等功能，到时候我们可以把每一个功能都写成一个方法。如下图所示，这样程序的逻辑就更加清晰了。</p><p><img src="/assets/1661680833652.png" alt="1661680833652"></p><p>好了，关于方法是什么，以及方法的基本使用就学习到这里。</p><p><strong>总结一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>什么是方法？<br>答：方法是一种语法结构，它可以把一段代码封装成一个功能，以便重复调用<br><span class="hljs-number">2.</span>方法的完整格式是什么样的？<br><span class="hljs-comment">//格式如下：</span><br>修饰符  返回值类型  方法名( 形参列表 )&#123;<br>    方法体代码(需要执行的功能代码)<br>       <span class="hljs-keyword">return</span> 返回值;<br>    &#125;<br><span class="hljs-number">3.</span>方法要执行必须怎么办？<br>必须调用才执行; <br><span class="hljs-comment">//调用格式:</span><br>方法名(...);<br><br><span class="hljs-number">4.</span>使用方法有什么好处？<br>答：提高代码的复用性，提高开发效率，使程序逻辑更清晰。<br></code></pre></td></tr></table></figure><h2 id="二、方法的其他形式"><a href="#二、方法的其他形式" class="headerlink" title="二、方法的其他形式"></a>二、方法的其他形式</h2><p>各位同学，刚才我们学习了定义完整格式的方法。但是实际开发中，需要按照方法解决的实际业务需求，设计出合理的方法形式来解决问题。</p><p>实际上设计一个合理的方法，需要重点关注下面两点</p><p><img src="/assets/1661685360525.png" alt="1661685360525"></p><p><img src="/assets/1661685287374.png" alt="1661685287374"></p><p>设计一个合理的方法的原则如下：</p><ul><li>如果方法不需要返回数据，返回值类型必须申明成void（无返回值申明）,  此时方法内部不可以使用return返回数据。</li><li>方法如果不需要接收外部传递进来的数据，则不需要定义形参，且调用方法时也不可以传数据给方法。</li><li>没有参数，且没有返回值类型（void）的方法，称为值无参数、无返回值方法。此时调用方法时不能传递数据给方法。</li></ul><p>接下来我们看几个案例代码，练习根据实际需求定义出合理的方法</p><p><strong>需求1：写一个方法，打印3个”Hello World”</strong></p><p>分析：需求已经非常明确，打印的是3个HelloWorld，在方法中直接循环3次就可以完成需求。不需要外部给方法传递数据，所以不需要参数。</p><p><img src="/assets/1661686972979.png" alt="1661686972979"></p><p><strong>需求2：写一个方法，打印若干个”Hello World”，具体多少个，有调用者指定</strong></p><p>分析：需求不明确打印HelloWorld的个数，而是需要调用者指定。也就是说，调用者调用方法时需要给方法传递打印HelloWorld的个数。那么定义方法时，就需要写一个参数，来接收调用者传递过来的个数。</p><p><img src="/assets/1661687241729.png" alt="1661687241729"></p><h2 id="三、方法使用常见的问题"><a href="#三、方法使用常见的问题" class="headerlink" title="三、方法使用常见的问题"></a>三、方法使用常见的问题</h2><p>各位同学，自己第一次写方法时，或多或少会可能会出现一些问题。下面把使用方法时，常见的问题整理一下。</p><p>目的是让同学们，以后写方法时避免出现这些问题。一旦出现这些问题，要知道是什么原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-number">1.</span> 方法在内种没有先后顺序，但是不能把一个方法定义在另一个方法中。<br><br>- <span class="hljs-number">2.</span> 方法的返回值类型写<span class="hljs-keyword">void</span>（无返回申明）时，方法内不能使用<span class="hljs-keyword">return</span>返回数据，<br>如果方法的返回值类型写了具体类型，方法内部则必须使用<span class="hljs-keyword">return</span>返回对应类型的数据。<br><br>- <span class="hljs-number">3.</span> <span class="hljs-keyword">return</span>语句的下面，不能编写代码，属于无效的代码，执行不到这儿。<br><br>- <span class="hljs-number">4.</span> 方法不调用就不会执行,  调用方法时，传给方法的数据，必须严格匹配方法的参数情况。<br><br>- <span class="hljs-number">5.</span> 调用有返回值的方法，有<span class="hljs-number">3</span>种方式：<br>     ① 可以定义变量接收结果 <br>     ② 或者直接输出调用，<br>     ③ 甚至直接调用；<br><br>- <span class="hljs-number">6.</span> 调用无返回值的方法，只有<span class="hljs-number">1</span>种方式： 只能直接调用。<br></code></pre></td></tr></table></figure><h2 id="四、方法的案例"><a href="#四、方法的案例" class="headerlink" title="四、方法的案例"></a>四、方法的案例</h2><h3 id="4-1-方法案例1"><a href="#4-1-方法案例1" class="headerlink" title="4.1 方法案例1"></a>4.1 方法案例1</h3><p><img src="/assets/1661687914420.png" alt="1661687914420"></p><p>按照需求：定义方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">需要求1~n的和，由于n不确定是多少，所以就把n写成形式参数，n的具体值由调用者指定。</span><br><span class="hljs-comment">在方法中把n当做一个确定的数据来使用就行。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-comment">// i = 1 2 3 ... n</span><br>        sum += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义好方法之后，在main方法中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> add(<span class="hljs-number">5</span>);<br>    System.out.println(<span class="hljs-string">&quot;1-5的和是：&quot;</span> + rs); <span class="hljs-comment">//15</span><br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> add(<span class="hljs-number">6</span>);<br>    System.out.println(<span class="hljs-string">&quot;1-6的和是：&quot;</span> + rs); <span class="hljs-comment">//21</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-方法案例2"><a href="#4-2-方法案例2" class="headerlink" title="4.2 方法案例2"></a>4.2 方法案例2</h3><p><img src="/assets/1661687941843.png" alt="1661687941843"></p><p>按照需求：定义方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">需求中，是要判断一个数是奇数还是偶数，但是并没有明确说，是哪一个数。</span><br><span class="hljs-comment">也就是说这个数可能是奇数，也可以能是偶数，是一个能够变化的数。</span><br><span class="hljs-comment">把这个数写成方法的形式参数，就可以达到这个目的。因为调用方法时，调用者可以给传递  奇数，也可以传递偶数。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>    <span class="hljs-keyword">if</span>(number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(number + <span class="hljs-string">&quot;是一个偶数！&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(number + <span class="hljs-string">&quot;是一个奇数！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义好方法之后，在main方法中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    judge(<span class="hljs-number">7</span>); <span class="hljs-comment">//调用后打印：7是一个奇数</span><br>    judge(<span class="hljs-number">8</span>); <span class="hljs-comment">//调用后打印：8是一个偶数</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、方法在计算机中的执行原理"><a href="#五、方法在计算机中的执行原理" class="headerlink" title="五、方法在计算机中的执行原理"></a>五、方法在计算机中的执行原理</h2><p>各位同学，刚才我们已经写了好几个方法并成功调用了。但是不知道同学们奇不奇怪一个问题。方法在计算机的内存中到底是怎么干的呢？</p><p>为了让大家更加深刻的理解方法的执行过程，接下来，给同学们讲一下方法在计算机中的执行原理。理解方法的执行原理，对我们以后知识的学习也是有帮助的。</p><p>我们知道Java程序的运行，都是在内存中执行的，而内存区域又分为栈、堆和方法区。那Java的方法是在哪个内存区域中执行呢？</p><p>答案是栈内存。 <strong>每次调用方法，方法都会进栈执行；执行完后，又会弹栈出去。</strong></p><p>方法进栈和弹栈的过程，就类似于手枪子弹夹，上子弹和击发子弹的过程。最后上的一颗子弹是，第一个打出来的；第一颗上的子弹，是最后一个打出来的。</p><p><img src="/assets/1661689511649.png" alt="1661689511649"></p><p>假设在main方法中依次调用A方法、B方法、C方法，在内存中的执行流程如下：</p><ul><li>每次调用方法，方法都会从栈顶压栈执行没执行</li><li>每个方法执行完后，会从栈顶弹栈出去</li></ul><p><img src="/assets/1661692070922.png" alt="1661692070922"></p><h3 id="5-1-有返回值的方法，内存分析"><a href="#5-1-有返回值的方法，内存分析" class="headerlink" title="5.1 有返回值的方法，内存分析"></a>5.1 有返回值的方法，内存分析</h3><p>下面我们分析一下，求两个整数和的代码，在内存中的执行原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        System.out.println(rs);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b )</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b; <br>        <span class="hljs-keyword">return</span> c;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示：以上代码在内存中的执行过程，按照①②③④⑤⑥⑦的步骤执行.</p><p><img src="/assets/1661694127049.png" alt="1661694127049"></p><h3 id="5-2-无返回值的方法，内存分析"><a href="#5-2-无返回值的方法，内存分析" class="headerlink" title="5.2 无返回值的方法，内存分析"></a>5.2 无返回值的方法，内存分析</h3><p>刚才我们分析的是有有参数有返回值的方法内存原理。下面再分析一个无返回值、无参数的内存原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2Method</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        study();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>eat();<br>System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>sleep();<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/1661696067585.png" alt="1661696067585"></p><p><strong>总结一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>方法的运行区域在哪里？<br>答：栈内存。<br><br><span class="hljs-number">2.</span>栈有什么特点？方法为什么要在栈中运行自己？<br>答：先进后出。保证一个方法调用完另一个方法后，可以回来继续执行。<br></code></pre></td></tr></table></figure><h2 id="六、方法参数的传递机制"><a href="#六、方法参数的传递机制" class="headerlink" title="六、方法参数的传递机制"></a>六、方法参数的传递机制</h2><p>各位同学，刚才我们学习了方法运行的原理，相信大家对方法的运行过程有更加深刻的认识。但是方法参数的传递过程还需要，还需要进一步学习一下。</p><p>因为我们刚才演示的一些方法中传递的参数都是基本类型，实际上参数还可以是传递引用类型。接下来，学习一下当参数是基本类型时、和参数是引用类型时的区别。</p><p>先记住一个结论：<strong>Java的参数传递机制都是：值传递</strong></p><p>所谓值传递：指的是在传递实参给方法的形参的时候，传递的是实参变量中存储的值的副本。 同学们肯定想知道，形参是什么？实参又是什么呢？ 请看下面这个张图</p><p><img src="/assets/1661725157681.png" alt="1661725157681"></p><h3 id="6-1-参数传递的基本类型数据"><a href="#6-1-参数传递的基本类型数据" class="headerlink" title="6.1 参数传递的基本类型数据"></a>6.1 参数传递的基本类型数据</h3><p>接下来，看一下方法参数传递是基本类型数据时，内存中是怎么执行的。</p><p><img src="/assets/1661725470322.png" alt="1661725470322"></p><p>我们把参数传递的结论再复习一下：<strong>Java的参数传递机制都是：值传递，传递的是实参存储的值的副本。</strong></p><h3 id="6-3-参数传递的是引用数据类型"><a href="#6-3-参数传递的是引用数据类型" class="headerlink" title="6.3 参数传递的是引用数据类型"></a>6.3 参数传递的是引用数据类型</h3><p>接下来，看一下方法的参数是引用类型的数据时，内存中是怎么执行的。</p><p><img src="/assets/1661728059814.png" alt="1661728059814"></p><p>我们发现调用change方法时参数是引用类型，<strong>实际上也是值传递，只不过参数传递存储的地址值</strong>。此时change方法和main方法中两个方法中各自有一个变量arrs，这两个变量记录的是同一个地址值[I@4c873330，change方法把数组中的元素改了，main方法在访问时，元素已经被修改了。</p><p><strong>总结一下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>基本类型和引用类型的参数在传递的时候有什么不同？<br>= 都是值传递<br>- 基本类型的参数传递存储的数据值。<br>    - 引用类型的参数传递存储的地址值。<br></code></pre></td></tr></table></figure><h2 id="七、方法参数传递案例"><a href="#七、方法参数传递案例" class="headerlink" title="七、方法参数传递案例"></a>七、方法参数传递案例</h2><h3 id="7-1-方法参数传递案例1"><a href="#7-1-方法参数传递案例1" class="headerlink" title="7.1 方法参数传递案例1"></a>7.1 方法参数传递案例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：输出一个<span class="hljs-type">int</span>类型的数组内容，要求输出格式为：[<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>]。<br><br>分析：<br> <span class="hljs-number">1.</span>方法是否需要接收数据进行处理？<br> 方法要打印<span class="hljs-type">int</span>类型数组中的元素，打印哪一个数组需求并不明确；<br>        所以可以把<span class="hljs-type">int</span>数组写成参数，让调用者指定<br>        <br> <span class="hljs-number">2.</span>方法是否需要返回数据？<br> 方法最终的目的知识打印数组中的元素。<br> 不需要给调用者返回什么，所以不需要返回值，返回值类型写<span class="hljs-keyword">void</span><br> <br> <span class="hljs-number">3.</span>方法内部的业务：遍历数组，并输出相应的内容<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成打印int类型的数组内容。</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">70</span>&#125;;<br>        printArray(arr);<br><br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-literal">null</span>;<br>        printArray(arr2);<br><br>        <span class="hljs-type">int</span>[] arr3 = &#123;&#125;;<br>        printArray(arr3);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    参数：int[] arr表示要被打印元素的数组，需要调用者传递</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(arr); <span class="hljs-comment">// null</span><br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 跳出当前方法</span><br>        &#125;<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-comment">// 直接遍历接到的数组元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i == arr.length - <span class="hljs-number">1</span>)&#123;<br>                System.out.print(arr[i]);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.print(arr[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-方法参数传递案例2"><a href="#7-2-方法参数传递案例2" class="headerlink" title="7.2 方法参数传递案例2"></a>7.2 方法参数传递案例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：比较两个<span class="hljs-type">int</span>类型的数组是否一样，返回<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span><br><br>分析：<br><span class="hljs-number">1.</span>方法是否需要接收数据进行处理？<br>因为，方法中需要两个<span class="hljs-type">int</span>数组比较，但是需求并不明确是哪两个数组；<br>所以，需要接收两个<span class="hljs-type">int</span>类型的数组，形参声明为：<span class="hljs-type">int</span>[] arr1，<span class="hljs-type">int</span>[] arr2 <br><br> <span class="hljs-number">2.</span>方法是否需要返回数据？<br> 因为,方法最终的结果需要<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>;<br>所以，返回值类型是<span class="hljs-type">boolean</span><br> <br><span class="hljs-number">3.</span> 方法内部的业务：判断两个数组内容是否一样。<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成判断两个int类型的数组是否一样。</span><br>        <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>        System.out.println(equals(arr1, arr2));<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    参数：</span><br><span class="hljs-comment">    int[] arr1, 参与比较的第一个int数组</span><br><span class="hljs-comment">    int[] arr2  参与比较的第二个int数组</span><br><span class="hljs-comment">    返回值:</span><br><span class="hljs-comment">    返回比较的结果true或者false</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr1, <span class="hljs-type">int</span>[] arr2)</span>&#123;<br>        <span class="hljs-comment">// 1、判断arr1和arr2是否都是null.</span><br>        <span class="hljs-keyword">if</span>(arr1 == <span class="hljs-literal">null</span> &amp;&amp; arr2 == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 相等的</span><br>        &#125;<br><br>        <span class="hljs-comment">// 2、判断arr1是null，或者arr2是null.</span><br>        <span class="hljs-keyword">if</span>(arr1 == <span class="hljs-literal">null</span> || arr2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 不相等</span><br>        &#125;<br><br>        <span class="hljs-comment">// 3、判断2个数组的长度是否一样，如果长度不一样，直接返回false.</span><br>        <span class="hljs-keyword">if</span>(arr1.length != arr2.length)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 不相等</span><br>        &#125;<br><br>        <span class="hljs-comment">// 4、两个数组的长度是一样的，接着比较它们的内容是否一样。</span><br>        <span class="hljs-comment">// arr1 = [10, 20, 30]</span><br>        <span class="hljs-comment">// arr2 = [10, 20, 30]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>            <span class="hljs-comment">// 判断当前位置2个数组的元素是否不一样，不一样直接返回false</span><br>            <span class="hljs-keyword">if</span>(arr1[i] != arr2[i])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 不相等的</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 两个数组是一样的。</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="八、方法重载"><a href="#八、方法重载" class="headerlink" title="八、方法重载"></a>八、方法重载</h2><p>接下来，我们学习一个开发中很重要的一个方法的形式——叫方法重载。</p><p>所谓方法重载指的是：一个类中，出现多个相同的方法名，但是它们的形参列表是不同的，那么这些方法就称为方法重载了。</p><p>我们在这里要能够认识，哪些是重载的方法。</p><p>下面案例中有多个test方法，但是参数列表都不一样，它们都是重载的方法。调用时只需要通过参数来区分即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodOverLoadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识方法重载，并掌握其应用场景。</span><br>        test();<br>        test(<span class="hljs-number">100</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===test1===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===test2===&quot;</span> + a);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> b, <span class="hljs-type">double</span> a)</span>&#123;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们认识了方法重载，那么方法重载有哪些应用场景呢？ </p><p>一般在开发中，我们经常需要为处理一类业务，提供多种解决方案，此时用方法重载来设计是很专业的。</p><p>比如，我们现在看一个案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：开发武器系统，功能需求如下：<br>    可以默认发一枚武器。<br>    可以指定地区发射一枚武器。<br>    可以指定地区发射多枚武器。<br><br></code></pre></td></tr></table></figure><p>上面的几个需求中，不管以什么样的方式发武器，其实最终的目的都是发武器。</p><p>所以我们可以设计几个名称相同的方法，这样调用者调用起来就不用记那么多名字了</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握方法重载的应用场景。</span><br>        fire();<br>        fire(<span class="hljs-string">&quot;岛国2&quot;</span>);<br>        fire(<span class="hljs-string">&quot;米国&quot;</span>, <span class="hljs-number">999</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span>&#123;<br>        fire(<span class="hljs-string">&quot;岛国&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">(String country)</span>&#123;<br>        fire(country, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">(String country, <span class="hljs-type">int</span> number)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发射了&quot;</span> + number + <span class="hljs-string">&quot;枚武器给&quot;</span> + country);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结一下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>什么是方法重载？<br>答：一个类中，多个方法的名称相同，但它们形参列表不同。<br><span class="hljs-number">2.</span>方法重载需要注意什么？<br>- 一个类中，只要一些方法的名称相同、形参列表不同，那么它们就是方法重载了，<br>  其它的都不管（如：修饰符，返回值类型是否一样都无所谓）。<br><br>- 形参列表不同指的是：形参的个数、类型、顺序不同，不关心形参的名称。<br><br><span class="hljs-number">3</span>、方法重载有啥应用场景？<br>答：开发中我们经常需要为处理一类业务，提供多种解决方案，此时用方法重载来设计是很专业的。<br></code></pre></td></tr></table></figure><h2 id="九、return单独使用"><a href="#九、return单独使用" class="headerlink" title="九、return单独使用"></a>九、return单独使用</h2><p>各位同学，关于方法的定义，我们还剩下最后一种特殊用法，就是在方法中单独使用return语句，可以用来提前结束方法的执行。</p><p>如，下面的chu方法中，当除数为0时，就提前结束方法的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>        chu(<span class="hljs-number">10</span> , <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chu</span><span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)&#123;<br>            System.err.println(“您的数据有误！！不执行！！”);<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 直接跳出并结束当前chu方法的执行</span><br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a / b;<br>        System.out.println(<span class="hljs-string">&quot;除法结果是：&quot;</span>+c); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>今天的课程就到此结束了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04Java数组</title>
    <link href="/2023/12/01/day04-Java%E6%95%B0%E7%BB%84/"/>
    <url>/2023/12/01/day04-Java%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h4 id="04—Java数组"><a href="#04—Java数组" class="headerlink" title="04—Java数组"></a>04—Java数组</h4><p>今天我们学习一个Java中非常重要的技术——数组。</p><h2 id="一、认识数组"><a href="#一、认识数组" class="headerlink" title="一、认识数组"></a>一、认识数组</h2><p>先来认识一下什么数组</p><h3 id="1-什么数组"><a href="#1-什么数组" class="headerlink" title="1. 什么数组"></a>1. 什么数组</h3><p>数组就是一个容器，用来存一批同种类型的数据的。</p><p>比如：想要存储 20,10,80,60,90 这些数据。 我们可以把代码写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">80</span>,<span class="hljs-number">60</span>,<span class="hljs-number">90</span>&#125;;<br></code></pre></td></tr></table></figure><p>比如：想要存储 “牛二“,“西门“,“全蛋“ 这些数据。我们可以把代码写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] names = &#123;<span class="hljs-string">&quot;牛二&quot;</span>, <span class="hljs-string">&quot;西门&quot;</span>, <span class="hljs-string">&quot;全蛋&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-数组的应用场景"><a href="#2-数组的应用场景" class="headerlink" title="2. 数组的应用场景"></a>2. 数组的应用场景</h3><p>有变量，为什么还要有数组呢？ 比如，我们要做一个点名器</p><p><img src="/assets/1661321640902.png" alt="1661321640902"></p><p>如果用变量来做的话，代码是这样子的</p><p><img src="/assets/1661321680612.png" alt="1661321680612"></p><p>如果用数组来做的话，代码是这样子的</p><p><img src="/assets/1661321716135.png" alt="1661321716135"></p><p>一对比我们发现数组的写法比变量的写法更加简洁，所以我们可以得出一个结论</p><p><strong>结论：遇到批量数据的存储和操作时，数组比变量更适合</strong></p><h2 id="二、数组的定义和访问"><a href="#二、数组的定义和访问" class="headerlink" title="二、数组的定义和访问"></a>二、数组的定义和访问</h2><p>已经知道数组是用来干什么的。那么如何使用Java语言写一个数组呢？这里就需要学习一下数组的初始化格式。</p><p>数组有两种初始化的方式，一种是静态初始化、一种是动态初始化。我们先用静态初始化来学习数组的操作。</p><h3 id="2-1-数组的静态初始化"><a href="#2-1-数组的静态初始化" class="headerlink" title="2.1 数组的静态初始化"></a>2.1 数组的静态初始化</h3><p>所谓静态初始化指的是：在定义数组时直接给数组中的数据赋值。</p><p><strong>1. 静态初始化标准格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = <span class="hljs-keyword">new</span> 数据类型[]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><p>按照格式定义int类型、double类型数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义数组，用来存储多个年龄</span><br><span class="hljs-type">int</span>[] ages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;<br><span class="hljs-comment">//定义数组，用来存储多个成绩</span><br><span class="hljs-type">double</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">89.9</span>, <span class="hljs-number">99.5</span>, <span class="hljs-number">59.5</span>, <span class="hljs-number">88.0</span>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 静态初始化简化格式</strong></p><p>Java语言的设计者为了简化定义数组的写法，还为静态初始化提供了一种简化写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = &#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><p>使用简化格式定义int类型、double类型数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义数组，用来存储多个年龄</span><br><span class="hljs-type">int</span>[] ages = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;<br><span class="hljs-comment">//定义数组，用来存储多个成绩</span><br><span class="hljs-type">double</span>[] scores = &#123;<span class="hljs-number">89.9</span>, <span class="hljs-number">99.5</span>, <span class="hljs-number">59.5</span>, <span class="hljs-number">88.0</span>&#125;;<br></code></pre></td></tr></table></figure><p><strong>3. 注意哟！！</strong></p><ul><li>定义数组时， <code>数据类型[] 数组名</code> 也可写成 <code>数据类型 数组名[]</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以下两种写法是等价的。但是建议大家用第一种，因为这种写法更加普遍</span><br><span class="hljs-type">int</span>[] ages = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><span class="hljs-type">int</span> ages[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 数组在计算机中的基本原理</strong></p><p>我们知道数组是怎么定义的之后，那么接下来看一下数组在计算机中的基本原理。</p><p>我们以<code>int[] ages = &#123;12,24,36&#125;;</code>这句话为例，看一下这句话到底在计算机中做了那些事情。</p><ul><li>首先，左边<code>int[] ages</code> 表示定义了一个数组类型的变量，变量名叫ages</li><li>其次，右边<code>&#123;12,24,36&#125;</code>表示创建一个数组对象，你完全可以把它理解成一个能装数据的东西。这个对象在内存中会有一个地址值<code>[I@4c873330</code>，每次创建一个数组对象都会有不用的地址值。</li><li>然后，把右边的地址值<code>[I@4c873330</code>赋值给左边的ages变量</li><li>所以，ages变量就可以通过地址值，找到数组这个东西。</li></ul><p><img src="/assets/1661353166416.png" alt="1661353166416"></p><h3 id="2-2-数组的元素访问"><a href="#2-2-数组的元素访问" class="headerlink" title="2.2 数组的元素访问"></a>2.2 数组的元素访问</h3><p>各位同学，通过刚才的学习，我们知道数组是用来存储数据的。那么数组中存储的数据又如何访问呢？这里所说的访问，意思就是获取中数组中数据的值、或者给数组中的数据赋值。</p><p>这里先给大家统一几个概念，数组中存储的数据我们叫做元素；而且数组中的每一个元素都有一个编号与之对应，我们把这个编号叫做索引，这个索引是从0依次递增的整数。如下图所示</p><p><img src="/assets/1661354056668.png" alt="1661354056668"></p><p>要想访问数组中的元素，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数组名可以找到数组对象的地址，再通过索引就可以定位到具体的元素了</span><br>数组名[索引]<br></code></pre></td></tr></table></figure><p>接下来用代码来演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//索引：   0   1   2</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><span class="hljs-comment">// 1、访问数组的全部数据</span><br>System.out.println(arr[<span class="hljs-number">0</span>]); <span class="hljs-comment">//12</span><br>System.out.println(arr[<span class="hljs-number">1</span>]); <span class="hljs-comment">//24</span><br>System.out.println(arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">//36</span><br><span class="hljs-comment">//下面代码没有3索引，会出现ArrayIndexOutOfBoundsException 索引越界异常</span><br><span class="hljs-comment">//System.out.println(arr[3]); </span><br><br><span class="hljs-comment">// 2、修改数组中的数据</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">66</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span>;<br>System.out.println(arr[<span class="hljs-number">0</span>]); <span class="hljs-comment">//66</span><br>System.out.println(arr[<span class="hljs-number">1</span>]); <span class="hljs-number">0</span><br>System.out.println(arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure><p>除了访问数组中的元素，我们可以获取数组中元素的个数，后面我们统称为数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3、访问数组的元素个数：数组名.length</span><br>System.out.println(arr.length);<br><br><span class="hljs-comment">// 技巧：获取数组的最大索引: arr.length - 1(前提是数组中存在数据)</span><br>System.out.println(arr.length - <span class="hljs-number">1</span>);<br><br><span class="hljs-type">int</span>[] arr2 = &#123;&#125;;<br>System.out.println(arr2.length - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="2-3-数组的遍历"><a href="#2-3-数组的遍历" class="headerlink" title="2.3 数组的遍历"></a>2.3 数组的遍历</h3><p>各位同学，接下来我们学习一个对数组最最最常见的操作——数组遍历。所谓遍历意思就是将数组中的元素一个一个的取出来。</p><p>我们刚才学习了数组中元素的访问，访问元素必须用到索引，如下列代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ages = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br>System.out.println(ages[<span class="hljs-number">0</span>]);<br>System.out.println(ages[<span class="hljs-number">1</span>]);<br>System.out.println(ages[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>但是，如果数组中有很多很多元素，索引靠自己一个一个数肯定是不行的！我们可以使用for循环从0开始一直遍历到长度-1的位置，就可以获取所有的索引了。 </p><p>当你获取到每一个索引，那么每一个元素不就获取到了吗？上代码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ages = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ages.length; i++) &#123;<br>    <span class="hljs-comment">// i的取值 = 0,1,2</span><br>    System.out.println(ages[i]); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-数组静态初始化案例"><a href="#2-4-数组静态初始化案例" class="headerlink" title="2.4 数组静态初始化案例"></a>2.4 数组静态初始化案例</h3><p>学习完数组的静态初始化之后，接下来我们做一个练习题来巩固一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：某部门<span class="hljs-number">5</span>名员工的销售额分别是：<span class="hljs-number">16</span>、<span class="hljs-number">26</span>、<span class="hljs-number">36</span>、<span class="hljs-number">6</span>、<span class="hljs-number">100</span>，请计算出他们部门的总销售额。<br><br>需求分析：<br><span class="hljs-number">1.</span>看到有<span class="hljs-number">16</span>、<span class="hljs-number">26</span>、<span class="hljs-number">36</span>、<span class="hljs-number">6</span>、<span class="hljs-number">100</span>这<span class="hljs-number">5</span>个数据数据，而且数据值很明确;<br><span class="hljs-number">1</span>)想到,可以使用数组静态初始化把这<span class="hljs-number">5</span>个数据存起来<br><br><span class="hljs-number">2.</span>请计算出他们部门的总销售额（这不就是求数组中数据的和吗？）<br><span class="hljs-number">2</span>)必须先将数组中所有的元素遍历出来<br><span class="hljs-number">3</span>)想要求和，得先有一个求和变量sum<br><span class="hljs-number">4</span>)再将每一个元素和求和变量sum进行累加（求和思想）<br></code></pre></td></tr></table></figure><p>按照分析的思路来写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、定义一个数组存储5名员工的销售额</span><br><span class="hljs-comment">//索引          0   1    2  3   4</span><br><span class="hljs-type">int</span>[] money = &#123;<span class="hljs-number">16</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>&#125;;<br><br><span class="hljs-comment">// 3、定义一个变量用于累加求和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 2、遍历这个数组中的每个数据。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; money.length; i++) &#123;<br>    <span class="hljs-comment">// i = 0  1  2  3  4</span><br>    sum += money[i];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;员工的销售总额：&quot;</span> + sum);<br></code></pre></td></tr></table></figure><h3 id="2-5-数组的动态初始化"><a href="#2-5-数组的动态初始化" class="headerlink" title="2.5 数组的动态初始化"></a>2.5 数组的动态初始化</h3><p>刚才我们初始化数组时，都是直接将元素写出来。但是还有另一个初始化数组的方式叫 <strong>动态初始化</strong>。</p><p>动态初始化不需要我们写出具体的元素，而是指定元素类型和长度就行。格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据类型[]  数组名 = new 数据类型[长度];</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><p>下面是动态初始化数组的原理图。我们发现<code>int[] arr</code> 其实就是一个变量，它记录了数组对象的地址值，而且数组中的元素默认值是0。</p><p><img src="/assets/1661356063895.png" alt="1661356063895"></p><p><strong>注意：</strong></p><p>使用动态初始化定义数组时，根据元素类型不同，默认值也有所不同。</p><p><img src="/assets/1661417981361.png" alt="1661417981361"></p><p>关于数组动态初始化的格式和原理，咱们就先学习到这里。</p><h3 id="2-6-数组动态初始化案例"><a href="#2-6-数组动态初始化案例" class="headerlink" title="2.6 数组动态初始化案例"></a>2.6 数组动态初始化案例</h3><p>各位同学，接下来我们做一个数组动态初始化的案例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">案例需求：<br>某歌唱比赛，需要开发一个系统：可以录入<span class="hljs-number">6</span>名评委的打分，录入完毕后立即输出平均分做<br>选手得分<br><br>需求分析：<br><span class="hljs-number">1.</span>需要录入<span class="hljs-number">6</span>名评委的分数，可以用一个数组来保存。<br>   因为在评委没有录入分数之前，还不确定数组中应该存哪些数据。<br>   所以可以使用数组的动态初始化<br><span class="hljs-number">2.</span>遍历数组中的每一个位置，并录入分数，将分数存入数组中<br><span class="hljs-number">3.</span>遍历数组中的每一个元素，对元素求和<br></code></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、定义一个动态初始化的数组，负责后期存储6个评委的打分。</span><br><span class="hljs-type">double</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">6</span>];<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-comment">// 2、遍历数组中的每个位置，录入评委的分数，存入到数组中去</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>    <span class="hljs-comment">// i = 0 1 2 3 4 5</span><br>    System.out.println(<span class="hljs-string">&quot;请您输入当前第&quot;</span> + (i + <span class="hljs-number">1</span>) +<span class="hljs-string">&quot;个评委的分数：&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>    scores[i] = score;<br>&#125;<br><br><span class="hljs-comment">// 3、遍历数组中的每个元素进行求和</span><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span>  <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>    sum += scores[i];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;选手最终得分是：&quot;</span> + sum / scores.length);<br></code></pre></td></tr></table></figure><h2 id="三、数组在计算机中的执行原理"><a href="#三、数组在计算机中的执行原理" class="headerlink" title="三、数组在计算机中的执行原理"></a>三、数组在计算机中的执行原理</h2><p>在前面我们已经学习了数组的基本使用，也理解了数组的基本原理。由于数组是一个容器，变量也是一个容器，在理解他们执行原理的时候，有些同学就容易搞混，现在我把他们放在一起带着大家回顾一下他们的会执行原理，顺便带着大家详细理解一下Java程序的执行的内存原理。</p><h3 id="3-1-数组的执行原理，Java程序的执行原理"><a href="#3-1-数组的执行原理，Java程序的执行原理" class="headerlink" title="3.1 数组的执行原理，Java程序的执行原理"></a>3.1 数组的执行原理，Java程序的执行原理</h3><p>我们以下面的代码，来讲解变量、数组的执原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a);<br><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br>        System.out.println(arr);<br><br>        System.out.println(arr[<span class="hljs-number">1</span>]);<br><br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">44</span>;<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-number">55</span>;<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-number">66</span>;<br><br>        System.out.println(arr[<span class="hljs-number">0</span>]);<br>        System.out.println(arr[<span class="hljs-number">1</span>]);<br>        System.out.println(arr[<span class="hljs-number">2</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面我们给大家讲过，程序是在内存中执行的。实际上Java程序是把编译后的字节码加载到Java虚拟机中执行的。</p><p><img src="/assets/1661437717797.png" alt="1661437717797"></p><p>Java为了便于虚拟机执行Java程序，将虚拟机的内存划分为 方法区、栈、堆、本地方法栈、寄存器 这5块区域。同学们需要重点关注的是  <strong>方法区、栈、堆</strong>。</p><p>下面把每一个块内存区域作用介绍一下，我们大致只需要知道每一部分存储什么内容就行。</p><ul><li><strong>方法区</strong>：字节码文件先加载到这里</li><li><strong>栈</strong>：方法运行时所进入的内存区域，由于变量在方法中，所以变量也在这一块区域中</li><li><strong>堆</strong>：存储new出来的东西，并分配地址。由于数组是new 出来的，所以数组也在这块区域。</li></ul><p>下面是上面案例执行的内存原理如下图所示，按照① ② ③ ④ ⑤ ⑥ 的标记的顺序来看</p><p><img src="/assets/1661438278304.png" alt="1661438278304"></p><p><strong>总结一下<code>int a = 10</code>与 <code>int[] arr = new int[]&#123;11,22,33&#125;的区别</code></strong></p><ul><li><strong>a</strong>是一个变量，在栈内存中，<strong>a</strong>变量中存储的数据就是<strong>10</strong>这个值。</li><li><strong>arr</strong>也是一个变量，在栈中，存储的是数组对象在堆内存中的地址值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里的int a是一个基本类型变量，存储的是一个数值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> ; <br><span class="hljs-comment">//这里的int[] arr是一个引用类型的变量，存储的是一个地址值</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-2-多个变量指向同一个数组的问题"><a href="#3-2-多个变量指向同一个数组的问题" class="headerlink" title="3.2 多个变量指向同一个数组的问题"></a>3.2 多个变量指向同一个数组的问题</h3><p>我们了解了数组在内存中的执行原理。我们知道数组类型的变量，指向的是堆内存中数组对象的地址。但是在实际开发中可能存在一种特殊情况，就是多个变量指向同一个数组对象的形式。</p><p>讲解这个知识点的目的，是让同学们注意多个变量指向同一个数组对象存在什么问题？</p><p>我们先看一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识多个变量指向同一个数组对象的形式，并掌握其注意事项。</span><br>        <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br><br>        <span class="hljs-comment">// 把int类型的数组变量arr1赋值给int类型的数组变量arr2</span><br>        <span class="hljs-type">int</span>[] arr2 = arr1;<br><br>        System.out.println(arr1);<br>        System.out.println(arr2);<br><br>        arr2[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>;<br>        System.out.println(arr1[<span class="hljs-number">1</span>]);<br><br>        arr2 = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 拿到的数组变量中存储的值是null</span><br>        System.out.println(arr2);<br><br>        <span class="hljs-comment">//System.out.println(arr2[0]);</span><br>        <span class="hljs-comment">//System.out.println(arr2.length);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们重点关注这一段代码</p><p><img src="/assets/1661439843879.png" alt="1661439843879"></p><p>刚执行完<code>int[] arr1 = &#123;11,22,33&#125;;</code>时，内存原理如下</p><p><img src="/assets/1661439986204.png" alt="1661439986204"></p><p>当执行完<code>int[] arr2 = arr1;</code>后，内存原理如下</p><p><img src="/assets/1661440179341.png" alt="1661440179341"></p><p>当执行到<code>arr2[1]=99;时</code>，内存原理如下</p><p><img src="/assets/1661440425901.png" alt="1661440425901"></p><p><strong>总结一下：</strong></p><ul><li><p>两个变量指向同一个数组时，两个变量记录的是同一个地址值。</p></li><li><p>当一个变量修改数组中的元素时，另一个变量去访问数组中的元素，元素已经被修改过了。</p></li></ul><p>到这里有关数组的基本操作，和内存原理我们就全部学习完了。</p><h2 id="四、数组专项练习"><a href="#四、数组专项练习" class="headerlink" title="四、数组专项练习"></a>四、数组专项练习</h2><p>接下来我们做一些专项练习题，把数组的常见操作练习一下。在学习这个案例时，重点掌握数组求最值的思路，代码只是用来表达你的思路的。</p><h3 id="4-1-数组求最值"><a href="#4-1-数组求最值" class="headerlink" title="4.1 数组求最值"></a>4.1 数组求最值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：定义一个<span class="hljs-type">int</span>类型数组，求数组中元素的最大值，并打印最大值<br></code></pre></td></tr></table></figure><p>我们先看一下选美比赛，是怎么选出颜值最高的人的。然后再以此思路，来写代码找出数组中元素的最大值。</p><p><img src="/assets/1661441712915.png" alt="1661441712915"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">数组求最大值思路：<br><span class="hljs-number">1</span>)先找出数组中<span class="hljs-number">0</span>索引的元素，假设为最大值，用max表示【擂主】<br><span class="hljs-number">2</span>)遍历后面的每一个元素和max比较，把较大的元素值重新赋值给max(擂主换人)<br>    <span class="hljs-number">3</span>)最后max就是所有元素的最大值(最后站在台上的擂主)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、把颜值数据拿到程序中来，用数组装起来</span><br>        <span class="hljs-type">int</span>[] faceScores = &#123;<span class="hljs-number">15</span>, <span class="hljs-number">9000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">20000</span>, <span class="hljs-number">9500</span>, -<span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-comment">// 2、定义一个变量用于最终记住最大值。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> faceScores[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-comment">// 3、从数组的第二个位置开始遍历。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; faceScores.length; i++) &#123;<br>            <span class="hljs-comment">// i = 1  2  3  4  5</span><br>            <span class="hljs-comment">// 判断一下当前遍历的这个数据，是否大于最大值变量max存储的数据，</span><br>            <span class="hljs-comment">//如果大于，当前遍历的数据需要赋值给max</span><br>            <span class="hljs-keyword">if</span>(faceScores[i] &gt; max )&#123;<br>                max = faceScores[i];<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最高颜值是：&quot;</span> + max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结一下：</strong></p><p>通过这个案例，我们主要掌握求最值的思路，以后不管遇到求最大值还是最小值，编程思路都是一样的，不同的可能是数据不同。</p><h3 id="4-2-数组元素反转"><a href="#4-2-数组元素反转" class="headerlink" title="4.2 数组元素反转"></a>4.2 数组元素反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：某个数组有<span class="hljs-number">5</span>个数据：<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>，请将这个数组中的数据进行反转。<br>      [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]  反转后 [<span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>数组元素反转的核心，其实是数组中两个数据的交换。我们可以认为两个数据分别存储在两个水杯中。想要交换两个水杯中的东西，我们得借助第三个水杯，如下图所示</p><p><img src="/assets/1661442733592.png" alt="1661442733592"></p><p><img src="/assets/1661442758553.png" alt="1661442758553"></p><p>数组中元素交换，就是用的借用第三方变量的思想。 我们把数组中的每一个元素当做一个水杯，然后索引控制哪两个元素互换位置。</p><p>怎么样，才能达到元素反转的效果呢？我们只需将第一个和最后一个元素互换、第二个和倒数第二个互换、依次内推…. 如下图所示</p><p><img src="/assets/1661443189060.png" alt="1661443189060"></p><p>怎么样写代码，才能达到上面的效果呢？我们继续分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>每次交换，需要有左右两边的两个索引，我们可以用i和j表示<br>刚开始i=<span class="hljs-number">0</span>，j=数组长度-<span class="hljs-number">1</span>;<br><span class="hljs-number">2.</span>每次让i和j索引位置的两个元素互换位置<br>arr[i]和arr[j]互换位置<br><span class="hljs-number">3.</span>每次还完位置之后，让i往右移动一位，让j往前移动一位<br></code></pre></td></tr></table></figure><p>具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成数组反转。</span><br>        <span class="hljs-comment">// 1、准备一个数组</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;;  <br><br>        <span class="hljs-comment">// 2、定义一个循环，设计2个变量，一个在前，一个在后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = arr.length - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>            <span class="hljs-comment">// arr[i]   arr[j]</span><br>            <span class="hljs-comment">// 交换</span><br>            <span class="hljs-comment">// 1、定义一个临时变量记住后一个位置处的值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>            <span class="hljs-comment">// 2、把前一个位置处的值赋值给后一个位置了</span><br>            arr[j] = arr[i];<br>            <span class="hljs-comment">// 3、把临时变量中记住的后一个位置处的值赋值给前一个位置处</span><br>            arr[i] = temp;<br>        &#125;<br><br>        <span class="hljs-comment">// 3、遍历数组中的每个数据，看是否反转成功了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结一下：</strong></p><p>通过上面的案例，需要我们掌握元素互换位置的编程思路；以后遇到数据互换问题，都这样做。</p><h3 id="4-3-随机排名"><a href="#4-3-随机排名" class="headerlink" title="4.3 随机排名"></a>4.3 随机排名</h3><p>通过数组元素反转的案例，我们学会了如何对两个数据进行交换。接下来，我们再学习随机排名案例，将数据交换的思路再巩固一下。</p><p>先来看一下需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：某公司开发部<span class="hljs-number">5</span>名开发人员，要进行项目进展汇报演讲，现在采取随机排名后进行汇报。请先依次录入<span class="hljs-number">5</span>名员工的工号，然后展示出一组随机的排名顺序。<br></code></pre></td></tr></table></figure><p>分析一下随机排名的思路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>在程序中录入<span class="hljs-number">5</span>名员工的工号存储起来 ---&gt; 使用动态初始化数组的方式。<br><span class="hljs-number">2.</span>依次遍历数组中的每个数据。<br><span class="hljs-number">3.</span>每遍历到一个数据，都随机一个索引值出来，让当前数据与该索引位置处的数据进行交换。<br></code></pre></td></tr></table></figure><p>如下图所示，每次遍历到一个元素，随机将当前位置元素和随机索引元素换位置。</p><p><img src="/assets/1661444407716.png" alt="1661444407716"></p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：完成随机排名</span><br>        <span class="hljs-comment">// 1、定义一个动态初始化的数组用于存储5名员工的工号</span><br>        <span class="hljs-type">int</span>[] codes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br>        <span class="hljs-comment">// 2、提示用户录入5名员工的工号。</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length; i++) &#123;<br>            <span class="hljs-comment">// i = 0 1 2 3 4</span><br>            System.out.println(<span class="hljs-string">&quot;请您输入第&quot;</span> + (i + <span class="hljs-number">1</span>) +<span class="hljs-string">&quot;个员工的工号：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            codes[i] = code;<br>        &#125;<br><br>        <span class="hljs-comment">// 3、打乱数组中的元素顺序。</span><br>        <span class="hljs-comment">// [12, 33, 54, 26, 8]</span><br>        <span class="hljs-comment">//  i       index</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length; i++) &#123;<br>            <span class="hljs-comment">// codes[i]</span><br>            <span class="hljs-comment">// 每遍历到一个数据，都随机一个数组索引范围内的值。</span><br>            <span class="hljs-comment">//然后让当前遍历的数据与该索引位置处的值交换。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(codes.length); <span class="hljs-comment">// 0 - 4</span><br>            <span class="hljs-comment">// 定义一个临时变量记住index位置处的值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> codes[index];<br>            <span class="hljs-comment">// 把i位置处的值赋值给index位置处</span><br>            codes[index] = codes[i];<br>            <span class="hljs-comment">// 把index位置原来的值赋值给i位置处</span><br>            codes[i] = temp;<br>        &#125;<br><br>        <span class="hljs-comment">// 4、遍历数组中的工号输出即可</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length; i++) &#123;<br>            System.out.print(codes[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这有关数组的常见练习题我们就讲完了，待会我们在给同学们讲一个开发中用得比较多的工具叫做Debug调试。</p><h2 id="五、Debug调试工具"><a href="#五、Debug调试工具" class="headerlink" title="五、Debug调试工具"></a>五、Debug调试工具</h2><p>为了更好的理解代码的执行流程，这里给大家讲一个在开发中非常重要的工具——叫做Debug调试。 </p><p>通过Debug调试，我们可以查看代码的执行流程。当你代码中有Bug但是又发现不了的时候，你就可以用Debug调试工具，查看执行流程，逐步分析是哪一行出现了问题。</p><p>Debug调试工具的使用步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">第一步：打断点，如下图的红色小圆点<br>第二步：右键Debug方式启动程序，如下图右键菜单<br>  启动后，代码会停留在打断点的这一行<br>第三步：点击箭头按钮，一行一行往下执行<br></code></pre></td></tr></table></figure><p><img src="/assets/1661444896100.png" alt="1661444896100"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03程序流程控制</title>
    <link href="/2023/12/01/day03-Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/12/01/day03-Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="03—程序流程控制"><a href="#03—程序流程控制" class="headerlink" title="03—程序流程控制"></a>03—程序流程控制</h3><p>什么是流程控制呢？说白了就是控制程序的执行顺序。</p><p>先    介绍一下，程序有哪些流程控制、以及Java提供了哪些方案来控制程序的执行顺序？</p><p>程序的流程控制一般分为3种：<strong>顺序结构、分支结构、循环结构</strong></p><ul><li><p>顺序结构：就是不加任何控制，代码从main方法开始自上而下执行</p></li><li><p>分支结构：就是根据条件判断是true还是false，有选择性的执行哪些代码。在Java语言中提供了两个格式if 、 switch</p></li><li><p>循环结构：就是控制某一段代码重复执行。在Java语言中提供了三种格式，for、while、do-while</p></li></ul><p><img src="/assets/1661129154598.png" alt="1661129154598"></p><p>以上就是我们今天要学习的课程内容</p><h2 id="一、分支结构"><a href="#一、分支结构" class="headerlink" title="一、分支结构"></a>一、分支结构</h2><h3 id="1-1-if分支"><a href="#1-1-if分支" class="headerlink" title="1.1 if分支"></a>1.1 if分支</h3><p>分支结构的第一种形式——if分支。</p><p>if它的作用，是用于对条件进行判断，判断的结果只可能有两个值true或者false，然后根据条件判断的结果来决定执行那段代码。</p><p><strong>1. if分支的应用场景有哪些呢？</strong></p><p>比如，在火车站、地铁站等公共场所，会对过往的旅客测体温。如果体温在37度以内，就属于正常的；如果体温在37读以上，测体温的装置就会报警。</p><p><img src="/assets/1661130193692.png" alt="1661130193692"></p><p>再比如，你在使用微信付钱时，微信内部的程序会先判断你的余额是否足够，如果足够就可以支付成功；如果余额不足，就会提示支付失败。</p><p><img src="/assets/1661133550463.png" alt="1661133550463"></p><p><strong>2. if分支的格式</strong></p><p>接下来，我们来看一看if分支在Java语言中长什么样子呢？在Java中if分支有三种格式。</p><p><img src="/assets/1661131177976.png" alt="1661131177976"></p><p>接下来我们用一些实际案例  大家演示一下if语句的应用，以及每一种if语句的执行流程。</p><p><strong>3. if 第一种形式</strong></p><p>if 第一种形式的代码格式，和执行流程如下图所示</p><p><img src="/assets/1661131910804.png" alt="1661131910804"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> 第一种形式执行流程如下：<br>    如果 条件表达式 为<span class="hljs-literal">true</span>，就执行下面的语句体<br>    如果 条件表达式 为<span class="hljs-literal">false</span>,就不执行<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求：测量用户体温，发现体温高于37度就报警。</span><br><span class="hljs-type">double</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">36.9</span>;<br><span class="hljs-keyword">if</span>(t &gt; <span class="hljs-number">37</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;这个人的温度异常，把他赶紧带走~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. if 第二种形式</strong></p><p>if 第二种形式的代码格式，和执行流程如下图所示</p><p><img src="/assets/1661132063147.png" alt="1661132063147"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> 第二种形式执行流程如下：<br>    如果 条件表达式 为<span class="hljs-literal">true</span>,就执行下面的语句体<span class="hljs-number">1</span><br>    如果 条件表达式 为<span class="hljs-literal">false</span>,就执行<span class="hljs-keyword">else</span>下面的语句体<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求2：发红包，你的钱包余额是99元，现在要发出90元</span><br><span class="hljs-comment">// 如果钱够触发发红包的动作，如果钱不够，则提示：余额不足。</span><br><span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">19</span>;<br><span class="hljs-keyword">if</span>(money &gt;= <span class="hljs-number">90</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;发红包成功了~&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;余额不足~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. if 第三种形式</strong></p><p>if 第三种形式的代码格式，和执行流程如下图所示</p><p><img src="/assets/1661132132708.png" alt="1661132132708"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> 第三种形式执行流程如下：<br>    如果 条件表达式<span class="hljs-number">1</span> 为<span class="hljs-literal">true</span>,就执行下面的代码<span class="hljs-number">1</span>; <br>    如果 条件表达式<span class="hljs-number">1</span> 为<span class="hljs-literal">false</span>，就继续判断条件表达式<span class="hljs-number">2</span>;<br><br>    如果 条件表达式<span class="hljs-number">2</span> 为<span class="hljs-literal">true</span>，就执行下面的语句体;<br>    如果 条件表达式<span class="hljs-number">2</span> 为<span class="hljs-literal">false</span>，就继续判断条件语句体<span class="hljs-number">3</span>;<br><br>    如果 条件表达式<span class="hljs-number">3</span> 为<span class="hljs-literal">true</span>,就执行下面的语句体<span class="hljs-number">3</span><br>    如果 条件表达式<span class="hljs-number">3</span> 为<span class="hljs-literal">false</span>,就继续判断后面的表达式;<br><br>    ....<br>    如果前面所有条件表达式判断都为<span class="hljs-literal">false</span>，就执行最后的<span class="hljs-keyword">else</span>语句中的代码<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求3：某个公司有一个绩效系统，根据员工的打分输出对应的绩效级别。[0,60) D  [60,80) C [80,90) B [90,100] A</span><br><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">298</span>;<br><span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">0</span> &amp;&amp; score &lt; <span class="hljs-number">60</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;您的绩效级别是： D&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt; <span class="hljs-number">80</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;您的绩效级别是： C&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">80</span> &amp;&amp; score &lt; <span class="hljs-number">90</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;您的绩效级别是： B&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;您的绩效级别是： A&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;您录入的分数有毛病~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6. if 使用的几个常见问题</strong></p><p>  在第一次写if 代码时，经常一不小心会出现一些问题。下面把  可能出现的问题  大家看一看，以后大家要避免出现这些问题。</p><ul><li>第1个问题：if的()后面不能写分号<code>;</code> 否则if下面的语句与if无关</li></ul><p><img src="/assets/1661132888600.png" alt="1661132888600"></p><ul><li>第2个问题：if后面的大括号，如果只有一行代码，大括号可以省略</li></ul><p><img src="/assets/1661132851560.png" alt="1661132851560"></p><p><strong>7. if 分支小结</strong></p><p>关于if分支结构的几种格式，以及各种格式的执行流程，还有if在什么场景下使用我们就讲完了。下面我们总结一下</p><ul><li><p>if分支有什么作用？举几个应用场景？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-keyword">if</span>作用：<span class="hljs-keyword">if</span>分支可以根据条件，选择执行某段程序<br>- <span class="hljs-keyword">if</span>应用场景<br>    比如<span class="hljs-number">1</span>：测量用户体温，发现体温高于<span class="hljs-number">37</span>度就报警<br>    比如<span class="hljs-number">2</span>:发红包，你的钱包余额是<span class="hljs-number">99</span>元，现在要发出<span class="hljs-number">90</span>元<br>    比如<span class="hljs-number">3</span>:根据员工的绩效打分输出对应的绩效级别<br></code></pre></td></tr></table></figure></li><li><p>if分支的格式有几种，执行流程是什么样的？</p></li></ul><p><img src="/assets/1661133510341.png" alt="1661133510341"></p><hr><h3 id="1-2-switch分支"><a href="#1-2-switch分支" class="headerlink" title="1.2 switch分支"></a>1.2 switch分支</h3><p>学完if 分支之后，接下来我们来学习分支结构的第二种形式——switch分支。</p><p><strong>1. switch分支的执行流程</strong></p><p>switch 分支的作用，<strong>是通过比较值来决定执行哪条分支代码</strong>。先看一下switch分支的格式和执行流程</p><p><img src="/assets/1661134120042.png" alt="1661134120042"></p><p>下面通过案例来演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：做个电子备忘录，在控制台分别输出周一到周五的工作安排</span><br><span class="hljs-comment">    周一：埋头苦干，解决bug              </span><br><span class="hljs-comment">    周二：请求大牛程序员帮忙             </span><br><span class="hljs-comment">    周三：今晚啤酒、龙虾、小烧烤      </span><br><span class="hljs-comment">    周四：主动帮助新来的女程序解决bug</span><br><span class="hljs-comment">    周五：今晚吃鸡</span><br><span class="hljs-comment">    周六：与王婆介绍的小芳相亲</span><br><span class="hljs-comment">    周日：郁郁寡欢、准备上班。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;周三&quot;</span>;<br><span class="hljs-keyword">switch</span> (week)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周一&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;埋头苦干，解决bug&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周二&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;请求大牛程序员帮忙&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周三&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;今晚啤酒、龙虾、小烧烤&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周四&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;主动帮助新来的女程序解决bug&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周五&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;今晚吃鸡&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周六&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;与王婆介绍的小芳相亲&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周日&quot;</span>:<br>        System.out.println(<span class="hljs-string">&quot;郁郁寡欢、准备上班&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;您输入的星期信息不存在~~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. if 、switch如何选择</strong></p><p>学习完switch 分支之后，有同学可能会想，已经了有if分支，为什么还有switch分支呢？感觉上面的案例用if分支也能做啊？  那我们在具体应用场景下如何选择呢？</p><p>如果单从功能上来讲，if 分支 的功能是更加强大的，switch分支能做的事情if 分支都能做。但是具体用哪一种分支形式，也是有一些使用原则的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">- 如果是对一个范围进行判断，建议使用<span class="hljs-keyword">if</span>分支结构<br>- 如果是与一个一个的值比较的时候，建议使用<span class="hljs-keyword">switch</span>分支结构<br></code></pre></td></tr></table></figure><h3 id="1-3-switch-注意事项"><a href="#1-3-switch-注意事项" class="headerlink" title="1.3 switch 注意事项"></a>1.3 switch 注意事项</h3><p>各位同学，接下来我们学习swtich的注意事项。  掌握这些注意事项之后，就可以避免入坑了，也可以应对一些面试笔试题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-number">1.</span>表达式类型只能是<span class="hljs-type">byte</span>、<span class="hljs-type">short</span>、<span class="hljs-type">int</span>、<span class="hljs-type">char</span><br>JDK5开始支持枚举，JDK7开始支持String<br>不支持<span class="hljs-type">double</span>、<span class="hljs-type">float</span>、<span class="hljs-type">double</span><br>    <br>- <span class="hljs-number">2.</span><span class="hljs-keyword">case</span>  出的值不允许重复，且只能是字面量，不能是变量。<br><br>- <span class="hljs-number">3.</span>正常使用<span class="hljs-keyword">switch</span>的时候，不要忘记写<span class="hljs-keyword">break</span>，否则会出现穿透现象。<br></code></pre></td></tr></table></figure><p><strong>1. 演示switch语句匹配的数据类型</strong></p><p>各位同学，如果下图所示，可以自己分别用变量a、b放在switch语句中匹配试一试，如果遇到不支持的写法，IDEA会报错的。</p><p><img src="/assets/1661135813464.png" alt="1661135813464"></p><p><strong>2. 演示case后面的值，只能是字面量不能是变量</strong></p><p>各位同学，也可以自己试试，下图箭头指向的位置只能写字面量，不能写变量</p><p><img src="/assets/1661136001680.png" alt="1661136001680"></p><p><strong>3. 演示case穿透现象</strong></p><p>当switch语句中没有遇到break，就会直接穿透到下一个case语句执行，直到遇到break为止。</p><p>这种语法设计也是有它的用处的，当多个case语句想要执行同一段代码时，可以利用case穿透现象，提高代码复用性。</p><p>比如：我们下面程序中，想要让周二、周三、周四，都请大牛程序员来写代码。</p><p><img src="/assets/1661136414587.png" alt="1661136414587"></p><h2 id="二、循环结构"><a href="#二、循环结构" class="headerlink" title="二、循环结构"></a>二、循环结构</h2><p>各位同学，接下来我们学习循环结构。循环结构可以控制一段代码重复执行。循环结构有for循环、while循环、do-while循环。</p><h3 id="2-1-for循环——格式和流程"><a href="#2-1-for循环——格式和流程" class="headerlink" title="2.1 for循环——格式和流程"></a>2.1 for循环——格式和流程</h3><p>这里首先来学习for循环，  重点掌握for循环的书写格式，并理解for循环的执行流程。</p><p><strong>1. for循环的格式和流程</strong></p><p>为了让大家更直观的理解for循环的执行流程，我们直接来看具体的案例代码。</p><p>比如：我们想要在控制台打印输出3个HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求：打印3行Hello World</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示，是按照下面的① ② ③ ④， ② ③ ④… 的顺序来执行的；</p><p>当②条件为true时，再依次执行③④代码，然后回到②继续判断</p><p>当②条件为false时，就结束循环</p><p><img src="/assets/1661137599188.png" alt="1661137599188"></p><p>具体执行的每一步可以看下面的图解</p><p><img src="/assets/1661138616082.png" alt="1661138616082"></p><p>通过上面的案例演示，最后我们再总结一下for循环的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//for循环格式：</span><br><span class="hljs-keyword">for</span> (初始化语句; 循环条件; 迭代语句) &#123;<br>    循环体语句(重复执行的代码);<br>&#125;<br><br>初始化语句：一般是定义一个变量，并  初始值<br>循环条件：一般是一个关系表达式，结果必须是<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span><br>迭代语句：用于对条件进行控制，一般是自增或者自减<br>循环语句体：需要重复执行的代码<br></code></pre></td></tr></table></figure><p><strong>2. for循环有哪些应用场景</strong></p><p>通过上面的学习，我们已经知道了for循环怎么编写，并且也知道了它的执行流程。</p><p>那么具体在哪些实际场景下使用呢？<strong>其实只要是重复做的事情，都可以用循环语句来做</strong></p><p>比如：在京东的网页上展示100台手机信息，我们只需要把展示数据的代码写一份，重复执行就可以了。</p><p><img src="/assets/1661139301013.png" alt="1661139301013"></p><p>再比如：再我们教学管理系统中，有很多班级需要展示在页面上，我们没必要每一个班级都写一份展示数据代码，只需要写一份重复执行就可以了。</p><p><img src="/assets/1661139453144.png" alt="1661139453144"></p><h3 id="2-2-for循环案例1——求和"><a href="#2-2-for循环案例1——求和" class="headerlink" title="2.2 for循环案例1——求和"></a>2.2 for循环案例1——求和</h3><p>学完for循环的格式和流程之后，我们再通过案例来巩固一下。通过这个案例，主要是让  掌握一种使用程序来求和的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.掌握使用for循环批量产生数据。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">求和的思路分析：<br><span class="hljs-number">1</span>)首先需要定义一个求和变量，一般命名为sum<br><span class="hljs-number">2</span>)再遍历得到所有需要求和的数据(<span class="hljs-number">1</span>~<span class="hljs-number">100</span>之间的所有整数)<br><span class="hljs-number">3</span>)让需要求和的数据和sum累加，<br>结果：所有数据累加完之后最终sum就是所有数据的和<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.需求：求1~100中所有整数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//定义一个循环，先产生1-100，这100个数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-comment">//每产生一个数据，就把这个数和sum累加</span><br>    sum += i; <span class="hljs-comment">//sum = sum  + i;</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;1-100的数据和：&quot;</span> +  sum);<br></code></pre></td></tr></table></figure><p>分析上面代码的执行过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">i=<span class="hljs-number">1</span>时：sum=<span class="hljs-number">0</span>+<span class="hljs-number">1</span>; sum=<span class="hljs-number">1</span>;<br>i=<span class="hljs-number">2</span>时：sum=<span class="hljs-number">1</span>+<span class="hljs-number">2</span>; sum=<span class="hljs-number">3</span>;<br>i=<span class="hljs-number">3</span>时：sum=<span class="hljs-number">3</span>+<span class="hljs-number">3</span>; sum=<span class="hljs-number">6</span>;<br>i=<span class="hljs-number">4</span>时：sum=<span class="hljs-number">6</span>+<span class="hljs-number">4</span>; sum=<span class="hljs-number">10</span>;<br>...<br>i=<span class="hljs-number">100</span>时: sum+=<span class="hljs-number">99</span>; sum=<span class="hljs-number">5050</span><br></code></pre></td></tr></table></figure><h3 id="2-2-for循环案例2——求奇数和"><a href="#2-2-for循环案例2——求奇数和" class="headerlink" title="2.2 for循环案例2——求奇数和"></a>2.2 for循环案例2——求奇数和</h3><p>需求：求1~100之间奇数的和</p><p><strong>1.  代码写法一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">求奇数和的思路（只是求和的数据变成了奇数，思路和前面没有变化）<br><span class="hljs-number">1</span>)首先需要定义一个求和变量，这里命名为sum1<br><span class="hljs-number">2</span>)再遍历得到所有需要求和的数据(<span class="hljs-number">1</span>~<span class="hljs-number">100</span>之间的所有奇数)<br><span class="hljs-number">3</span>)让需要求和的数据和sum1累加，<br>结果：所有数据累加完之后最终sum1就是所有数据的和<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1)定义一个变量用于求和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//2)定义一个循环产生1-100之间的奇数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i+=<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// i = 1 3 5 7 ...</span><br>    <span class="hljs-comment">//3)让需要求和的数据和sum1累加，</span><br>    sum1 += i;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;1-100之间的奇数和：&quot;</span> +  sum1);<br></code></pre></td></tr></table></figure><p>以上代码的执行流程分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化sum1=<span class="hljs-number">0</span>;<br><br>当i=<span class="hljs-number">1</span>时：sum1+=<span class="hljs-number">1</span>; sum1=<span class="hljs-number">1</span>;<br>当i=<span class="hljs-number">3</span>时：sum1+=<span class="hljs-number">3</span>; sum1=<span class="hljs-number">4</span>;<br>当i=<span class="hljs-number">5</span>时：sum1+=<span class="hljs-number">5</span>; sum1=<span class="hljs-number">9</span>;<br>...<br>当i=<span class="hljs-number">99</span>时：sum1+=<span class="hljs-number">99</span>; sum1=<span class="hljs-number">2500</span><br></code></pre></td></tr></table></figure><p><strong>2. 代码写法二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">求奇数和的思路（只是求和的数据变成了奇数，思路和前面没有变化）<br><span class="hljs-number">1</span>)首先需要定义一个求和变量，这里命名为sum2<br><span class="hljs-number">2</span>)再遍历得到所有需要求和的数据(<span class="hljs-number">1</span>~<span class="hljs-number">100</span>之间的所有整数)<br><span class="hljs-number">3</span>)在求和之前先对数据判断，如果是奇数，才和sum1累加；否则什么也不干<br>结果：所有数据累加完之后最终sum1就是所有数据的和<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1)首先需要定义一个求和变量，这里命名为sum2</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><span class="hljs-comment">//2)再遍历得到所有需要求和的数据(1~100之间的所有整数)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-comment">//i = 1 2 3 4 5 6 ... 99 100</span><br>    <span class="hljs-comment">//3)在求和之前先对数据判断，如果是奇数，才和sum1累加；否则什么也不干</span><br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// i = 1 3 5 7 9 ... 99</span><br>        sum2 += i;<br>    &#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;1-100之间的奇数和：&quot;</span> + sum2);<br></code></pre></td></tr></table></figure><p><strong>for循环小结</strong></p><p>今天关于for循环，我们学习这几个案例就够了，重点还是掌握for循环的执行流程。在以后，我们还会经常用到for循环，用多了，你就会越来越熟悉了。但是在具体场景下，还是需要具体问题具体分析。</p><hr><h3 id="2-3-while循环——格式和流程"><a href="#2-3-while循环——格式和流程" class="headerlink" title="2.3 while循环——格式和流程"></a>2.3 while循环——格式和流程</h3><p>各位同学，接下来我们学习第二种循环结构——while循环。</p><p>我们先来认识一下while循环长什么样子，然后按照格式写一个while循环的基础案例</p><p><img src="/assets/1661141338265.png" alt="1661141338265"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求：打印5行Hello World</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>) &#123;<br>    <span class="hljs-comment">// i = 0 1 2 3 4</span><br>    System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码的执行流程如下图所示：按照①   ②③④  ②③④ … 的流程执行</p><p>如果②步骤为true，才循环执行③④步骤</p><p>如果②步骤为false，则循环结束</p><p><img src="/assets/1661141996444.png" alt="1661141996444"></p><p><img src="/assets/1661141867092.png" alt="1661141867092"></p><p><strong>for、while如何选择</strong></p><p>学到这里，细心的同学可能会发现while循环和for循环的执行流程是一样的。那他们是不是可以通用呢？</p><ul><li><p>从功能来说：能够用for循环做的，都能用while循环做。</p></li><li><p>使用规范上来说：知道循环几次，建议使用for；不知道循环几次建议使用while</p></li></ul><h3 id="2-3-while循环案例——折纸案例"><a href="#2-3-while循环案例——折纸案例" class="headerlink" title="2.3 while循环案例——折纸案例"></a>2.3 while循环案例——折纸案例</h3><p>各位同学，上一节我们已经学习了while循环的基本使用。下面我们通过一个案例再将while循环的使用巩固一下，主要目的还是想让大家知道什么使用while循环来完成需求。</p><p>案例需求如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：世界最高山峰珠穆朗玛峰高度是：<span class="hljs-number">8848.86</span>米=<span class="hljs-number">8848860</span>毫米，假如我有一张足够大的它的厚度是<span class="hljs-number">0.1</span>毫米。请问：该纸张折叠多少次，可以折成珠穆朗玛峰的高度？<br></code></pre></td></tr></table></figure><p>我们来分析一下该怎么做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">分析：首先由于不知道折叠多少次，我们可以选择用<span class="hljs-keyword">while</span>循环<br><span class="hljs-number">1</span>)纸张的初始化厚度为<span class="hljs-number">0.1</span>毫米，珠峰的高度为<span class="hljs-number">8848860</span>毫米<br><span class="hljs-type">double</span> <span class="hljs-variable">peakHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">8848860</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">paperThickness</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><span class="hljs-number">2</span>)每次折叠纸张的厚度为原来的两倍，这是需要循环执行的<br><span class="hljs-keyword">while</span>(纸张厚度&lt;<span class="hljs-number">8848860</span>)&#123;<br>纸张厚度*=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-number">3</span>)需要求折叠的次数，可以用一个变量来记录折叠的次数<br><span class="hljs-type">int</span> 次数 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(纸张厚度&lt;<span class="hljs-number">8848860</span>)&#123;<br>纸张厚度*=<span class="hljs-number">2</span>;<br>            次数++; <span class="hljs-comment">//每次折叠次数累加</span><br>&#125;<br>结果：等循环结束之后，打印记录次数的值，就是折叠多少次了。<br></code></pre></td></tr></table></figure><p>按照上面分析的思路把代码写出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、定义变量记住珠穆朗玛峰的高度和纸张的高度。</span><br><span class="hljs-type">double</span> <span class="hljs-variable">peakHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">8848860</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">paperThickness</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><br><span class="hljs-comment">// 3、定义一个变量count用于记住纸张折叠了多少次</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 2、定义while循环控制纸张开始折叠</span><br><span class="hljs-keyword">while</span> (paperThickness &lt; peakHeight) &#123;<br>    <span class="hljs-comment">// 把纸张进行折叠，把纸张的厚度变成原来的2倍。</span><br>    paperThickness = paperThickness * <span class="hljs-number">2</span>;<br>    count++;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;需要折叠多少次：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;最终纸张的厚度是：&quot;</span> + paperThickness);<br></code></pre></td></tr></table></figure><h3 id="2-4-do-while循环——格式和流程"><a href="#2-4-do-while循环——格式和流程" class="headerlink" title="2.4 do-while循环——格式和流程"></a>2.4 do-while循环——格式和流程</h3><p>各位同学，接下来我们学习循环结构的第三种格式——do-while循环。</p><p>们先来认识一下while循环长什么样子，然后按照格式写一个while循环的基础案例。</p><p><img src="/assets/1661143715539.png" alt="1661143715539"></p><p>如下图所示：do-while循环的执行流程，是按照①  ②③④   ②③④… 的顺序执行的。</p><p>我们会发现，do-while循环的特点是先执行，再判断的。即使条件不成立，也会先执行一次。</p><p><img src="/assets/1661143856132.png" alt="1661143856132"></p><p><strong>下面我们把三种循环的区别    总结一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> <span class="hljs-keyword">for</span>循环 和 <span class="hljs-keyword">while</span>循环（先判断后执行）; <br>   <span class="hljs-keyword">do</span>...<span class="hljs-keyword">while</span> （先执行后判断）<br>   <br><span class="hljs-number">2.</span><span class="hljs-keyword">for</span>循环和<span class="hljs-keyword">while</span>循环的执行流程是一模一样的，<br>功能上无区别，<span class="hljs-keyword">for</span>能做的<span class="hljs-keyword">while</span>也能做，反之亦然。<br>如果已知循环次数建议使用<span class="hljs-keyword">for</span>循环，如果不清楚要循环多少次建议使用<span class="hljs-keyword">while</span>循环。<br><br><span class="hljs-number">3</span> <span class="hljs-keyword">for</span>循环中控制循环的变量只在循环中使用<br>  <span class="hljs-keyword">while</span>循环中，控制循环的变量在循环后还可以继续使用<br></code></pre></td></tr></table></figure><h3 id="2-6-死循环"><a href="#2-6-死循环" class="headerlink" title="2.6 死循环"></a>2.6 死循环</h3><p>  在写代码时，可能一不小心把代码写成了死循环，所谓死循环就是停不下来的循环。</p><p>接下来，带着  认识几种死循环的写法。然后再说一下死循环有什么用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//for死循环</span><br><span class="hljs-keyword">for</span> ( ; ; )&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello World1&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//while死循环</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello World2&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//do-while死循环</span><br><span class="hljs-keyword">do</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello World3&quot;</span>);<br>&#125;<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>死循环有什么应用场景呢？</strong></p><p>最典型的是可以用死循环来做服务器程序， 比如百度的服务器程序就是一直在执行的，你随时都可以通过浏览器去访问百度。如果哪一天百度的服务器停止了运行，有就意味着所有的人都永不了百度提供的服务了。</p><p>对于这样的应用我们目前了解一下就可以了。对于目前来说我们只要知道代码格式该怎么写，能达到什么效果就行。</p><h3 id="2-8-循环嵌套"><a href="#2-8-循环嵌套" class="headerlink" title="2.8 循环嵌套"></a>2.8 循环嵌套</h3><p>各位同学，接下来我们学习一种在实际工作中很常用的循环形式——循环嵌套。</p><p>所谓循环嵌套，就是一个循环中又包含另一个循环（就是  常说的，套娃^_^），下面我们通过案例代码演示一下。</p><p><img src="/assets/1661145140910.png" alt="1661145140910"></p><p>循环嵌套执行流程：外部循环每循环一次，内部循环会全部执行完一轮。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">i=<span class="hljs-number">0</span>时; i&lt;<span class="hljs-number">3</span>为<span class="hljs-literal">true</span>; 进入循环<br><span class="hljs-comment">//j的取值从0到5,执行一轮，打印5次&quot;我爱你&quot;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; j++) &#123;<br>       System.out.println(<span class="hljs-string">&quot;我爱你：&quot;</span> + i);<br>    &#125;<br>    内层循环执行完之后，执行外层的i++; i的值<span class="hljs-number">1</span><br>    <br>i=<span class="hljs-number">1</span>时：i&lt;<span class="hljs-number">3</span>为<span class="hljs-literal">true</span>; 进入循环<br><span class="hljs-comment">//j的取值从0到5,又执行一轮，打印5次&quot;我爱你&quot;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; j++) &#123;<br>       System.out.println(<span class="hljs-string">&quot;我爱你：&quot;</span> + i);<br>    &#125;<br>    内层循环执行完之后，执行外层的i++; i的值<span class="hljs-number">2</span><br>    <br>i=<span class="hljs-number">2</span>时：i&lt;<span class="hljs-number">3</span>为<span class="hljs-literal">true</span>; 进入循环<br><span class="hljs-comment">//j的取值从0到5,再执行一轮，打印5次&quot;我爱你&quot;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; j++) &#123;<br>       System.out.println(<span class="hljs-string">&quot;我爱你：&quot;</span> + i);<br>    &#125;<br>    内层循环执行完之后，执行外层的i++; i的值<span class="hljs-number">3</span><br>    <br>i=<span class="hljs-number">3</span>时：i&lt;<span class="hljs-number">3</span>为<span class="hljs-literal">false</span>; 外层循环结束<br></code></pre></td></tr></table></figure><p>理解问循环嵌套的执行流程之后，我们再写一个案例来巩固一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：在控制台使用 * 打印出<span class="hljs-number">4</span>行<span class="hljs-number">5</span>列的矩形<br>    ****<br>    ****<br>    ****<br>    ****<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1)先写一个循环用来在一行中打印5个&quot;*&quot;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; j++) &#123;<br>    System.out.print(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 不换行</span><br>&#125;<br>System.out.println(); <span class="hljs-comment">//换行</span><br><br><br>System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br><br><span class="hljs-comment">//2)再将第一步的代码套一层循环，执行4次，就可以打印4行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; j++) &#123;<br>        System.out.print(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 不换行</span><br>    &#125;<br>    System.out.println(); <span class="hljs-comment">//换行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>总结一下，对于嵌套循环重点理解这句话：<strong>外部循环每循环一次，内部循环会全部执行完一轮。</strong></p><h3 id="2-9-跳转语句-break-、continue"><a href="#2-9-跳转语句-break-、continue" class="headerlink" title="2.9 跳转语句 break 、continue"></a>2.9 跳转语句 break 、continue</h3><p>前面我们学习了循环结构，在中间我们还接触了死循环的一些形式，那么我想要在循环过程中提前跳出循环怎么做呢？</p><p>这里就需要用到跳转语句，需要用到<strong>break</strong>和<strong>continue</strong>两个关键字。我们先来认识一下这两个关键字的作用</p><ul><li>break作用：跳出并结束当前所在循环的执行</li><li>continue作用：结束本次循环，进入下一次循环</li></ul><p>案例1：演示break的使用，提前终止循环的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、break:跳出并结束当前所在循环的执行。</span><br><span class="hljs-comment">// 场景：假如你又有老婆了，你犯错了，你老婆罚你说：5句我爱你</span><br><span class="hljs-comment">// 说到第三句的时候心软了，让你别再说了。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;我爱你：&quot;</span> + i);<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">// 说明已经说完了第三句了，心软了。</span><br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出并结束当前所在循环的执行。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：演示continue的使用，结束循环中的一次，继续下一次循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2、continue:跳出当前循环的当次执行，直接进入循环的下一次执行。</span><br><span class="hljs-comment">// 场景: 假如你有老婆，你犯错了，你老婆罚你洗碗5天。</span><br><span class="hljs-comment">// 第三天的时候，你表现很好，第三天不用洗碗，但是不解恨，第四天还是要继续的。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-comment">// 已经到了第三天，第三天不用洗的。</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;洗碗：&quot;</span> + i);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是<strong>break和continue不是任何地方都可以使用的</strong></p><p><img src="/assets/1661146324812.png" alt="1661146324812"></p><p><img src="/assets/1661146405314.png" alt="1661146405314"></p><hr><h3 id="2-10-循环结构总结"><a href="#2-10-循环结构总结" class="headerlink" title="2.10 循环结构总结"></a>2.10 循环结构总结</h3><p>到这里关于循环结构的所有内容就都已经学习完了，我们再把几种循环结构在什么场景下使用，再总结一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 什么是流程控制<br>答：流程控制是用来控制程序的执行顺序的<br><br><span class="hljs-number">2.</span> 分支结构<span class="hljs-keyword">if</span>和<span class="hljs-keyword">switch</span>，如何选择？<br>答：<span class="hljs-keyword">if</span>分支：一般用于对一个范围进行判断<br><span class="hljs-keyword">switch</span>分支：对一个一个值进行匹配<br><br><span class="hljs-number">3.</span> <span class="hljs-keyword">for</span>循环和<span class="hljs-keyword">while</span>循环、<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span>如何循环<br>答：知道循环次数用<span class="hljs-keyword">for</span>、不知道循环次数用<span class="hljs-keyword">while</span><br>   想要先执行，再判断，用<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span><br><br></code></pre></td></tr></table></figure><h2 id="三、生成随机数"><a href="#三、生成随机数" class="headerlink" title="三、生成随机数"></a>三、生成随机数</h2><p>各位同学，接下来我们再学习一个新的知识——生成随机数。</p><p>生成随机数其实在很多场景下都很实用，比如，在课堂上可以写一个随机点名器点同学起来回答问题；再比如公司年会可以随机抽奖等。</p><h3 id="3-1-如何产生一个随机数"><a href="#3-1-如何产生一个随机数" class="headerlink" title="3.1 如何产生一个随机数"></a>3.1 如何产生一个随机数</h3><p>生成随机数的功能，其实 Java已经  我们提供了，在JDK中提供了一个类叫做Random，我们只需要调用Random这个类提供的功能就可以了。</p><p><img src="/assets/1661147570538.png" alt="1661147570538"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目标：掌握使用Random生成随机数的步骤。</span><br><span class="hljs-comment">// 1、导包。import java.util.Random; (idea会自动完成)</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 2、创建一个Random对象，用于生成随机数。</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">// 3、调用Random提供的功能：nextInt得到随机数。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 0 - 9</span><br>            System.out.println(data);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-猜数字小游戏"><a href="#3-2-猜数字小游戏" class="headerlink" title="3.2 猜数字小游戏"></a>3.2 猜数字小游戏</h3><p>各位同学，接下来我们通过一个案例把前面的流程控制、跳转语句、随机数综合运用一下；</p><p>如果能把这个案例写出来，说明你对今天的知识点掌握得挺好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">需求：<br>随机生成一个<span class="hljs-number">1</span>-<span class="hljs-number">100</span>之间的数据，提示用户猜测，猜大提示过大，猜小提示过小，直到猜中  结束游戏<br><br>分析：<br><span class="hljs-number">1.</span>先随机生成一个<span class="hljs-number">1</span>-<span class="hljs-number">100</span>之间的数据。<br>谁可以帮你生成随机数啊？ 是不是要用到Random？<br><br><span class="hljs-number">2.</span>定义一个死循环让用户可以一直猜测。<br>用户猜的数据从哪里来啊？ 是不是要用到Scanner?<br><br><span class="hljs-number">3.</span>在死循环里，每次让用户录入的数据和随机数进行比较<br>如果比随机数大：提示猜大了<br>如果比随机数小：提示猜小了<br>如果和随机数相同：提示恭喜你猜中了<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、随机产生一个1-100之间的数据，做为中奖号码。</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">luckNumber</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 2、定义一个死循环，让用户不断的猜测数据</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 提示用户猜测</span><br>            System.out.println(<span class="hljs-string">&quot;请您输入您猜测的数据：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">guessNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">// 3、判断用户猜测的数字与幸运号码的大小情况</span><br>            <span class="hljs-keyword">if</span>(guessNumber &gt; luckNumber)&#123;<br>                System.out.println(<span class="hljs-string">&quot;您猜测的数字过大~~&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guessNumber &lt; luckNumber)&#123;<br>                System.out.println(<span class="hljs-string">&quot;您猜测的数字过小~~&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;恭喜您，猜测成功了，可以买单了~~&quot;</span>);<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 结束死循环</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02数据类型&amp;运算符</title>
    <link href="/2023/12/01/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/12/01/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="02—数据类型、运算符"><a href="#02—数据类型、运算符" class="headerlink" title="02—数据类型、运算符"></a>02—数据类型、运算符</h3><p>又是元气满满的一天！！！</p><h2 id="一、数据的表示详解"><a href="#一、数据的表示详解" class="headerlink" title="一、数据的表示详解"></a>一、数据的表示详解</h2><p>昨天我们学习了变量，我们知道变量可以用来记录数据的。那么数据在计算机底层是以什么形式表示的呢？下面我们就学习一下数据在计算机中的底层原理。</p><h3 id="1-1-整数在计算机中的存储原理"><a href="#1-1-整数在计算机中的存储原理" class="headerlink" title="1.1 整数在计算机中的存储原理"></a>1.1 整数在计算机中的存储原理</h3><p>其实任何数据在计算机中都是以<strong>二进制</strong>表示的。那这里肯定有人问，什么是二进制啊？所谓二进制其实就是一种数据的表示形式，它的特点是逢2进1。</p><p>数据的表示形式除了二进制（逢2进1），八进制（逢8进1）、还有十进制（逢10进1）、十六进制（逢10进1）等。</p><p>对于二进制绝大多数同学，应该是非常陌生的。 没关系！来，大家跟着我的思路，你就知道二进制是怎么表示数据的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>二进制中只有<span class="hljs-number">0</span>和<span class="hljs-number">1</span>两个数<br>首先十进制的<span class="hljs-number">0</span>和二进制的<span class="hljs-number">0</span>是一样的，十进制的<span class="hljs-number">1</span>和二进制的<span class="hljs-number">1</span>也是 一样的。但是十进制中  有<span class="hljs-number">2</span>，但是二进制中就没有<span class="hljs-number">2</span>了<br><br><span class="hljs-number">2.</span>那么二进制是如何表示十进制的<span class="hljs-number">2</span>呢？<br><span class="hljs-number">1</span><br>+<span class="hljs-number">1</span><br>——————————<br>   <span class="hljs-number">10</span>  这里两个<span class="hljs-number">1</span>相加，结果为<span class="hljs-number">2</span>，由于二进制满<span class="hljs-number">2</span>进<span class="hljs-number">1</span>，所以最终结果<span class="hljs-number">10</span><br>   <br><span class="hljs-number">3.</span>那么二进制是如何表示十进制的<span class="hljs-number">3</span>呢？<br>前面我们已经知道二进制<span class="hljs-number">10</span>表示十进制的<span class="hljs-number">2</span>，那么二进制<span class="hljs-number">10</span>+<span class="hljs-number">1</span>就表示十进制的<span class="hljs-number">3</span>啊！<br><span class="hljs-number">10</span><br>+    <span class="hljs-number">1</span><br>—————————<br>    <span class="hljs-number">11</span> 十进制的<span class="hljs-number">3</span>对应的二进制是<span class="hljs-number">11</span><br><br><span class="hljs-number">4.</span>那么二进制是如何表示十进制<span class="hljs-number">4</span>的呢？<br>前面我们已经知道二进制<span class="hljs-number">11</span>表示十进制的<span class="hljs-number">4</span>，那么<span class="hljs-number">11</span>+<span class="hljs-number">1</span>就表示十进制的<span class="hljs-number">5</span>啊<br><span class="hljs-number">11</span><br>+    <span class="hljs-number">1</span><br>—————————<br>   <span class="hljs-number">100</span>   十进制的<span class="hljs-number">5</span>对应的二进制是<span class="hljs-number">100</span><br><br>你找到规律了吗？ 你能不能依次写出<span class="hljs-number">5</span>的二进制、<span class="hljs-number">6</span>的二进制？<br></code></pre></td></tr></table></figure><p>前面每算一个二进制数据都是采用+1的方式，逢2进1，一个一个算出来的。有没有更快的算出十进制对应二进制的方法呢？ 这里学习一种方式：叫做除2取余法。</p><ul><li><strong>除2取余法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>怎么做呢？<br>答：让十进制数据连续除以<span class="hljs-number">2</span>，直到商为<span class="hljs-number">0</span>，余数反转<br><br><span class="hljs-number">2.</span>举例<span class="hljs-number">1</span>：把十进制<span class="hljs-number">6</span>转换为二进制<br>商余数<br><span class="hljs-number">6</span>/<span class="hljs-number">2</span>     <span class="hljs-number">3</span>    <span class="hljs-number">0</span><br>    <span class="hljs-number">3</span>/<span class="hljs-number">2</span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br>    <span class="hljs-number">1</span>/<span class="hljs-number">2</span><span class="hljs-number">0</span> <span class="hljs-number">1</span><br>    然后把余数反转：<span class="hljs-number">6</span>对应的二进制是<span class="hljs-number">110</span><br>    <br><span class="hljs-number">3.</span>举例<span class="hljs-number">2</span>： 把十进制<span class="hljs-number">13</span>转换为二进制<br>商余数<br><span class="hljs-number">13</span>/<span class="hljs-number">2</span><span class="hljs-number">6</span> <span class="hljs-number">1</span><br>    <span class="hljs-number">6</span>/<span class="hljs-number">2</span><span class="hljs-number">3</span> <span class="hljs-number">0</span><br>    <span class="hljs-number">3</span>/<span class="hljs-number">2</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br>    <span class="hljs-number">1</span>/<span class="hljs-number">2</span><span class="hljs-number">0</span> <span class="hljs-number">1</span><br>    然后把余数反转：<span class="hljs-number">10</span>对应的二进制是<span class="hljs-number">1101</span><br>    <br><span class="hljs-number">4.</span>练习<span class="hljs-number">1</span>：你能把十进制<span class="hljs-number">7</span>转换为二进制吗？<br>自己试试吧！<br><br></code></pre></td></tr></table></figure><p>关于变量记录的数据在计算机中如何表示我们就先学习到这里。</p><ul><li><strong>计算机的最小存储单位</strong></li></ul><p>前面我们已经知道计算机表示数据是用二进制来的， 这里我又要抛出一个问题来了！ 我现在想要在计算机中存储一个整数6，转换为二进制是110，那么计算机中只是存110吗三位数字吗？ 其实不是的，<strong>计算机中最小的存储单位是字节（Byte），一个字节占8位（bit）</strong>，也就是说即使这个数据不足8位也需要用8位来存储。</p><p><img src="/assets/1660754639238.png" alt="1660754639238"></p><p>我们随便找到一个文件，看文件的属性，可以看到文件的大小都是以字节为单位的。</p><p><img src="/assets/1660754762466.png" alt="1660754762466"></p><h3 id="1-2-字符在计算机中的存储原理"><a href="#1-2-字符在计算机中的存储原理" class="headerlink" title="1.2 字符在计算机中的存储原理"></a>1.2 字符在计算机中的存储原理</h3><p>通过上一节的学习，我们知道了整数是如何在计算机中如何存储的？那么字符在计算机中是如何存储的呢？</p><p>其实字符并不是直接存储的，而是把每一个字符编为一个整数，存储的是字符对应整数的二进制形式。美国人搞了一套字符和整数的对应关系表，叫做ASCII编码表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ASCII编码表中字符编码的规律：<br><span class="hljs-number">1.</span>字符<span class="hljs-number">0</span>对应<span class="hljs-number">48</span>，后面的<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4.</span>.<span class="hljs-number">.9</span> 对应的十进制整数依次往后顺延<br><span class="hljs-number">2.</span>字符a对应<span class="hljs-number">97</span>，后面的b,c,d,e...z 对应的十进制整数依次往后顺延<br><span class="hljs-number">3.</span>字符A对应<span class="hljs-number">65</span>，后面的B,C,D,E...Z 对应的十进制整数依次往后顺延<br></code></pre></td></tr></table></figure><p><img src="/assets/1660755324089.png" alt="1660755324089"></p><p>需要注意的是，在ASCII编码表中是不包含汉字的。汉字在其他编码表中，后面我们会单独介绍。关于字符在计算机中的存储学到这就可以了。</p><h3 id="1-3-图片视频声音的存储原理"><a href="#1-3-图片视频声音的存储原理" class="headerlink" title="1.3 图片视频声音的存储原理"></a>1.3 图片视频声音的存储原理</h3><ul><li><strong>图片的存储</strong></li></ul><p>通过上面的学习我们已经知道整数和字符是如何存储的，最终都是要转换为二进制数据的，对吧！ 那图片、声音、视频又是如何存储的呢？我们也来了解一下</p><p>我们从图片开始，如果你把一张图片不断的放大，你会看到有马赛克的效果。你会发现图片中的每一个细节是由一个一个的小方格组成的，每一个小方格中其实就是一种颜色。任何一种颜色可以使用三原色来表示，简称RGB，其中R（红色），G（绿色），B（蓝色），而RGB中每一种颜色又用一个字节的整数来表示，最小值是0最大值是255</p><p><img src="/assets/1660755882309.png" alt="1660755882309"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">RGB（<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>）表示黑色<br>RGB（<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>）表示白色<br>RGB（<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>） 表示红色<br>RGB（<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>） 表示红色和绿色混合为黄色<br>RGB（<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>） 表示红色和蓝色混合为紫色<br>...<br></code></pre></td></tr></table></figure><p>你在画图板的颜色编辑器中可以通过指定RGB的值，来调整得到任意的颜色。一张图片实际上就是有很多个小方块的颜色组成的，而每一种颜色又是由RGB三原色的整数表示的，整数最终会转换为二进制进行存储。</p><p><img src="/assets/1660756387308.png" alt="1660756387308"></p><ul><li><strong>视频的存储</strong></li></ul><p>实际上视频和图片是一样的，把多张图片连续播放，在一秒钟内连续播放24张以上，由于人眼存在视觉暂留现象，人眼感受不到画面切换的时间间隔，就认为是连续的视频了。</p><ul><li><strong>声音的存储</strong></li></ul><p>了解过物理的同学肯定知道，声音是以波的形式传播的。我们可以把声波在表示在一个坐标系上，然后在坐标系上取一些点，把这些点的坐标值以二进制的形式存储到计算机中，这就是声音的存储原理。</p><p><img src="/assets/1660757825804.png" alt="1660757825804"></p><h3 id="1-4-数据的其他表示形式"><a href="#1-4-数据的其他表示形式" class="headerlink" title="1.4 数据的其他表示形式"></a>1.4 数据的其他表示形式</h3><ul><li><strong>二进制到十进制的转换</strong></li></ul><p>前面我们学习了十进制可以转二进制，采用的是除2取余法，那么我们反过来能不能把二进制转换为十进制呢？</p><p>这里给大家介绍一种计算方式叫做：<strong>8421码</strong></p><p>为了便于理解，我们先在看一下十进制怎么转十进制，主要是为了让大家看到演化过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>十进制转十进制<br>比如我们把<span class="hljs-number">12345</span>进行分解：<br>        <span class="hljs-number">12345</span> = <span class="hljs-number">10000</span> + <span class="hljs-number">2000</span> + <span class="hljs-number">300</span> + <span class="hljs-number">40</span> + <span class="hljs-number">5</span><br>              = <span class="hljs-number">1</span>*<span class="hljs-number">10</span>^<span class="hljs-number">4</span> + <span class="hljs-number">2</span>*<span class="hljs-number">10</span>^<span class="hljs-number">3</span> + <span class="hljs-number">3</span>*<span class="hljs-number">10</span>^<span class="hljs-number">2</span> + <span class="hljs-number">5</span>*<span class="hljs-number">10</span>^<span class="hljs-number">0</span><br>我们发现：<br>在十进制中如果把十进制的每一位从右往左从<span class="hljs-number">0</span>开始编一个号，假设这一位数字是a,那么这一位数表示的值就是：a*<span class="hljs-number">10</span>^n；<br><br>----------------------------------------------------------------------二<span class="hljs-number">2.</span>二进制转十进制：<br>类比十进制：<br>如果把二进制的每一位从从右往左<span class="hljs-number">0</span>开始编一个号用n表示，假设二进制的每一位是a，<br>那么这一位表示的十进制值是：a*<span class="hljs-number">2</span>^n<br><br><span class="hljs-number">1</span>)假设二进制的每一位都是<span class="hljs-number">1</span>：<br><span class="hljs-number">128</span><span class="hljs-number">64</span><span class="hljs-number">32</span><span class="hljs-number">16</span><span class="hljs-number">8</span><span class="hljs-number">4</span><span class="hljs-number">2</span><span class="hljs-number">1</span>每一位表示的十进制：a*<span class="hljs-number">2</span>^n<br><span class="hljs-number">7</span><span class="hljs-number">6</span><span class="hljs-number">5</span><span class="hljs-number">4</span><span class="hljs-number">3</span><span class="hljs-number">2</span><span class="hljs-number">1</span><span class="hljs-number">0</span>编号：n<br><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span>   二进制的每一位：a<br><br>        二进制 十进制<br>        <span class="hljs-number">11111111</span> = <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">7</span>  + <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">6</span> + <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">5</span> + ... + <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">0</span><br>                 = <span class="hljs-number">128</span>    + <span class="hljs-number">64</span>    + <span class="hljs-number">32</span>    + ... + <span class="hljs-number">1</span><br>                 = <span class="hljs-number">255</span><br>    <br>    <span class="hljs-number">2</span>)假设二进制的为<span class="hljs-number">0010001</span><br>    <span class="hljs-number">128</span><span class="hljs-number">64</span><span class="hljs-number">32</span><span class="hljs-number">16</span><span class="hljs-number">8</span><span class="hljs-number">4</span><span class="hljs-number">2</span><span class="hljs-number">1</span>每一位表示的十进制：a*<span class="hljs-number">2</span>^n<br>    <span class="hljs-number">7</span><span class="hljs-number">6</span><span class="hljs-number">5</span><span class="hljs-number">4</span><span class="hljs-number">3</span><span class="hljs-number">2</span><span class="hljs-number">1</span><span class="hljs-number">0</span>编号：n<br>    <span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span>二进制的每一位：a<br>    <br>    二进制十进制<br>    <span class="hljs-number">00001101</span> = <span class="hljs-number">0</span>*<span class="hljs-number">2</span>^<span class="hljs-number">7</span> + <span class="hljs-number">0</span>*<span class="hljs-number">2</span>^<span class="hljs-number">6</span> + <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">5</span> + ... + <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">0</span><br>     = <span class="hljs-number">0</span>     + <span class="hljs-number">0</span>     + <span class="hljs-number">32</span>  + ... + <span class="hljs-number">1</span><br>     = <span class="hljs-number">33</span><br><br>    <span class="hljs-number">3</span>)<span class="hljs-number">8421</span>码：从右往左给二进制的每一位数依次按照<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">8.</span>..标记<br>    <span class="hljs-number">128</span><span class="hljs-number">64</span><span class="hljs-number">32</span><span class="hljs-number">16</span><span class="hljs-number">8</span><span class="hljs-number">4</span><span class="hljs-number">2</span><span class="hljs-number">1</span><br>    <span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><br>    -----------------------------<br>    只需要将<span class="hljs-number">1</span>位上的数字加起来，就是二进制对应的十进制<br>    <br>    二进制  十进制<br>    <span class="hljs-number">00001101</span> = <span class="hljs-number">8</span>+<span class="hljs-number">4</span>+<span class="hljs-number">1</span><br>     = <span class="hljs-number">13</span><br>    <br>    <span class="hljs-number">0000111</span> =      <span class="hljs-number">4</span>+<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>     = <span class="hljs-number">7</span><br>    <br>    <span class="hljs-number">0001111</span>  =      <span class="hljs-number">8</span>+<span class="hljs-number">4</span>+<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>     =      <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><ul><li><strong>二进制转八进制</strong></li></ul><p>前面我们说计算机中数据都是采用二进制来存储的，但是二进制阅读和编写起来都不太方便。为了便于阅读和书写，又推出了八进制、十六进制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>运算规则：<br>把二进制的每三位一组合，然后对每三位用<span class="hljs-number">8421</span>码进行计算，最后拼接到一起<br>原因：因为<span class="hljs-number">111</span>，的值是<span class="hljs-number">7</span>, 再大满<span class="hljs-number">7</span>就需要往进位了。 <br><br><span class="hljs-number">2.</span>把二进制<span class="hljs-number">11001110</span>转换为八进制数据<br><span class="hljs-number">01</span><span class="hljs-number">100</span> <span class="hljs-number">001</span>二进制每三位一组合<br>    <span class="hljs-number">1</span><span class="hljs-number">4</span><span class="hljs-number">1</span>每一组进行<span class="hljs-number">8421</span>码运算<br>    ----------<br>    八进制：<span class="hljs-number">141</span><br></code></pre></td></tr></table></figure><ul><li><strong>二进制转十六进制</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>运算规则：<br>把二进制的每四位一组合，然后对每四位用<span class="hljs-number">8421</span>码进行计算，最后拼接到一起<br>原因：因为<span class="hljs-number">1111</span>，的值是<span class="hljs-number">15</span>, 再大<span class="hljs-number">1</span>满<span class="hljs-number">16</span>了就需要往进位了。 <br><br><span class="hljs-number">2.</span>举例：把二进制<span class="hljs-number">11001110</span>转换为十六进制数据<br><span class="hljs-number">0110</span> <span class="hljs-number">0001</span>二进制每四位一组合<br>    <span class="hljs-number">6</span> <span class="hljs-number">1</span>每一组进行<span class="hljs-number">8421</span>码运算<br>    ----------<br>    十六进制：<span class="hljs-number">61</span><br>    <br><span class="hljs-number">3.</span>练习：把<span class="hljs-number">111100</span>转换为十六进制<br><span class="hljs-number">0011</span> <span class="hljs-number">1100</span><br>    <span class="hljs-number">3</span> <span class="hljs-number">12</span>由于十六进制中有a,b,c,d,e,f分别表示<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span><br>    -----------<br>    十六进制：3c<br></code></pre></td></tr></table></figure><h3 id="1-5-不同进制在Java程序中的书写格式"><a href="#1-5-不同进制在Java程序中的书写格式" class="headerlink" title="1.5 不同进制在Java程序中的书写格式"></a>1.5 不同进制在Java程序中的书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.pirntln(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>); <span class="hljs-comment">//98</span><br>System.out.pirntln(<span class="hljs-number">0b01100001</span>); <span class="hljs-comment">//97</span><br>System.out.pirntln(<span class="hljs-number">0141</span>); <span class="hljs-comment">//97</span><br>System.out.pirntln(<span class="hljs-number">0x61</span>); <span class="hljs-comment">//97</span><br></code></pre></td></tr></table></figure><h2 id="二、数据类型详解"><a href="#二、数据类型详解" class="headerlink" title="二、数据类型详解"></a>二、数据类型详解</h2><p>在前面的课程中，我们学过了变量的定义，在定义变量时我们是要声明数据类型的，这里的<strong>数据类型是用来规定变量存储什么类型的数据</strong>。</p><p>比如<code>int a = 10;</code> 这里的<code>int</code>就是限制变量只能存储整数； 除了int这种数据类型Java还提供了很多其他的数据类型。Java的数据类型整体上来说分为两大类： <strong>基本数据类型</strong>、<strong>引用数据类型</strong>。 </p><p>我们今天主要学习基本数据类型，基本数据类型一共有4类8种，每一种数据类型占用的内存空间不一样，能够表示的数据范围也不一样。如下图所示</p><p><img src="/assets/1660832924103.png" alt="1660832924103"></p><p>需要我们注意的是，随便写一个整数或者小数的字面量，它也是有默认数据类型的</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">- 比如<span class="hljs-number">23</span>，它默认就为<span class="hljs-type">int</span>类型；如果加上后缀L，则为<span class="hljs-type">long</span>类型；<br>- 比如<span class="hljs-number">23.8</span>，它默认为<span class="hljs-type">double</span>类型；如果加上后缀F，则为<span class="hljs-type">float</span>类型;<br></code></pre></td></tr></table></figure><p>下面定义各种类型的变量，将这8种基本数据类型都用一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握8种基本数据类型，用来定义变量。</span><br>        <span class="hljs-comment">// 1、整型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">98</span>;<br>        System.out.println(number);<br><br>        <span class="hljs-type">short</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">9000</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">12323232</span>; <span class="hljs-comment">// 默认</span><br><br>        <span class="hljs-comment">// 注意：随便写一个整型字面量，默认是int类型的，73642422442424虽然没有超过long的范围，但是它超过了本身int的范围了。</span><br>        <span class="hljs-comment">// 如果希望随便写一个整型字面量是long类型的，需要在其后面加上L/l</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">number4</span> <span class="hljs-operator">=</span> <span class="hljs-number">73642422442424L</span>;<br><br>        <span class="hljs-comment">// 2、浮点型</span><br>        <span class="hljs-comment">//注意:</span><br>        <span class="hljs-comment">//随便写一个小数字面量，默认当成double类型对待的，</span><br>        <span class="hljs-comment">//如果希望这个小数是float类型的，需要在后面加上：F/f</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">score1</span> <span class="hljs-operator">=</span> <span class="hljs-number">99.5F</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">score2</span> <span class="hljs-operator">=</span> <span class="hljs-number">99.8</span>; <span class="hljs-comment">// 默认定义方案。</span><br><br>        <span class="hljs-comment">// 3、字符型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中&#x27;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;国&#x27;</span>;<br><br>        <span class="hljs-comment">// 4、布尔型</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 引用数据类型：String.</span><br>        <span class="hljs-comment">// String代表的是字符串类型，定义的变量可以用来记住字符串。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马&quot;</span>;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、数据类型转换"><a href="#三、数据类型转换" class="headerlink" title="三、数据类型转换"></a>三、数据类型转换</h2><h3 id="3-1-自动类型转换"><a href="#3-1-自动类型转换" class="headerlink" title="3.1 自动类型转换"></a>3.1 自动类型转换</h3><p>各位同学，接下来我们来学习类型转换的知识。为什么要学习类型转换呢？因为在我们实际开发中可能存在将某种类型变量的值，赋值给另一个类型的变量；也可能存在多种数据类型的数据一起运算的情况。</p><p>在以上情况中，其实都会涉及到类型转换。类型转换的形式总体分为2种，一种是<strong>自动类型转换</strong>，一种是<strong>强制类型转换</strong>。 这里先学习自动类型转换</p><ul><li><strong>什么是自动类型转换呢？</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">答：自动类型转换指的是，数据范围小的变量可以直接赋值给数据范围大的变量<br><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>; <br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a; <span class="hljs-comment">//这里就发生了自动类型转换(把byte类型转换int类型)</span><br></code></pre></td></tr></table></figure><ul><li><strong>自动类型转换的原理是怎样的？</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">答：自动类型转换其本质就是在较小数据类型数据前面，补了若干个字节<br></code></pre></td></tr></table></figure><p><img src="/assets/1660837214161.png" alt="1660837214161"></p><p>除了byte和int之间的转换之外，其他类型也可以转换，转换顺序如下图所示</p><p><img src="/assets/1660837456261.png" alt="1660837456261"></p><p>下面我们通过代码演示一下，自动类型转换的各种形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeConversionDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：理解自动类型转换机制。</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a; <span class="hljs-comment">// 发生了自动类型转换了</span><br>        System.out.println(a);<br>        System.out.println(b);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 4</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c;<span class="hljs-comment">// 8 发生了自动类型转换了</span><br>        System.out.println(d);<br><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">// &#x27;a&#x27; 97 =&gt; 00000000 01100001</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ch; <span class="hljs-comment">// 发生了自动类型转换了 =&gt;  00000000 00000000  00000000 01100001</span><br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>表达式的自动类型转换</strong></li></ul><p>自动类型转换还有另外一种形式，就是表达式的自动类型转换。所谓表达式指的是几个变量或者几个数据一起参与运算的式子。</p><p>如果同一个表达式中，出现不同类型的变量或者数据一起运算，这种情况下运算结果是一个什么数据类型呢？需要遵守下面的两条运算规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>多种数据类型参与运算，其结果以大的数据类型为准<br><span class="hljs-number">2.</span><span class="hljs-type">byte</span>,<span class="hljs-type">short</span>,<span class="hljs-type">char</span> 三种类型数据在和其他类型数据运算时，都会转换为<span class="hljs-type">int</span>类型再运算<br></code></pre></td></tr></table></figure><p>接下来我们来看代码演示，自己试一试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeConversionDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握表达式的自动类型转换机制。</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> a + b + c;<br>        System.out.println(rs);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> a + b + <span class="hljs-number">1.0</span>;<br>        System.out.println(rs2);<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs3</span> <span class="hljs-operator">=</span> i + j;<br>        System.out.println(rs3);<br><br>        <span class="hljs-comment">// 面试笔试题： 即使两个byte运算，结果也会提升为int</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">110</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> b1 + b2;<br>        System.out.println(b3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-强制类型转换"><a href="#3-2-强制类型转换" class="headerlink" title="3.2 强制类型转换"></a>3.2 强制类型转换</h3><p>前面我们学习了自动类型转换，我们知道可以将数据类型小的数据可以直接赋值给数据范围大的变量。 那反过来，能不能将数据范围大的数据直接赋值给数据范围小的变量呢？ <strong>答案是会报错。</strong></p><p>因为数据范围大的数据，赋值给数据范围小的变量，它有可能装不下；就像把一个大桶的水倒入一个小桶中，有溢出的风险。</p><ul><li><strong>什么是强制类型转换</strong></li></ul><p>但是你强行将范围大的数据，赋值给范围小的变量也是可以的，这里就需要用到强制类型转换。下面是强制类型转换的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">目标数据类型  变量名  =  (目标数据类型)被转换的数据;<br></code></pre></td></tr></table></figure><p>下面是强制类型转换的代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeConversionDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握强制类型转换。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) a;  <span class="hljs-comment">// ALT + ENTER 强制类型转换。</span><br>        System.out.println(a);<br>        System.out.println(b);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1500</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) i;<br>        System.out.println(j);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">99.5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) d; <span class="hljs-comment">// 强制类型转换</span><br>        System.out.println(m); <span class="hljs-comment">// 丢掉小数部分，保留整数部分</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>强制类型转换的原理</strong></p><p>强制类型转换的原理，其实就是<strong>强行把前面几个字节砍掉，但是有数据丢失的风险</strong>。</p></li></ul><p><img src="/assets/1660840481803.png" alt="1660840481803"></p><p>到这有关数据类型和数据类型转换的内容，我们就学习完了。大家能够知道什么时候会发生自动类型转换，以及如何进行强制类型转换就可以了。</p><h2 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h2><p>接下来，给  讲解一个在开发中用得很多的一块内容，叫做运算符。</p><p>大家知道计算机是用来处理数据的，处理数据就少不了对数据的计算，想要对数据进行计算就必须用到运算符。</p><p>运算符就是参与运算的符号。Java提供的运算符有很多种，可以分为算术下面几种</p><ul><li>基本算术运算符</li><li>自增自减运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>三元运算符</li></ul><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p>先从最基本的算术运算符开始学习，算术运算符有 <code>+ - * / % </code> ，其中<code>*</code>表示乘法，<code>/</code>表示除法，<code>%</code>表示取余数</p><p>需要我们注意以下几点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">/: 两个整数相除，结果也是一个整数<br>%: 表示两个数相除，取余数<br></code></pre></td></tr></table></figure><p><img src="/assets/1660841349983.png" alt="1660841349983"></p><p>需要我们注意的是：<code>+</code>符号除了用于加法运算，还可以作为连接符。**<code>+</code>符号与字符串运算的时候是用作连接符的，其结果依然是一个字符串**。</p><p>下面通过代码演示一下各种算术运算符的运算效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握基本的算术运算符的使用。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        System.out.println(a + b);<br>        System.out.println(a - b);<br>        System.out.println(a * b); <span class="hljs-comment">// 20</span><br>        System.out.println(a / b); <span class="hljs-comment">// 5</span><br>        System.out.println(<span class="hljs-number">5</span> / <span class="hljs-number">2</span>); <span class="hljs-comment">// 2.5 ==&gt; 2</span><br>        System.out.println(<span class="hljs-number">5.0</span> / <span class="hljs-number">2</span>); <span class="hljs-comment">// 2.5</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-number">1.0</span> * i / j); <span class="hljs-comment">// 2.5</span><br><br>        System.out.println(a % b); <span class="hljs-comment">// 0</span><br>        System.out.println(<span class="hljs-number">3</span> % <span class="hljs-number">2</span>); <span class="hljs-comment">// 1</span><br><br>        System.out.println(<span class="hljs-string">&quot;---------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 目标2：掌握使用+符号做连接符的情况。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span> + a2); <span class="hljs-comment">// &quot;abc5&quot;</span><br>        System.out.println(a2 + <span class="hljs-number">5</span>); <span class="hljs-comment">//  10</span><br>        System.out.println(<span class="hljs-string">&quot;itheima&quot;</span> + a2 + <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// &quot;itheima5a&quot;</span><br>        System.out.println(a2 + <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&quot;itheima&quot;</span>); <span class="hljs-comment">// 102itheima</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-自增自减运算符"><a href="#3-2-自增自减运算符" class="headerlink" title="3. 2 自增自减运算符"></a>3. 2 自增自减运算符</h3><p>接下来，学习一种比较常用的运算符：<code>++</code>和<code>--</code> </p><p><code>++</code>读作自增，<code>--</code>读作自减； 运算规则如下</p><p><img src="/assets/1660841701880.png" alt="1660841701880"></p><p>需要我们注意的是，自增自减只能对变量进行操作，不能操作字面量。具体使用时也分为两种情况，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>单独使用：++或者--放在变量前面没有区别<br>   <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>; <br>    a++;  <span class="hljs-comment">//11</span><br>--a;  <span class="hljs-comment">//10</span><br>System.out.println(a); <span class="hljs-comment">//10</span><br><br><span class="hljs-number">2.</span>混合使用：++或者--放在变量或者前面运算规则稍有不通过<br><span class="hljs-comment">//++在后：先做其他事情，再做自增和自减</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++; <span class="hljs-comment">//等价于 int b = a; a++; </span><br><br><span class="hljs-comment">//++在前：先自增或者自减，再做其他运输</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> --x; <span class="hljs-comment">//等价于x--; int y = x;  </span><br></code></pre></td></tr></table></figure><p>下面通过代码演示一下<code>++</code>和<code>--</code>的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握自增自减运算符的使用。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// a++; // a = a + 1</span><br>        ++a;<br>        System.out.println(a);<br><br>        <span class="hljs-comment">// a--; // a = a - 1</span><br>        --a;<br>        System.out.println(a);<br><br>        <span class="hljs-comment">// 自增自减只能操作变量不能操作字面量的，会报错！</span><br>      <span class="hljs-comment">//System.out.println(2++);</span><br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------------------&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ++i; <span class="hljs-comment">// 先加后用</span><br>        System.out.println(rs);<br>        System.out.println(i);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> j++; <span class="hljs-comment">// 先用后加</span><br>        System.out.println(rs2);<br>        System.out.println(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h3><p>接下来，我们学习赋值运算符。基本的赋值运算符其实就是<code>=</code>号，意思就是把右边的数据赋值给左边的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">//将数据10赋值给左边的变量a</span><br></code></pre></td></tr></table></figure><p>除了基本的赋值运算符，我们这里主要学习一下扩展的赋值运算符。有<code>+= -= *= /= %=</code></p><p><img src="/assets/1660872631676.png" alt="1660872631676"></p><p>我们以<code>+=</code>为例来看一下它的运算规则，其他的运算符运算同理分析即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//+=解析：在a原来记录值10的基础上累加5，将结果重新赋值给a; </span><br>a+=<span class="hljs-number">5</span>; <br><span class="hljs-comment">//最终打印a的值为15</span><br>System.out.println(a); <br></code></pre></td></tr></table></figure><p>下面通过一个首发红包的例子给大家演示一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握扩展赋值运算符的使用。</span><br>        <span class="hljs-comment">// +=</span><br>        <span class="hljs-comment">// 需求：收红包</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.5</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br>        a += b;  <span class="hljs-comment">// a = (double)(a + b);</span><br>        System.out.println(a);<br><br>        <span class="hljs-comment">// -= 需求：发红包</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">600</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br>        i -= j;  <span class="hljs-comment">// i = (double)(i - j);</span><br>        System.out.println(i);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-comment">// m *= n; // 等价形式： m = (int)(m * n)</span><br>        <span class="hljs-comment">// m /= n; // 等价形式： m = (int)(m / n)</span><br>        m %= n;    <span class="hljs-comment">// 等价形式： m = (int)(m % n)</span><br>        System.out.println(m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>学完扩展赋值运算符的基本使用之后，接下来我们看一个面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">问题<span class="hljs-number">1</span>：下面的代码否有问题？<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>x = x + y;  <span class="hljs-comment">//这句代码有问题，因为两个byte类型数据相加，会提升为int类型;</span><br><br>问题<span class="hljs-number">2</span>：下面的代码是否有问题？<br><span class="hljs-type">byte</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>x+=<span class="hljs-number">3</span>; <span class="hljs-comment">//这句代码没有问题，因为这里有隐含的强制类型转换</span><br>  <span class="hljs-comment">//x+=3; 等价于 byte x = (byte)(x+y);</span><br></code></pre></td></tr></table></figure><p>到这里赋值运算符就学习完了，稍微总结一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>基本赋值运算符：<br>=符号含义： 把右边的值赋值给左边的变量<br><br><span class="hljs-number">2.</span>扩展赋值运算符：<br>+= -= *= /= %=符号含义：将右边的数据和左边的变量相加、相减、相乘、相除、取余数后，将结果重新赋值给左边的变量。<br></code></pre></td></tr></table></figure><h3 id="3-4-关系运算符"><a href="#3-4-关系运算符" class="headerlink" title="3.4 关系运算符"></a>3.4 关系运算符</h3><p>接下来我们学习一个，在实际代码中用得很多，但是又非常简单的运算符，叫关系运算符。关系运算符（也叫比较运算符）。</p><p>下图是每一种关系运算符的符号及作用，每一个关系运算符的结果都是false</p><p><img src="/assets/1660872844712.png" alt="1660872844712"></p><p>下面通过代码来家演示一下，各种关系运算符的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握关系运算符的基本使用。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> a &gt; b;<br>        System.out.println(rs);<br><br>        System.out.println(a &gt;= b); <span class="hljs-comment">// 要么a大于b,或者a等于b</span><br>        System.out.println(<span class="hljs-number">2</span> &gt;= <span class="hljs-number">2</span>); <span class="hljs-comment">// true</span><br>        System.out.println(a &lt; b);<br>        System.out.println(a &lt;= b); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-number">2</span> &lt;= <span class="hljs-number">2</span>); <span class="hljs-comment">// true</span><br>        System.out.println(a == b); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-number">5</span> == <span class="hljs-number">5</span>); <span class="hljs-comment">// true</span><br>        <br>        <span class="hljs-comment">// 注意了：判断是否相等一定是用 == ，=是用来赋值的。</span><br>        <span class="hljs-comment">// System.out.println(a = b); </span><br>        System.out.println(a != b); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-number">10</span> != <span class="hljs-number">10</span>); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span> ^ <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>现在我们只需要知道每一种关系运算符的运算效果就行了，<strong>关于关系运算符的实际运用需要在后面学习了流程控制语句才能实际用到。</strong></p><p>关系运算符在程序中常用于条件判断，根据条件判断的结果是true还是false，来决定后续该执行哪些操作。</p><h3 id="3-5-逻辑运算符"><a href="#3-5-逻辑运算符" class="headerlink" title="3.5 逻辑运算符"></a>3.5 逻辑运算符</h3><p>学习完关系运算符之后，接下来我们学习一下逻辑运算符。我们来看一下逻辑运算符有哪些。</p><p><strong>逻辑运算符是用来将多个条件放在一起运算，最终结果是true或者false</strong></p><p><img src="/assets/1660873470958.png" alt="1660873470958"></p><p>下面我们通过几个案例来演示一下逻辑运算符的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求1：要求手机必须满足尺寸大于等于6.95，且内存必须大于等于8.</span><br><span class="hljs-comment">//需求2：要求手机要么满足尺寸大于等于6.95，要么内存必须大于等于8.</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握逻辑运算符的使用。</span><br>        <span class="hljs-comment">// 需求：要求手机必须满足尺寸大于等于6.95，且内存必须大于等于8.</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.8</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">storage</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-comment">// 1、&amp; 前后的条件的结果必须都是true ,结果才是true.</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> size &gt;= <span class="hljs-number">6.95</span> &amp; storage &gt;= <span class="hljs-number">8</span>;<br>        System.out.println(rs);<br><br>        <span class="hljs-comment">// 需求2：要求手机要么满足尺寸大于等于6.95，要么内存必须大于等于8.</span><br>        <span class="hljs-comment">// 2、| 只要多个条件中有一个是true,结果就是true.</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> size &gt;= <span class="hljs-number">6.95</span> | storage &gt;= <span class="hljs-number">8</span>;<br>        System.out.println(rs2);<br><br>        <span class="hljs-comment">// 3、!取反的意思</span><br>        System.out.println(!<span class="hljs-literal">true</span>); <span class="hljs-comment">// false</span><br>        System.out.println(!<span class="hljs-literal">false</span>); <span class="hljs-comment">// true</span><br>        System.out.println(!(<span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 4、^ 前后条件的结果相同时返回false，不同时返回true.</span><br>        System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">true</span>); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">false</span>); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">false</span>); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span>); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 5、&amp;&amp; 左边为false，右边不执行。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">// System.out.println(i &gt; 100 &amp;&amp; ++j &gt; 99);</span><br>        System.out.println(i &gt; <span class="hljs-number">100</span> &amp; ++j &gt; <span class="hljs-number">99</span>);<br>        System.out.println(j);<br><br>        <span class="hljs-comment">// 6、|| 左边是true ，右边就不执行。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-comment">// System.out.println(m &gt; 3 || ++n &gt; 40);</span><br>        System.out.println(m &gt; <span class="hljs-number">3</span> | ++n &gt; <span class="hljs-number">40</span>);<br>        System.out.println(n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里关于逻辑运算符的规则记学习完了，给你一个运算表达式你能分析出结果就行。<strong>至于逻辑运算符的实际运用，需要在学习了流程控制语句之后，才能实际用到。</strong></p><p>逻辑运算符在程序中常用于组合几个条件判断，根据条件判断的结果是true还是false，来决定后续该执行哪些操作。</p><h3 id="3-6-三元运算符"><a href="#3-6-三元运算符" class="headerlink" title="3.6 三元运算符"></a>3.6 三元运算符</h3><p>接下来，我们学习今天最后一种运算符，叫做三元运算符。</p><p>先认识一下三元运算符的格式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">关系表达式? 值<span class="hljs-number">1</span> : 值<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>三元运算的执行流程：首先计算关系表达式的值，如果关系表达式的值为true，则返回值1；如果关系表达式的值为false, 则返回值2；</p><p>如下图所示：判断学生的成绩是否&gt;&#x3D;60，如果为true，就考试通过；如果为false，就成绩不合格。</p><p><img src="/assets/1660875022987.png" alt="1660875022987"></p><p>接下来通过代码来演示一下，目的是让大家掌握三元运算符的格式和执行流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握三元运算符的基本使用。</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">58.5</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> score &gt;= <span class="hljs-number">60</span> ? <span class="hljs-string">&quot;成绩及格&quot;</span> : <span class="hljs-string">&quot;成绩不及格&quot;</span>;<br>        System.out.println(rs);<br><br>        <span class="hljs-comment">// 需求2：找出2个整数中的较大值，并输出。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">69</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> a &gt; b ? a : b;<br>        System.out.println(max);<br><br>        <span class="hljs-comment">// 需求3：找3个整数中的较大值。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">45</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">34</span>;<br><br>        <span class="hljs-comment">// 找出2个整数中的较大值。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i &gt; j ? i : j;<br>        <span class="hljs-comment">// 找出temp与k中的较大值。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max2</span> <span class="hljs-operator">=</span> temp &gt; k ? temp : k;<br>        System.out.println(max2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-7-运算优先级"><a href="#3-7-运算优先级" class="headerlink" title="3.7 运算优先级"></a>3.7 运算优先级</h3><p>最后我们在给大家介绍一下运算符的优先级，如果你想要知道各个运算符的优先级，哪些先算哪些后算，可以参考下面这张图</p><p><img src="/assets/1660875681298.png" alt="1660875681298"></p><p>从图中我们发现，&amp;&amp;运算比||运算的优先级高，所以&amp;&amp;和||同时存在时，是先算&amp;&amp;再算||；</p><p>比如下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里&amp;&amp;先算 相当于 true || false 结果为true</span><br>System.out.println(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> || <span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-number">10</span> &lt; <span class="hljs-number">3</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>最后给大家说一下，在实际开发中，其实我们很少考虑运算优先级， 因为如果你想让某些数据先运算，其实加<code>()</code>就可以了，这样阅读性更高。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//有括号先算 相当于 true &amp;&amp; false 结果为false</span><br>System.out.println((<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> || <span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span>) &amp;&amp; <span class="hljs-number">10</span> &lt; <span class="hljs-number">3</span>); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h2 id="五、案例技术：获取用户键盘输入的数据"><a href="#五、案例技术：获取用户键盘输入的数据" class="headerlink" title="五、案例技术：获取用户键盘输入的数据"></a>五、案例技术：获取用户键盘输入的数据</h2><p>最后给大家讲一个案例技术，这个技术现在其实有一些超前，因为需要用到后面学习的知识。但是在这里讲可以让我们的学习体验度更好一点，前面案例中参与运算的数据都是在程序中写死的，下面我们想让自己键盘录入数据，然后参与程序的运行。</p><p><strong>键盘录入这个事情，其实并不是我们自己做的，而是Java本身就提供了这样的功能，我们按照它的要求，去调用就行。</strong></p><p>我们在安装JDK的时候，其实JDK中就已经包含了一些Java写好的代码，我们把Java写好的代码直接拿过来用就行。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">比如：Scanner就是Java提供给我们用于键盘录入数据的类，为了录入不同类型的数据，还提供了不同的功能，每一个功能会有不同的名称，我们只需要调用Scanner提供的功能就可以完成键盘录入数据。<br></code></pre></td></tr></table></figure><p>大家只需要按照下面的步骤编写代码，就可以键盘录入数据了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">【第<span class="hljs-number">1</span>步】：在class类上导包：一般不需要我们自己做，idea工具会自动帮助我们 导包的。<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br>【第<span class="hljs-number">2</span>步】：得到一个用于键盘扫描器对象（照抄代码就行，固定格式）<br><span class="hljs-comment">//Scanner是键盘扫描器对象(你就把它理解成一个东西)，这个东西有录入的功能</span><br><span class="hljs-comment">//sc是给这个东西取的名字</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>【第<span class="hljs-number">3</span>步】：开始调用sc的功能，来接收用户键盘输入的数据。<br><span class="hljs-comment">//sc这个东西有键盘录入整数的功能，这个功能的名字叫nextInt()</span><br><span class="hljs-comment">//.表示表示调用的意思</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>System.out.println(<span class="hljs-string">&quot;我的年龄是:&quot;</span>+age);<br><br><span class="hljs-comment">//sc这个东西还有键盘录入字符串的功能，这个功能的名字叫next</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>System.out.println(<span class="hljs-string">&quot;我的姓名是:&quot;</span>+name);<br></code></pre></td></tr></table></figure><p>下面是完整代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、导包:一般不需要我们自己做，idea工具会自动帮助我们 导包的。</span><br>        <span class="hljs-comment">// 2、抄写代码：得到一个键盘扫描器对象（东西）</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 3、开始 调用sc的功能，来接收用户键盘输入的数据。</span><br>        System.out.println(<span class="hljs-string">&quot;请您输入您的年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt(); <span class="hljs-comment">// 执行到这儿，会开始等待用户输入一个整数，直到用户按了回车键，才会拿到数据。</span><br>        System.out.println(<span class="hljs-string">&quot;您的年龄是：&quot;</span>  + age);<br><br>        System.out.println(<span class="hljs-string">&quot;请您输入您的名字：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next(); <span class="hljs-comment">// 执行到这儿，会开始等待用户输入一个字符串，直到用户按了回车键，才会拿到数据。</span><br>        System.out.println(name + <span class="hljs-string">&quot;欢迎您进入系统~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01句子</title>
    <link href="/2023/04/07/01%E5%8F%A5%E5%AD%90/"/>
    <url>/2023/04/07/01%E5%8F%A5%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h3 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h3><h4 id="仅为摘抄"><a href="#仅为摘抄" class="headerlink" title="仅为摘抄"></a>仅为摘抄</h4><p>01.愿你我皆良人</p><p>02.竹影临风花满地</p><p>03.风随草去秋无际，叶落无痕花自欺</p><p>04.瘦骨嶙峋，难承生命之重；命运多舛，易抒感伤之怀</p><p>05.知是非与故，明月何长清</p><p>06.细细黄沙穿金甲，半城风雨半城楼</p><p>07.止于唇齿，掩于岁月</p><p>08.热烈纯粹的爱，认真踏实的活</p><p>09.现实总是残酷，让人尴尬不已，哭笑不得</p><p>10.时间不会忘记青春的热血，梦想总会温暖寒冷的岁月</p><p>11.墙内秋千墙外道</p><p>12.刹那微蓝</p><p>13.一直看着我们各自的模样</p><p>14.是邪，非邪。立而望之，为何翩翩</p><p>15.一唱三叹惋，一哀一鸿鸣</p><p>16.别刻意讨好，别故意远离</p><p>17.一个天性美好，一个灵魂纯正</p><p>18.我们都清楚自己的处境，却没有勇气去料想结局</p><p>19.爱方知情重，醉亦知酒浓，阔落入喉心作痛</p><p>20.快乐具有极强的感染力，让人舒适从容</p><p>21.凡无必要，勿增实体</p><p>22.无名奇妙的喜悦和突如其来的悲伤</p>]]></content>
    
    
    
    <tags>
      
      <tag>句子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-基础入门</title>
    <link href="/2023/04/07/day01-Java%E5%85%A5%E9%97%A8/"/>
    <url>/2023/04/07/day01-Java%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="01-——Java基础入门"><a href="#01-——Java基础入门" class="headerlink" title="01 ——Java基础入门"></a>01 ——Java基础入门</h4><p>欢迎来到Java的世界！！ </p><h2 id="一、-Java背景知识"><a href="#一、-Java背景知识" class="headerlink" title="一、 Java背景知识"></a>一、 Java背景知识</h2><p>先了解一下Java的背景知识，方便以后你在和大家聊Java的时候可以说到一块去。</p><h3 id="1-1-Java语言的历史"><a href="#1-1-Java语言的历史" class="headerlink" title="1.1 Java语言的历史"></a>1.1 Java语言的历史</h3><ul><li><p><strong>Java是哪家公司的产品？</strong></p><p>Java是美国Sun（Stanford University Network，斯坦福大学网络公司）公司在1995年推出的一门计算机<strong>高级编程语言</strong>。但是在2009年是Sun公司被Oracle（甲骨文）公司给收购了，所以目前Java语言是Oracle公司所有产品。</p></li><li><p><strong>Java名称的来历？</strong></p><p>早期这门语言的名字其实不叫Java，当时称为Oak（橡树的意思），为什么叫橡树呢？原因是因为Sun公司的门口种了很多橡树，但是后来由于商标注册时，Oak商标已经其他公司注册了，所以后面改名为Java了。那么有人好奇为什么叫Java呢？Java是印度的一个岛屿，上面盛产咖啡，可能是因为他们公司的程序员喜欢喝咖啡，所以就改名为Java了。</p></li><li><p><strong>Java的创始人是谁？</strong></p></li><li><p>说完Java名称的来历之后，接下来我们聊聊Java的祖师爷是谁？ Java的联合创始人有很多，但是行业普遍认可的Java的创始人 是<strong>詹姆斯●高斯林</strong>，被称为Java之父</p></li></ul><p><img src="/assets/1660152660273.png" alt="1660152660273"></p><h3 id="1-2-Java能做什么"><a href="#1-2-Java能做什么" class="headerlink" title="1.2 Java能做什么"></a>1.2 Java能做什么</h3><p>了解了Java语言的历史之后，接下来，大家比较关心的问题可能是Java到底能做什么了？</p><p><img src="/assets/1660141834075.png" alt="1660141834075"></p><p>其实Java能做的事情非常多，它可以做桌面应用的开发、企业互联网应用开发、移动应用开发、服务器系统开发、大数据开发、游戏开发等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>桌面应用开发：能够在电脑桌面运行的软件<br>举例：财务管理软件、编写程序用的IDEA开发工具等，可以用Java语言开发<br><br><span class="hljs-number">2.</span>企业级应用开发：大型的互联网应用程序<br>举例：淘宝、京东、大家每天都用的tlias教学管理系统等<br><br><span class="hljs-number">3.</span>移动应用开发：运行的Android手机端的软件<br>举例：QQ客户端、抖音APP等<br><br><span class="hljs-number">4.</span>服务器系统：应用程序的后台（为客户端程序提供数据）<br>举例：服务器系统为用户推荐那你喜爱的视频<br><br><span class="hljs-number">5.</span>大数据开发：大数据是一个互联网开发方向<br>举例：目前最火的大数据开发平台是Hadoop，就是用Java语言开发的<br><br><span class="hljs-number">6.</span>游戏开发：游戏本质上是给用户提供娱乐的软件，有良好的交互感受<br>举例：我的世界MineCraft就是用Java语言开发的<br></code></pre></td></tr></table></figure><p>虽然Java能做的事情非常多，但并不是每一个方向都被市场认可（比如桌面应用使用Java语言开发就不太方便，而使用C#语言是比较推荐的）。<strong>目前Java的主流开发方向是使用Java开发企业级互联网应用程序</strong>（很多公司的OA系统，客户关系管理系统，包括传智播客使用教学实施管理系统都是用Java语言开发的）</p><h3 id="1-3-Java的技术体系"><a href="#1-3-Java的技术体系" class="headerlink" title="1.3 Java的技术体系"></a>1.3 Java的技术体系</h3><p>说完Java语言能做什么之后，接下来介绍一下Java的技术体系。所谓技术体系，就是Java为了满足不同的应用场景提供了不同的技术版本，主要有三个版本。</p><ul><li><p>Java SE（Java Standard Edition）：叫做标准版，它是后面两个版本的基础，也就是学习后面两个版本必须先学习JavaSE。<strong>我们基础班现阶段学习的就是这个版本中的技术</strong>。</p></li><li><p>Java EE（Java Enterprise Edition）: 叫做企业版，它是为企业级应用开发提供的一套解决方案。<strong>在后面就业班课程中主要学习这个版本中的技术</strong>。</p></li><li><p>Java ME（Java Micro Edition）：叫做小型版，它为开发移动设备的应用提供了一套解决方案。<strong>目前已经不被市场认可（淘汰），取而代之的是基于Android系统的应用开发</strong>。</p></li></ul><hr><p>Java语言的相关背景就给大家介绍到这里了，这些内容小伙伴们也不用刻意去记，简单了解一下就可以了。下面我们在简要回顾一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>Java是什么？<br>答：Java是一门高级编程语言<br><br><span class="hljs-number">2.</span>Java是哪家公司的产品？<br>答：Java以前是Sun公司的产品，现在Java是属于Oracle公司的产品<br><br><span class="hljs-number">3.</span>Java之父是谁？<br>答：詹姆斯●高斯林<br><br><span class="hljs-number">4.</span>Java主流的开发方向是什么？<br>答：企业级互联网应用开发<br><br><span class="hljs-number">5.</span>Java技术平台有哪些？<br>答：JavaSE（标准版）、JavaEE（企业版）、JavaME（小型版）<br></code></pre></td></tr></table></figure><h2 id="二、-Java快速入门"><a href="#二、-Java快速入门" class="headerlink" title="二、 Java快速入门"></a>二、 Java快速入门</h2><p>上一章我们给小伙伴们介绍了Java的相关背景，你们现在是不是就想马上用一下Java呀？先不着急，我们得先得安装Java的开发环境，才能使用Java语言开发程序（ps: 就像你先需要安装微信，才能使用微信和朋友聊天是一样的）。</p><p>这里所说的Java开发环境，实际上就是Java官方提供的一个软件，叫做JDK（全称是Java Develop Kit），翻译过来意思就是Java开发工具包。<strong>我们先要到官网上去下载JDK，然后安装在自己的电脑上，才可以在自己的电脑上使用JDK来开发Java程序</strong></p><p>JDK的版本有很多，下图是JDK版本更新的历程图，有LTS标识的是长期支持版本（意思就是Oracle会不定期更新）。目前公司中用得最多的版本是JDK8版本，在目前这套课程中我们为了将一些新特性会使用JDK17版本。</p><p><img src="/assets/1660143538211.png" alt="1660143538211"></p><p>下面已经给小伙伴们提供了详细的JDK下载和安装过程的截图，大家只需要按照步骤操作就行。</p><h3 id="2-1-JDK下载和安装"><a href="#2-1-JDK下载和安装" class="headerlink" title="2.1 JDK下载和安装"></a>2.1 JDK下载和安装</h3><ul><li><strong>JDK的下载</strong></li></ul><p>这是JDK下载的官方网址 <a href="https://www.oracle.com/java/technologies/downloads/%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E6%8A%8A%E8%AF%A5%E7%BD%91%E5%9D%80%E5%A4%8D%E5%88%B6%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E6%A0%8F%EF%BC%8C%E6%95%B2%E5%9B%9E%E8%BD%A6">https://www.oracle.com/java/technologies/downloads/，你需要把该网址复制到浏览器的地址栏，敲回车</a></p><p><img src="/assets/1660527717279.png" alt="1660527717279"></p><p>进入网址后，选择JDK17版本，找到Windows标签，选择x64 Installer版本。如下图所示</p><p><img src="/assets/1660527981411.png" alt="1660527981411"></p><p>下载完成之后，在你下载的目录下会出现一个JDK的安装包，如下图所示</p><p><img src="/assets/1660528307458.png" alt="1660528307458"></p><p>到这JDK的下载就完成了，接下来就需要按照下面的步骤完成JDK安装.</p><ul><li><strong>JDK的安装</strong></li></ul><p>双击安装包，按照下图引导，点击下一步即可安装。<strong>需要注意的是安装JDK后不像你安装QQ一样会在桌面上显示一个图标，JDK安装后桌面上没有图标！！！</strong></p><p><img src="/assets/1660144855615.png" alt="1660144855615"></p><p><strong>如何验证安装成功了呢？</strong></p><p>刚才不是让你记住安装目录吗？你记住了吗？如果你自己修改过目录，就打开你自己修改的目录（呀！！忘记了o(╥﹏╥)o，那我帮不了你了，谁让你不认真听讲的）；如果没有修改安装目录，默认在<code>C:\Program Files\Java\jdk-17.0.3</code>目录下。</p><p>在文件资源管理器打开JDK的安装目录的bin目录，会发现有两个命令工具 <code>javac.exe</code> <code>java.exe</code> ，这就是JDK提供给我们使用的<strong>编译工具和运行工具</strong>，如下图所示</p><p><img src="/assets/1660145259521.png" alt="1660145259521"></p><p>我们现在就使用一下 <code>javac.exe</code> <code>java.exe</code> 这两个工具，测试一下JDK是否可用</p><ol><li>第一步：在JDK的bin目录，地址栏输入cmd，回车</li></ol><p><img src="/assets/1660529458474.png" alt="1660529458474"></p><p>输入完cmd回车后，会出现一个黑窗口，专业说法叫<strong>命令行窗口</strong></p><p><img src="/assets/1660529493477.png" alt="1660529493477"></p><ol start="2"><li><p>第二步：在命令行窗口中输入 <code>javac -version</code>回车，然后输入<code>java -version</code>回车</p><p>如果出现下面红色框框的提示正确版本号，和我们安装的JDK版本号一致，就说明JDK安装成功</p></li></ol><p><img src="/assets/1660145482256.png" alt="1660145482256"></p><p>做完以上步骤之后，恭喜小伙伴^_^，你的电脑上就已经有Java的开发环境了，接下来可以开发Java程序了。</p><h3 id="2-2-cmd常见命令"><a href="#2-2-cmd常见命令" class="headerlink" title="2.2 cmd常见命令"></a>2.2 cmd常见命令</h3><p>前面测试JDK是否安装成功，需要在黑窗口中输入<code>javac -version</code>和<code>java -version</code> 这其实就是JDK查看编译工具和运行工具版本号的命令。</p><p>这种输入命令的和电脑交互的方式，称之为命令行交互。也就是说，可以使用命令指挥电脑做事情。接下来我们了解几种Windows系统常见的命令，后面可能会用到。</p><p>下面是Windows系统常见的命令以及作用，小伙伴们可以自己试一试。需要注意的是，每敲完一条命令之后，马上敲回车就表示执行这条命名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">E:  <span class="hljs-comment">//切换到E盘</span><br>cd [目录]        <span class="hljs-comment">//进入指定的目录</span><br>cd ..         <span class="hljs-comment">//退回到上一级目录</span><br>cd /         <span class="hljs-comment">//退回到根目录</span><br>dir             <span class="hljs-comment">//显示当前目录下所有的内容</span><br>cls             <span class="hljs-comment">//清空屏幕</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Java入门程序"><a href="#2-3-Java入门程序" class="headerlink" title="2.3 Java入门程序"></a>2.3 Java入门程序</h3><p>上一节我们已经安装好了JDK，接下来，我们就正式开始开发第一个入门Java程序。按照国际惯例，学习任何一本编程语言第一个案例都叫做 <strong>Hello World</strong>，意思是向世界问好，从此开用程序和世界沟通的大门。</p><blockquote><p><strong>编写Java程序的步骤</strong></p></blockquote><p>编写一个Java程序需要经过3个步骤：<strong>编写代码，编译代码，运行代码</strong></p><p><img src="/assets/1660145843138.png" alt="1660145843138"></p><ul><li><input checked="" disabled="" type="checkbox"> 编写代码：任何一个文本编辑器都可以些代码，如Windows系统自带的记事本</li><li><input checked="" disabled="" type="checkbox"> 编译代码：将人能看懂的源代码（.java文件）转换为Java虚拟机能够执行的字节码文件（.class文件）</li><li><input checked="" disabled="" type="checkbox"> 运行代码：将字节码文件交给Java虚拟机执行</li></ul><hr><blockquote><p><strong>编写第一个Java入门程序</strong></p></blockquote><p>按照下面提供的步骤，一步一步的完成第一个Java入门程序的编写、编译和执行。</p><p><strong>第一步</strong>：新建一个后缀为.java的文本文件<code>HelloWorld.java</code>，用记事本编写代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot; HelloWorld &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步</strong>：进入<code>HelloWorld.java</code>文件所在目录，在地址栏输入cmd回车，即可在此处打开命令行窗口。</p><p><img src="/assets/1660146387184.png" alt="1660146387184"></p><p>编译：在命令行窗口输入编译命令<code>javac HelloWorld</code>完成编译，编译后会生成一个<code>HelloWorld.class</code>文件。</p><p><img src="/assets/1660146644956.png" alt="1660146644956"></p><p><strong>第三步</strong>：再接着输入<code>java HelloWorld</code>就可以运行了，运行结果如下。</p><p><img src="/assets/1660146816170.png" alt="1660146816170"></p><h3 id="2-4-Java程序中常见的问题"><a href="#2-4-Java程序中常见的问题" class="headerlink" title="2.4 Java程序中常见的问题"></a>2.4 Java程序中常见的问题</h3><p>刚才小伙伴们在编写第一个HelloWorld程序的时候，是不是很容易报错啊？ 我观察过第一次写代码，90%的同学都会有些小问题的，比如单词写错了！ 括号少写一个！等等！  我想给大家说的是，写错代码都是很正常的，<strong>一个什么错都犯过的程序员，才是真正的程序员</strong>。</p><p>下面我们把程序中常见的问题，总结一下。大家在写代码时注意一下这些问题就可以了</p><ul><li><input checked="" disabled="" type="checkbox"> Windows的文件扩展名没有勾选</li><li><input checked="" disabled="" type="checkbox"> 代码写了，但是忘记保存了</li><li><input checked="" disabled="" type="checkbox"> 文件名和类名不一致。</li><li><input checked="" disabled="" type="checkbox"> 英文大小写错误，单词拼写错误，存在中文符号，找不到main方法。</li><li><input checked="" disabled="" type="checkbox"> 括号不配对。</li><li><input checked="" disabled="" type="checkbox"> 编译或执行工具使用不当。</li></ul><hr><blockquote><ul><li><strong>文件扩展名没有打开</strong></li></ul></blockquote><p>下图中文件扩展名的勾勾没有勾选，就会导致你创建的文件是普通的文本文件（.txt）文件，而不是java文件。</p><p><strong>正确做法是把文件扩展名的勾选上</strong></p><p><img src="/assets/1660147216279.png" alt="1660147216279"></p><blockquote><ul><li><strong>文件名和类名不一致</strong></li></ul></blockquote><p>你看下图中，文件名是<code>HelloWorld</code>，但是类名是<code>Helloworld</code>看出区别了吗？一个是大写的W，一个是小写的w。 不仔细看还真看不出来。 </p><p>**正确写法是文件名叫<code>HelloWorld</code>，类名也叫<code>HelloWorld**</code></p><p><img src="/assets/1660531741851.png" alt="1660531741851"></p><blockquote><ul><li><strong>单词大小写错吴</strong></li></ul></blockquote><p>下图中不是string和system这两个单词都写错了， 这里是严格区分大小写的</p><p><strong>正确写法是String和System</strong></p><p><img src="/assets/1660531915677.png" alt="1660531915677"></p><blockquote><ul><li><strong>主方法写错了</strong></li></ul></blockquote><p>下图所示，主方法的名称写成了<code>mian</code>，这是错误的。</p><p>主方法正确写法：必须是<code> public static void main(String[] args)&#123;&#125;</code>，一个字母都不能错。</p><p><img src="/assets/1660532147208.png" alt="1660532147208"></p><blockquote><ul><li><strong>标点符号写错了</strong></li></ul></blockquote><p>下图中打印语句最后的分号，写成功中文分号<code>；</code></p><p><strong>正确写法应该是英文分号</strong> <code>;</code>  不仔细看还真看不出区别，要小心</p><p><img src="/assets/1660532298281.png" alt="1660532298281"></p><h3 id="2-5-JDK的组成"><a href="#2-5-JDK的组成" class="headerlink" title="2.5 JDK的组成"></a>2.5 JDK的组成</h3><p>在前几节课中我们已经安装了JDK，并且开发了一个Java入门程序，用javac命令编译，用Java命令运行，但是对于Java程序的执行原理并没有过多的介绍。 </p><p>下面我们把JDK的组成，以及跨平台原理给大家介绍一下，有利于 理解Java程序的执行过程。 </p><p>JDK由JVM、核心类库、开发工具组成，如下图所示</p><p><img src="/assets/1660147531310.png" alt="1660147531310"></p><p>下面分别介绍一下JDK中每一个部分是用来干什么的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">- 什么是JVM?<br>    答：JDK最核心的组成部分是JVM（Java Virtual Machine），它是Java虚拟机，真正运行Java程序的地方。<br>    <br>- 什么是核心类库？<br>答：它是Java本身写好的一些程序，给程序员调用的。 Java程序员并不是凭空开始写代码，是要基于核心类库提供的一些基础代码，进行编程。<br><br>- 什么是JRE?<br>    答：JRE（Java Runtime Enviroment），意思是Java的运行环境；它是由JVM和核心类库组成的；如果你不是开发人员，只需要在电脑上安装JRE就可以运行Java程序。<br>    <br>- 什么是开发工具呢？<br>答：Java程序员写好源代码之后，需要编译成字节码，这里会提供一个编译工具叫做javac.exe，编写好源代码之后，想要把class文件加载到内存中运行，这里需要用到运行工具java.exe。 <br>除了编译工具和运行工具，还有一些其他的反编译工具、文档工具等待...<br></code></pre></td></tr></table></figure><p>JDK、JRE的关系用一句话总结就是：用JDK开发程序，交给JRE运行</p><h3 id="2-6-Java的跨平台原理"><a href="#2-6-Java的跨平台原理" class="headerlink" title="2.6 Java的跨平台原理"></a>2.6 Java的跨平台原理</h3><p>学完JDK的组成后，我们知道Java程序的执行是依赖于Java虚拟机的。就是因为有了Java虚拟机所以Java程序有一个重要的特性叫做跨平台性。</p><ul><li><p><strong>什么是跨平台行呢？</strong></p><p>所谓跨平台指的是用Java语言开发的程序可以在多种操作系统上运行，常见的操作系统有Windows、Linux、MacOS系统。</p><p>如果没有跨平台性，同一个应用程序，想要在多种操作系统上运行，需要针对各个操作系统单独开发应用。比如微信有Windows版本、MacOS版本、Android版本、IOS版本</p></li><li><p><strong>为什么Java程序可以跨平台呢？</strong></p><p>跨平台性的原理是因为在<strong>不同版本的操作系统</strong>中安装有<strong>不同版本的Java虚拟机</strong>，Java程序的运行只依赖于Java虚拟机，和操作系统并没有直接关系。<strong>从而做到一处编译，处处运行</strong>。</p></li></ul><p><img src="/assets/1660147588001.png" alt="1660147588001"></p><h3 id="2-7-JDK环境变量配置"><a href="#2-7-JDK环境变量配置" class="headerlink" title="2.7 JDK环境变量配置"></a>2.7 JDK环境变量配置</h3><p>JDK安装后，接下我们来学习一个补充知识，叫做Path环境变量</p><ul><li><p><strong>什么是Path环境变量？</strong></p><p>Path环境变量是让系统程序的路径，方便程序员在命令行窗口的任意目录下启动程序；</p></li><li><p><strong>如何配置环境变量呢？</strong></p><p>比如把QQ的启动程序，配置到Path环境变量下就可以在任意目录下启动QQ，按照一下步骤操作。</p><p><strong>第一步：</strong>先找到QQ启动程序所在的目录<code>C:\Program Files (x86)\Tencent\QQ\Bin</code>，复制这个路径</p><p><img src="/assets/1660538063180.png" alt="1660538063180"></p><p><strong>第二步：</strong>按照下面的步骤，找到Path环境变量。</p><p>首先找到此电脑，右键点击属性，可以按照下面的界面；点击【高级系统设置】，再点击【环境变量】</p><p><img src="/assets/1660538424000.png" alt="1660538424000"></p><p>双击Path后，点击新建，把QQ启动目录粘贴进来，不要忘记点确定哦^_^</p><p><img src="/assets/1660538760744.png" alt="1660538760744"></p><p><strong>第三步：</strong>配置好之后，检查是否配置成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>Win+R 输入cmd回车，打开命令行窗口<br><span class="hljs-number">2.</span>输入QQScLanucher，可以看到QQ启动了<br></code></pre></td></tr></table></figure></li></ul><p><img src="/assets/1660539146158.png" alt="1660539146158"></p><hr><ul><li><p><strong>将JDK配置到Path路径下</strong></p><p>上面我们配置了QQ的启动目录到Path环境变量位置，那么接下来，我们把JDK的bin目录配置到Path环境变量下，这样就可以在任意目录下启动javac和java命令来完成编译和运行了。</p><p><strong>第一步：</strong>找到JDK的bin目录<code>C:\Program Files\Java\jdk-17.0.3\bin</code>，复制一下</p><p><strong>第二步：</strong>将JDK的bin目录粘贴在Path环境变量后面</p><p><img src="/assets/1660539632325.png" alt="1660539632325"></p><p><strong>第三步：检测否配置成功</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>按住Win+R输入cmd 回车，打开命令行创建<br><span class="hljs-number">2.</span>输入javac -version 看提示信息是否显示你安装JDK的版本号<br>  输入java -version 看提示信息是否显示你安装JDK的版本号<br>【如果显示版本号都是JDK17就表示配置安装成功】<br></code></pre></td></tr></table></figure><p><img src="/assets/1660539955302.png" alt="1660539955302"></p></li></ul><p>你如果按照前面的操作到这里，就说明JDK环境变量已经配置好了，后面使用JDK命令可以在任意目录下运行。</p><h2 id="三、Java开发工具"><a href="#三、Java开发工具" class="headerlink" title="三、Java开发工具"></a>三、Java开发工具</h2><p>刚才写代码的时候都是用记事本写的，但是有没有觉得记事本写代码不太方便啊！记事本写代码单词写错了没有提示，格式也不好调整，写代码之后还需要我们到命令行使用javac命令手动编译，然后运行。</p><p>有没有一种软件能够将写代码、编译、运行等工具集成到一起呢？ 有，这就是集成开发环境（Integrated Development Environment ，简称IDE）。除此之外，IDEA还有代码提示、检查代码错误等功能，从而提高程序员的开发效率。</p><p>IDE有很多种，常见的Eclipse、MyEclipse、Intellij IDEA、JBuilder、NetBeans等。但是这些IDE中目前比较火的是Intellij IDEA（以下简称IDEA），被众多Java程序员视为最好用的Java集成开发环境，所以我们课程中就以IDEA为开发工具来编写代码，以后去公司也建议用IDEA作为开发环境。</p><p><img src="/assets/1660150643893.png" alt="1660150643893"></p><h3 id="3-1-IDEA下载和安装"><a href="#3-1-IDEA下载和安装" class="headerlink" title="3.1 IDEA下载和安装"></a>3.1 IDEA下载和安装</h3><p>为了正确的完成IDEA的下载和安装，给小伙伴们单独提供了一个文档《IDEA安装、使用、配置.pdf》，文档中提供了IDEA详细的安装和使用步骤，大家只需要按照文档的步骤一步一步操作就行。</p><p><img src="/assets/1660541810799.png" alt="1660541810799"></p><h3 id="3-2-IDEA编写Java程序"><a href="#3-2-IDEA编写Java程序" class="headerlink" title="3.2 IDEA编写Java程序"></a>3.2 IDEA编写Java程序</h3><p>上一节我们安装好了IDEA之后，接下来我们就可以使用IDEA开发一个HelloWorld程序玩一玩！目的是让大家知道在IDEA中开发Java程序的步骤。</p><p>想要在IDEA正确的写一个Java程序，必须先认识一下IDEA的管理Java程序的工程结构。</p><ul><li>第一步：首先得在IDEA中创建一个Project（工程、也叫项目），后面统称为工程。</li><li>第二步：需要在Project中创建Module（模块），一个工程中可以包含多个模块</li><li>第三步：需要在Module中新建Package（包），一个模块中可以有多个包</li><li>第四步：需要在Package中新建Class（类），一个包中可以包含多个类</li></ul><p>软件工程其实类似于建筑工程，我们对比建筑工程来理解。</p><ul><li>Project（工程）：你可以理解成小区的院子</li><li>Module（模块）：你可以理解成小区院子里面的每一栋楼</li><li>Package（包）：你可以理解成每一栋楼的一层</li><li>Class（类）：你可以理解成每一层的住户</li></ul><p><img src="/assets/1660542739892.png" alt="1660542739892"></p><p>在实际开发中比如淘宝网站这样的工程，但是由于功能很多，所以就把淘宝网站分为不同的模块，首页是一个模块、购物车是一个模块、订单也是一个模块；</p><p><img src="/assets/1660543086870.png" alt="1660543086870"></p><p><img src="/assets/1660544338418.png" alt="1660544338418"></p><ul><li><p><strong>创建工程Project</strong></p><p>创建工程的步骤比较多，在《IDEA安装、使用、配置.pdf》中提供的详细的引导步骤，照着一步一步的操作就行。</p><p>用浏览器打开《IDEA安装、使用、配置.pdf》点击左侧的导航栏可以定位到对应的位置，每一个部分都有截图步骤</p><p><img src="/assets/1660544715195.png" alt="1660544715195"></p></li></ul><h3 id="3-4-IDEA各种配置"><a href="#3-4-IDEA各种配置" class="headerlink" title="3.4 IDEA各种配置"></a>3.4 IDEA各种配置</h3><p>在使用IDEA编写程序时，可能会觉得字体比较小，背景色是黑色的，注释是灰色的，看不清，长时间可能对眼睛不好。我们可以通过IDEA相关的设置，把字体调大一点，背景色调为护眼色，注释也调为绿色。</p><ul><li><strong>主题配置</strong></li></ul><p><img src="/assets/1660150404720.png" alt="1660150404720"></p><ul><li><strong>字体配置</strong></li></ul><p><img src="/assets/1660150433205.png" alt="1660150433205"></p><ul><li><strong>背景色配置</strong></li></ul><p>把背景色的颜色值，调为204、238、200；就是豆沙绿的护眼色了</p><p><img src="/assets/1660545292279.png" alt="1660545292279"></p><p>更多配置，大家可以参考《IDEA安装、使用、配置.pdf》</p><h3 id="3-5-常用快捷键"><a href="#3-5-常用快捷键" class="headerlink" title="3.5 常用快捷键"></a>3.5 常用快捷键</h3><p>讲完IDEA相关配置之后，接下来给大家讲一个很重要的IDEA的使用技巧，这就是IDEA的快捷键，所谓快捷键就是通过键盘上的按键组合起来，就可以帮我们生成代码。使用快捷键可以大大提高我们的开发效率。</p><p>下面是几种常见的快捷键，以及他们的作用，大家可以自己试试</p><table><thead><tr><th><strong>快捷键</strong></th><th><strong>功能效果</strong></th></tr></thead><tbody><tr><td>main&#x2F;psvm、sout、…</td><td>快速键入相关代码</td></tr><tr><td>Ctrl + D</td><td>复制当前行数据到下一行</td></tr><tr><td>Ctrl + Y</td><td>删除所在行，建议用Ctrl + X</td></tr><tr><td>Ctrl + ALT + L</td><td>格式化代码</td></tr><tr><td>ALT + SHIFT + ↑ , ALT + SHIFT + ↓</td><td>上下移动当前代码</td></tr><tr><td>Ctrl + &#x2F; , Ctrl + Shift + &#x2F;</td><td>对代码进行注释(讲注释的时候再说)</td></tr></tbody></table><p>快捷键其实有很多，这里列举的是现阶段我们用得比较多的，现在记住不也不要紧，以后经常用，用着用着就记住了。</p><p>在后面的课程中讲到一些新的知识点时，还有会继续给大家讲一些新的快捷键。</p><h2 id="四-Java基础语法"><a href="#四-Java基础语法" class="headerlink" title="四. Java基础语法"></a>四. Java基础语法</h2><p>前面讲到的所有内容，都是为Java程序开发做一些准备工作，我们还没有正式教大家如何编写代码。</p><p>想要编写Java代码，就必须学习Java的语法，学习语法最主要做到下面两点就可以了</p><ul><li>记住语法格式</li><li>明确这种语法格式能达到什么效果</li></ul><p>这里需要说明一点：语法格式是Java语言的设计者规定好的，我们不用关心它为什么这么写，因为它造出来就是这么写的。</p><h3 id="4-1-注释"><a href="#4-1-注释" class="headerlink" title="4.1 注释"></a>4.1 注释</h3><p>我们先从最简单的语法开始学习，先来学习注释！</p><ul><li><p>什么是注释？</p><p>注释是解释说明程序的问题，方便自己和别人阅读代码</p></li><li><p>注释有哪几种？格式怎样？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>单行注释：<br><span class="hljs-comment">//后面根解释文字</span><br><span class="hljs-number">2.</span>多行注释<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这里写注释文字</span><br><span class="hljs-comment">    可以写多行</span><br><span class="hljs-comment">    */</span><br><span class="hljs-number">3.</span>文档注释<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    这里写文档注释</span><br><span class="hljs-comment">    也可以写多行，文档注释可以利用JDK的工具生成帮助文档</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure></li><li><p>下面用注释解释一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">目标：学会使用注释</span><br><span class="hljs-comment">     这是程序的讲解注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoteDemo</span>&#123;<br>    <span class="hljs-comment">//这是程序的主方法，是程序的入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我开始学习Java程序，好嗨皮~~&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        窗前明月光</span><br><span class="hljs-comment">        疑是地上霜</span><br><span class="hljs-comment">        举头望明月</span><br><span class="hljs-comment">        低头思故乡</span><br><span class="hljs-comment">        */</span><br>        System.out.println(<span class="hljs-string">&quot;播仔&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;deli&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>再多学一招：每次手动加注释比较麻烦，也可以使用快捷键加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Ctrl + / 单行注释（对当前行进行注释）<br>Ctrl + Shift + / 对选中的代码进行多行注释。<br></code></pre></td></tr></table></figure><p><img src="/assets/1660546999747.png" alt="1660546999747"></p><h3 id="4-2-字面量"><a href="#4-2-字面量" class="headerlink" title="4.2 字面量"></a>4.2 字面量</h3><p>学习完注释之后，我们来学习一个全新的知识点叫字面量。</p><ul><li><p>什么是字面量？</p><p>大家不要被这个词搞晕了，它其实很简单，我们知道计算机是来处理数据的，字面量其实就是告诉程序员数据在程序中的书写格式。下面是常用的数据在程序中的书写格式</p></li></ul><p><img src="/assets/1660150925625.png" alt="1660150925625"></p><ul><li>编写程序，在命令行打印输出各种类型的字面值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">目标：需要 掌握常见数据在程序中的书写格式</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LiteralDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.整数</span><br>        System.out.println(<span class="hljs-number">666</span>);<br>        <br>        <span class="hljs-comment">//2.小数</span><br>        System.out.println(<span class="hljs-number">3.66</span>);<br>        <br>        <span class="hljs-comment">//3.字符: 字符必须用单引号引起来</span><br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&#x27;0&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&#x27;中&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//空格也算字符</span><br>        <span class="hljs-comment">//特殊字符：\t表示制表符 \n表示换行</span><br>        System.out.println(<span class="hljs-string">&#x27;\t&#x27;</span>); <span class="hljs-comment">//这相当于一个tab键，专业叫做制表符</span><br>        System.out.println(<span class="hljs-string">&#x27;\n&#x27;</span>); <span class="hljs-comment">//这是换行的意思</span><br>        <br>        <span class="hljs-comment">//4.字符串：字符串是双引号引起来的</span><br>        System.out.println(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<br>        <br>        <span class="hljs-comment">//5.布尔值：只有两个值true和false</span><br>        System.out.println(<span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结一下：对于字面量，大家只要能够正确写出各种数据就可以了</p><h3 id="4-3-变量"><a href="#4-3-变量" class="headerlink" title="4.3 变量"></a>4.3 变量</h3><p>学习完字面量之后，接下来我们再来学习变量。对于变量的学习路径如下所示</p><ol><li><p>先认识什么是变量？</p></li><li><p>学习为什么要用变量？</p></li><li><p>学习变量有啥应用场景？</p></li></ol><p><img src="/assets/1660548540262.png" alt="1660548540262"></p><ul><li><strong>什么是变量？</strong></li></ul><p>变量是用来记录程序中的数据的。其本质上是内存中的一块区域，你可以把这块区域理解成一个小盒子。</p><p><img src="/assets/1660548847936.png" alt="1660548847936"></p><p>我们通过先通过一段代码演示一下，并解释变量的含义</p><p><img src="/assets/1660151428759.png" alt="1660151428759"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>System.out.println(a);<br></code></pre></td></tr></table></figure><p>当执行<code>int age = 18;</code> 这句代码时，JVM会在内存中申请一块区域，在这个区域中存储了一个整数18，给这个区域取的名字叫age； 相当于在盒子中存了一个数据18，这个盒子的名字是age，当我们打印age时，就是从盒子中把盒子中的数据取出来再打印。</p><ul><li><strong>为什么要用变量呢？</strong></li></ul><p>使用变量来记录数据，对于数据的管理更为灵活。比如我们有多个地方用到一个整数10,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.假设4多个地方用到整数10; 现在我想把10改为20，这时你得一条语句一条语句的修改</span><br>System.out.println(<span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">//2.同样这里还是在多个地方用到整数10，你可以先用一个变量记录这个整数10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//然后在需要用到整数10的地方，用x代替就行；</span><br><span class="hljs-comment">//如果我们把x值改了，那么后面用到x的值的地方就都一起改变了</span><br>System.out.println(x);<br>System.out.println(x);<br>System.out.println(x);<br>System.out.println(x);<br></code></pre></td></tr></table></figure><ul><li><strong>变量有应用场景?</strong></li></ul><p>变量的应用场景无处不在，只要是程序中能发生变化的数据，都可以用变量存储。比如：你微信钱包中的余额，你微信的昵称，你微信的个性签名； 余额随着你花钱是不是在变少，昵称和个性签名也可以经常修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//比如：你现在有188.8元，一会要发100元，再收20元。</span><br><span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">188.8</span>;<br><span class="hljs-comment">//发100元</span><br>money = money - <span class="hljs-number">100</span>;<br><span class="hljs-comment">//再收20元</span><br>money = money + <span class="hljs-number">20</span>;<br><span class="hljs-comment">//再打印money记录的值是多少</span><br>System.out.println(money);<br><br><br><span class="hljs-comment">//再比如：公交车大人2元，小孩一元，公交车经过2站</span><br><span class="hljs-comment">//第一站：3个大人1个小孩上车</span><br><span class="hljs-comment">//第二站：1个大人1个小孩上车，请问一共上了多少人，一共收入多少钱？</span><br><span class="hljs-comment">//刚开始公交车箱子里没有钱，用money2表示箱子里的钱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">money2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//刚开始公交车上也没有人，用count变量表示上车的人数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//经过两站的人数：第一站3人，第二站1人，总的人数是3+1</span><br>count = <span class="hljs-number">3</span>+<span class="hljs-number">1</span>;<br><span class="hljs-comment">//经过两站的钱数：</span><br>money2 = money2+<span class="hljs-number">3</span>*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>; <span class="hljs-comment">//经过第一站后</span><br>money2 = money2+<span class="hljs-number">2</span>+<span class="hljs-number">1</span>; <span class="hljs-comment">//经过第二站后</span><br><br><span class="hljs-comment">//打印人数和钱数</span><br>System.out.println(count);<br>System.out.println(money);<br></code></pre></td></tr></table></figure><ul><li><strong>变量的注意事项</strong></li></ul><p>在上节课已经给大家讲了变量的基本使用，变量在实际开发中用得特别多，关于变量使用注意事项需要给大家交代一下。</p><p>讲这些注意事项目的是让大家知道，有哪些写法是允许，有哪些写法是不允许的，能分辨对错，并知道为什么错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>变量定义在哪个&#123;&#125;范围内，就只在哪个大括号内有效。变量的有效范围称之为变量的作用域<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>System.out.println(a); <span class="hljs-comment">//这是是对的</span><br>&#125;<br>System.out.println(a); <span class="hljs-comment">//这里会出错</span><br><br><span class="hljs-number">2.</span>在同一个作用域内，不能有两个同名的变量<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>; <span class="hljs-comment">//这里会出错</span><br>&#125;<br><br><span class="hljs-number">3.</span>变量没有初始化只，不能直接使用<br><span class="hljs-type">int</span> a; <span class="hljs-comment">//仅仅定义了变量，但是没有初始值</span><br>System.out.println(a); <span class="hljs-comment">//这里会出错</span><br><br><span class="hljs-number">4.</span>变量可以定义在同一行<br>如：<span class="hljs-type">int</span> a=<span class="hljs-number">10</span>, b=<span class="hljs-number">20</span>; <span class="hljs-comment">//a和b都是int类型</span><br></code></pre></td></tr></table></figure><p>到此有关变量的所有使用方式，以及变量需要注意的问题，就学习完了。</p><p>我们再总结一下几点</p><ul><li>变量是用来记录程序中的数据的，可以把变量理解成内存中的小盒子，盒子里放的东西就是变量记录的数据</li><li>变量的定义格式： <code>数据类型 变量名 = 初始值;</code></li><li>变量记录的数据程序运行过程中是可以发生改变的：<code>变量名 = 值;</code></li></ul><hr><h3 id="4-4-关键字"><a href="#4-4-关键字" class="headerlink" title="4.4 关键字"></a>4.4 关键字</h3><p>学完变量之后，我们再来认识一下Java的关键字。</p><ul><li><p><strong>什么是关键字？</strong></p><p>关键字是java语言中有特殊含义的单词。比如用int表示整数，用double表示小数，等等！</p></li><li><p><strong>关键字有哪些？</strong></p><p>我们学习Java的语法其本质就是学习这些关键字的含义，一共有50多个关键字，我们不是一次性把这些关键字学完，会在后续的课程中每天学一点，慢慢得你就都学会了。</p></li></ul><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><ul><li><strong>如何识别那些单词是关键字？</strong></li></ul><p>现在我们不用知道这些关键字是什么意思，主要能够根据特点识别那些是关键字就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">关键字的特点：<br><span class="hljs-number">1.</span>关键字都是小写的<br><span class="hljs-number">2.</span>关键字在idea中有特殊颜色标记（如果你没有修改关键字的颜色，默认是蓝色的）<br></code></pre></td></tr></table></figure><p>下图中红色框住的单词都是关键字；没有框住的单词都不是关键字</p><p><img src="/assets/1660553031642.png" alt="1660553031642"></p><h3 id="4-5-标志符"><a href="#4-5-标志符" class="headerlink" title="4.5 标志符"></a>4.5 标志符</h3><p>接下来学习标志符，所谓标志符其实就是我们自己取的名字。像前面我们取的类名，变量名其实都是标志符。</p><p>讲标志符的目的，是让大家知道取名字的规则，不能让我们随即便瞎取。有些规则是强制要求的，不遵守就会报错。还有一些规则是我们建议大家遵守的，这样取名字显得我们更加专业^_^。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">强制要求：必须遵守，不遵守就会报错<br><span class="hljs-number">1.</span>最好是字母、数字、下划线、$组成<br><span class="hljs-number">2.</span>不能以数字开头<br><span class="hljs-number">3.</span>不能是Java的关键字<br><br>建议遵守：按照下面的方式取名字会显得更加专业<br><span class="hljs-number">1.</span>所有的名字要见名知意，便于自己和别人阅读<br>举例： <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;&#125; <span class="hljs-comment">//一看这个类就知道表示一个学生</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>;    <span class="hljs-comment">//一看这个变量就知道表示年龄</span><br><br><span class="hljs-number">2.</span>类名：首字母大写（大驼峰命名）<br>举例： <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;&#125;<br><br><span class="hljs-number">3.</span>变量名：第二个单词开始首字母大写（小驼峰命名）<br>举例： <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.88</span>;  <br>  <span class="hljs-type">double</span> <span class="hljs-variable">applePrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">7.5</span>; <br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/05/%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/04/05/%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23单元测试、反射</title>
    <link href="/2023/01/29/day23-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-%E5%8F%8D%E5%B0%84-%E6%B3%A8%E8%A7%A3-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2023/01/29/day23-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-%E5%8F%8D%E5%B0%84-%E6%B3%A8%E8%A7%A3-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="day23-单元测试、反射"><a href="#day23-单元测试、反射" class="headerlink" title="day23-单元测试、反射"></a>day23-单元测试、反射</h1><p>恭喜同学们，Java主要的知识我们其实已经学习得差不多了。今天同学们再把单元测试、反射、注解、动态代理学习完。Java的基础知识就算全齐活了。</p><p>首先，我们进入单元测试的学习。</p><h2 id="一、单元测试"><a href="#一、单元测试" class="headerlink" title="一、单元测试"></a>一、单元测试</h2><h3 id="1-1-单元测试快速入门"><a href="#1-1-单元测试快速入门" class="headerlink" title="1.1 单元测试快速入门"></a>1.1 单元测试快速入门</h3><p>所谓单元测试，就是针对最小的功能单元，编写测试代码对其进行正确性测试。</p><p>我们想想，咱们之前是怎么进行测试的呢？</p><p>比如说我们写了一个学生管理系统，有添加学生、修改学生、删除学生、查询学生等这些功能。要对这些功能这几个功能进行测试，我们是在main方法中编写代码来测试的。</p><p>但是在main方法中写测试代码有如下的几个问题，如下图所示：</p><p><img src="/assets/1668506399372.png" alt="1668506399372"></p><p>为了测试更加方便，有一些第三方的公司或者组织提供了很好用的测试框架，给开发者使用。这里给同学们介绍一种Junit测试框架。</p><p>Junit是第三方公司开源出来的，用于对代码进行单元测试的工具（IDEA已经集成了junit框架）。相比于在main方法中测试有如下几个优点。</p><p><img src="/assets/1668506713783.png" alt="1668506713783"></p><hr><p>我们知道单元测试是什么之后，接下来带领同学们使用一下。由于Junit是第三方提供的，所以我们需要把jar包导入到我们的项目中，才能使用，具体步骤如下图所示：</p><p><img src="/assets/1668507051101.png" alt="1668507051101"></p><p>接下来，我们就按照上面的步骤，来使用一下.</p><p>先准备一个类，假设写了一个StringUtil工具类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNumber</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;名字长度：&quot;</span>+name.length());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，写一个测试类，测试StringUtil工具类中的方法能否正常使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPrintNumber</span><span class="hljs-params">()</span>&#123;<br>        StringUtil.printNumber(<span class="hljs-string">&quot;admin&quot;</span>);<br>        StringUtil.printNumber(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写完代码之后，我们会发现测试方法左边，会有一个绿色的三角形按钮。点击这个按钮，就可以运行测试方法。</p><p><img src="/assets/1668507501024.png" alt="1668507501024"></p><h3 id="1-2-单元测试断言"><a href="#1-2-单元测试断言" class="headerlink" title="1.2 单元测试断言"></a>1.2 单元测试断言</h3><p>接下来，我们学习一个单元测试的断言机制。<strong>所谓断言：意思是程序员可以预测程序的运行结果，检查程序的运行结果是否与预期一致。</strong></p><p>我们在StringUtil类中新增一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxIndex</span><span class="hljs-params">(String data)</span>&#123;<br>    <span class="hljs-keyword">if</span>(data == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data.length();<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们在StringUtilTest类中写一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetMaxIndex</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> StringUtil.getMaxIndex(<span class="hljs-literal">null</span>);<br>       System.out.println(index1);<br>        <br>       <span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> StringUtil.getMaxIndex(<span class="hljs-string">&quot;admin&quot;</span>);<br>       System.out.println(index2);<br>        <br>        <span class="hljs-comment">//断言机制：预测index2的结果</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;方法内部有Bug&quot;</span>,<span class="hljs-number">4</span>,index2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试方法，结果如下图所示，表示我们预期值与实际值不一致</p><p><img src="/assets/1668508226111.png" alt="1668508226111"></p><h3 id="1-3-Junit框架的常用注解"><a href="#1-3-Junit框架的常用注解" class="headerlink" title="1.3 Junit框架的常用注解"></a>1.3 Junit框架的常用注解</h3><p>同学们，刚才我们以及学习了@Test注解，可以用来标记一个方法为测试方法，测试才能启动执行。</p><p>除了@Test注解，还有一些其他的注解，我们要知道其他注解标记的方法什么时候执行，以及其他注解在什么场景下可以使用。</p><p><img src="/assets/1668508373865.png" alt="1668508373865"></p><p>接下来，我们演示一下其他注解的使用。我们在StringUtilTest测试类中，再新增几个测试方法。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test1 Before 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test11 BeforeClass 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test2 After 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterCalss</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test22</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test22 AfterCalss 执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面的测试类，结果如下图所示，观察执行结果特点如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>被<span class="hljs-meta">@BeforeClass</span>标记的方法,执行在所有方法之前<br><span class="hljs-number">2.</span>被<span class="hljs-meta">@AfterCalss</span>标记的方法，执行在所有方法之后<br><span class="hljs-number">3.</span>被<span class="hljs-meta">@Before</span>标记的方法，执行在每一个<span class="hljs-meta">@Test</span>方法之前<br><span class="hljs-number">4.</span>被<span class="hljs-meta">@After</span>标记的方法，执行在每一个<span class="hljs-meta">@Test</span>方法之后<br></code></pre></td></tr></table></figure><p><img src="/assets/1668508793279.png" alt="1668508793279"></p><p>我们现在已经知道每一个注解的作用了，那他们有什么用呢？应用场景在哪里?</p><p>我们来看一个例子，假设我想在每个测试方法中使用Socket对象，并且用完之后，需要把Socket关闭。代码就可以按照下面的结构来设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Socket socket;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test1 Before 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test11 BeforeClass 执行了&quot;</span>);<br>        <span class="hljs-comment">//初始化Socket对象</span><br>        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>();<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test2 After 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterCalss</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test22</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test22 AfterCalss 执行了&quot;</span>);<br>         <span class="hljs-comment">//关闭Socket</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，我们再补充一点。前面的注解是基于Junit4版本的，再Junit5版本中对注解作了更新，但是作用是一样的。所以这里就不做演示了</p><p><img src="/assets/1668509275659.png" alt="1668509275659"></p><h2 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h2><p>各位小伙伴，接下来我们要学习反射技术。在学习反射之前，有几个点需要给同学们提前交代一下，接下来我们学习的反射、动态代理、注解等知识点，在以后开发中极少用到，这些技术都是以后学习框架、或者做框架的底层源码。给同学们讲这些技术的目的，是为了以后我们理解框架、或者自己开发框架给别人用作铺垫的。同时由于这些技术非常抽象，所以按照国际惯例，我们都会采用先带着大家充分的认识它们，然后再了解其作用和应用场景。</p><p>接下来，我们就需要带着同学们认识一下什么是反射。其实API文档中对反射有详细的说明，我们去了解一下。在java.lang.reflect包中对反射的解释如下图所示</p><p><img src="/assets/1668575265599.png" alt="1668575265599"></p><p>翻译成人话就是：<strong>反射技术，指的是加载类的字节码到内存，并以编程的方法解刨出类中的各个成分（成员变量、方法、构造器等）。</strong></p><p>反射有啥用呢？其实反射是用来写框架用的，但是现阶段同学们对框架还没有太多感觉。为了方便理解，我给同学们看一个我们见过的例子：平时我们用IDEA开发程序时，用对象调用方法，IDEA会有代码提示，idea会将这个对象能调用的方法都给你列举出来，供你选择，如果下图所示</p><p><img src="/assets/1668575796295.png" alt="1668575796295"></p><p>问题是IDEA怎么知道这个对象有这些方法可以调用呢? 原因是对象能调用的方法全都来自于类，IDEA通过反射技术就可以获取到类中有哪些方法，并且把方法的名称以提示框的形式显示出来，所以你能看到这些提示了。</p><p>那记事本写代码为什么没有提示呢? 因为技术本软件没有利用反射技术开发这种代码提示的功能，哈哈！！</p><p>好了，认识了反射是什么之后，接下来我还想给同学们介绍一下反射具体学什么？</p><p>因为反射获取的是类的信息，那么反射的第一步首先获取到类才行。由于Java的设计原则是万物皆对象，获取到的类其实也是以对象的形式体现的，<strong>叫字节码对象</strong>，用Class类来表示。获取到字节码对象之后，再通过字节码对象就可以获取到类的组成成分了，这些组成成分其实也是对象，其中<strong>每一个成员变量用Field类的对象来表示</strong>、<strong>每一个成员方法用Method类的对象来表示</strong>，<strong>每一个构造器用Constructor类的对象来表示</strong>。</p><p>如下图所示：</p><p><img src="/assets/1668576426355.png" alt="1668576426355"></p><h3 id="1-1-获取类的字节码"><a href="#1-1-获取类的字节码" class="headerlink" title="1.1 获取类的字节码"></a>1.1 获取类的字节码</h3><p>反射的第一步：是将字节码加载到内存，我们需要获取到的字节码对象。</p><p><img src="/assets/1668576691591.png" alt="1668576691591"></p><p>比如有一个Student类，获取Student类的字节码代码有三种写法。不管用哪一种方式，获取到的字节码对象其实是同一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1Class</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c1.getName()); <span class="hljs-comment">//获取全类名</span><br>        System.out.println(c1.getSimpleName()); <span class="hljs-comment">//获取简单类名</span><br>        <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.d2_reflect.Student&quot;</span>);<br>        System.out.println(c1 == c2); <span class="hljs-comment">//true</span><br>        <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> s.getClass();<br>        System.out.println(c2 == c3); <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-获取类的构造器"><a href="#1-2-获取类的构造器" class="headerlink" title="1.2 获取类的构造器"></a>1.2 获取类的构造器</h3><p>同学们，上一节我们已经可以获取到类的字节码对象了。接下来，我们学习一下通过字节码对象获取构造器，并使用构造器创建对象。</p><p>获取构造器，需要用到Class类提供的几个方法，如下图所示：</p><p><img src="/assets/1668577010983.png" alt="1668577010983"></p><p>想要快速记住这个方法的区别，给同学们说一下这些方法的命名规律，按照规律来记就很方便了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">get:获取<br>Declared: 有这个单词表示可以获取任意一个，没有这个单词表示只能获取一个<span class="hljs-keyword">public</span>修饰的<br>Constructor: 构造方法的意思<br>后缀s: 表示可以获取多个，没有后缀s只能获取一个<br></code></pre></td></tr></table></figure><p>话不多少，上代码。假设现在有一个Cat类，里面有几个构造方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><ol><li>接下来，我们写一个测试方法，来测试获取类中所有的构造器</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Constructor</span>()&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetConstructors</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1、反射第一步：必须先得到这个类的Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <br>        <span class="hljs-comment">//2、获取类的全部构造器</span><br>        Constructor[] constructors = c.getDeclaredConstructors();<br>        <span class="hljs-comment">//3、遍历数组中的每一个构造器对象。</span><br>        <span class="hljs-keyword">for</span>(Constructor constructor: constructors)&#123;<br>            System.out.println(constructor.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor.getParameterCount());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试方法打印结果如下</p><p><img src="/assets/1668578112815.png" alt="1668578112815"></p><ul><li><ol start="2"><li>刚才演示的是获取Cat类中所有的构造器，接下来，我们演示单个构造器试一试</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Constructor</span>()&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetConstructor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1、反射第一步：必须先得到这个类的Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <br>        <span class="hljs-comment">//2、获取类public修饰的空参数构造器</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor1</span> <span class="hljs-operator">=</span> c.getConstructor();<br>        System.out.println(constructor1.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor1.getParameterCount());<br>        <br>        <span class="hljs-comment">//3、获取private修饰的有两个参数的构造器，第一个参数String类型，第二个参数int类型</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> <br>            c.getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        <br>        System.out.println(constructor2.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor1.getParameterCount());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下</p><p><img src="/assets/1668578397467.png" alt="1668578397467"></p><h3 id="1-3-反射获取构造器的作用"><a href="#1-3-反射获取构造器的作用" class="headerlink" title="1.3 反射获取构造器的作用"></a>1.3 反射获取构造器的作用</h3><p>同学们，刚才上一节我们已经获取到了Cat类中的构造器。获取到构造器后，有什么作用呢？</p><p>其实构造器的作用：<strong>初始化对象并返回</strong>。</p><p>这里我们需要用到如下的两个方法，注意：这两个方法时属于Constructor的，需要用Constructor对象来调用。 </p><p><img src="/assets/1668578639149.png" alt="1668578639149"></p><p>如下图所示，constructor1和constructor2分别表示Cat类中的两个构造器。现在我要把这两个构造器执行起来</p><p><img src="/assets/1668578807439.png" alt="1668578807439"></p><p>由于构造器是private修饰的，先需要调用<code>setAccessible(true)</code> 表示禁止检查访问控制，然后再调用<code>newInstance(实参列表)</code> 就可以执行构造器，完成对象的初始化了。</p><p>代码如下：为了看到构造器真的执行， 故意在两个构造器中分别加了两个打印语句</p><p><img src="/assets/1668579315586.png" alt="1668579315586"></p><p>代码的执行结果如下图所示：</p><p><img src="/assets/1668579177901.png" alt="1668579177901"></p><h3 id="1-4-反射获取成员变量-amp-使用"><a href="#1-4-反射获取成员变量-amp-使用" class="headerlink" title="1.4 反射获取成员变量&amp;使用"></a>1.4 反射获取成员变量&amp;使用</h3><p>同学们，上一节我们已经学习了获取类的构造方法并使用。接下来，我们再学习获取类的成员变量，并使用。</p><p>其实套路是一样的，在Class类中提供了获取成员变量的方法，如下图所示。</p><p><img src="/assets/1668579517323.png" alt="1668579517323"></p><p>这些方法的记忆规则，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">get:获取<br>Declared: 有这个单词表示可以获取任意一个，没有这个单词表示只能获取一个<span class="hljs-keyword">public</span>修饰的<br>Field: 成员变量的意思<br>后缀s: 表示可以获取多个，没有后缀s只能获取一个<br></code></pre></td></tr></table></figure><ul><li>假设有一个Cat类它有若干个成员变量，用Class类提供 的方法将成员变量的对象获取出来。</li></ul><p><img src="/assets/1668579681294.png" alt="1668579681294"></p><p>执行完上面的代码之后，我们可以看到控制台上打印输出了，每一个成员变量的名称和它的类型。</p><p><img src="/assets/1668579804732.png" alt="1668579804732"></p><ul><li>获取到成员变量的对象之后该如何使用呢？</li></ul><p>在Filed类中提供给给成员变量赋值和获取值的方法，如下图所示。</p><p><img src="/assets/1668580075962.png" alt="1668580075962"></p><p>再次强调一下设置值、获取值的方法时Filed类的需要用Filed类的对象来调用，而且不管是设置值、还是获取值，都需要依赖于该变量所属的对象。代码如下</p><p><img src="/assets/1668580288930.png" alt="1668580288930"></p><p>执行代码，控制台会有如下的打印</p><p><img src="/assets/1668580517173.png" alt="1668580517173"></p><h3 id="1-5-反射获取成员方法"><a href="#1-5-反射获取成员方法" class="headerlink" title="1.5 反射获取成员方法"></a>1.5 反射获取成员方法</h3><p>各位同学，上面几节我们已经学习了反射获取构造方法、反射获取成员变量，还剩下最后一个就是反射获取成员方法并使用了。</p><p>在Java中反射包中，每一个成员方法用Method对象来表示，通过Class类提供的方法可以获取类中的成员方法对象。如下下图所示</p><p><img src="/assets/1668580761089.png" alt="1668580761089"></p><p>接下来我们还是用代码演示一下：假设有一个Cat类，在Cat类中红有若干个成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;空参数构造方法执行了&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;有参数构造方法执行了&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;(&gt;^ω^&lt;)喵跑得贼快~~&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;(&gt;^ω^&lt;)喵爱吃猫粮~&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">eat</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(&gt;^ω^&lt;)喵爱吃:&quot;</span>+name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，通过反射获取Cat类中所有的成员方法，每一个成员方法都是一个Method对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3Method</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1、反射第一步：先获取到Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <br>        <span class="hljs-comment">//2、获取类中的全部成员方法</span><br>        Method[] methods = c.getDecalaredMethods();<br>        <br>        <span class="hljs-comment">//3、遍历这个数组中的每一个方法对象</span><br>        <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>            System.out.println(method.getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getParameterCount()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getReturnType());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面的代码，运行结果如下图所示：<strong>打印输出每一个成员方法的名称、参数格式、返回值类型</strong></p><p><img src="/assets/1668581537215.png" alt="1668581537215"></p><p>也能获取单个指定的成员方法，如下图所示</p><p><img src="/assets/1668581678388.png" alt="1668581678388"></p><hr><p><strong>获取到成员方法之后，有什么作用呢？</strong></p><p>在Method类中提供了方法，可以将方法自己执行起来。</p><p><img src="/assets/1668581800777.png" alt="1668581800777"></p><p>下面我们演示一下，把<code>run()</code>方法和<code>eat(String name)</code>方法执行起来。看分割线之下的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3Method</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1、反射第一步：先获取到Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <br>        <span class="hljs-comment">//2、获取类中的全部成员方法</span><br>        Method[] methods = c.getDecalaredMethods();<br>        <br>        <span class="hljs-comment">//3、遍历这个数组中的每一个方法对象</span><br>        <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>            System.out.println(method.getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getParameterCount()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getReturnType());<br>        &#125;<br>        <br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>        <span class="hljs-comment">//4、获取private修饰的run方法，得到Method对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> c.getDecalaredMethod(<span class="hljs-string">&quot;run&quot;</span>);<br>        <span class="hljs-comment">//执行run方法,在执行前需要取消权限检查</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        run.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> run.invoke(cat);<br>        System.out.println(rs1)<br>        <br>        <span class="hljs-comment">//5、获取private 修饰的eat(String name)方法，得到Method对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        eat.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> eat.invoke(cat,<span class="hljs-string">&quot;鱼儿&quot;</span>);<br>        System.out.println(rs2)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下图所示：run()方法执行后打印<code>猫跑得贼快~~</code>，返回<code>null</code>； eat()方法执行完，直接返回<code>猫最爱吃:鱼儿</code></p><p><img src="/assets/1668582519455.png" alt="1668582519455"></p><h3 id="1-6-反射的应用"><a href="#1-6-反射的应用" class="headerlink" title="1.6 反射的应用"></a>1.6 反射的应用</h3><p>各位小伙伴，按照前面我们学习反射的套路，我们已经充分认识了什么是反射，以及反射的核心作用是用来获取类的各个组成部分并执行他们。但是由于同学们的经验有限，对于反射的具体应用场景还是很难感受到的（这个目前没有太好的办法，只能慢慢积累，等经验积累到一定程度，就会豁然开朗了）。</p><p>我们一直说反射使用来写框架的，接下来，我们就写一个简易的框架，简单窥探一下反射的应用。反射其实是非常强大的，这个案例也仅仅值小试牛刀。</p><p><img src="/assets/1668583255686.png" alt="1668583255686"></p><p>需求是让我们写一个框架，能够将任意一个对象的属性名和属性值写到文件中去。不管这个对象有多少个属性，也不管这个对象的属性名是否相同。</p><p>分析一下该怎么做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先写好两个类，一个Student类和Teacher类<br><span class="hljs-number">2.</span>写一个ObjectFrame类代表框本架<br>在ObjectFrame类中定义一个saveObject(Object obj)方法，用于将任意对象存到文件中去<br>参数：Object obj: 就表示要存入文件中的对象<br><br><span class="hljs-number">3.</span>编写方法内部的代码，往文件中存储对象的属性名和属性值<br><span class="hljs-number">1</span>)参数obj对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。<br><span class="hljs-number">2</span>)接着就通过反射获取类的成员变量信息了（变量名、变量值）<br><span class="hljs-number">3</span>)把变量名和变量值写到文件中去<br></code></pre></td></tr></table></figure><p>写一个ObjectFrame表示自己设计的框架，代码如下图所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectFrame</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;模块名\\src\\data.txt&quot;</span>,<span class="hljs-literal">true</span>));<br>        <span class="hljs-comment">//1)参数obj对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。</span><br><span class="hljs-comment">//2)接着就通过反射获取类的成员变量信息了（变量名、变量值）</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> obj.getClass(); <span class="hljs-comment">//获取字节码</span><br>        ps.println(<span class="hljs-string">&quot;---------&quot;</span>+class.getSimpleName()+<span class="hljs-string">&quot;---------&quot;</span>);<br>        <br>        Field[] fields = c.getDeclaredFields(); <span class="hljs-comment">//获取所有成员变量</span><br><span class="hljs-comment">//3)把变量名和变量值写到文件中去</span><br>        <span class="hljs-keyword">for</span>(Field field : fields)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> field.getName();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(obj)+<span class="hljs-string">&quot;&quot;</span>;<br>            ps.println(name);<br>        &#125;<br>        ps.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用自己设计的框架，往文件中写入Student对象的信息和Teacher对象的信息。</p><p>先准备好Student类和Teacher类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> String hobby;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个测试类，在测试中类创建一个Student对象，创建一个Teacher对象，用ObjectFrame的方法把这两个对象所有的属性名和属性值写到文件中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5Frame</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;黑马吴彦祖&quot;</span>,<span class="hljs-number">45</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">185.3</span>, <span class="hljs-string">&quot;篮球，冰球，阅读&quot;</span>);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;播妞&quot;</span>,<span class="hljs-number">999.9</span>);<br>        <br>        ObjectFrame.save(s1);<br>        ObjectFrame.save(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开data.txt文件，内容如下图所示，就说明我们这个框架的功能已经实现了</p><p><img src="/assets/1668584556229.png" alt="1668584556229"></p><p>好了，同学们，恭喜大家！学习到这里，反射技术已经学习完毕了。</p><hr><h2 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h2><h3 id="3-1-认识注解-amp-定义注解"><a href="#3-1-认识注解-amp-定义注解" class="headerlink" title="3.1 认识注解&amp;定义注解"></a>3.1 认识注解&amp;定义注解</h3><p>各位小伙伴，接下来我们学习注解。注解和反射一样，都是用来做框架的，我们这里学习注解的目的其实是为了以后学习框架或者做框架做铺垫的。</p><p>那注解该怎么学呢？和反射的学习套路一样，我们先充分的认识注解，掌握注解的定义和使用格式，然后再学习它的应用场景。</p><blockquote><p><strong>先来认识一下什么是注解？</strong></p></blockquote><p><strong>Java注解是代码中的特殊标记，比如@Override、@Test等，作用是：让其他程序根据注解信息决定怎么执行该程序。</strong></p><p>比如：Junit框架的@Test注解可以用在方法上，用来标记这个方法是测试方法，被@Test标记的方法能够被Junit框架执行。</p><p>再比如：@Override注解可以用在方法上，用来标记这个方法是重写方法，被@Override注解标记的方法能够被IDEA识别进行语法检查。</p><p><img src="/assets/1669603664584.png" alt="1669603664584"></p><ul><li><strong>注解不光可以用在方法上，还可以用在类上、变量上、构造器上等位置。</strong></li></ul><p>上面我们说的@Test注解、@Overide注解是别人定义好给我们用的，将来如果需要自己去开发框架，就需要我们自己定义注解。</p><blockquote><p><strong>接着我们学习自定义注解</strong></p></blockquote><p>自定义注解的格式如下图所示</p><p><img src="/assets/1669604102185.png" alt="1669604102185"></p><p>比如：现在我们自定义一个MyTest注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest&#123;<br>    String <span class="hljs-title function_">aaa</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">bbb</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//default true 表示默认值为true,使用时可以不赋值。</span><br>    String[] ccc();<br>&#125;<br></code></pre></td></tr></table></figure><p>定义好MyTest注解之后，我们可以使用MyTest注解在类上、方法上等位置做标记。注意使用注解时需要加@符号，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyTest1(aaa=&quot;牛魔王&quot;,ccc=&#123;&quot;HTML&quot;,&quot;Java&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest1</span>&#123;<br>    <span class="hljs-meta">@MyTest(aaa=&quot;铁扇公主&quot;,bbb=false, ccc=&#123;&quot;Python&quot;,&quot;前端&quot;,&quot;Java&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：注解的属性名如何是value的话，并且只有value没有默认值，使用注解时value名称可以省略。比如现在重新定义一个MyTest2注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest2&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>; <span class="hljs-comment">//特殊属性</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义好MyTest2注解后，再将@MyTest2标记在类上，此时value属性名可以省略，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyTest2(&quot;孙悟空&quot;)</span> <span class="hljs-comment">//等价于 @MyTest2(value=&quot;孙悟空&quot;)</span><br><span class="hljs-meta">@MyTest1(aaa=&quot;牛魔王&quot;,ccc=&#123;&quot;HTML&quot;,&quot;Java&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest1</span>&#123;<br>    <span class="hljs-meta">@MyTest(aaa=&quot;铁扇公主&quot;,bbb=false, ccc=&#123;&quot;Python&quot;,&quot;前端&quot;,&quot;Java&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里关于定义注解的格式、以及使用注解的格式就学习完了。</p><blockquote><p><strong>注解本质是什么呢？</strong></p></blockquote><p>想要搞清楚注解本质是什么东西，我们可以把注解的字节码进行反编译，使用XJad工具进行反编译。经过对MyTest1注解字节码反编译我们会发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>MyTest1注解本质上是接口，每一个注解接口都继承子Annotation接口<br><span class="hljs-number">2.</span>MyTest1注解中的属性本质上是抽象方法<br><span class="hljs-number">3.</span><span class="hljs-meta">@MyTest1</span>实际上是作为MyTest接口的实现类对象<br><span class="hljs-number">4.</span><span class="hljs-meta">@MyTest1(aaa=&quot;孙悟空&quot;,bbb=false,ccc=&#123;&quot;Python&quot;,&quot;前端&quot;,&quot;Java&quot;&#125;)</span>里面的属性值，可以通过调用aaa()、bbb()、ccc()方法获取到。 【别着急，继续往下看，再解析注解时会用到】<br></code></pre></td></tr></table></figure><p><img src="/assets/1669604928912.png" alt="1669604928912"></p><h3 id="3-2-元注解"><a href="#3-2-元注解" class="headerlink" title="3.2 元注解"></a>3.2 元注解</h3><p>各位小伙伴，刚才我们已经认识了注解以及注解的基本使用。接下来我们还需要学习几种特殊的注解，叫做元注解。</p><blockquote><p><strong>什么是元注解？</strong></p></blockquote><p><strong>元注解是修饰注解的注解</strong>。这句话虽然有一点饶，但是非常准确。我们看一个例子</p><p><img src="/assets/1669605746113.png" alt="1669605746113"></p><p>接下来分别看一下@Target注解和@Retention注解有什么作用，如下图所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target</span>是用来声明注解只能用在那些位置，比如：类上、方法上、成员变量上等<br><span class="hljs-meta">@Retetion</span>是用来声明注解保留周期，比如：源代码时期、字节码时期、运行时期<br></code></pre></td></tr></table></figure><p><img src="/assets/1669605786028.png" alt="1669605786028"></p><ul><li>@Target元注解的使用：比如定义一个MyTest3注解，并添加@Target注解用来声明MyTest3的使用位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-comment">//声明@MyTest3注解只能用在类上</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest3&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们把@MyTest3用来类上观察是否有错，再把@MyTest3用在方法上、变量上再观察是否有错</p><p><img src="/assets/1669606261919.png" alt="1669606261919"></p><p>如果我们定义MyTest3注解时，使用@Target注解属性值写成下面样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明@MyTest3注解只能用在类上和方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest3&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>此时再观察，@MyTest用在类上、方法上、变量上是否有错</p><p><img src="/assets/1669606451308.png" alt="1669606451308"></p><p>到这里@Target元注解的使用就演示完毕了。</p><ul><li>@Retetion元注解的使用：定义MyTest3注解时，给MyTest3注解添加@Retetion注解来声明MyTest3注解保留的时期</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retetion</span>是用来声明注解保留周期，比如：源代码时期、字节码时期、运行时期<br><span class="hljs-meta">@Retetion(RetetionPloicy.SOURCE)</span>: 注解保留到源代码时期、字节码中就没有了<br><span class="hljs-meta">@Retetion(RetetionPloicy.CLASS)</span>: 注解保留到字节码中、运行时注解就没有了<br><span class="hljs-meta">@Retetion(RetetionPloicy.RUNTIME)</span>：注解保留到运行时期<br>【自己写代码时，比较常用的是保留到运行时期】<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明@MyTest3注解只能用在类上和方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-comment">//控制使用了@MyTest3注解的代码中，@MyTest3保留到运行时期</span><br><span class="hljs-meta">@Retetion(RetetionPloicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest3&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-解析注解"><a href="#3-3-解析注解" class="headerlink" title="3.3 解析注解"></a>3.3 解析注解</h3><p>各位小伙伴，通过前面的学习我们能够自己定义注解，也能够把自己定义的注解标记在类上或者方法上等位置，但是总感觉有点别扭，给类、方法、变量等加上注解后，我们也没有干什么呀！！！</p><p>接下来，我们就要做点什么。我们可以通过反射技术把类上、方法上、变量上的注解对象获取出来，然后通过调用方法就可以获取注解上的属性值了。<strong>我们把获取类上、方法上、变量上等位置注解及注解属性值的过程称为解析注解。</strong></p><p>解析注解套路如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>如果注解在类上，先获取类的字节码对象，再获取类上的注解<br><span class="hljs-number">2.</span>如果注解在方法上，先获取方法对象，再获取方法上的注解<br><span class="hljs-number">3.</span>如果注解在成员变量上，先获取成员变量对象，再获取变量上的注解<br>总之：注解在谁身上，就先获取谁，再用谁获取谁身上的注解<br></code></pre></td></tr></table></figure><p><img src="/assets/1669607820853.png" alt="1669607820853"></p><p>解析来看一个案例，来演示解析注解的代码编写</p><p><img src="/assets/1669607882128.png" alt="1669607882128"></p><p>按照需求要求一步一步完成</p><p>① 先定义一个MyTest4注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明@MyTest4注解只能用在类上和方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-comment">//控制使用了@MyTest4注解的代码中，@MyTest4保留到运行时期</span><br><span class="hljs-meta">@Retetion(RetetionPloicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest4&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">aaa</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br>    String[] bbb();<br>&#125;<br></code></pre></td></tr></table></figure><p>② 定义有一个类Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyTest4(value=&quot;蜘蛛侠&quot;,aaa=99.9, bbb=&#123;&quot;至尊宝&quot;,&quot;黑马&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-meta">@MyTest4(value=&quot;孙悟空&quot;,aaa=199.9, bbb=&#123;&quot;紫霞&quot;,&quot;牛夫人&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③ 写一个测试类AnnotationTest3解析Demo类上的MyTest4注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest3</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseClass</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.先获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Demo.class;<br>        <br>        <span class="hljs-comment">//2.解析Demo类上的注解</span><br>        <span class="hljs-keyword">if</span>(c.isAnnotationPresent(MyTest4.class))&#123;<br>            <span class="hljs-comment">//获取类上的MyTest4注解</span><br>            <span class="hljs-type">MyTest4</span> <span class="hljs-variable">myTest4</span> <span class="hljs-operator">=</span> (MyTest4)c.getDeclaredAnnotation(MyTest4.class);<br>            <span class="hljs-comment">//获取MyTests4注解的属性值</span><br>            System.out.println(myTest4.value());<br>            System.out.println(myTest4.aaa());<br>            System.out.println(myTest4.bbb());<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseMethods</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.先获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Demo.class;<br>        <br>        <span class="hljs-comment">//2.解析Demo类中test1方法上的注解MyTest4注解</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;test1&quot;</span>);<br>        <span class="hljs-keyword">if</span>(m.isAnnotationPresent(MyTest4.class))&#123;<br>            <span class="hljs-comment">//获取方法上的MyTest4注解</span><br>            <span class="hljs-type">MyTest4</span> <span class="hljs-variable">myTest4</span> <span class="hljs-operator">=</span> (MyTest4)m.getDeclaredAnnotation(MyTest4.class);<br>            <span class="hljs-comment">//获取MyTests4注解的属性值</span><br>            System.out.println(myTest4.value());<br>            System.out.println(myTest4.aaa());<br>            System.out.println(myTest4.bbb());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-注解的应用场景"><a href="#3-4-注解的应用场景" class="headerlink" title="3.4 注解的应用场景"></a>3.4 注解的应用场景</h3><p>各位同学，关于注解的定义、使用、解析注解就已经学习完了。接下来，我们再学习一下注解的应用场景，注解是用来写框架的，比如现在我们要模拟Junit写一个测试框架，要求有@MyTest注解的方法可以被框架执行，没有@MyTest注解的方法不能被框架执行。</p><p>第一步：先定义一个MyTest注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retetion(RetetionPloicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：写一个测试类AnnotationTest4，在类中定义几个被@MyTest注解标记的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest4</span>&#123;<br>    <span class="hljs-meta">@MyTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test1====&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@MyTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test2====&quot;</span>);<br>    &#125;<br>    <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test2====&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">AnnotationTest4</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTest4</span>();<br>        <br>        <span class="hljs-comment">//1.先获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> AnnotationTest4.class;<br>        <br>        <span class="hljs-comment">//2.解析AnnotationTest4类中所有的方法对象</span><br>        Method[] methods = c.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span>(Method m: methods)&#123;<br>            <span class="hljs-comment">//3.判断方法上是否有MyTest注解，有就执行该方法</span><br>            <span class="hljs-keyword">if</span>(m.isAnnotationPresent(MyTest.class))&#123;<br>            m.invoke(a);<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恭喜小伙伴们，学习到这里，关于注解的使用就学会了(<em>^▽^</em>)</p><h2 id="四、动态代理"><a href="#四、动态代理" class="headerlink" title="四、动态代理"></a>四、动态代理</h2><h3 id="4-1-动态代理介绍、准备功能"><a href="#4-1-动态代理介绍、准备功能" class="headerlink" title="4.1 动态代理介绍、准备功能"></a>4.1 动态代理介绍、准备功能</h3><p>各位同学，这节课我们学习一个Java的高级技术叫做动态代理。首先我们认识一下代理长什么样？我们以大明星“杨超越”例。</p><p>假设现在有一个大明星叫杨超越，它有唱歌和跳舞的本领，作为大明星是要用唱歌和跳舞来赚钱的，但是每次做节目，唱歌的时候要准备话筒、收钱，再唱歌；跳舞的时候也要准备场地、收钱、再唱歌。杨超越越觉得我擅长的做的事情是唱歌，和跳舞，但是每次唱歌和跳舞之前或者之后都要做一些繁琐的事情，有点烦。于是杨超越就找个一个经济公司，请了一个代理人，代理杨超越处理这些事情，如果有人想请杨超越演出，直接找代理人就可以了。如下图所示</p><p><img src="/assets/1669619673533.png" alt="1669619673533"></p><p>我们说杨超越的代理是中介公司派的，那中介公司怎么知道，要派一个有唱歌和跳舞功能的代理呢？</p><p>解决这个问题，Java使用的是接口，杨超越想找代理，在Java中需要杨超越实现了一个接口，接口中规定要唱歌和跳舞的方法。Java就可以通过这个接口为杨超越生成一个代理对象，只要接口中有的方法代理对象也会有。</p><p><img src="/assets/1669619922161.png" alt="1669619922161"></p><p>接下来我们就先把有唱歌和跳舞功能的接口，和实现接口的大明星类定义出来。</p><p><img src="/assets/1669620054411.png" alt="1669620054411"></p><h3 id="4-2-生成动态代理对象"><a href="#4-2-生成动态代理对象" class="headerlink" title="4.2 生成动态代理对象"></a>4.2 生成动态代理对象</h3><p>下面我们写一个为BigStar生成动态代理对象的工具类。这里需要用Java为开发者提供的一个生成代理对象的类叫Proxy类。</p><p>通过Proxy类的newInstance(…)方法可以为实现了同一接口的类生成代理对象。 调用方法时需要传递三个参数，该方法的参数解释可以查阅API文档，如下。</p><p><img src="/assets/1669620794550.png" alt="1669620794550"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Star <span class="hljs-title function_">createProxy</span><span class="hljs-params">(BigStar bigStar)</span>&#123;<br>       <span class="hljs-comment">/* newProxyInstance(ClassLoader loader,</span><br><span class="hljs-comment">                Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-comment">                InvocationHandler h)</span><br><span class="hljs-comment">                参数1：用于指定一个类加载器</span><br><span class="hljs-comment">                参数2：指定生成的代理长什么样子，也就是有哪些方法</span><br><span class="hljs-comment">                参数3：用来指定生成的代理对象要干什么事情</span><br><span class="hljs-comment">                */</span><br>        <span class="hljs-comment">// Star starProxy = ProxyUtil.createProxy(s);</span><br>        <span class="hljs-comment">// starProxy.sing(&quot;好日子&quot;) starProxy.dance()</span><br>        <span class="hljs-type">Star</span> <span class="hljs-variable">starProxy</span> <span class="hljs-operator">=</span> (Star) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Star.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 回调方法</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">// 代理对象要做的事情，会在这里写代码</span><br>                        <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;sing&quot;</span>))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备话筒，收钱20万&quot;</span>);<br>                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;dance&quot;</span>))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备场地，收钱1000万&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> method.invoke(bigStar, args);<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-keyword">return</span> starProxy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用我们写好的ProxyUtil工具类，为BigStar对象生成代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BigStar</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigStar</span>(<span class="hljs-string">&quot;杨超越&quot;</span>);<br>        <span class="hljs-type">Star</span> <span class="hljs-variable">starProxy</span> <span class="hljs-operator">=</span> ProxyUtil.createProxy(s);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> starProxy.sing(<span class="hljs-string">&quot;好日子&quot;</span>);<br>        System.out.println(rs);<br><br>        starProxy.dance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试类，结果如下图所示</p><p><img src="/assets/1669621045622.png" alt="1669621045622"></p><p>恭喜同学们，当你把上面的案例写出来，并且理解，那么动态代理的基本使用就学会了。</p><h3 id="4-3-动态代理应用"><a href="#4-3-动态代理应用" class="headerlink" title="4.3 动态代理应用"></a>4.3 动态代理应用</h3><p>学习完动态代理的基本使用之后，接下来我们再做一个应用案例。</p><p><img src="/assets/1669621165245.png" alt="1669621165245"></p><p>现有如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用户业务接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 登录功能</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName,String passWord)</span> <span class="hljs-keyword">throws</span> Exception;<br>    <span class="hljs-comment">// 删除用户</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>    <span class="hljs-comment">// 查询用户，返回数组的形式。</span><br>    String[] selectUsers() <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面有一个UserService接口的实现类，下面每一个方法中都有计算方法运行时间的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户业务实现类（面向接口编程）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName, String passWord)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(passWord))&#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录失败，用户名或密码错误~&quot;</span>);<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;login方法耗时：&quot;</span>+(time2-time1));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;成功删除了1万个用户~&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1500</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;deleteUsers方法耗时：&quot;</span>+(time2-time1));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectUsers() <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;查询出了3个用户&quot;</span>);<br>        String[] names = &#123;<span class="hljs-string">&quot;张全蛋&quot;</span>, <span class="hljs-string">&quot;李二狗&quot;</span>, <span class="hljs-string">&quot;牛爱花&quot;</span>&#125;;<br>        Thread.sleep(<span class="hljs-number">500</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;selectUsers方法耗时：&quot;</span>+(time2-time1));<br>        <span class="hljs-keyword">return</span> names;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>观察上面代码发现有什么问题吗？</p><p>我们会发现每一个方法中计算耗时的代码都是重复的，我们可是学习了动态代理的高级程序员，怎么能忍受在每个方法中写重复代码呢！况且这些重复的代码并不属于UserSerivce的主要业务代码。</p><p><img src="/assets/1669621335888.png" alt="1669621335888"></p><p>所以接下来我们打算，把计算每一个方法的耗时操作，交给代理对象来做。</p><p>先在UserService类中把计算耗时的代码删除，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户业务实现类（面向接口编程）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName, String passWord)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(passWord))&#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录失败，用户名或密码错误~&quot;</span>);<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;成功删除了1万个用户~&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1500</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectUsers() <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;查询出了3个用户&quot;</span>);<br>        String[] names = &#123;<span class="hljs-string">&quot;张全蛋&quot;</span>, <span class="hljs-string">&quot;李二狗&quot;</span>, <span class="hljs-string">&quot;牛爱花&quot;</span>&#125;;<br>        Thread.sleep(<span class="hljs-number">500</span>);<br><br>        <span class="hljs-keyword">return</span> names;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后为UserService生成一个动态代理对象，在动态代理中调用目标方法，在调用目标方法之前和之后记录毫秒值，并计算方法运行的时间。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserService <span class="hljs-title function_">createProxy</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userServiceProxy</span><br>            <span class="hljs-operator">=</span> (UserService) Proxy.newProxyInstance(<br>            ProxyUtil.class.getClassLoader(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;UserService.class&#125;, <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                                                                            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(                                                                             Object proxy, </span><br><span class="hljs-params">                              Method method, </span><br><span class="hljs-params">                                  Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;                             <span class="hljs-keyword">if</span>(<br>                    method.getName().equals(<span class="hljs-string">&quot;login&quot;</span>) ||                                             method.getName().equals(<span class="hljs-string">&quot;deleteUsers&quot;</span>)||<br>                    method.getName().equals(<span class="hljs-string">&quot;selectUsers&quot;</span>))&#123;<br>                    <span class="hljs-comment">//方法运行前记录毫秒值         </span><br>                    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    <span class="hljs-comment">//执行方法</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(userService, args);<br>                    <span class="hljs-comment">//执行方法后记录毫秒值</span><br>                    <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>                    System.out.println(method.getName() + <span class="hljs-string">&quot;方法执行耗时：&quot;</span> + (endTime - startTime)/ <span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>                    <span class="hljs-keyword">return</span> rs;<br>               &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(userService, args);<br>                    <span class="hljs-keyword">return</span> rs;                                                                &#125;<br>           &#125;                                                                 &#125;);<br>        <span class="hljs-comment">//返回代理对象</span><br>        <span class="hljs-keyword">return</span> userServiceProxy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在测试类中为UserService创建代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：使用动态代理解决实际问题，并掌握使用代理的好处。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1、创建用户业务对象。</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> ProxyUtil.createProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>());<br><br>        <span class="hljs-comment">// 2、调用用户业务的功能。</span><br>        userService.login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br><br>        userService.deleteUsers();<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br><br>        String[] names = userService.selectUsers();<br>        System.out.println(<span class="hljs-string">&quot;查询到的用户是：&quot;</span> + Arrays.toString(names));<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下图所示</p><p><img src="/assets/1669622545712.png" alt="1669622545712"></p><p>动态代理对象的执行流程如下图所示，每次用代理对象调用方法时，都会执行InvocationHandler中的invoke方法。</p><p><img src="/assets/1669622605490.png" alt="1669622605490"></p><p>恭喜同学们，动态代理我们已经学习完了。到此整个JavaSE的课程也学习完了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
